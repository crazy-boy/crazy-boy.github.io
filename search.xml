<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux下如何实现与Internet时间同步</title>
      <link href="/posts/38c1.html"/>
      <url>/posts/38c1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在项目中，有时候需要修改服务器时间来模拟某些场景，或者校准服务器时间；那么如何在Linux系统下实现与Internet时间同步呢。</p><h3 id="一、安装ntp"><a href="#一、安装ntp" class="headerlink" title="一、安装ntp"></a>一、安装ntp</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">[root@pb ~]<span class="hljs-comment"><code class="language-hljs bash">[root@pb ~]<span class="hljs-comment"># yum install -y ntpdate</span><br></code></pre></td></tr></tbody></table></figure><h2 id="二、同步时间"><a href="#二、同步时间" class="headerlink" title="二、同步时间"></a>二、同步时间</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs bash">// 方式一、使用域名连接，要经过DNS解析，速度慢。<br>[root@pb ~]<span class="hljs-comment"># ntpdate pool.ntp.org</span><br>// 方式二、使用IP连接，超级快。<br>[root@pb ~]<span class="hljs-comment"><code class="language-hljs bash">// 方式一、使用域名连接，要经过DNS解析，速度慢。<br>[root@pb ~]<span class="hljs-comment"># ntpdate pool.ntp.org</span><br>// 方式二、使用IP连接，超级快。<br>[root@pb ~]<span class="hljs-comment"># ntpdate 120.24.81.91</span><br></code></pre></td></tr></tbody></table></figure><p><a href="http://www.pool.ntp.org是NTP的官方网站,在这上面我们可以找到离我们国家的NTP">http://www.pool.ntp.org是NTP的官方网站,在这上面我们可以找到离我们国家的NTP</a> Server cn.pool.ntp.org.它有3个服务器地址：<br>服务器一： 1.cn.pool.ntp.org<br>服务器二： 2.asia.pool.ntp.org<br>服务器三： 3.asia.pool.ntp.org<br>（直接用域名有时有问题，可以先Ping出他们的IP，然后用IP地址同步）</p><p>// 出现以下信息说明成功<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">Feb 21:23:06 ntpdate[62910]: step time server 182.92.12.11 offset -40.589470 sec<br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="三、将系统时间写入到系统硬件当中，避免重启服务器时间覆盖"><a href="#三、将系统时间写入到系统硬件当中，避免重启服务器时间覆盖" class="headerlink" title="三、将系统时间写入到系统硬件当中，避免重启服务器时间覆盖"></a>三、将系统时间写入到系统硬件当中，避免重启服务器时间覆盖</h3><p>// 显示hardwareclock系统硬件时间<br></p><figure class="highlight autoit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs autoit">[root<span class="hljs-symbol">@pb</span> ~]<span class="hljs-meta"># hwclock</span><br></code></pre></td></tr></tbody></table></figure><br>// 将系统时间写入到系统硬件当中<br><figure class="highlight autoit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@pb</span> ~]<span class="hljs-meta"><code class="language-hljs autoit">[root<span class="hljs-symbol">@pb</span> ~]<span class="hljs-meta"># hwclock</span><br></code></pre></td></tr></tbody></table></figure><br>// 将系统时间写入到系统硬件当中<br><figure class="highlight autoit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@pb</span> ~]<span class="hljs-meta"># hwclock -w</span><br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="四、设定计划任务同步网络时间"><a href="#四、设定计划任务同步网络时间" class="headerlink" title="四、设定计划任务同步网络时间"></a>四、设定计划任务同步网络时间</h3><h4 id="方式1：写在-etc-crontab里"><a href="#方式1：写在-etc-crontab里" class="headerlink" title="方式1：写在/etc/crontab里"></a>方式1：写在/etc/crontab里</h4><p>代码:<br></p><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs basic"><span class="hljs-symbol">11 </span>* * * root ntpdate <span class="hljs-number">210.72</span>.<span class="hljs-number">145.44</span><br></code></pre></td></tr></tbody></table></figure><br>每天11点与中国国家授时中心同步时间<br>每天11点与中国国家授时中心同步时间<br>当然前提是<br><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install ntpdate<br></code></pre></td></tr></tbody></table></figure><br>代码也可是<br><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol"><code class="language-hljs basic"><span class="hljs-symbol">11 </span>* * * root ntpdate <span class="hljs-number">210.72</span>.<span class="hljs-number">145.44</span><br></code></pre></td></tr></tbody></table></figure><br>每天11点与中国国家授时中心同步时间<br>每天11点与中国国家授时中心同步时间<br>当然前提是<br><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install ntpdate<br></code></pre></td></tr></tbody></table></figure><br>代码也可是<br><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">11 </span>* * * root ntpdate us.pool.ntp.org<br></code></pre></td></tr></tbody></table></figure><p></p><h4 id="方式2：使用命令crontab-e"><a href="#方式2：使用命令crontab-e" class="headerlink" title="方式2：使用命令crontab -e"></a>方式2：使用命令crontab -e</h4><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs nginx"><span class="hljs-attribute">crontab</span> -e<br><span class="hljs-number">10</span> <span class="hljs-number">5</span> * * * root ntpdate us.pool.ntp.org;<span class="hljs-attribute"><code class="language-hljs nginx"><span class="hljs-attribute">crontab</span> -e<br><span class="hljs-number">10</span> <span class="hljs-number">5</span> * * * root ntpdate us.pool.ntp.org;<span class="hljs-attribute">hwclock</span> -w<br></code></pre></td></tr></tbody></table></figure><p>这样每天5:10自动进行网络校时，并同时更新BIOS的时间</p>]]></content>
      
      
      <categories>
          
          <category> ntpdate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ntpdate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemD</title>
      <link href="/posts/2b4a.html"/>
      <url>/posts/2b4a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SystemD"><a href="#SystemD" class="headerlink" title="SystemD"></a>SystemD</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SystemD 是 Linux 的系统管理器，它的主要接口是 systemctl（即用户执行的命令）。</p><p>通过 systemctl 接口，可以启动/停止“单元”（unit），最常用的单元是“服务单元”（service），即系统守护程序。其他单元还有套接字单元（network socket）、定时器单元（timer）等等。</p><p>服务单元会有一个服务描述文件，里面设置启动该服务需要知道的信息，比如 sshd 的服务描述是“在多用户模式下，等待网络可用后，运行 SSH 服务器。” 修改服务描述文件以后，必须重新启动服务，修改才会生效。</p><h2 id="服务描述文件"><a href="#服务描述文件" class="headerlink" title="服务描述文件"></a>服务描述文件</h2><p>下面是一个服务描述文件的示例。它有很多设置，但是常用的就是那么几个。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs bash">[Unit]<br>Description=OpenBSD Secure Shell server<br>Documentation=man:sshd(8) man:sshd_config(5)<br>After=network.target auditd.service<br>ConditionPathExists=!/etc/ssh/sshd_not_to_be_run<br><br>[Service]<br>EnvironmentFile=-/etc/default/ssh<br>ExecStartPre=/usr/sbin/sshd -t<br>ExecStart=/usr/sbin/sshd -D <span class="hljs-variable">$SSHD_OPTS</span><br>ExecReload=/usr/sbin/sshd -t<br>ExecReload=/bin/kill -HUP <span class="hljs-variable"><code class="language-hljs bash">[Unit]<br>Description=OpenBSD Secure Shell server<br>Documentation=man:sshd(8) man:sshd_config(5)<br>After=network.target auditd.service<br>ConditionPathExists=!/etc/ssh/sshd_not_to_be_run<br><br>[Service]<br>EnvironmentFile=-/etc/default/ssh<br>ExecStartPre=/usr/sbin/sshd -t<br>ExecStart=/usr/sbin/sshd -D <span class="hljs-variable">$SSHD_OPTS</span><br>ExecReload=/usr/sbin/sshd -t<br>ExecReload=/bin/kill -HUP <span class="hljs-variable">$MAINPID</span><br>KillMode=process<br>Restart=on-failure<br>RestartPreventExitStatus=255<br>Type=notify<br>RuntimeDirectory=sshd<br>RuntimeDirectoryMode=0755<br><br>[Install]<br>WantedBy=multi-user.target<br>Alias=sshd.service<br></code></pre></td></tr></tbody></table></figure><p>网上有一些<a href="https://mysystemd.talos.sh/">描述文件生成器</a>，可以使用。</p><p>系统的单元描述文件，一般放在目录<code>/etc/systemd/system</code>。用户的单元描述文件放在目录<code>/etc/systemd/user</code>。命令<code>systemctl status xxx.service</code>会显示单元描述文件的位置。</p>]]></content>
      
      
      <categories>
          
          <category> SystemD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SystemD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xargs 命令</title>
      <link href="/posts/85ed.html"/>
      <url>/posts/85ed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="xargs-命令"><a href="#xargs-命令" class="headerlink" title="xargs 命令"></a>xargs 命令</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>xargs 用于将标准输入（stdin），转成其后命令的字符串参数。它通常跟管道命令（<code>|</code>）结合使用。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ {{command1}} | xargs {{command2}}<br></code></pre></td></tr></tbody></table></figure><p>上面是 xargs 的用法。正常情况下，第一个命令<code>command1</code>会输出结果到控制台（即标准输出<code>stdout</code>），但是管道命令（<code>|</code>）会拦截<code>command1</code>的标准输出，将其转为后面命令的标准输入（<code>stdin</code>），即<code>xargs</code>命令会接收到标准输入，它再将其转为<code>command2</code>的字符串参数来运行。</p><p>举例来说，文本文件<code>list.txt</code>的内容是一组文件名。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">a.txt<br>b.txt<br>c.txt<br></code></pre></td></tr></tbody></table></figure><p>然后，执行下面的命令，会将这组文件全部删除。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><span class="hljs-comment"># 删除 a.txt b.txt c.txt</span><br>$ <span class="hljs-built_in">cat</span> list.txt | xargs <span class="hljs-built_in"><code class="language-hljs bash"><span class="hljs-comment"># 删除 a.txt b.txt c.txt</span><br>$ <span class="hljs-built_in">cat</span> list.txt | xargs <span class="hljs-built_in">rm</span><br></code></pre></td></tr></tbody></table></figure><p>上面示例中，<code>cat</code>命令将<code>list.txt</code>的内容输出到标准输出，但是被管道命令拦截，转为<code>xargs</code>的标准输入，后者再将标准输入转成<code>rm</code>命令的字符串参数，即实际执行的是下面的命令。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ <span class="hljs-built_in"><code class="language-hljs bash">$ <span class="hljs-built_in">rm</span> a.txt b.txt c.txt<br></code></pre></td></tr></tbody></table></figure><p>通常来说，Linux 命令分成两种，一种接受标准输入（一般是键盘）作为参数，另一种接受命令行的字符串作为参数。这两种参数的性质有很大的不同：标准输入（stdin）是文本流（stream），理论上只要不终止，就是无限的；命令行参数则是一个有固定长度的文本数组。xargs 的 作用就是接受标准输入，将其转成命令行参数。</p><p>xargs 有点像 echo 命令的逆操作。echo 命令是将命令行参数转为标准输出。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ <span class="hljs-built_in"><code class="language-hljs bash">$ <span class="hljs-built_in">echo</span> abc<br></code></pre></td></tr></tbody></table></figure><p>上面命令中，<code>abc</code>是命令行参数，<code>echo</code>命令将其转为标准输入。</p><p>至于管道命令<code>|</code>，则是将前一个命令的标准输出，转成后一个命令的标准输入。但是，大多数命令只接受命令行参数，所以管道命令就需要 跟 xargs 结合使用，这是 Linux 的常见操作。</p><h2 id="xargs-的单独使用"><a href="#xargs-的单独使用" class="headerlink" title="xargs 的单独使用"></a>xargs 的单独使用</h2><p>xargs 命令也可以单独使用，这时等同于执行<code>xargs echo</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ xargs<br><span class="hljs-comment"># 等同于</span><br>$ xargs <span class="hljs-built_in"><code class="language-hljs bash">$ xargs<br><span class="hljs-comment"># 等同于</span><br>$ xargs <span class="hljs-built_in">echo</span><br></code></pre></td></tr></tbody></table></figure><p>输入<code>xargs</code>后按下回车，命令行就会等待标准输入（即用户的键盘输入）。你可以输入任意内容，然后按下 Ctrl+d，表示输入结束，这时<code>echo</code>命令就会把前面的输入打印出来。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ xargs<br>hello (Ctrl + d)<br>hello<br></code></pre></td></tr></tbody></table></figure><p>上面示例中，执行<code>xargs</code>后，从键盘输入<code>hello</code>，然后按下 Ctrl+d，就会自动执行<code>echo hello</code>。</p><p>再看一个例子。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ xargs find -name<br><span class="hljs-string"><code class="language-hljs bash">$ xargs find -name<br><span class="hljs-string">"*.txt"</span><br>./foo.txt<br>./hello.txt<br></code></pre></td></tr></tbody></table></figure><p>上面示例中，输入<code>xargs find -name</code>以后，命令行会等待用户输入所要搜索的文件。用户输入<code>"*.txt"</code>，表示搜索当前目录下的所有 TXT 文件，然后按下 Ctrl+d，表示输入结束，这时就相当执行<code>find -name *.txt</code>。</p><h2 id="d-参数与分隔符"><a href="#d-参数与分隔符" class="headerlink" title="-d 参数与分隔符"></a>-d 参数与分隔符</h2><p>默认情况下，<code>xargs</code>将换行符和空格作为分隔符，把标准输入分解成一个个命令行参数。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"one two three"</span> | xargs <span class="hljs-built_in"><code class="language-hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"one two three"</span> | xargs <span class="hljs-built_in">mkdir</span><br></code></pre></td></tr></tbody></table></figure><p>上面代码中，<code>mkdir</code>会新建三个子目录，因为<code>xargs</code>将<code>one two three</code>分解成三个命令行参数，执行<code>mkdir one two three</code>。</p><p><code>-d</code>参数可以更改分隔符。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"a\tb\tc"</span> | xargs -d <span class="hljs-string">"\t"</span> <span class="hljs-built_in"><code class="language-hljs bash">$ <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"a\tb\tc"</span> | xargs -d <span class="hljs-string">"\t"</span> <span class="hljs-built_in">echo</span><br>a b c<br></code></pre></td></tr></tbody></table></figure><p>上面的命令指定制表符<code>\t</code>作为分隔符，所以<code>a\tb\tc</code>就转换成了三个命令行参数。<code>echo</code>命令的<code>-e</code>参数表示解释转义字符。</p><h2 id="p-参数，-t-参数"><a href="#p-参数，-t-参数" class="headerlink" title="-p 参数，-t 参数"></a>-p 参数，-t 参数</h2><p>使用<code>xargs</code>命令以后，由于存在转换参数过程，有时需要确认一下到底执行的是什么命令。</p><p><code>-p</code>参数打印出要执行的命令，询问用户是否要执行。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'one two three'</span> | xargs -p <span class="hljs-built_in">touch</span><br><span class="hljs-built_in"><code class="language-hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'one two three'</span> | xargs -p <span class="hljs-built_in">touch</span><br><span class="hljs-built_in">touch</span> one two three ?...<br></code></pre></td></tr></tbody></table></figure><p>上面的命令执行以后，会打印出最终要执行的命令，让用户确认。用户按下回车以后，才会真正执行。</p><p><code>-t</code>参数则是打印出最终要执行的命令，然后直接执行，不需要用户确认。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'one two three'</span> | xargs -t <span class="hljs-built_in">rm</span><br><span class="hljs-built_in"><code class="language-hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'one two three'</span> | xargs -t <span class="hljs-built_in">rm</span><br><span class="hljs-built_in">rm</span> one two three<br></code></pre></td></tr></tbody></table></figure><h2 id="0-参数与-find-命令"><a href="#0-参数与-find-命令" class="headerlink" title="-0 参数与 find 命令"></a>-0 参数与 find 命令</h2><p>由于<code>xargs</code>默认将空格作为分隔符，所以不太适合处理文件名，因为文件名可能包含空格。</p><p><code>find</code>命令有一个特别的参数<code>-print0</code>，指定输出的文件列表以<code>null</code>分隔。然后，<code>xargs</code>命令的<code>-0</code>参数表示用<code>null</code>当作分隔符。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ find /path -<span class="hljs-built_in">type</span> f -print0 | xargs -0 <span class="hljs-built_in"><code class="language-hljs bash">$ find /path -<span class="hljs-built_in">type</span> f -print0 | xargs -0 <span class="hljs-built_in">rm</span><br></code></pre></td></tr></tbody></table></figure><p>上面命令删除<code>/path</code>路径下的所有文件。由于分隔符是<code>null</code>，所以处理包含空格的文件名，也不会报错。</p><p>还有一个原因，使得<code>xargs</code>特别适合<code>find</code>命令。有些命令（比如<code>rm</code>）一旦参数过多会报错“参数列表过长”，而无法执行，改用<code>xargs</code>就没有这个问题，因为它对每个参数执行一次命令。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ find . -name <span class="hljs-string">"*.txt"</span> | xargs grep <span class="hljs-string"><code class="language-hljs bash">$ find . -name <span class="hljs-string">"*.txt"</span> | xargs grep <span class="hljs-string">"abc"</span><br></code></pre></td></tr></tbody></table></figure><p>上面命令找出所有 TXT 文件以后，对每个文件搜索一次是否包含字符串<code>abc</code>。</p><h2 id="L-参数"><a href="#L-参数" class="headerlink" title="-L 参数"></a>-L 参数</h2><p>如果标准输入包含多行，<code>-L</code>参数指定多少行作为一个命令行参数。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ xargs find -name<br><span class="hljs-string">"*.txt"</span><br><span class="hljs-string">"*.md"</span><br>find: paths must precede expression: `*.md<span class="hljs-string"><code class="language-hljs bash">$ xargs find -name<br><span class="hljs-string">"*.txt"</span><br><span class="hljs-string">"*.md"</span><br>find: paths must precede expression: `*.md<span class="hljs-string">'</span><br></code></pre></td></tr></tbody></table></figure><p>上面命令同时将<code>"*.txt"</code>和<code>*.md</code>两行作为命令行参数，传给<code>find</code>命令导致报错。</p><p>使用<code>-L</code>参数，指定每行作为一个命令行参数，就不会报错。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ xargs -L 1 find -name<br><span class="hljs-string">"*.txt"</span><br>./foo.txt<br>./hello.txt<br><span class="hljs-string"><code class="language-hljs bash">$ xargs -L 1 find -name<br><span class="hljs-string">"*.txt"</span><br>./foo.txt<br>./hello.txt<br><span class="hljs-string">"*.md"</span><br>./README.md<br></code></pre></td></tr></tbody></table></figure><p>上面命令指定了每一行（<code>-L 1</code>）作为命令行参数，分别运行一次命令（<code>find -name</code>）。</p><p>下面是另一个例子。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"a\nb\nc"</span> | xargs -L 1 <span class="hljs-built_in"><code class="language-hljs bash">$ <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"a\nb\nc"</span> | xargs -L 1 <span class="hljs-built_in">echo</span><br>a<br>b<br>c<br></code></pre></td></tr></tbody></table></figure><p>上面代码指定每行运行一次<code>echo</code>命令，所以<code>echo</code>命令执行了三次，输出了三行。</p><h2 id="n-参数"><a href="#n-参数" class="headerlink" title="-n 参数"></a>-n 参数</h2><p><code>-L</code>参数虽然解决了多行的问题，但是有时用户会在同一行输入多项。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ xargs find -name<br><span class="hljs-string">"*.txt"</span> <span class="hljs-string">"*.md"</span><br>find: paths must precede expression: `*.md<span class="hljs-string"><code class="language-hljs bash">$ xargs find -name<br><span class="hljs-string">"*.txt"</span> <span class="hljs-string">"*.md"</span><br>find: paths must precede expression: `*.md<span class="hljs-string">'</span><br></code></pre></td></tr></tbody></table></figure><p>上面的命令将同一行的两项作为命令行参数，导致报错。</p><p><code>-n</code>参数指定每次将多少项，作为命令行参数。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ xargs -n 1 find -name<br></code></pre></td></tr></tbody></table></figure><p>上面命令指定将每一项（<code>-n 1</code>）标准输入作为命令行参数，分别执行一次命令（<code>find -name</code>）。</p><p>下面是另一个例子。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ <span class="hljs-built_in">echo</span> {0..9} | xargs -n 2 <span class="hljs-built_in"><code class="language-hljs bash">$ <span class="hljs-built_in">echo</span> {0..9} | xargs -n 2 <span class="hljs-built_in">echo</span><br>0 1<br>2 3<br>4 5<br>6 7<br>8 9<br></code></pre></td></tr></tbody></table></figure><p>上面命令指定，每两个参数运行一次<code>echo</code>命令。所以，10个阿拉伯数字运行了五次<code>echo</code>命令，输出了五行。</p><h2 id="I-参数"><a href="#I-参数" class="headerlink" title="-I 参数"></a>-I 参数</h2><p>如果<code>xargs</code>要将命令行参数传给多个命令，可以使用<code>-I</code>参数。</p><p><code>-I</code>指定每一项命令行参数的替代字符串。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ <span class="hljs-built_in">cat</span> foo.txt<br>one<br>two<br>three<br><br>$ <span class="hljs-built_in">cat</span> foo.txt | xargs -I file sh -c <span class="hljs-string">'echo file; mkdir file'</span><br>one<br>two<br>three<br><br>$ <span class="hljs-built_in"><code class="language-hljs bash">$ <span class="hljs-built_in">cat</span> foo.txt<br>one<br>two<br>three<br><br>$ <span class="hljs-built_in">cat</span> foo.txt | xargs -I file sh -c <span class="hljs-string">'echo file; mkdir file'</span><br>one<br>two<br>three<br><br>$ <span class="hljs-built_in">ls</span><br>one two three<br></code></pre></td></tr></tbody></table></figure><p>上面代码中，<code>foo.txt</code>是一个三行的文本文件。我们希望对每一项命令行参数，执行两个命令（<code>echo</code>和<code>mkdir</code>），使用<code>-I file</code>表示<code>file</code>是命令行参数的替代字符串。执行命令时，具体的参数会替代掉<code>echo file; mkdir file</code>里面的两个<code>file</code>。</p><h2 id="—max-procs-参数"><a href="#—max-procs-参数" class="headerlink" title="—max-procs 参数"></a>—max-procs 参数</h2><p><code>xargs</code>默认只用一个进程执行命令。如果命令要执行多次，必须等上一次执行完，才能执行下一次。</p><p><code>--max-procs</code>参数指定同时用多少个进程并行执行命令。<code>--max-procs 2</code>表示同时最多使用两个进程，<code>--max-procs 0</code>表示不限制进程数。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ docker ps -q | xargs -n 1 --max-procs 0 docker <span class="hljs-built_in"><code class="language-hljs bash">$ docker ps -q | xargs -n 1 --max-procs 0 docker <span class="hljs-built_in">kill</span><br></code></pre></td></tr></tbody></table></figure><p>上面命令表示，同时关闭尽可能多的 Docker 容器，这样运行速度会快很多。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://dhashe.com/xargs-is-the-inverse-function-of-echo.html">xargs is the inverse function of echo</a></li><li><a href="https://shapeshed.com/unix-xargs/">Linux and Unix xargs command tutorial with examples</a>, George Ornbo</li><li><a href="https://www.howtoforge.com/tutorial/linux-xargs-command/">8 Practical Examples of Linux Xargs Command for Beginners</a>, Himanshu Arora</li></ul>]]></content>
      
      
      <categories>
          
          <category> xargs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> xargs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Cron定时任务</title>
      <link href="/posts/9c77.html"/>
      <url>/posts/9c77.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Cron 是一个用来执行定时任务的工具，可以在指定的时间自动执行重复性任务。</p><p>它的核心是 cron 守护进程，名为 crond。它在后台每分钟运行一次，检查是否有需要在指定时间执行的计划任务。</p><p>下面命令可以查看 cron 守护进程，是否正常运行。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl status cron</span><br></code></pre></td></tr></tbody></table></figure><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p>crond 检查的定时任务，保存在 crontab 文件。该文件的每一行代表一个单独的作业，包含何时运行该任务，以及所要执行的命令。</p><p>crontab 分成两个级别：用户个人的crontab，系统的 crontab。前者由用户本人编辑，后者只能由根用户编辑。</p><p>系统的 crontab 存放在<code>/etc/crontab</code>，以及一系列特殊目录之中：<code>/etc/cron.daily</code>、<code>/etc/cron.hourly</code>、<code>/etc/cron.weekly</code>和<code>/etc/cron.monthly</code>。</p><h2 id="cron-任务的语法"><a href="#cron-任务的语法" class="headerlink" title="cron 任务的语法"></a>cron 任务的语法</h2><p>crontab 文件的每一行，代表一个 cron 任务。它由多个字段组成，字段之间使用空格或制表符分隔。</p><p>cron 任务的基本语法如下。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">minute hour day_of_month month day_of_week command_to_execute<br></code></pre></td></tr></tbody></table></figure><p>各个字段的含义如下。</p><ul><li>minute（0-59）：指定命令运行的分钟，可以是0到59之间的值，0表示将在一小时开始时运行命令。</li><li>hour（0-23）：指定命令运行的小时，以24小时格式指定，例如将其设置为14将在下午2点运行该命令。</li><li>day_of_month（1-31）：指定命令运行的日期。它可以是1到31之间的任意值，具体取决于该月的天数。例如，设置为1将在每个月的第一天运行命令。</li><li>month（1-12）：指定命令将在哪个月份执行。它可以是 1（一月）到 12（十二月）之间的值。例如，设置为12将在12月执行该命令。</li><li>day_of_week（0-6）：指定命令应在一周中的哪一天运行。它可以是0（星期日）到6（星期六）之间的值。例如，设置为5将在每个星期五运行该命令。</li><li>command_to_execute：指定 cron 任务应执行的操作。</li></ul><p>crontab 还允许使用通配符。</p><ul><li>星号 (<em>)：代表“每个”时间单位。例如，小时字段中的“</em>”表示“每小时”。</li><li>逗号 (,)：用于在同一字段指定多个值。例如，day_of_week 字段中的“1,3,5”表示“周一、周三和周五运行”。注意，逗号前后不能由空格。</li><li>连字符 (-)：指定值的范围。例如，小时字段中的“9-17”表示“上午9点到下午5点之间的每小时”。</li><li>斜杠 (/)：指定增量。例如，分钟字段中的“*/10”表示“每10分钟”。</li></ul><p>crontab 还提供一些快捷字符串。</p><ul><li>@reboot    在启动时运行一次指定的命令 。</li><li>@year，@annually 两者都在每年 1 月 1 日中午 12:00运行指定的任务 。相当于指定“0 0 1 1 *”</li><li>@monthly 每月1 日中午 12:00运行该作业 一次。相当于“0 0 1 <em> </em>”</li><li>@weekly 在每周周日中午 12:00运行该作业 一次。相当于“0 0 <em> </em> 0”</li><li>@daily，@midnight：两者都在每天中午 12:00运行 cronjob  。这相当于在 crontab 文件中指定“0 0 <em> </em> *”。</li><li>@hourly：每小时整点运行该作业 。相当于“0 <em> </em> <em> </em>”</li></ul><p>crontab 文件中，以“#”符号开头的行表示注释。</p><p>以下是一些示例。</p><ul><li><code>* * * * *</code>    每分钟运行一次 cron 作业。</li><li><code>0 * * * *</code>    每小时运行一次 cron 作业。</li><li><code>0 0 * * *</code>    每天午夜运行 cron 作业。</li><li><code>0 2 * * *</code>    每天凌晨 2 点运行 cron 作业。</li><li><code>0 0 15 * *</code>    每个月 15 日午夜运行一次 cron 作业。</li><li><code>0 0 0 12 *</code>    周六午夜运行 cron 作业。</li><li><code>0 0 * * 6</code>    从周一到周五每天下午 3 点运行 cron 作业。</li><li><code>0 15 * * 1-5</code>    从周一到周五每天下午 3 点运行 cron 作业。</li><li><code>*/5 * * * *</code>    每 5 分钟运行一次 cron 作业。</li><li><code>0 8-16 * * *</code> 每天、每小时、从上午 8 点到下午 4 点准时执行 cron 作业。</li><li><code>0 4 * * 2,4</code>    在周二和周四凌晨 4 点运行 cron 作业。</li><li><code>@reboot</code>    系统启动时运行 cron 作业。</li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>cron 任务在非交互式、非登录 Shell 环境中运行，这意味着它们可能无法访问与手动运行命令时相同的环境变量。</p><p>这就是说，cron 任务不会自动继承用户或系统的环境变量或路径。这可能会导致 cron 作业失败，无法找到可执行文件或脚本。解决方法是在 crontab 文件中显式设置 PATH 环境变量。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin<br></code></pre></td></tr></tbody></table></figure><p>不过，为了便于调试，建议始终在 cron 任务中使用绝对路径。</p><p>除了<code>PATH</code>环境变量，还可以设置<code>SHELL</code>环境变量，指定 cron 使用的 Shell。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">SHELL=/bin/sh<br></code></pre></td></tr></tbody></table></figure><p>上面示例设定执行 cron 任务时，使用 Bash。</p><h2 id="cron-任务管理"><a href="#cron-任务管理" class="headerlink" title="cron 任务管理"></a>cron 任务管理</h2><h3 id="个人任务"><a href="#个人任务" class="headerlink" title="个人任务"></a>个人任务</h3><p>创建或编辑用户的 crontab 文件，使用下面的命令。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">crontab -e<br></code></pre></td></tr></tbody></table></figure><p>上面的命令会打开系统默认文本编辑器，对用户的 crontab 文件进行编辑。</p><p>添加 cron 任务，只需在 crontab 文件中添加一个新行即可。例如，备份脚本 backup.sh 每天凌晨 3:00 运行，就是添加下面的内容。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">0 3 * * * /home/linuxiac/backup.sh<br></code></pre></td></tr></tbody></table></figure><p>编辑完成后，保存并退出编辑器。Cron 服务会自动检查 crontab 文件，因此无需在更改后重新启动 Cron 进程。</p><p><code>crontab -e</code>还会在保存和退出文件时，自动检查语法，防止意外输入无效的 cron 任务。</p><p>下面命令可以列出当前用户的所有 cron 任务。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ crontab -l<br></code></pre></td></tr></tbody></table></figure><p>如果拥有根用户权限，可以查看其他用户的 cron 任务。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ sudo crontab -u [用户名] -l<br></code></pre></td></tr></tbody></table></figure><p>上面示例中，<code>[用户名]</code>是需要替换的部分。</p><p>编辑其他用户的 cron 任务，可以使用命令行参数<code>-e</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ sudo crontab -u [用户名] -e<br></code></pre></td></tr></tbody></table></figure><p>删除某个 cron 任务时，只要删除那一行即可。如果想要删除所有的 cron 任务，只要删除 crontab 文件即可，也可以使用命令行参数<code>-r</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ crontab -r<br></code></pre></td></tr></tbody></table></figure><p>上面的命令会删除当前用户的 crontab 文件（即删除所有 cron 任务），而且不会出现任何确认提示，因此请小心使用。</p><p>如果希望删除前出现确认提示，则可以使用命令行参数<code>-i</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ crontab -i -r<br></code></pre></td></tr></tbody></table></figure><h3 id="系统任务"><a href="#系统任务" class="headerlink" title="系统任务"></a>系统任务</h3><p>创建系统级别的 cron 任务，需要直接编辑<code>/etc/crontab</code>文件。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">0  2  *  *  * root /usr/bin/find /var/log/myservice -<span class="hljs-built_in">type</span> f -name <span class="hljs-string"><code class="language-hljs bash">0  2  *  *  * root /usr/bin/find /var/log/myservice -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">'*.log'</span> -delete<br></code></pre></td></tr></tbody></table></figure><p>上面示例设定在每天凌晨2:00，从<code>/var/log/myservice</code>目录删除所有带有扩展名为<code>.log</code>的文件。</p><p>它的格式与用户级别的 cron 文件有一个区别，就是在最初表示时间的五个字段后面，多了一个字段，表示执行任务的用户帐户，本例为<code>root</code>。</p><p>直接编辑<code>/etc/crontab</code>文件有两个缺点。（1）它不提供语法检查，增加了出错的风险。（2）它会影响整个系统，使用时需要非常谨慎。</p><p>列出所有的系统级别 cron 任务，需要查看以下所有文件和目录。</p><ul><li>/etc/crontab 文件</li><li>/etc/cron.d/ 目录</li><li>/etc/cron.daily/ 目录</li><li>/etc/cron.hourly/ 目录</li><li>/etc/cron.weekly/ 目录</li><li>/etc/cron.monthly/ 目录</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://linuxiac.com/how-to-use-cron-and-crontab-on-linux/">How to Use Cron on Linux: Tips, Tricks, and Examples</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Cron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次高并发迭代之路！！</title>
      <link href="/posts/high-concurrent-experience.html"/>
      <url>/posts/high-concurrent-experience.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h3><p>2020年之初，新冠肺炎突然来势汹汹，在全国人民的团结努力下，抗疫战进入了僵持阶段，2月24日我公司一复工，就接到了成都市XX区领导的需求，需要在一周内开发上线一个针对全区师生(10万人左右)疫情每日打卡平台。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>其实就是需要做一个用户每日登陆填报问卷的功能。此平台需要有一个管理后台，一个h5打卡填报及其附属页面。</p><h3 id="雏形"><a href="#雏形" class="headerlink" title="雏形"></a>雏形</h3><p>由于时间紧，对项目进行简单分析后，确定功能(后台：用户信息管理、打卡记录、数据统计，前台：用户登陆、打卡、快速打卡、打卡记录)后，我们就着手开发。功能很快开发开发完成并上线。</p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>上线前的测试阶段，我们发现有些信息是固定的但每个人都需要查询，比如省市区信息，于是我们进行了redis缓存。由于后台的统计过于复杂，于是使用golang开发了计划任务，每两分钟统计一次数据。<br>领导验收时又提了一些功能改进，在改进时，我们发现用户数有10万左右，单一的打卡接口可能会堵塞，于是进行了优化，打卡接口只进行普通的填报信息校验，校验通过后，异步调用golang接口进行打卡信息保存，这样有一个坏处就是数据保存延迟，可能会出现打卡后看不到记录。为防止用户多次打卡，在填报信息校验通过后，将当天打卡人的唯一标识存入redis，如果存在redis中就不让再次打卡，当然如果打卡信息保存失败，go程序需删除该人当日的打卡缓存。<br>上线试运行期间，发现用户打卡打卡页面很慢，经分析，服务器带宽只有10M，前端页面图片未压缩，于是进行图片、js、css等资源文件压缩，单纯压测前端页面(压缩后未425k)，明显带宽不够，加大到100M，前端页面图片CND加速后，压测1000并发无问题。压测打卡接口，1000并发连接超时失败率20%，800并发连接超时失败率10%。<br>压测一个通宵后，本以为平安无事了，结果第二天一早上就卡得不行，原来是后台查询过慢，导致cpu飙升，前台用户查询不到数据，看慢查询发现，时不时有几个查询sql消耗时间过长，show preocesslist也看到异常。先加索引优化，但效果不明显，结果发现是在进行联表查询的时候，大表联了大表，大表牵引本来就是问题，于是对业务表进行了合并，5张表合成一张表，并添加索引，后台查询立马飞快。更新程序后，暂时一切正常了。<br>没想到第二天一早上服务器有出问题了，并发飙升到2万多，有很多insert 语句造成了锁表，而很多的select语句有无法执行。突然意识到myisam使用insert的时候会造成锁表，需要支持并发插入，得修改concurrent_insert=2,；另一方面有个在慢查询中有两个select语句出现很频繁，但耗时不高(0.60s左右)，explain发现居然没有使用索引，立马加上索引，查询耗时降低到0.02s。在无法kill sql进程的情况下，只能进行停止Nginx，重启数据库，重启后一切正常。<br>由于可能并发过高，我们选择了服务器升级，单台数据库可能扛不住。全迁移到阿里云，使用阿里云的数据库，读写分离，一主多从，弹性伸缩。一切ok，监控两日后发现并发在8000左右。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>架构设计的原则：简单、合适高于一切。<br>高并发需考虑带宽，页面缓存压缩、静态数据缓存、接口异步多线程处理。<br>慢查询除了关注耗时过长的sql，还得注意使用频繁的sql。<br>高并发当程序优化到极致后，需考虑服务器优化，读写分离，redis集群等。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua笔记</title>
      <link href="/posts/lua-notes.html"/>
      <url>/posts/lua-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>进入交互式Lua：<code>lua -i</code></li><li>退出交互式Lua：<ul><li>linux：<code>ctrl+D</code>     </li><li>windows：<code>ctrl+z  或者 os.exit()</code></li></ul></li><li>Lua的数组下标是从1开始的</li></ol>]]></content>
      
      
      <categories>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中if else的优化方案</title>
      <link href="/posts/php-if-else.html"/>
      <url>/posts/php-if-else.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：在项目开发中，经常会遇到多个复杂if else的情况，下面说说这种情况的优化方案。</div><h3 id="提前return"><a href="#提前return" class="headerlink" title="提前return"></a>提前return</h3><p> 让正常流程走主干，非正常流程提前return，去除不必要的else，适用于函数参数校验。</p><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">if</span> (condition){<br>    doSomething<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword"><code class="language-hljs php"><span class="hljs-keyword">if</span> (condition){<br>    doSomething<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">return</span> ;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">if</span> (!condition){<br>    <span class="hljs-keyword"><code class="language-hljs php"><span class="hljs-keyword">if</span> (!condition){<br>    <span class="hljs-keyword">return</span> ;<br>}<br>doSomething<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="使用三目运算符"><a href="#使用三目运算符" class="headerlink" title="使用三目运算符"></a>使用三目运算符</h3><p> 适用于根据条件给变量赋值。</p><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">if</span> (condition){<br>    <span class="hljs-variable">$status</span> = <span class="hljs-number">1</span>;<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-variable">$status</span> = <span class="hljs-number"><code class="language-hljs php"><span class="hljs-keyword">if</span> (condition){<br>    <span class="hljs-variable">$status</span> = <span class="hljs-number">1</span>;<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-variable">$status</span> = <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$status</span> = condition ? <span class="hljs-number">1</span> : <span class="hljs-number"><code class="language-hljs php"><span class="hljs-variable">$status</span> = condition ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="合并条件表达式"><a href="#合并条件表达式" class="headerlink" title="合并条件表达式"></a>合并条件表达式</h3><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">if</span> (condition1){<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br><br><span class="hljs-keyword">if</span> (condition2){<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal"><code class="language-hljs php"><span class="hljs-keyword">if</span> (condition1){<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br><br><span class="hljs-keyword">if</span> (condition2){<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">if</span> (condition1 || condition2){<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal"><code class="language-hljs php"><span class="hljs-keyword">if</span> (condition1 || condition2){<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="使用switch-case优化"><a href="#使用switch-case优化" class="headerlink" title="使用switch case优化"></a>使用switch case优化</h3><p> php8可以使用match表达式</p><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$act</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'sign in'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">sign</span>(<span class="hljs-variable">$userId</span>);<br>        } <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'register user'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-variable">$userId</span>);<br>        } <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'change password'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">changePwd</span>(<span class="hljs-variable">$userId</span>);<br>        }<br>    }<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sign</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changePwd</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$act</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'sign in'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">sign</span>(<span class="hljs-variable">$userId</span>);<br>        } <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'register user'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-variable">$userId</span>);<br>        } <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'change password'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">changePwd</span>(<span class="hljs-variable">$userId</span>);<br>        }<br>    }<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sign</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changePwd</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>}<br></code></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$act</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$act</span>) {<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'sign in'</span>:<br>                <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">sign</span>(<span class="hljs-variable">$userId</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'register user'</span>:<br>                <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-variable">$userId</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'change password'</span>:<br>                <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">changePwd</span>(<span class="hljs-variable">$userId</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        }<br>    }<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sign</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changePwd</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$act</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$act</span>) {<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'sign in'</span>:<br>                <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">sign</span>(<span class="hljs-variable">$userId</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'register user'</span>:<br>                <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-variable">$userId</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'change password'</span>:<br>                <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">changePwd</span>(<span class="hljs-variable">$userId</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        }<br>    }<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sign</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changePwd</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>}<br></code></pre></td></tr></tbody></table></figure>效果：和原来的差不多，每次新增方法后还得修改代码。</li></ul><h3 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h3><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$status</span> == <span class="hljs-number">0</span>){<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'待支付'</span>;<br>}<span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$status</span> == <span class="hljs-number">1</span>){<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'已支付'</span>;<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-string"><code class="language-hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$status</span> == <span class="hljs-number">0</span>){<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'待支付'</span>;<br>}<span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$status</span> == <span class="hljs-number">1</span>){<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'已支付'</span>;<br>}<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'支付失败'</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$orderStatus</span> = [<br>    <span class="hljs-number">0</span> =&gt; <span class="hljs-string">'待支付'</span>,<br>    <span class="hljs-number">1</span> =&gt; <span class="hljs-string">'已支付'</span>,<br>    <span class="hljs-number">2</span> =&gt; <span class="hljs-string">'支付失败'</span>,<br>];<br><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$orderStatus</span>[<span class="hljs-variable"><code class="language-hljs php"><span class="hljs-variable">$orderStatus</span> = [<br>    <span class="hljs-number">0</span> =&gt; <span class="hljs-string">'待支付'</span>,<br>    <span class="hljs-number">1</span> =&gt; <span class="hljs-string">'已支付'</span>,<br>    <span class="hljs-number">2</span> =&gt; <span class="hljs-string">'支付失败'</span>,<br>];<br><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$orderStatus</span>[<span class="hljs-variable">$status</span>];<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="表驱动法"><a href="#表驱动法" class="headerlink" title="表驱动法"></a>表驱动法</h3><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$act</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'sign in'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">sign</span>(<span class="hljs-variable">$userId</span>);<br>        } <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'register user'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-variable">$userId</span>);<br>        } <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'change password'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">changePwd</span>(<span class="hljs-variable">$userId</span>);<br>        }<br>    }<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sign</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changePwd</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$act</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'sign in'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">sign</span>(<span class="hljs-variable">$userId</span>);<br>        } <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'register user'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-variable">$userId</span>);<br>        } <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">'change password'</span>) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">changePwd</span>(<span class="hljs-variable">$userId</span>);<br>        }<br>    }<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sign</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changePwd</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>}<br></code></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$acts</span> = [<br>        <span class="hljs-string">'sign in'</span> =&gt; <span class="hljs-string">'sign'</span>,<br>        <span class="hljs-string">'register use'</span> =&gt; <span class="hljs-string">'register'</span>,<br>        <span class="hljs-string">'change password'</span> =&gt; <span class="hljs-string">'changePwd'</span>,<br>    ];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$act</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{<br>        <span class="hljs-variable">$fun</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$act</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$acts</span>[<span class="hljs-variable">$act</span>]) ? <span class="hljs-built_in">self</span>::<span class="hljs-variable">$acts</span>[<span class="hljs-variable">$act</span>] : <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$fun</span>) <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$fun</span>, <span class="hljs-variable">$userId</span>);<br>    }<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sign</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changePwd</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$acts</span> = [<br>        <span class="hljs-string">'sign in'</span> =&gt; <span class="hljs-string">'sign'</span>,<br>        <span class="hljs-string">'register use'</span> =&gt; <span class="hljs-string">'register'</span>,<br>        <span class="hljs-string">'change password'</span> =&gt; <span class="hljs-string">'changePwd'</span>,<br>    ];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$act</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{<br>        <span class="hljs-variable">$fun</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$act</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$acts</span>[<span class="hljs-variable">$act</span>]) ? <span class="hljs-built_in">self</span>::<span class="hljs-variable">$acts</span>[<span class="hljs-variable">$act</span>] : <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$fun</span>) <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$fun</span>, <span class="hljs-variable">$userId</span>);<br>    }<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sign</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changePwd</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$userId</span></span>)</span>{}<br><br>}<br></code></pre></td></tr></tbody></table></figure>效果：新增方法后，只需修改配置项，不用变更其他代码。</li></ul><h3 id="策略模式-工厂方法消除if-else"><a href="#策略模式-工厂方法消除if-else" class="headerlink" title="策略模式+工厂方法消除if-else"></a>策略模式+工厂方法消除if-else</h3><p>参考：<a href="https://www.phpmianshi.com/?id=197">https://www.phpmianshi.com/?id=197</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下如何将桌面位置移到其他地方</title>
      <link href="/posts/windows-move-desktop.html"/>
      <url>/posts/windows-move-desktop.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">一般windows系统的桌面都是放在C盘里的，如果桌面内容过多就会导致C盘空间不足。为了保证电脑的干净整洁，除了需要定期清理桌面内容，其实我们还可以把桌面移动到其他地方。</div><ol><li>在”快速访问”里找到桌面<br><img src="/images/window_move_desktop_1.png" alt=""></li><li>右键”属性”，在”位置”栏点击”移动”，选择目录，我这里选择事先创建的空文件夹(D:\desktop)，然后点击”应用”<br><img src="/images/window_move_desktop_2.png" alt=""></li><li>然后点击”是”<br><img src="/images/window_move_desktop_3.png" alt=""></li><li>桌面内容开始移动，待移动完成，点击”确定”即可<br><img src="/images/window_move_desktop_4.png" alt=""></li><li>我们现在在<code>D:\desktop</code>就可以看到桌面的内容了。<br><img src="/images/window_move_desktop_5.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022-08-24杂谈</title>
      <link href="/posts/20220824-happy.html"/>
      <url>/posts/20220824-happy.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一大早被雨声惊醒了，哈哈，现在只能用汪洙的《四喜》来形容此刻的心情了——真是久旱逢甘霖呀！只是，这一场雨来得有点晚。。</p><p><img src="/images/20220824-rain.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死锁</title>
      <link href="/posts/dead-lock.html"/>
      <url>/posts/dead-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>死锁（Dead Lock）指的是两个或两个以上的运算单元（进程、线程或协程），都在等待对方释放资源，但没有一方提起释放资源，从而造成了一种阻塞的现象就称为死锁。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>死锁的产生需要满足以下 4 个条件：</p><ol><li>互斥条件：指运算单元（进程、线程或协程）对所分配到的资源具有排它性，也就是说在一段时间内某个锁资源只能被一个运算单元所占用。</li><li>请求和保持条件：指运算单元已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它运算单元占有，此时请求运算单元阻塞，但又对自己已获得的其它资源保持不放。</li><li>不可剥夺条件：指运算单元已获得的资源，在未使用完之前，不能被剥夺。</li><li>环路等待条件：指在发生死锁时，必然存在运算单元和资源的环形链，即运算单元正在等待另一个运算单元占用的资源，而对方又在等待自己占用的资源，从而造成环路等待的情况。<br>只有以上 4 个条件同时满足，才会造成死锁。</li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>死锁产生要满足以上 4 个必要条件，那么我们只需要改变其中的 1 个或多个条件就可以解决死锁的问题了。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://mp.weixin.qq.com/s/gq7w-V493OsRpezAZXzXog">https://mp.weixin.qq.com/s/gq7w-V493OsRpezAZXzXog</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>池化技术</title>
      <link href="/posts/pooling-technology.html"/>
      <url>/posts/pooling-technology.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>池化技术指的是提前准备一些资源，在需要时可以重复使用这些预先准备的资源。池化技术的优点主要有两个：提前准备和重复利用。<br>常见的池化技术的应用有：线程池、内存池、数据库连接池、HttpClient 连接池等。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 池化技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全</title>
      <link href="/posts/thread-safe.html"/>
      <url>/posts/thread-safe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>线程安全是指某个方法或某段代码，在多线程中能够正确的执行，不会出现数据不一致或数据污染的情况，我们把这样的程序称之为线程安全的，反之则为非线程安全的。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>导致线程安全问题的因素有以下 5 个：</p><ul><li>多线程抢占式执行<br>导致线程安全问题的第一大因素就是多线程抢占式执行，想象一下，如果是单线程执行，或者是多线程有序执行，那就不会出现混乱的情况了，不出现混乱的情况，自然就不会出现非线程安全的问题了。</li><li>多线程同时修改同一个变量<br>多线程只要不是同时修改同一个变量，也不会出现线程安全问题。</li><li>非原子性操作<br>原子性操作是指操作不能再被分隔就叫原子性操作。非原子性操作有很多不确定性，而这些不确定性就会造成线程安全问题问题。像 i++ 和 i— 这种操作就是非原子的，它在 +1 或 -1 之前，先要查询原变量的值，并不是一次性完成的，所以就会导致线程安全问题。</li><li>内存可见性<br>在 Java 编程中内存分为两种类型：工作内存和主内存，而工作内存使用的是 CPU 寄存器实现的，而主内存是指电脑中的内存，我们知道 CPU 寄存器的操作速度是远大于内存的操作速度的。<br>那这和线程安全有什么关系呢？这是因为在 Java 语言中，为了提高程序的执行速度，所以在操作变量时，会将变量从主内存中复制一份到工作内存，而主内存是所有线程共用的，工作内存是每个线程私有的，这就会导致一个线程已经把主内存中的公共变量修改了，而另一个线程不知道，依旧使用自己工作内存中的变量，这样就导致了问题的产生，也就导致了线程安全问题。</li><li>指令重排序<br>指令重排序是指 Java 程序为了提高程序的执行速度，所以会对一下操作进行合并和优化的操作。比如说，张三要去图书馆还书，舍友又让张三帮忙借书，那么程序的执行思维是，张三先去图书馆把自己的书还了，再去一趟图书馆帮舍友把书借回来。而指令重排序之后，把两次执行合并了，张三带着自己的书去图书馆把书先还了，再帮舍友把书借出来，整个流程就执行完了，这是正常情况下的指令重排序的好处。但是指令重排序也有“副作用”，而“副作用”是发生在多线程执行中的，还是以张三借书和帮舍友还书为例，如果张三是一件事做完再做另一件事是没有问题的（也就是单线程执行是没有问题的），但如果是多线程执行，就是两件事由多个人混合着做，比如张三在图书馆遇到了自己的多个同学，于是就把任务分派给多个人一起执行，有人借了几本书、有人借了还了几本书、有人再借了几本书、有人再借了还了几本书，执行的很混乱没有明确的目标，到最后悲剧就发生了，这就是在指令重排序带来的线程安全问题。</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决线程安全问题有以下 3 种手段：</p><ol><li>使用线程安全类，比如 AtomicInteger。</li><li>加锁排队执行<br> <code>使用 synchronized 加锁。</code><br> <code>使用 ReentrantLock 加锁。</code></li><li>使用线程本地变量 ThreadLocal。</li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://mp.weixin.qq.com/s/BKp1c1gMsXWSNy3-8-FH0Q">https://mp.weixin.qq.com/s/BKp1c1gMsXWSNy3-8-FH0Q</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中define和const的区别</title>
      <link href="/posts/php-define-const.html"/>
      <url>/posts/php-define-const.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">在PHP中，定义常量有两种方式： const、define；下面详细说下它们的区别：</div><ul><li>1、const是表达式赋值定义一个常量，而define是一个函数，它接受三个参数</li><li>2、const对定义的常量大小写敏感，而define可以通过函数的第三个参数来控制是否大小写敏感</li><li>3、const可以类中使用，define不能</li><li>4、const不能再条件语句中使用，而define可以</li><li><p>5、const在使用上比define要简单便捷，并且编译速度要比Define来得快</p></li><li><p>6、用法<br>define常放在文件的开头</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">'ENV_PREFIX'</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">'ENV_PREFIX'</span>, <span class="hljs-string"><code class="language-hljs php"><span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">'ENV_PREFIX'</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">'ENV_PREFIX'</span>, <span class="hljs-string">'PHP_'</span>);<br></code></pre></td></tr></tbody></table></figure><p>const一般放在类里：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STATUS_NORMAL</span> = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STATUS_FILED</span> = <span class="hljs-number"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STATUS_NORMAL</span> = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STATUS_FILED</span> = <span class="hljs-number">2</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> define与const </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下curl命令</title>
      <link href="/posts/linux-curl.html"/>
      <url>/posts/linux-curl.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs 1c">curl https:<span class="hljs-comment"><code class="language-hljs 1c">curl https:<span class="hljs-comment">//www.baidu.com</span><br></code></pre></td></tr></tbody></table></figure><p>上面命令向www.baidu.com发出 GET 请求，服务器返回的内容会在命令行输出。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><h4 id="d：使用-d参数向服务器发送POST请求的数据体"><a href="#d：使用-d参数向服务器发送POST请求的数据体" class="headerlink" title="-d：使用-d参数向服务器发送POST请求的数据体"></a>-d：使用-d参数向服务器发送POST请求的数据体</h4><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs awk">curl -d <span class="hljs-string">'login=admin＆password=123'</span> -X POST https:<span class="hljs-regexp">//</span>www.aa.com<span class="hljs-regexp"><code class="language-hljs awk">curl -d <span class="hljs-string">'login=admin＆password=123'</span> -X POST https:<span class="hljs-regexp">//</span>www.aa.com<span class="hljs-regexp">/admin/</span><br></code></pre></td></tr></tbody></table></figure><p>上方的命令向服务器发送（POST）了login=admin＆password=123。但是使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。</p><figure class="highlight scilab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs scilab">curl -d <span class="hljs-string">'{"</span>login<span class="hljs-string">": "</span>admin<span class="hljs-string">", "</span>pass<span class="hljs-string">": "</span><span class="hljs-number">123</span><span class="hljs-string">"}'</span> -X <span class="hljs-string">'Content-Type: application/json'</span> https:<span class="hljs-comment"><code class="language-hljs scilab">curl -d <span class="hljs-string">'{"</span>login<span class="hljs-string">": "</span>admin<span class="hljs-string">", "</span>pass<span class="hljs-string">": "</span><span class="hljs-number">123</span><span class="hljs-string">"}'</span> -X <span class="hljs-string">'Content-Type: application/json'</span> https:<span class="hljs-comment">//www.aa.com/admin</span><br></code></pre></td></tr></tbody></table></figure><p>上方的命令添加了HTTP请求标头：Content-Type:application/json并使用-d参数向服务器发送（POST）了json数据。</p><h4 id="H：设置-HTTP头信息"><a href="#H：设置-HTTP头信息" class="headerlink" title="-H：设置 HTTP头信息"></a>-H：设置 HTTP头信息</h4><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs 1c">curl -H 'Token: xxxx' https:<span class="hljs-comment"><code class="language-hljs 1c">curl -H 'Token: xxxx' https:<span class="hljs-comment">//www.aa.com/</span><br></code></pre></td></tr></tbody></table></figure><p>使用-H参数设置Token为xxxx向服务器发送了GET请求。</p><h4 id="X：可以指定HTTP请求方法"><a href="#X：可以指定HTTP请求方法" class="headerlink" title="-X：可以指定HTTP请求方法"></a>-X：可以指定HTTP请求方法</h4><figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs stata">curl -X <span class="hljs-keyword">POST</span> https:<span class="hljs-comment"><code class="language-hljs stata">curl -X <span class="hljs-keyword">POST</span> https:<span class="hljs-comment">//www.aa.com/</span><br></code></pre></td></tr></tbody></table></figure><p>上方的命令向服务器发送了POST请求。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.typeboom.com/archives/107/">https://www.typeboom.com/archives/107/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> curl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——建造者模式</title>
      <link href="/posts/builder-pattern.html"/>
      <url>/posts/builder-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。首先看下关系图：<br><img src="/images/builder-pattern-1.jpg" alt=""></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面讲解下设计模式的代码实现</p><ol><li>创建产品类<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$parts</span> = [];<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$part</span></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;parts[] = <span class="hljs-variable">$part</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>{<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$parts</span> = [];<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$part</span></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;parts[] = <span class="hljs-variable">$part</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>{<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$this</span>->parts);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li>创建建造者接口<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Builder</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartA</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartB</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResult</span>(<span class="hljs-params"></span>): <span class="hljs-title"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Builder</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartA</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartB</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResult</span>(<span class="hljs-params"></span>): <span class="hljs-title">Product</span></span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>创建多个建造者实现类</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteBuilder1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Builder</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$product</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartA</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">'部件A'</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartB</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">'部件B'</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResult</span>(<span class="hljs-params"></span>): <span class="hljs-title">Product</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;product;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteBuilder2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Builder</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$product</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartA</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">'部件X'</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartB</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">'部件Y'</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResult</span>(<span class="hljs-params"></span>): <span class="hljs-title">Product</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteBuilder1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Builder</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$product</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartA</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">'部件A'</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartB</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">'部件B'</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResult</span>(<span class="hljs-params"></span>): <span class="hljs-title">Product</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;product;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteBuilder2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Builder</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$product</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartA</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">'部件X'</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPartB</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;product-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">'部件Y'</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResult</span>(<span class="hljs-params"></span>): <span class="hljs-title">Product</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>->product;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>创建构造器</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Director</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">construct</span>(<span class="hljs-params">Builder <span class="hljs-variable">$builder</span></span>)</span>{<br>        <span class="hljs-variable">$builder</span>-&gt;<span class="hljs-title function_ invoke__">buildPartA</span>();<br>        <span class="hljs-variable">$builder</span>-&gt;<span class="hljs-title function_ invoke__"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Director</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">construct</span>(<span class="hljs-params">Builder <span class="hljs-variable">$builder</span></span>)</span>{<br>        <span class="hljs-variable">$builder</span>-&gt;<span class="hljs-title function_ invoke__">buildPartA</span>();<br>        <span class="hljs-variable">$builder</span>-&gt;<span class="hljs-title function_ invoke__">buildPartB</span>();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ul><li><p>我们来测试下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryTest</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable">$director</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Director</span>();<br>        <span class="hljs-variable">$builder1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteBuilder1</span>();<br>        <span class="hljs-variable">$builder2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteBuilder2</span>();<br>        <br>        <span class="hljs-variable">$director</span>-&gt;<span class="hljs-title function_ invoke__">construct</span>(<span class="hljs-variable">$builder1</span>);<br>        <span class="hljs-variable">$product1</span> = <span class="hljs-variable">$builder1</span>-&gt;<span class="hljs-title function_ invoke__">getResult</span>();<br>        <span class="hljs-variable">$product1</span>-&gt;<span class="hljs-title function_ invoke__">show</span>();<br>        <br>        <span class="hljs-variable">$director</span>-&gt;<span class="hljs-title function_ invoke__">construct</span>(<span class="hljs-variable">$builder2</span>);<br>        <span class="hljs-variable">$product2</span> = <span class="hljs-variable">$builder2</span>-&gt;<span class="hljs-title function_ invoke__">getResult</span>();<br>        <span class="hljs-variable">$product2</span>-&gt;<span class="hljs-title function_ invoke__"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryTest</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable">$director</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Director</span>();<br>        <span class="hljs-variable">$builder1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteBuilder1</span>();<br>        <span class="hljs-variable">$builder2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteBuilder2</span>();<br>        <br>        <span class="hljs-variable">$director</span>-&gt;<span class="hljs-title function_ invoke__">construct</span>(<span class="hljs-variable">$builder1</span>);<br>        <span class="hljs-variable">$product1</span> = <span class="hljs-variable">$builder1</span>-&gt;<span class="hljs-title function_ invoke__">getResult</span>();<br>        <span class="hljs-variable">$product1</span>-&gt;<span class="hljs-title function_ invoke__">show</span>();<br>        <br>        <span class="hljs-variable">$director</span>-&gt;<span class="hljs-title function_ invoke__">construct</span>(<span class="hljs-variable">$builder2</span>);<br>        <span class="hljs-variable">$product2</span> = <span class="hljs-variable">$builder2</span>-&gt;<span class="hljs-title function_ invoke__">getResult</span>();<br>        <span class="hljs-variable">$product2</span>-&gt;<span class="hljs-title function_ invoke__">show</span>();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>输出结果为：</p><figure class="highlight livescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs livescript"><span class="hljs-built_in">Array</span> ( [<span class="hljs-number">0</span>] =&gt; 部件A [<span class="hljs-number">1</span>] =&gt; 部件B )<br><span class="hljs-built_in">Array</span> ( [<span class="hljs-number">0</span>] =&gt; 部件X [<span class="hljs-number"><code class="language-hljs livescript"><span class="hljs-built_in">Array</span> ( [<span class="hljs-number">0</span>] =&gt; 部件A [<span class="hljs-number">1</span>] =&gt; 部件B )<br><span class="hljs-built_in">Array</span> ( [<span class="hljs-number">0</span>] =&gt; 部件X [<span class="hljs-number">1</span>] => 部件Y )<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>它与工厂模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建复合对象，多个部分。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP实现方法运行前(后)执行指定的程序</title>
      <link href="/posts/php-auto-run-func.html"/>
      <url>/posts/php-auto-run-func.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在PHP中，利用__call()，可实现方法运行前/后执行指定的程序片段。</p><p>下面演示下，在test方法执行后自动执行afterTest方法</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>)</span>{<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">method_exists</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$method</span>)) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">'no such method: '</span> . <span class="hljs-variable">$method</span>);<br>        }<br>        <span class="hljs-variable">$afterMethod</span> = <span class="hljs-string">'after'</span>.<span class="hljs-title function_ invoke__">ucfirst</span>(<span class="hljs-variable">$method</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">method_exists</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$afterMethod</span>)) {<br>            <span class="hljs-variable">$rs</span> = <span class="hljs-title function_ invoke__">call_user_func_array</span>([<span class="hljs-variable">$this</span>, <span class="hljs-variable">$method</span>], <span class="hljs-variable">$args</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$rs</span>[<span class="hljs-string">'code'</span>] == <span class="hljs-number">0</span>) {<br>                <span class="hljs-title function_ invoke__">call_user_func_array</span>([<span class="hljs-variable">$this</span>, <span class="hljs-variable">$afterMethod</span>], <span class="hljs-variable">$rs</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$rs</span>;<br>            }<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">call_user_func_array</span>([<span class="hljs-variable">$this</span>, <span class="hljs-variable">$method</span>], <span class="hljs-variable">$args</span>);<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">afterTest</span>(<span class="hljs-params">...<span class="hljs-variable">$args</span></span>)</span>{<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$args</span>);<br>    }<br>}<br><br>Class B{<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">A</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>,<span class="hljs-variable">$name</span></span>): <span class="hljs-title">array</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>&gt;<span class="hljs-number">10</span> ? [<span class="hljs-string">'code'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'msg'</span>=&gt;<span class="hljs-string">'ok'</span>] : [<span class="hljs-string">'code'</span>=&gt;<span class="hljs-number">0</span>,<span class="hljs-string">'msg'</span>=&gt;<span class="hljs-string">'error'</span>];<br>    }<br>}<br><br><span class="hljs-variable">$rs</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>())-&gt;<span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">7</span>,<span class="hljs-string"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>)</span>{<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">method_exists</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$method</span>)) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">'no such method: '</span> . <span class="hljs-variable">$method</span>);<br>        }<br>        <span class="hljs-variable">$afterMethod</span> = <span class="hljs-string">'after'</span>.<span class="hljs-title function_ invoke__">ucfirst</span>(<span class="hljs-variable">$method</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">method_exists</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$afterMethod</span>)) {<br>            <span class="hljs-variable">$rs</span> = <span class="hljs-title function_ invoke__">call_user_func_array</span>([<span class="hljs-variable">$this</span>, <span class="hljs-variable">$method</span>], <span class="hljs-variable">$args</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$rs</span>[<span class="hljs-string">'code'</span>] == <span class="hljs-number">0</span>) {<br>                <span class="hljs-title function_ invoke__">call_user_func_array</span>([<span class="hljs-variable">$this</span>, <span class="hljs-variable">$afterMethod</span>], <span class="hljs-variable">$rs</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$rs</span>;<br>            }<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">call_user_func_array</span>([<span class="hljs-variable">$this</span>, <span class="hljs-variable">$method</span>], <span class="hljs-variable">$args</span>);<br>        }<br>    }<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">afterTest</span>(<span class="hljs-params">...<span class="hljs-variable">$args</span></span>)</span>{<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$args</span>);<br>    }<br>}<br><br>Class B{<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">A</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>,<span class="hljs-variable">$name</span></span>): <span class="hljs-title">array</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$id</span>&gt;<span class="hljs-number">10</span> ? [<span class="hljs-string">'code'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'msg'</span>=&gt;<span class="hljs-string">'ok'</span>] : [<span class="hljs-string">'code'</span>=&gt;<span class="hljs-number">0</span>,<span class="hljs-string">'msg'</span>=&gt;<span class="hljs-string">'error'</span>];<br>    }<br>}<br><br><span class="hljs-variable">$rs</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>())-&gt;<span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">7</span>,<span class="hljs-string">'张三'</span>);<br></code></pre></td></tr></tbody></table></figure><p>输出结果为：<br><code>Array ( [0] =&gt; 0 [1] =&gt; error )</code></p><p>不难看出，这种处理方式存在以下两个缺陷：</p><ol><li>方法需设为外界不可用，protected/privated，在IDE中就无法跳转，其他人维护起来比较困难；</li><li>代码耦合度高，相互影响，不利于后期扩展。</li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中unset的一些使用</title>
      <link href="/posts/php-unset.html"/>
      <url>/posts/php-unset.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：在PHP开发中，经常使用到unset来释放掉给定的变量；但有时候会有些问题，本文记录下。</div><ul><li><p>如果需要去掉数组中的某些key，直接unset即可</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$arr</span> = [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">5</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'张三'</span>, <span class="hljs-string">'status'</span> =&gt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-string">'status'</span>]);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$arr</span>);      <span class="hljs-comment"><code class="language-hljs php"><span class="hljs-variable">$arr</span> = [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">5</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'张三'</span>, <span class="hljs-string">'status'</span> =&gt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-string">'status'</span>]);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$arr</span>);      <span class="hljs-comment">// Array ( [id] => 5 [name] => 张三 )</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>也可以去掉二位数组中指定的key</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$list</span> = [<br>    [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'张三'</span>, <span class="hljs-string">'status'</span> =&gt; <span class="hljs-number">1</span>],<br>    [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'李四'</span>, <span class="hljs-string">'status'</span> =&gt; <span class="hljs-number">0</span>],<br>    [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">3</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'王五'</span>, <span class="hljs-string">'status'</span> =&gt; <span class="hljs-number">1</span>],<br>];<br><span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$list</span>, function (&amp;<span class="hljs-variable">$item</span>) {<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$item</span>[<span class="hljs-string">'status'</span>]);<br>});<br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$list</span>);<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-variable">$list</span> = [<br>    [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'张三'</span>, <span class="hljs-string">'status'</span> =&gt; <span class="hljs-number">1</span>],<br>    [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'李四'</span>, <span class="hljs-string">'status'</span> =&gt; <span class="hljs-number">0</span>],<br>    [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">3</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'王五'</span>, <span class="hljs-string">'status'</span> =&gt; <span class="hljs-number">1</span>],<br>];<br><span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$list</span>, function (&amp;<span class="hljs-variable">$item</span>) {<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$item</span>[<span class="hljs-string">'status'</span>]);<br>});<br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$list</span>);<br><span class="hljs-comment">// output:  Array ( [0] => Array ( [id] => 1 [name] => 张三 ) [1] => Array ( [id] => 2 [name] => 李四 ) [2] => Array ( [id] => 3 [name] => 王五 ) )</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>下面试下去掉一维数组中的空值</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$data</span> = [<span class="hljs-string">'test'</span>, <span class="hljs-string">'haha'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">'hello'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'good'</span>];<br><span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$data</span>, function (&amp;<span class="hljs-variable">$item</span>) {<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$item</span>) <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$item</span>);<br>});<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$data</span>);<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-variable">$data</span> = [<span class="hljs-string">'test'</span>, <span class="hljs-string">'haha'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">'hello'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'good'</span>];<br><span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$data</span>, function (&amp;<span class="hljs-variable">$item</span>) {<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$item</span>) <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$item</span>);<br>});<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$data</span>);<br><span class="hljs-comment">// output: Array ( [0] => test [1] => haha [2] => [3] => hello [4] => [5] => good )</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>上面的代码没有达到预期的效果，那我们修改下试试</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$data</span> = [<span class="hljs-string">'test'</span>, <span class="hljs-string">'haha'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">'hello'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'good'</span>, <span class="hljs-string">''</span>];<br><span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$data</span>, function (<span class="hljs-variable">$item</span>, <span class="hljs-variable">$key</span>) <span class="hljs-keyword">use</span> (&amp;$<span class="hljs-title">data</span>) {<br>    <span class="hljs-title">if</span> (!$<span class="hljs-title">item</span>) <span class="hljs-title">unset</span>($<span class="hljs-title">data</span>[$<span class="hljs-title">key</span>]);<br>});<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$data</span>);<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-variable">$data</span> = [<span class="hljs-string">'test'</span>, <span class="hljs-string">'haha'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">'hello'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'good'</span>, <span class="hljs-string">''</span>];<br><span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$data</span>, function (<span class="hljs-variable">$item</span>, <span class="hljs-variable">$key</span>) <span class="hljs-keyword">use</span> (&amp;$<span class="hljs-title">data</span>) {<br>    <span class="hljs-title">if</span> (!$<span class="hljs-title">item</span>) <span class="hljs-title">unset</span>($<span class="hljs-title">data</span>[$<span class="hljs-title">key</span>]);<br>});<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$data</span>);<br><span class="hljs-comment">// output: Array ( [0] => test [1] => haha [3] => hello [5] => good )</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>虽然达到了预期，但PHP给我们提供了更优雅的解决办法</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$data</span> = [<span class="hljs-string">'test'</span>, <span class="hljs-string">'haha'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">'hello'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'good'</span>, <span class="hljs-string">''</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">array_filter</span>(<span class="hljs-variable">$data</span>));<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-variable">$data</span> = [<span class="hljs-string">'test'</span>, <span class="hljs-string">'haha'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">'hello'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'good'</span>, <span class="hljs-string">''</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">array_filter</span>(<span class="hljs-variable">$data</span>));<br><span class="hljs-comment">// output: Array ( [0] => test [1] => haha [3] => hello [5] => good )</span><br></code></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中，通过&amp;改变变量的值，效率如何</title>
      <link href="/posts/php-assignment.html"/>
      <url>/posts/php-assignment.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在PHP中，通过&amp;改变变量的值，效率如何呢，下面来测试一下。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$arr</span> = [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-literal">null</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'test'</span>, <span class="hljs-string">'age'</span> =&gt; <span class="hljs-literal">null</span>];<br><br><span class="hljs-variable">$time1</span> = <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-variable">$tmp</span> = &amp;<span class="hljs-variable">$arr</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">100000000</span>; <span class="hljs-variable">$i</span>++) {<br>    <span class="hljs-variable">$tmp</span>[<span class="hljs-string">'id'</span>] = <span class="hljs-variable">$i</span>;<br>}<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$arr</span>); <br><span class="hljs-keyword">echo</span> PHP_EOL;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>) - <span class="hljs-variable">$time1</span>;<br><br><span class="hljs-keyword">echo</span> PHP_EOL;<br><span class="hljs-variable">$time2</span> = <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-variable">$tmp1</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">100000000</span>; <span class="hljs-variable">$i</span>++) {<br>    <span class="hljs-variable">$tmp1</span> = <span class="hljs-variable">$i</span>;<br>}<br><span class="hljs-variable">$tmp</span>[<span class="hljs-string">'id'</span>] = <span class="hljs-variable">$tmp1</span>;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-keyword">echo</span> PHP_EOL;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>) - <span class="hljs-variable"><code class="language-hljs php"><span class="hljs-variable">$arr</span> = [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-literal">null</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'test'</span>, <span class="hljs-string">'age'</span> =&gt; <span class="hljs-literal">null</span>];<br><br><span class="hljs-variable">$time1</span> = <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-variable">$tmp</span> = &amp;<span class="hljs-variable">$arr</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">100000000</span>; <span class="hljs-variable">$i</span>++) {<br>    <span class="hljs-variable">$tmp</span>[<span class="hljs-string">'id'</span>] = <span class="hljs-variable">$i</span>;<br>}<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$arr</span>); <br><span class="hljs-keyword">echo</span> PHP_EOL;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>) - <span class="hljs-variable">$time1</span>;<br><br><span class="hljs-keyword">echo</span> PHP_EOL;<br><span class="hljs-variable">$time2</span> = <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-variable">$tmp1</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">100000000</span>; <span class="hljs-variable">$i</span>++) {<br>    <span class="hljs-variable">$tmp1</span> = <span class="hljs-variable">$i</span>;<br>}<br><span class="hljs-variable">$tmp</span>[<span class="hljs-string">'id'</span>] = <span class="hljs-variable">$tmp1</span>;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-keyword">echo</span> PHP_EOL;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>) - <span class="hljs-variable">$time2</span>;<br><br></code></pre></td></tr></tbody></table></figure><p>输出结果为：<code><br>Array ( [id] =&gt; 99999999 [name] =&gt; test [age] =&gt; )<br>2.0506858825684<br>Array ( [id] =&gt; 99999999 [name] =&gt; test [age] =&gt; )<br>1.1653530597687</code></p><p>不难看出，两次的处理结果是一样的，但通过&amp;多次改变值，效率较低。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php中，this、self、static的区别</title>
      <link href="/posts/php-self-static.html"/>
      <url>/posts/php-self-static.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>this指当前类，不能用于静态成员函数中，使用形式：$this-&gt;</li><li>self是对静态成员函数/变量的访问，使用形式：self::</li><li>static和self很接近，唯一区别在于：self调用的是本身代码片段的这个类；而static调用的是从堆内存中提取出来的，即访问的是当前实例化的那个类。</li></ul><p>下面看下测试代码：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">'Jams'</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">26</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">get_called_class</span>() . <span class="hljs-string">'==&gt;'</span> . <span class="hljs-variable language_">$this</span>-&gt;name . <span class="hljs-string">'==&gt;'</span> . <span class="hljs-variable language_">$this</span>::<span class="hljs-variable">$age</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">get_called_class</span>() . <span class="hljs-string">'==&gt;'</span> . <span class="hljs-built_in">self</span>::<span class="hljs-variable">$age</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">get_called_class</span>() . <span class="hljs-string">'==&gt;'</span> . <span class="hljs-built_in">static</span>::<span class="hljs-variable">$age</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">'Kiv'</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">20</span>;<br>}<br><br>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>())-&gt;<span class="hljs-title function_ invoke__">start</span>();<br>B::<span class="hljs-title function_ invoke__">getAge</span>();<br>B::<span class="hljs-title function_ invoke__"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">'Jams'</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">26</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">get_called_class</span>() . <span class="hljs-string">'==&gt;'</span> . <span class="hljs-variable language_">$this</span>-&gt;name . <span class="hljs-string">'==&gt;'</span> . <span class="hljs-variable language_">$this</span>::<span class="hljs-variable">$age</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">get_called_class</span>() . <span class="hljs-string">'==&gt;'</span> . <span class="hljs-built_in">self</span>::<span class="hljs-variable">$age</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">get_called_class</span>() . <span class="hljs-string">'==&gt;'</span> . <span class="hljs-built_in">static</span>::<span class="hljs-variable">$age</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">'Kiv'</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">20</span>;<br>}<br><br>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>())-&gt;<span class="hljs-title function_ invoke__">start</span>();<br>B::<span class="hljs-title function_ invoke__">getAge</span>();<br>B::<span class="hljs-title function_ invoke__">getInfo</span>();<br></code></pre></td></tr></tbody></table></figure><p>输出结果为：<code><br>B==&gt;Kiv==&gt;20<br>B==&gt;26<br>B==&gt;20</code></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中isset与array_key_exists的性能对比</title>
      <link href="/posts/php-isset-array_key_exists.html"/>
      <url>/posts/php-isset-array_key_exists.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：在开发中，之前判断数组中的键是否存在，我一直使用isset；今天看到有同事大量使用array_key_exists，闲来没事就测试了一下它们的性能。</div><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$arr</span> = [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">3242</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'test'</span>, <span class="hljs-string">'age'</span> =&gt; <span class="hljs-literal">null</span>];<br><br><span class="hljs-variable">$time1</span> = <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">100000000</span>; <span class="hljs-variable">$i</span>++) {<br>    <span class="hljs-variable">$tmp</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-string">'age'</span>]);<br>}<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>) - <span class="hljs-variable">$time1</span>;<br><br><span class="hljs-keyword">echo</span> PHP_EOL;<br><span class="hljs-variable">$time2</span> = <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">100000000</span>; <span class="hljs-variable">$i</span>++) {<br>    <span class="hljs-variable">$tmp1</span> = <span class="hljs-title function_ invoke__">array_key_exists</span>(<span class="hljs-string">'age'</span>, <span class="hljs-variable">$arr</span>);<br>}<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>) - <span class="hljs-variable"><code class="language-hljs php"><span class="hljs-variable">$arr</span> = [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">3242</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'test'</span>, <span class="hljs-string">'age'</span> =&gt; <span class="hljs-literal">null</span>];<br><br><span class="hljs-variable">$time1</span> = <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">100000000</span>; <span class="hljs-variable">$i</span>++) {<br>    <span class="hljs-variable">$tmp</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-string">'age'</span>]);<br>}<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>) - <span class="hljs-variable">$time1</span>;<br><br><span class="hljs-keyword">echo</span> PHP_EOL;<br><span class="hljs-variable">$time2</span> = <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">100000000</span>; <span class="hljs-variable">$i</span>++) {<br>    <span class="hljs-variable">$tmp1</span> = <span class="hljs-title function_ invoke__">array_key_exists</span>(<span class="hljs-string">'age'</span>, <span class="hljs-variable">$arr</span>);<br>}<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>) - <span class="hljs-variable">$time2</span>;<br></code></pre></td></tr></tbody></table></figure><p>上面的代码运行结果为：<code><br>2.1061670780182<br>3.1671521663666</code></p><p>经测试：isset的效率要高于array_key_exists。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中...的用法</title>
      <link href="/posts/php-uncertain-params.html"/>
      <url>/posts/php-uncertain-params.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>如果…在函数的定义中，则表示传入多个参数(个数不定)将合并成一个数组(索引数组)<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">...<span class="hljs-variable">$numbers</span></span>)</span>{<br>    <span class="hljs-variable">$sum</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$numbers</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$number</span>){<br>        <span class="hljs-variable">$sum</span> += <span class="hljs-variable">$number</span>;<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$sum</span>;<br>}<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);    <span class="hljs-comment"><code class="language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">...<span class="hljs-variable">$numbers</span></span>)</span>{<br>    <span class="hljs-variable">$sum</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$numbers</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$number</span>){<br>        <span class="hljs-variable">$sum</span> += <span class="hljs-variable">$number</span>;<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$sum</span>;<br>}<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);    <span class="hljs-comment">//15</span><br></code></pre></td></tr></tbody></table></figure></li><li>如果…在调用函数的语句中，则表示传入的数组(索引数组)将拆分成多个参数<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>;<br>}<br><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">add</span>(...<span class="hljs-variable">$arr</span>);      <span class="hljs-comment">//5</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">add</span>(...[<span class="hljs-number">1</span>]));  <span class="hljs-comment">//没有任何输出</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">add</span>(...[<span class="hljs-string">'a'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'b'</span>=&gt;<span class="hljs-number">2</span>]));  <span class="hljs-comment"><code class="language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>;<br>}<br><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">add</span>(...<span class="hljs-variable">$arr</span>);      <span class="hljs-comment">//5</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">add</span>(...[<span class="hljs-number">1</span>]));  <span class="hljs-comment">//没有任何输出</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">add</span>(...[<span class="hljs-string">'a'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'b'</span>=&gt;<span class="hljs-number">2</span>]));  <span class="hljs-comment">//没有任何输出</span><br></code></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 中rule规则</title>
      <link href="/posts/thinkphp-rule.html"/>
      <url>/posts/thinkphp-rule.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>rule规则<br></p><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">\think\Validate</span></span>{<br><span class="hljs-keyword">protected</span> $rule = [<br>['mobile|手机号', 'require|length:<span class="hljs-number">11</span>', '手机号必填|手机号格式不正确'],<br>…<br>];<br><br><span class="hljs-keyword"><code class="language-hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">\think\Validate</span></span>{<br><span class="hljs-keyword">protected</span> $rule = [<br>['mobile|手机号', 'require|length:<span class="hljs-number">11</span>', '手机号必填|手机号格式不正确'],<br>…<br>];<br><br><span class="hljs-keyword">protected</span> $scene = [<br>'add'=>['mobile','name'…],<br>…<br>];<br><br>}<br><br></code></pre></td></tr></tbody></table></figure><p></p><p>添加自定义校验<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$rule</span> = [<br>[<span class="hljs-string">'anchor_id|关联账号'</span>, <span class="hljs-string">'require|checkAnchor'</span>],<br>];<br><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkAnchor</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>{<br>…<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$error</span> = <span class="hljs-variable">$server</span>-&gt;<span class="hljs-title function_ invoke__">getError</span>()) {<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$error</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@var</span> $msg</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$msg</span>;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-literal"><code class="language-hljs php"><span class="hljs-variable">$rule</span> = [<br>[<span class="hljs-string">'anchor_id|关联账号'</span>, <span class="hljs-string">'require|checkAnchor'</span>],<br>];<br><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkAnchor</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>{<br>…<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$error</span> = <span class="hljs-variable">$server</span>-&gt;<span class="hljs-title function_ invoke__">getError</span>()) {<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$error</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@var</span> $msg</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$msg</span>;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的JSON</title>
      <link href="/posts/mysql-json.html"/>
      <url>/posts/mysql-json.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">以MySQL为代表的关系型数据库，5.7.8之前没有JSON这种数据类型，只能以varchar或者text形式变相的支持JSON，存取键值极不方便；5.7.8开始有JSON数据类型，有专门语法支持键值的存取，易用性得到很大提升。下面说说json类型的使用。</div><h3 id="json类型的使用"><a href="#json类型的使用" class="headerlink" title="json类型的使用"></a>json类型的使用</h3><ol><li>先看下版本号，确定是否支持json类型<br><img src="/images/mysql_json_1.png" alt=""></li><li>创建表user，其中extdata字段为json类型<br><img src="/images/mysql_json_2.png" alt=""></li><li>往表user里插入一条数据<br><img src="/images/mysql_json_3.png" alt=""></li><li>设置extdata字段的值<br><img src="/images/mysql_json_4.png" alt=""></li><li>查看数据<br><img src="/images/mysql_json_5.png" alt=""></li><li>查看json字段的指定项：<code>json_extract(字段名,'$.xx')</code><br><img src="/images/mysql_json_6.png" alt=""></li><li>explain看下<br><img src="/images/mysql_json_7.png" alt=""></li><li>以json字段中的指定项来添加字段<br><img src="/images/mysql_json_8.png" alt=""></li><li>派生字段添加索引<br><img src="/images/mysql_json_9.png" alt=""></li></ol><h3 id="json函数与find-in-set对比"><a href="#json函数与find-in-set对比" class="headerlink" title="json函数与find_in_set对比"></a>json函数与find_in_set对比</h3><ol><li>新建表test<figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test (<br>id <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>member_ids <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>manager_ids <span class="hljs-type">json</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY KEY</span> (id)<br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">50159</span> <span class="hljs-keyword"><code class="language-hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test (<br>id <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>member_ids <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>manager_ids <span class="hljs-type">json</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY KEY</span> (id)<br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">50159</span> <span class="hljs-keyword">DEFAULT</span> CHARSET=utf8mb4;<br></code></pre></td></tr></tbody></table></figure></li><li><p>并插入五万条数据<br><img src="/images/mysql_json_10.png" alt=""><br><img src="/images/mysql_json_11.png" alt=""></p></li><li><p>对比查询效率</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs csharp"><span class="hljs-keyword">select</span> SQL_NO_CACHE * <span class="hljs-function"><span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> <span class="hljs-title">FIND_IN_SET</span>(<span class="hljs-params"><span class="hljs-number">2</span>,member_ids</span>)</span>;<br><span class="hljs-keyword">select</span> SQL_NO_CACHE * <span class="hljs-function"><span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> <span class="hljs-title">json_contains</span>(<span class="hljs-params">manager_ids,<span class="hljs-string"><code class="language-hljs csharp"><span class="hljs-keyword">select</span> SQL_NO_CACHE * <span class="hljs-function"><span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> <span class="hljs-title">FIND_IN_SET</span>(<span class="hljs-params"><span class="hljs-number">2</span>,member_ids</span>)</span>;<br><span class="hljs-keyword">select</span> SQL_NO_CACHE * <span class="hljs-function"><span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> <span class="hljs-title">json_contains</span>(<span class="hljs-params">manager_ids,<span class="hljs-string">'2'</span></span>)</span>;<br></code></pre></td></tr></tbody></table></figure><p><img src="/images/mysql_json_12.png" alt=""><br><img src="/images/mysql_json_13.png" alt=""><br><img src="/images/mysql_json_14.png" alt=""><br>find_in_set稳定性不好，时间在0.09s到0.69s之间变动<br>json_contains稳定在0.14s左右，第二个字段必须是字符串<br>如果连表的话，要使用cast(b.id as char)</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs n1ql"><span class="hljs-keyword">SELECT</span><br>a.id,<br>a.NAME,<br>group_concat( <span class="hljs-keyword">DISTINCT</span> ( b.NAME ) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> b.id SEPARATOR <span class="hljs-string">'、'</span> ) managerNames<br><span class="hljs-keyword">FROM</span><br>a<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> b <span class="hljs-keyword">ON</span> json_contains( a.manager_ids, <span class="hljs-keyword">cast</span>(b.id <span class="hljs-keyword">as</span> char) )<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br><span class="hljs-symbol">`a`</span>.<span class="hljs-symbol">`id`</span> <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br><span class="hljs-symbol">`a`</span>.<span class="hljs-symbol">`id`</span> <span class="hljs-keyword">ASC</span> <br><span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<br><span class="hljs-number"><code class="language-hljs n1ql"><span class="hljs-keyword">SELECT</span><br>a.id,<br>a.NAME,<br>group_concat( <span class="hljs-keyword">DISTINCT</span> ( b.NAME ) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> b.id SEPARATOR <span class="hljs-string">'、'</span> ) managerNames<br><span class="hljs-keyword">FROM</span><br>a<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> b <span class="hljs-keyword">ON</span> json_contains( a.manager_ids, <span class="hljs-keyword">cast</span>(b.id <span class="hljs-keyword">as</span> char) )<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br><span class="hljs-symbol">`a`</span>.<span class="hljs-symbol">`id`</span> <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br><span class="hljs-symbol">`a`</span>.<span class="hljs-symbol">`id`</span> <span class="hljs-keyword">ASC</span> <br><span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<br><span class="hljs-number">10</span><br></code></pre></td></tr></tbody></table></figure><p>综上，对于多id存储，还是使用逗号分隔的字符串会好一些，json数据使用json类型来存储会更方便。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——中介者模式</title>
      <link href="/posts/mediator-pattern.html"/>
      <url>/posts/mediator-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下中介者模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Mediator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createMediator</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">workAll</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMediator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Mediator</span></span>{<br>    <span class="hljs-keyword">private</span> User <span class="hljs-variable">$user1</span>,<span class="hljs-variable">$user2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUser1</span>(<span class="hljs-params"></span>): <span class="hljs-title">User</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user1;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUser2</span>(<span class="hljs-params"></span>): <span class="hljs-title">User</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user2;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createMediator</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;user1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User1</span>(<span class="hljs-variable language_">$this</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;user2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User2</span>(<span class="hljs-variable language_">$this</span>);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">workAll</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;user1-&gt;<span class="hljs-title function_ invoke__">work</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;user2-&gt;<span class="hljs-title function_ invoke__">work</span>();<br>    }<br>}<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>{<br>    <span class="hljs-keyword">private</span> Mediator <span class="hljs-variable">$mediator</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Mediator <span class="hljs-variable">$mediator</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;mediator = <span class="hljs-variable">$mediator</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMediator</span>(<span class="hljs-params"></span>): <span class="hljs-title">Mediator</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;mediator;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">work</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Mediator <span class="hljs-variable">$mediator</span></span>)</span>{<br>        <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>(<span class="hljs-variable">$mediator</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">work</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"user1 exe!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Mediator <span class="hljs-variable">$mediator</span></span>)</span>{<br>        <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>(<span class="hljs-variable">$mediator</span>);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">work</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"user2 exe!"</span> . PHP_EOL;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$mediator</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMediator</span>();<br><span class="hljs-variable">$mediator</span>-&gt;<span class="hljs-title function_ invoke__">createMediator</span>();<br><span class="hljs-variable">$mediator</span>-&gt;<span class="hljs-title function_ invoke__">workAll</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * user1 exe!</span><br><span class="hljs-comment"> * user2 exe!</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Mediator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createMediator</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">workAll</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMediator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Mediator</span></span>{<br>    <span class="hljs-keyword">private</span> User <span class="hljs-variable">$user1</span>,<span class="hljs-variable">$user2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUser1</span>(<span class="hljs-params"></span>): <span class="hljs-title">User</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user1;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUser2</span>(<span class="hljs-params"></span>): <span class="hljs-title">User</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user2;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createMediator</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;user1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User1</span>(<span class="hljs-variable language_">$this</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;user2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User2</span>(<span class="hljs-variable language_">$this</span>);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">workAll</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;user1-&gt;<span class="hljs-title function_ invoke__">work</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;user2-&gt;<span class="hljs-title function_ invoke__">work</span>();<br>    }<br>}<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>{<br>    <span class="hljs-keyword">private</span> Mediator <span class="hljs-variable">$mediator</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Mediator <span class="hljs-variable">$mediator</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;mediator = <span class="hljs-variable">$mediator</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMediator</span>(<span class="hljs-params"></span>): <span class="hljs-title">Mediator</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;mediator;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">work</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Mediator <span class="hljs-variable">$mediator</span></span>)</span>{<br>        <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>(<span class="hljs-variable">$mediator</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">work</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"user1 exe!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Mediator <span class="hljs-variable">$mediator</span></span>)</span>{<br>        <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>(<span class="hljs-variable">$mediator</span>);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">work</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"user2 exe!"</span> . PHP_EOL;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$mediator</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMediator</span>();<br><span class="hljs-variable">$mediator</span>-&gt;<span class="hljs-title function_ invoke__">createMediator</span>();<br><span class="hljs-variable">$mediator</span>-&gt;<span class="hljs-title function_ invoke__">workAll</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * user1 exe!</span><br><span class="hljs-comment"> * user2 exe!</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——享元模式</title>
      <link href="/posts/flyweight-pattern.html"/>
      <url>/posts/flyweight-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。<br>  FlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象，FlyWeight是超类。一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下享元模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConnectionPool</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">array</span> <span class="hljs-variable">$pool</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$server</span> = <span class="hljs-string">'127.0.0.1'</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">'root'</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">'root'</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$database</span> = <span class="hljs-string">'test'</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$poolSize</span> = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> ?ConnectionPool <span class="hljs-variable">$instance</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$conn</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;pool = [];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable language_">$this</span>-&gt;poolSize; <span class="hljs-variable">$i</span>++){<br>            <span class="hljs-keyword">try</span> {<br>                <span class="hljs-variable">$mysqlConn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$this</span>-&gt;server, <span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-variable">$this</span>-&gt;password);<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$mysqlConn</span>)  <span class="hljs-keyword">die</span>(<span class="hljs-string">"connect error"</span>);<br>                <span class="hljs-title function_ invoke__">mysqli_select_db</span>(<span class="hljs-variable">$mysqlConn</span>,<span class="hljs-variable">$this</span>-&gt;database);<br>                <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$mysqlConn</span>,<span class="hljs-string">'SET NAMES utf8'</span>);<br>                <span class="hljs-variable language_">$this</span>-&gt;pool[] = <span class="hljs-variable">$mysqlConn</span>;<br>            }<span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>){<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">"connect error"</span>);<br>            }<br>        }<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getConnection</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$this</span>-&gt;pool) &gt; <span class="hljs-number">0</span>){<br>            <span class="hljs-variable language_">$this</span>-&gt;conn = <span class="hljs-title function_ invoke__">array_shift</span>(<span class="hljs-variable">$this</span>-&gt;pool);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;conn;<br>        }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        }<br>    }<br>}<br><br><span class="hljs-variable">$connPool</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionPool</span>();<br><span class="hljs-variable">$conn1</span> = <span class="hljs-variable">$connPool</span>-&gt;<span class="hljs-title function_ invoke__">getConnection</span>();<br><span class="hljs-variable">$conn2</span> = <span class="hljs-variable">$connPool</span>-&gt;<span class="hljs-title function_ invoke__">getConnection</span>();<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$conn1</span>===<span class="hljs-variable">$conn2</span>);      <span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConnectionPool</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">array</span> <span class="hljs-variable">$pool</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$server</span> = <span class="hljs-string">'127.0.0.1'</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">'root'</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">'root'</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$database</span> = <span class="hljs-string">'test'</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$poolSize</span> = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> ?ConnectionPool <span class="hljs-variable">$instance</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$conn</span> = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;pool = [];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable language_">$this</span>-&gt;poolSize; <span class="hljs-variable">$i</span>++){<br>            <span class="hljs-keyword">try</span> {<br>                <span class="hljs-variable">$mysqlConn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$this</span>-&gt;server, <span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-variable">$this</span>-&gt;password);<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$mysqlConn</span>)  <span class="hljs-keyword">die</span>(<span class="hljs-string">"connect error"</span>);<br>                <span class="hljs-title function_ invoke__">mysqli_select_db</span>(<span class="hljs-variable">$mysqlConn</span>,<span class="hljs-variable">$this</span>-&gt;database);<br>                <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$mysqlConn</span>,<span class="hljs-string">'SET NAMES utf8'</span>);<br>                <span class="hljs-variable language_">$this</span>-&gt;pool[] = <span class="hljs-variable">$mysqlConn</span>;<br>            }<span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>){<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">"connect error"</span>);<br>            }<br>        }<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getConnection</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$this</span>-&gt;pool) &gt; <span class="hljs-number">0</span>){<br>            <span class="hljs-variable language_">$this</span>-&gt;conn = <span class="hljs-title function_ invoke__">array_shift</span>(<span class="hljs-variable">$this</span>-&gt;pool);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;conn;<br>        }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        }<br>    }<br>}<br><br><span class="hljs-variable">$connPool</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionPool</span>();<br><span class="hljs-variable">$conn1</span> = <span class="hljs-variable">$connPool</span>-&gt;<span class="hljs-title function_ invoke__">getConnection</span>();<br><span class="hljs-variable">$conn2</span> = <span class="hljs-variable">$connPool</span>-&gt;<span class="hljs-title function_ invoke__">getConnection</span>();<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$conn1</span>===<span class="hljs-variable">$conn2</span>);      <span class="hljs-comment">//false</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——代理模式</title>
      <link href="/posts/proxy-pattern.html"/>
      <url>/posts/proxy-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操作，比如我们在租房子的时候回去找中介，为什么呢？因为你对该地区房屋的信息掌握的不够全面，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需要请律师，因为律师在法律方面有专长，可以替我们进行操作，表达我们的想法。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下代理模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">// 创建接口Sourceable</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-comment">// 类Source实现接口Sourceable</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Source</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"the original method!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-comment">// 代理类Proxy实现Sourceable</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">private</span> Source <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Source</span>();<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">before</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;source-&gt;<span class="hljs-title function_ invoke__">method</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">after</span>();<br>    }<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">before</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"before proxy!"</span> . PHP_EOL;<br>    }<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">after</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"after proxy!"</span> . PHP_EOL;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$source</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>();<br><span class="hljs-variable">$source</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * before proxy!</span><br><span class="hljs-comment"> * the original method!</span><br><span class="hljs-comment"> * after proxy!</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-comment">// 创建接口Sourceable</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-comment">// 类Source实现接口Sourceable</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Source</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"the original method!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-comment">// 代理类Proxy实现Sourceable</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">private</span> Source <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Source</span>();<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">before</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;source-&gt;<span class="hljs-title function_ invoke__">method</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">after</span>();<br>    }<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">before</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"before proxy!"</span> . PHP_EOL;<br>    }<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">after</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"after proxy!"</span> . PHP_EOL;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$source</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>();<br><span class="hljs-variable">$source</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * before proxy!</span><br><span class="hljs-comment"> * the original method!</span><br><span class="hljs-comment"> * after proxy!</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：<br>    1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。<br>    2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——单例模式</title>
      <link href="/posts/singleton-pattern.html"/>
      <url>/posts/singleton-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。<br>单例模式适用于经常被访问的对象，或是创建和销毁需要调用大量资源和时间的对象，使用单例模式可以避免频繁创建和销毁对象。单例模式的常用实现方法有 4 种：饿汉模式、懒汉模式、静态内部类和枚举。从写法的简洁性、线程安全性和代码的易懂性等方面综合来看，博主比较推荐使用枚举或懒汉模式来实现单例模式。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下单例模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>{<br>    <span class="hljs-comment">//持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> ?Singleton <span class="hljs-variable">$instance</span>=<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 禁止被实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{}<br><br>    <span class="hljs-comment">// 禁止被克隆</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>{}<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>): <span class="hljs-title">Singleton</span></span>{<br>        <span class="hljs-comment">//if (!self::$instance){    有线程安全问题</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">self</span>){<br>            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>();<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>{<br>    <span class="hljs-comment">//持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> ?Singleton <span class="hljs-variable">$instance</span>=<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 禁止被实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{}<br><br>    <span class="hljs-comment">// 禁止被克隆</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>{}<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>): <span class="hljs-title">Singleton</span></span>{<br>        <span class="hljs-comment">//if (!self::$instance){    有线程安全问题</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">self</span>){<br>            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>();<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>如果使用<code>if (!self::$instance){ </code>会有线程安全问题</p><ul><li>a. A、B线程同时进入了getInstance </li><li>b. A首先进入if判断，由于instance为null，所以它执行self::$instance = new self();</li><li>c. 由于内存的优化机制，会先划出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时内存没有开始初始化这个实例），然后A离开了if代码块。</li><li>d. B进入if判断，由于instance此时不是null，因此它马上离开了if代码块并将结果返回给调用该方法的程序。</li><li>e. 此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。<br>改为<code>if (!self::$instance instanceof self){</code>即可</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>单例模式有几个好处：<br>    1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。<br>    2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。<br>    3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——原型模式</title>
      <link href="/posts/prototype-pattern.html"/>
      <url>/posts/prototype-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。<br>  <img src="/images/prototype-pattern-1.png" alt=""></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下原型模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">// 定义了一个原型</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Prototype</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$v</span> = <span class="hljs-string">'clone'</span>.PHP_EOL;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'create'</span>.PHP_EOL;<br>    }<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcretePrototype1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Prototype</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>{<br><br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"><span class="hljs-variable">$param</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;v = <span class="hljs-variable">$param</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcretePrototype2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Prototype</span></span>{<br>    <span class="hljs-comment">//当外部使用clone关键字进行对象克隆时，直接就会进入这个魔术方法中。</span><br>    <span class="hljs-comment">//在这个魔术方法里面我们可以对属性进行处理，特别是针对引用属性进行一些独特的处理。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;v = <span class="hljs-string">'clone 2'</span>;<br>    }<br>}<br><br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype1</span>();<br><span class="hljs-variable">$p</span>-&gt;<span class="hljs-title function_ invoke__">init</span>(<span class="hljs-string">'hello'</span>);<br><span class="hljs-variable">$p1</span> = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$p</span>;    <span class="hljs-comment">// ConcretePrototype1的__construct不会被执行</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$p</span>-&gt;v.<span class="hljs-string">'=='</span>.<span class="hljs-variable">$p1</span>-&gt;v;     <span class="hljs-comment">// output: create hello==hello</span><br><br><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype2</span>();<br><span class="hljs-variable">$p2</span> = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$p</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$p</span>-&gt;v.<span class="hljs-string">'=='</span>.<span class="hljs-variable">$p2</span>-&gt;v;     <span class="hljs-comment">// output: create clone ==clone 2</span><br><br><span class="hljs-comment">// 浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-comment">// 定义了一个原型</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Prototype</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$v</span> = <span class="hljs-string">'clone'</span>.PHP_EOL;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'create'</span>.PHP_EOL;<br>    }<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcretePrototype1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Prototype</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>{<br><br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"><span class="hljs-variable">$param</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;v = <span class="hljs-variable">$param</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcretePrototype2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Prototype</span></span>{<br>    <span class="hljs-comment">//当外部使用clone关键字进行对象克隆时，直接就会进入这个魔术方法中。</span><br>    <span class="hljs-comment">//在这个魔术方法里面我们可以对属性进行处理，特别是针对引用属性进行一些独特的处理。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;v = <span class="hljs-string">'clone 2'</span>;<br>    }<br>}<br><br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype1</span>();<br><span class="hljs-variable">$p</span>-&gt;<span class="hljs-title function_ invoke__">init</span>(<span class="hljs-string">'hello'</span>);<br><span class="hljs-variable">$p1</span> = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$p</span>;    <span class="hljs-comment">// ConcretePrototype1的__construct不会被执行</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$p</span>-&gt;v.<span class="hljs-string">'=='</span>.<span class="hljs-variable">$p1</span>-&gt;v;     <span class="hljs-comment">// output: create hello==hello</span><br><br><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype2</span>();<br><span class="hljs-variable">$p2</span> = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$p</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$p</span>-&gt;v.<span class="hljs-string">'=='</span>.<span class="hljs-variable">$p2</span>-&gt;v;     <span class="hljs-comment">// output: create clone ==clone 2</span><br><br><span class="hljs-comment">// 浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</span><br><span class="hljs-comment">// 深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  特点：减少创建对象时的开销</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——命令模式</title>
      <link href="/posts/command-pattern.html"/>
      <url>/posts/command-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下命令模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">// 创建接口Command</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Command</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exe</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Receiver</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"command received!"</span>;<br>    }<br>}<br><br><span class="hljs-comment">// 类MyCommand实现接口Command</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span></span>{<br>    <span class="hljs-keyword">private</span> Receiver <span class="hljs-variable">$receiver</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Receiver <span class="hljs-variable">$receiver</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;receiver = <span class="hljs-variable">$receiver</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exe</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;receiver-&gt;<span class="hljs-title function_ invoke__">action</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoker</span></span>{<br>    <span class="hljs-keyword">private</span> Command <span class="hljs-variable">$command</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Command <span class="hljs-variable">$command</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;command = <span class="hljs-variable">$command</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;command-&gt;<span class="hljs-title function_ invoke__">exe</span>();<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$receiver</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Receiver</span>();<br><span class="hljs-variable">$cmd</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCommand</span>(<span class="hljs-variable">$receiver</span>);<br><span class="hljs-variable">$invoker</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invoker</span>(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-variable">$invoker</span>-&gt;<span class="hljs-title function_ invoke__">action</span>();<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-comment">// 创建接口Command</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Command</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exe</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Receiver</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"command received!"</span>;<br>    }<br>}<br><br><span class="hljs-comment">// 类MyCommand实现接口Command</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span></span>{<br>    <span class="hljs-keyword">private</span> Receiver <span class="hljs-variable">$receiver</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Receiver <span class="hljs-variable">$receiver</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;receiver = <span class="hljs-variable">$receiver</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exe</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;receiver-&gt;<span class="hljs-title function_ invoke__">action</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoker</span></span>{<br>    <span class="hljs-keyword">private</span> Command <span class="hljs-variable">$command</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Command <span class="hljs-variable">$command</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;command = <span class="hljs-variable">$command</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;command-&gt;<span class="hljs-title function_ invoke__">exe</span>();<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$receiver</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Receiver</span>();<br><span class="hljs-variable">$cmd</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCommand</span>(<span class="hljs-variable">$receiver</span>);<br><span class="hljs-variable">$invoker</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invoker</span>(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-variable">$invoker</span>-&gt;<span class="hljs-title function_ invoke__">action</span>();<br><span class="hljs-comment">// output:  command received!</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——备忘录模式</title>
      <link href="/posts/memento-pattern.html"/>
      <url>/posts/memento-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下备忘录模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Original</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;value;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setValue</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createMemento</span>(<span class="hljs-params"></span>): <span class="hljs-title">Memento</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memento</span>(<span class="hljs-variable language_">$this</span>-&gt;value);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">restoreMemento</span>(<span class="hljs-params">Memento <span class="hljs-variable">$memento</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$memento</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memento</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;value;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setValue</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Storage</span></span>{<br>    <span class="hljs-keyword">private</span> Memento <span class="hljs-variable">$memento</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Memento <span class="hljs-variable">$memento</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;memento = <span class="hljs-variable">$memento</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMemento</span>(<span class="hljs-params"></span>): <span class="hljs-title">Memento</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;memento;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setMemento</span>(<span class="hljs-params">Memento <span class="hljs-variable">$memento</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;memento = <span class="hljs-variable">$memento</span>;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$origi</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Original</span>(<span class="hljs-string">"egg"</span>);<br><span class="hljs-variable">$storage</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Storage</span>(<span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">createMemento</span>());<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">"初始化状态为："</span> . <span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>() . PHP_EOL;<br><span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-string">"niu"</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">"修改后的状态为："</span> . <span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>() . PHP_EOL;<br><br><span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">restoreMemento</span>(<span class="hljs-variable">$storage</span>-&gt;<span class="hljs-title function_ invoke__">getMemento</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-string">"恢复后的状态为："</span> . <span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>() . PHP_EOL;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * 初始化状态为：egg</span><br><span class="hljs-comment"> * 修改后的状态为：niu</span><br><span class="hljs-comment"> * 恢复后的状态为：egg</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Original</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;value;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setValue</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createMemento</span>(<span class="hljs-params"></span>): <span class="hljs-title">Memento</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memento</span>(<span class="hljs-variable language_">$this</span>-&gt;value);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">restoreMemento</span>(<span class="hljs-params">Memento <span class="hljs-variable">$memento</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$memento</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memento</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;value;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setValue</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Storage</span></span>{<br>    <span class="hljs-keyword">private</span> Memento <span class="hljs-variable">$memento</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Memento <span class="hljs-variable">$memento</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;memento = <span class="hljs-variable">$memento</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMemento</span>(<span class="hljs-params"></span>): <span class="hljs-title">Memento</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;memento;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setMemento</span>(<span class="hljs-params">Memento <span class="hljs-variable">$memento</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;memento = <span class="hljs-variable">$memento</span>;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$origi</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Original</span>(<span class="hljs-string">"egg"</span>);<br><span class="hljs-variable">$storage</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Storage</span>(<span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">createMemento</span>());<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">"初始化状态为："</span> . <span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>() . PHP_EOL;<br><span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-string">"niu"</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">"修改后的状态为："</span> . <span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>() . PHP_EOL;<br><br><span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">restoreMemento</span>(<span class="hljs-variable">$storage</span>-&gt;<span class="hljs-title function_ invoke__">getMemento</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-string">"恢复后的状态为："</span> . <span class="hljs-variable">$origi</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>() . PHP_EOL;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * 初始化状态为：egg</span><br><span class="hljs-comment"> * 修改后的状态为：niu</span><br><span class="hljs-comment"> * 恢复后的状态为：egg</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——外观模式</title>
      <link href="/posts/facade-pattern.html"/>
      <url>/posts/facade-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口，看下类图：（我们以一个计算机的启动过程为例）</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下外观模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPU</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startup</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"cpu startup!"</span> . PHP_EOL;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shutdown</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"cpu shutdown!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memory</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startup</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"memory startup!"</span> . PHP_EOL;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shutdown</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"memory shutdown!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Disk</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startup</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"disk startup!"</span> . PHP_EOL;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shutdown</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"disk shutdown!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span></span>{<br>    <span class="hljs-keyword">private</span> CPU <span class="hljs-variable">$cpu</span>;<br>    <span class="hljs-keyword">private</span> Memory <span class="hljs-variable">$memory</span>;<br>    <span class="hljs-keyword">private</span> Disk <span class="hljs-variable">$disk</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;cpu = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CPU</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;memory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memory</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;disk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Disk</span>();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startup</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"start the computer!"</span> . PHP_EOL;<br>        <span class="hljs-variable language_">$this</span>-&gt;cpu-&gt;<span class="hljs-title function_ invoke__">startup</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;memory-&gt;<span class="hljs-title function_ invoke__">startup</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;disk-&gt;<span class="hljs-title function_ invoke__">startup</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"start computer finished!"</span> . PHP_EOL;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shutdown</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"begin to close th computer!"</span> . PHP_EOL;<br>        <span class="hljs-variable language_">$this</span>-&gt;cpu-&gt;<span class="hljs-title function_ invoke__">shutdown</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;memory-&gt;<span class="hljs-title function_ invoke__">shutdown</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;disk-&gt;<span class="hljs-title function_ invoke__">shutdown</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"computer closed!"</span> . PHP_EOL;<br>    }<br>}<br><br><br><span class="hljs-comment">//调用</span><br><span class="hljs-variable">$computer</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br><span class="hljs-variable">$computer</span>-&gt;<span class="hljs-title function_ invoke__">startup</span>();<br><span class="hljs-variable">$computer</span>-&gt;<span class="hljs-title function_ invoke__">shutdown</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">start the computer!</span><br><span class="hljs-comment">cpu startup!</span><br><span class="hljs-comment">memory startup!</span><br><span class="hljs-comment">disk startup!</span><br><span class="hljs-comment">start computer finished!</span><br><span class="hljs-comment">begin to close th computer!</span><br><span class="hljs-comment">cpu shutdown!</span><br><span class="hljs-comment">memory shutdown!</span><br><span class="hljs-comment">disk shutdown!</span><br><span class="hljs-comment">computer closed!</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPU</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startup</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"cpu startup!"</span> . PHP_EOL;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shutdown</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"cpu shutdown!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memory</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startup</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"memory startup!"</span> . PHP_EOL;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shutdown</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"memory shutdown!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Disk</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startup</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"disk startup!"</span> . PHP_EOL;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shutdown</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"disk shutdown!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span></span>{<br>    <span class="hljs-keyword">private</span> CPU <span class="hljs-variable">$cpu</span>;<br>    <span class="hljs-keyword">private</span> Memory <span class="hljs-variable">$memory</span>;<br>    <span class="hljs-keyword">private</span> Disk <span class="hljs-variable">$disk</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;cpu = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CPU</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;memory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memory</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;disk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Disk</span>();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startup</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"start the computer!"</span> . PHP_EOL;<br>        <span class="hljs-variable language_">$this</span>-&gt;cpu-&gt;<span class="hljs-title function_ invoke__">startup</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;memory-&gt;<span class="hljs-title function_ invoke__">startup</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;disk-&gt;<span class="hljs-title function_ invoke__">startup</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"start computer finished!"</span> . PHP_EOL;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shutdown</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"begin to close th computer!"</span> . PHP_EOL;<br>        <span class="hljs-variable language_">$this</span>-&gt;cpu-&gt;<span class="hljs-title function_ invoke__">shutdown</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;memory-&gt;<span class="hljs-title function_ invoke__">shutdown</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;disk-&gt;<span class="hljs-title function_ invoke__">shutdown</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"computer closed!"</span> . PHP_EOL;<br>    }<br>}<br><br><br><span class="hljs-comment">//调用</span><br><span class="hljs-variable">$computer</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br><span class="hljs-variable">$computer</span>-&gt;<span class="hljs-title function_ invoke__">startup</span>();<br><span class="hljs-variable">$computer</span>-&gt;<span class="hljs-title function_ invoke__">shutdown</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">start the computer!</span><br><span class="hljs-comment">cpu startup!</span><br><span class="hljs-comment">memory startup!</span><br><span class="hljs-comment">disk startup!</span><br><span class="hljs-comment">start computer finished!</span><br><span class="hljs-comment">begin to close th computer!</span><br><span class="hljs-comment">cpu shutdown!</span><br><span class="hljs-comment">memory shutdown!</span><br><span class="hljs-comment">disk shutdown!</span><br><span class="hljs-comment">computer closed!</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观模式！</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——工厂方法模式</title>
      <link href="/posts/factory-method-pattern.html"/>
      <url>/posts/factory-method-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  创建一个工厂接口和创建多个工厂实现类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下工厂方法模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">// 创建公共接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-comment">// 创建两个实现类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MailSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"mail send"</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmsSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"sms send"</span>;<br>    }<br>}<br><br><span class="hljs-comment">// 工厂类接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Provider</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">produce</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sender</span></span>;<br>}<br><br><span class="hljs-comment">// 实现工厂类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendMailFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Provider</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">produce</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sender</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MailSender</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendSmsFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Provider</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">produce</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sender</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsSender</span>();<br>    }<br>}<br><br><span class="hljs-comment">// test</span><br><span class="hljs-variable">$sender</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SendMailFactory</span>())-&gt;<span class="hljs-title function_ invoke__">produce</span>();<br><span class="hljs-variable">$sender</span>-&gt;<span class="hljs-title function_ invoke__">send</span>();<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-comment">// 创建公共接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-comment">// 创建两个实现类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MailSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"mail send"</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmsSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"sms send"</span>;<br>    }<br>}<br><br><span class="hljs-comment">// 工厂类接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Provider</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">produce</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sender</span></span>;<br>}<br><br><span class="hljs-comment">// 实现工厂类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendMailFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Provider</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">produce</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sender</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MailSender</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendSmsFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Provider</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">produce</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sender</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsSender</span>();<br>    }<br>}<br><br><span class="hljs-comment">// test</span><br><span class="hljs-variable">$sender</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SendMailFactory</span>())-&gt;<span class="hljs-title function_ invoke__">produce</span>();<br><span class="hljs-variable">$sender</span>-&gt;<span class="hljs-title function_ invoke__">send</span>();<br><span class="hljs-comment">// output: mail send</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  优点：扩展性好。如果需要添加个企业微信推送，只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——模板方法模式</title>
      <link href="/posts/template-method-pattern.html"/>
      <url>/posts/template-method-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下模板方法模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractCalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span>,<span class="hljs-keyword">string</span> <span class="hljs-variable">$opt</span></span>)</span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-variable">$exp</span>,<span class="hljs-variable">$opt</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">cal</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>],<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>]);<br>    }<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cal</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$num1</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$num2</span></span>): <span class="hljs-title">int</span></span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">split</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$opt</span></span>): <span class="hljs-title">array</span></span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-variable">$opt</span>,<span class="hljs-variable">$exp</span>);<br>        <span class="hljs-keyword">return</span> [<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>]),<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>])];<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cal</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$num1</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$num2</span></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$num1</span> + <span class="hljs-variable">$num2</span>;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$exp</span> = <span class="hljs-string">'2+8'</span>;<br><span class="hljs-variable">$cal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plus</span>();<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$cal</span>-&gt;<span class="hljs-title function_ invoke__">calculate</span>(<span class="hljs-variable">$exp</span>, <span class="hljs-string">'+'</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractCalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span>,<span class="hljs-keyword">string</span> <span class="hljs-variable">$opt</span></span>)</span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-variable">$exp</span>,<span class="hljs-variable">$opt</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">cal</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>],<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>]);<br>    }<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cal</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$num1</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$num2</span></span>): <span class="hljs-title">int</span></span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">split</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$opt</span></span>): <span class="hljs-title">array</span></span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-variable">$opt</span>,<span class="hljs-variable">$exp</span>);<br>        <span class="hljs-keyword">return</span> [<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>]),<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>])];<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cal</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$num1</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$num2</span></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$num1</span> + <span class="hljs-variable">$num2</span>;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$exp</span> = <span class="hljs-string">'2+8'</span>;<br><span class="hljs-variable">$cal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plus</span>();<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$cal</span>-&gt;<span class="hljs-title function_ invoke__">calculate</span>(<span class="hljs-variable">$exp</span>, <span class="hljs-string">'+'</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-comment">// output:  10</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——桥接模式</title>
      <link href="/posts/bridge-pattern.html"/>
      <url>/posts/bridge-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下桥接模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">// 定义接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-comment">// 定义两个实现类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceSub1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"this is first sub!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceSub2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"this is the second sub!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-comment">// 定义一个桥，持有Sourceable的一个实例</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bridge</span></span>{<br>    <span class="hljs-keyword">private</span> Sourceable <span class="hljs-variable">$source</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source-&gt;<span class="hljs-title function_ invoke__">method</span>();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMSource</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sourceable</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setSource</span>(<span class="hljs-params">Sourceable <span class="hljs-variable">$source</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$source</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBridge</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bridge</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getMSource</span>()-&gt;<span class="hljs-title function_ invoke__">method</span>();<br>    }<br>}<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$bridge</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBridge</span>();<br><br><span class="hljs-variable">$source1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceSub1</span>();<br><span class="hljs-variable">$bridge</span>-&gt;<span class="hljs-title function_ invoke__">setSource</span>(<span class="hljs-variable">$source1</span>);<br><span class="hljs-variable">$bridge</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><br><span class="hljs-variable">$source2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceSub2</span>();<br><span class="hljs-variable">$bridge</span>-&gt;<span class="hljs-title function_ invoke__">setSource</span>(<span class="hljs-variable">$source2</span>);<br><span class="hljs-variable">$bridge</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><span class="hljs-comment">// 这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment">this is first sub!</span><br><span class="hljs-comment">this is the second sub!</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-comment">// 定义接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-comment">// 定义两个实现类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceSub1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"this is first sub!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceSub2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"this is the second sub!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-comment">// 定义一个桥，持有Sourceable的一个实例</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bridge</span></span>{<br>    <span class="hljs-keyword">private</span> Sourceable <span class="hljs-variable">$source</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source-&gt;<span class="hljs-title function_ invoke__">method</span>();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMSource</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sourceable</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setSource</span>(<span class="hljs-params">Sourceable <span class="hljs-variable">$source</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$source</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBridge</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bridge</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getMSource</span>()-&gt;<span class="hljs-title function_ invoke__">method</span>();<br>    }<br>}<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$bridge</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBridge</span>();<br><br><span class="hljs-variable">$source1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceSub1</span>();<br><span class="hljs-variable">$bridge</span>-&gt;<span class="hljs-title function_ invoke__">setSource</span>(<span class="hljs-variable">$source1</span>);<br><span class="hljs-variable">$bridge</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><br><span class="hljs-variable">$source2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceSub2</span>();<br><span class="hljs-variable">$bridge</span>-&gt;<span class="hljs-title function_ invoke__">setSource</span>(<span class="hljs-variable">$source2</span>);<br><span class="hljs-variable">$bridge</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><span class="hljs-comment">// 这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment">this is first sub!</span><br><span class="hljs-comment">this is the second sub!</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——状态模式</title>
      <link href="/posts/state-pattern.html"/>
      <url>/posts/state-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下状态模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">State</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;value;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setValue</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"execute the first opt!"</span> . PHP_EOL;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"execute the second opt!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Context</span></span>{<br>    <span class="hljs-keyword">private</span> State <span class="hljs-variable">$state</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">State <span class="hljs-variable">$state</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;state = <span class="hljs-variable">$state</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getState</span>(<span class="hljs-params"></span>): <span class="hljs-title">State</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;state;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">State <span class="hljs-variable">$state</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;state = <span class="hljs-variable">$state</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;state-&gt;<span class="hljs-title function_ invoke__">getValue</span>() == <span class="hljs-string">'state1'</span>){<br>            <span class="hljs-variable language_">$this</span>-&gt;state-&gt;<span class="hljs-title function_ invoke__">method1</span>();;<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;state-&gt;<span class="hljs-title function_ invoke__">getValue</span>() == <span class="hljs-string">'state2'</span>){<br>            <span class="hljs-variable language_">$this</span>-&gt;state-&gt;<span class="hljs-title function_ invoke__">method2</span>();<br>        }<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$state</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">State</span>();<br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(<span class="hljs-variable">$state</span>);<br><br><span class="hljs-variable">$state</span>-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-string">'state1'</span>);<br><span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><br><span class="hljs-variable">$state</span>-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-string">'state2'</span>);<br><span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * execute the first opt!</span><br><span class="hljs-comment"> * execute the second opt!</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">State</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;value;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setValue</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$value</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"execute the first opt!"</span> . PHP_EOL;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"execute the second opt!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Context</span></span>{<br>    <span class="hljs-keyword">private</span> State <span class="hljs-variable">$state</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">State <span class="hljs-variable">$state</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;state = <span class="hljs-variable">$state</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getState</span>(<span class="hljs-params"></span>): <span class="hljs-title">State</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;state;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setState</span>(<span class="hljs-params">State <span class="hljs-variable">$state</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;state = <span class="hljs-variable">$state</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;state-&gt;<span class="hljs-title function_ invoke__">getValue</span>() == <span class="hljs-string">'state1'</span>){<br>            <span class="hljs-variable language_">$this</span>-&gt;state-&gt;<span class="hljs-title function_ invoke__">method1</span>();;<br>        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;state-&gt;<span class="hljs-title function_ invoke__">getValue</span>() == <span class="hljs-string">'state2'</span>){<br>            <span class="hljs-variable language_">$this</span>-&gt;state-&gt;<span class="hljs-title function_ invoke__">method2</span>();<br>        }<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$state</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">State</span>();<br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(<span class="hljs-variable">$state</span>);<br><br><span class="hljs-variable">$state</span>-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-string">'state1'</span>);<br><span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><br><span class="hljs-variable">$state</span>-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-string">'state2'</span>);<br><span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * execute the first opt!</span><br><span class="hljs-comment"> * execute the second opt!</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——策略模式</title>
      <link href="/posts/strategy-pattern.html"/>
      <url>/posts/strategy-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下策略模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span></span>)</span>;<br>}<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractCalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">split</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span>,<span class="hljs-keyword">string</span> <span class="hljs-variable">$opt</span></span>): <span class="hljs-title">array</span></span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-variable">$opt</span>,<span class="hljs-variable">$exp</span>);<br>        <span class="hljs-keyword">return</span> [<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>]),<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>])];<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCalculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span></span>)</span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-variable">$exp</span>,<span class="hljs-string">'+'</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>] + <span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Minus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCalculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span></span>)</span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-variable">$exp</span>, <span class="hljs-string">'-'</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>] - <span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Multiply</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCalculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span></span>)</span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-variable">$exp</span>, <span class="hljs-string">'*'</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>] * <span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$exp</span> = <span class="hljs-string">'2+8'</span>;<br><span class="hljs-variable">$cal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plus</span>();<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$cal</span>-&gt;<span class="hljs-title function_ invoke__">calculate</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ICalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span></span>)</span>;<br>}<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractCalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">split</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span>,<span class="hljs-keyword">string</span> <span class="hljs-variable">$opt</span></span>): <span class="hljs-title">array</span></span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-variable">$opt</span>,<span class="hljs-variable">$exp</span>);<br>        <span class="hljs-keyword">return</span> [<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>]),<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>])];<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCalculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span></span>)</span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-variable">$exp</span>,<span class="hljs-string">'+'</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>] + <span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Minus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCalculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span></span>)</span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-variable">$exp</span>, <span class="hljs-string">'-'</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>] - <span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Multiply</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractCalculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ICalculator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$exp</span></span>)</span>{<br>        <span class="hljs-variable">$arr</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-variable">$exp</span>, <span class="hljs-string">'*'</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>] * <span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$exp</span> = <span class="hljs-string">'2+8'</span>;<br><span class="hljs-variable">$cal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plus</span>();<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$cal</span>-&gt;<span class="hljs-title function_ invoke__">calculate</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <br><span class="hljs-comment">// output:  10</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——简单工厂方法模式</title>
      <link href="/posts/simple-factory-pattern.html"/>
      <url>/posts/simple-factory-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。<br>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看下关系图：<br><img src="/images/simple-factory-pattern-1.jpg" alt=""></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面讲解下静态工厂方法模式的代码实现</p><ol><li>创建公共接口<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li>创建实现类<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MailSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"mail send"</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmsSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">print</span> <span class="hljs-string"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MailSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"mail send"</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmsSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sender</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"sms send"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li>创建工厂类<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendFactory</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">produceMail</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sender</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MailSender</span>();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">produceSms</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sender</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendFactory</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">produceMail</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sender</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MailSender</span>();<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">produceSms</span>(<span class="hljs-params"></span>): <span class="hljs-title">Sender</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsSender</span>();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ul><li><p>我们来测试下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryTest</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable">$sender</span> = <span class="hljs-title class_">SendFactory</span>::<span class="hljs-title function_ invoke__">produceSms</span>();<br>        <span class="hljs-variable">$sender</span>-&gt;<span class="hljs-title function_ invoke__"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryTest</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable">$sender</span> = <span class="hljs-title class_">SendFactory</span>::<span class="hljs-title function_ invoke__">produceSms</span>();<br>        <span class="hljs-variable">$sender</span>-&gt;<span class="hljs-title function_ invoke__">send</span>();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>输出结果为：</p><figure class="highlight autoit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs autoit">sms <span class="hljs-built_in"><code class="language-hljs autoit">sms <span class="hljs-built_in">send</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>缺陷：类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——装饰模式</title>
      <link href="/posts/decorator-pattern.html"/>
      <url>/posts/decorator-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下装饰模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">//Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Source</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"the original method!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Decorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">private</span> Sourceable <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Sourceable <span class="hljs-variable">$source</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$source</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"before decorator"</span> . PHP_EOL;<br>        <span class="hljs-variable language_">$this</span>-&gt;source-&gt;<span class="hljs-title function_ invoke__">method</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"after decorator"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-variable">$source</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Source</span>();<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Decorator</span>(<span class="hljs-variable">$source</span>);<br><span class="hljs-variable">$obj</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">before decorator</span><br><span class="hljs-comment">the original method!</span><br><span class="hljs-comment">after decorator</span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-comment">//Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Source</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"the original method!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Decorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">private</span> Sourceable <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Sourceable <span class="hljs-variable">$source</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$source</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"before decorator"</span> . PHP_EOL;<br>        <span class="hljs-variable language_">$this</span>-&gt;source-&gt;<span class="hljs-title function_ invoke__">method</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"after decorator"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-variable">$source</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Source</span>();<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Decorator</span>(<span class="hljs-variable">$source</span>);<br><span class="hljs-variable">$obj</span>-&gt;<span class="hljs-title function_ invoke__">method</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">before decorator</span><br><span class="hljs-comment">the original method!</span><br><span class="hljs-comment">after decorator</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  装饰器模式的应用场景：<br>    1、需要扩展一个类的功能。<br>    2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）<br>  缺点：产生过多相似的对象，不易排错！</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——组合模式</title>
      <link href="/posts/composite-pattern.html"/>
      <url>/posts/composite-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  又叫部分-整体模式,在处理类似树形结构的问题时比较方便。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下组合模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">private</span> TreeNode <span class="hljs-variable">$parent</span>;<br>    <span class="hljs-keyword">private</span> ?TreeNode <span class="hljs-variable">$children</span>=<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getParent</span>(<span class="hljs-params"></span>): <span class="hljs-title">TreeNode</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-built_in">parent</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setParent</span>(<span class="hljs-params">TreeNode <span class="hljs-variable">$parent</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-built_in">parent</span> = <span class="hljs-variable">$parent</span>;<br>    }<br><br>    <span class="hljs-comment">//添加子节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">TreeNode <span class="hljs-variable">$node</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;children = <span class="hljs-variable">$node</span>;<br>    }<br>    <span class="hljs-comment">//删除子节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">remove</span>(<span class="hljs-params">TreeNode <span class="hljs-variable">$node</span></span>)</span>{<br>        <span class="hljs-comment">//unset($this-&gt;children-&gt;{$node});</span><br>        <span class="hljs-variable language_">$this</span>-&gt;children-&gt;<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-variable">$node</span>);<br>    }<br>    <span class="hljs-comment">//取得子节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getChildren</span>(<span class="hljs-params"></span>): ?<span class="hljs-title">TreeNode</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;children;<br>    }<br>}<br><br><span class="hljs-comment">// test</span><br><span class="hljs-variable">$root</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-string">'A'</span>);<br><span class="hljs-variable">$nodeB</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-string">'B'</span>);<br><span class="hljs-variable">$nodeC</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-string">'C'</span>);<br><br><br><span class="hljs-variable">$nodeB</span>-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-variable">$nodeC</span>);<br><span class="hljs-variable">$root</span>-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-variable">$nodeB</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$root</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">"build the tree finished!"</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">TreeNode Object</span><br><span class="hljs-comment">(</span><br><span class="hljs-comment">[name:TreeNode:private] =&gt; A</span><br><span class="hljs-comment">[children:TreeNode:private] =&gt; TreeNode Object</span><br><span class="hljs-comment">(</span><br><span class="hljs-comment">[name:TreeNode:private] =&gt; B</span><br><span class="hljs-comment">[children:TreeNode:private] =&gt; TreeNode Object</span><br><span class="hljs-comment">(</span><br><span class="hljs-comment">[name:TreeNode:private] =&gt; C</span><br><span class="hljs-comment">[children:TreeNode:private] =&gt;</span><br><span class="hljs-comment">)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">)</span><br><span class="hljs-comment">build the tree finished!</span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">private</span> TreeNode <span class="hljs-variable">$parent</span>;<br>    <span class="hljs-keyword">private</span> ?TreeNode <span class="hljs-variable">$children</span>=<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getParent</span>(<span class="hljs-params"></span>): <span class="hljs-title">TreeNode</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-built_in">parent</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setParent</span>(<span class="hljs-params">TreeNode <span class="hljs-variable">$parent</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-built_in">parent</span> = <span class="hljs-variable">$parent</span>;<br>    }<br><br>    <span class="hljs-comment">//添加子节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">TreeNode <span class="hljs-variable">$node</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;children = <span class="hljs-variable">$node</span>;<br>    }<br>    <span class="hljs-comment">//删除子节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">remove</span>(<span class="hljs-params">TreeNode <span class="hljs-variable">$node</span></span>)</span>{<br>        <span class="hljs-comment">//unset($this-&gt;children-&gt;{$node});</span><br>        <span class="hljs-variable language_">$this</span>-&gt;children-&gt;<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-variable">$node</span>);<br>    }<br>    <span class="hljs-comment">//取得子节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getChildren</span>(<span class="hljs-params"></span>): ?<span class="hljs-title">TreeNode</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;children;<br>    }<br>}<br><br><span class="hljs-comment">// test</span><br><span class="hljs-variable">$root</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-string">'A'</span>);<br><span class="hljs-variable">$nodeB</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-string">'B'</span>);<br><span class="hljs-variable">$nodeC</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-string">'C'</span>);<br><br><br><span class="hljs-variable">$nodeB</span>-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-variable">$nodeC</span>);<br><span class="hljs-variable">$root</span>-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-variable">$nodeB</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$root</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">"build the tree finished!"</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">TreeNode Object</span><br><span class="hljs-comment">(</span><br><span class="hljs-comment">[name:TreeNode:private] =&gt; A</span><br><span class="hljs-comment">[children:TreeNode:private] =&gt; TreeNode Object</span><br><span class="hljs-comment">(</span><br><span class="hljs-comment">[name:TreeNode:private] =&gt; B</span><br><span class="hljs-comment">[children:TreeNode:private] =&gt; TreeNode Object</span><br><span class="hljs-comment">(</span><br><span class="hljs-comment">[name:TreeNode:private] =&gt; C</span><br><span class="hljs-comment">[children:TreeNode:private] =&gt;</span><br><span class="hljs-comment">)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">)</span><br><span class="hljs-comment">build the tree finished!</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  使用场景：将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——观察者模式</title>
      <link href="/posts/observer-pattern.html"/>
      <url>/posts/observer-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下观察者模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"observer1 has received!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"observer2 has received!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">Observer <span class="hljs-variable">$observer</span></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">del</span>(<span class="hljs-params">Observer <span class="hljs-variable">$observer</span></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">notifyObservers</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operation</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$vector</span> = [];<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">Observer <span class="hljs-variable">$observer</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;vector[] = <span class="hljs-variable">$observer</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">del</span>(<span class="hljs-params">Observer <span class="hljs-variable">$observer</span></span>)</span>{<br>        <span class="hljs-variable">$index</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-variable">$observer</span>,<span class="hljs-variable">$this</span>-&gt;vector);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;vector[<span class="hljs-variable">$index</span>]);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">notifyObservers</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;vector <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>){<br>            <span class="hljs-variable">$value</span>-&gt;<span class="hljs-title function_ invoke__">update</span>();<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySubject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSubject</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operation</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"update self!"</span> . PHP_EOL;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">notifyObservers</span>();<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$sub</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySubject</span>();<br><span class="hljs-variable">$sub</span>-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer1</span>());<br><span class="hljs-variable">$sub</span>-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer2</span>());<br><span class="hljs-variable">$sub</span>-&gt;<span class="hljs-title function_ invoke__">operation</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * update self!</span><br><span class="hljs-comment"> * observer1 has received!</span><br><span class="hljs-comment"> * observer2 has received!</span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"observer1 has received!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"observer2 has received!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">Observer <span class="hljs-variable">$observer</span></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">del</span>(<span class="hljs-params">Observer <span class="hljs-variable">$observer</span></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">notifyObservers</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operation</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$vector</span> = [];<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">Observer <span class="hljs-variable">$observer</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;vector[] = <span class="hljs-variable">$observer</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">del</span>(<span class="hljs-params">Observer <span class="hljs-variable">$observer</span></span>)</span>{<br>        <span class="hljs-variable">$index</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-variable">$observer</span>,<span class="hljs-variable">$this</span>-&gt;vector);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;vector[<span class="hljs-variable">$index</span>]);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">notifyObservers</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;vector <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>){<br>            <span class="hljs-variable">$value</span>-&gt;<span class="hljs-title function_ invoke__">update</span>();<br>        }<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySubject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSubject</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operation</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"update self!"</span> . PHP_EOL;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">notifyObservers</span>();<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$sub</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySubject</span>();<br><span class="hljs-variable">$sub</span>-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer1</span>());<br><span class="hljs-variable">$sub</span>-&gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer2</span>());<br><span class="hljs-variable">$sub</span>-&gt;<span class="hljs-title function_ invoke__">operation</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * update self!</span><br><span class="hljs-comment"> * observer1 has received!</span><br><span class="hljs-comment"> * observer2 has received!</span><br><span class="hljs-comment"> */</span><br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——解释器模式</title>
      <link href="/posts/interpreter-pattern.html"/>
      <url>/posts/interpreter-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下解释器模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Expression</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">interpret</span>(<span class="hljs-params">Context <span class="hljs-variable">$context</span></span>): <span class="hljs-title">int</span></span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plus</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Expression</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">interpret</span>(<span class="hljs-params">Context <span class="hljs-variable">$context</span></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">getNum1</span>() + <span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">getNum2</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Minus</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Expression</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">interpret</span>(<span class="hljs-params">Context <span class="hljs-variable">$context</span></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">getNum1</span>() - <span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">getNum2</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Context</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$num1</span>,<span class="hljs-variable">$num2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$num1</span>,<span class="hljs-keyword">int</span> <span class="hljs-variable">$num2</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;num1 = <span class="hljs-variable">$num1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;num2 = <span class="hljs-variable">$num2</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNum1</span>(<span class="hljs-params"></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;num1;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setNum1</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$num1</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;num1 = <span class="hljs-variable">$num1</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNum2</span>(<span class="hljs-params"></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;num2;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setNum2</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$num2</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;num2 = <span class="hljs-variable">$num2</span>;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$result</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Minus</span>())-&gt;<span class="hljs-title function_ invoke__">interpret</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>((<span class="hljs-keyword">new</span> <span class="hljs-title class_">Plus</span>())-&gt;<span class="hljs-title function_ invoke__">interpret</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(<span class="hljs-number">9</span>,<span class="hljs-number">2</span>)),<span class="hljs-number">8</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Expression</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">interpret</span>(<span class="hljs-params">Context <span class="hljs-variable">$context</span></span>): <span class="hljs-title">int</span></span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plus</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Expression</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">interpret</span>(<span class="hljs-params">Context <span class="hljs-variable">$context</span></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">getNum1</span>() + <span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">getNum2</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Minus</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Expression</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">interpret</span>(<span class="hljs-params">Context <span class="hljs-variable">$context</span></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">getNum1</span>() - <span class="hljs-variable">$context</span>-&gt;<span class="hljs-title function_ invoke__">getNum2</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Context</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$num1</span>,<span class="hljs-variable">$num2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$num1</span>,<span class="hljs-keyword">int</span> <span class="hljs-variable">$num2</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;num1 = <span class="hljs-variable">$num1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;num2 = <span class="hljs-variable">$num2</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNum1</span>(<span class="hljs-params"></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;num1;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setNum1</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$num1</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;num1 = <span class="hljs-variable">$num1</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNum2</span>(<span class="hljs-params"></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;num2;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setNum2</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$num2</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;num2 = <span class="hljs-variable">$num2</span>;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$result</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Minus</span>())-&gt;<span class="hljs-title function_ invoke__">interpret</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>((<span class="hljs-keyword">new</span> <span class="hljs-title class_">Plus</span>())-&gt;<span class="hljs-title function_ invoke__">interpret</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(<span class="hljs-number">9</span>,<span class="hljs-number">2</span>)),<span class="hljs-number">8</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-comment">// output: 3</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——访问者模式</title>
      <link href="/posts/visitor-pattern.html"/>
      <url>/posts/visitor-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下访问者模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Visitor</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">visit</span>(<span class="hljs-params">Subject <span class="hljs-variable">$sub</span></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Visitor</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">visit</span>(<span class="hljs-params">Subject <span class="hljs-variable">$sub</span></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"visit the subject："</span> . <span class="hljs-variable">$sub</span>-&gt;<span class="hljs-title function_ invoke__">getSubject</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">accept</span>(<span class="hljs-params">Visitor <span class="hljs-variable">$visitor</span></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSubject</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">accept</span>(<span class="hljs-params">Visitor <span class="hljs-variable">$visitor</span></span>)</span>{<br>        <span class="hljs-variable">$visitor</span>-&gt;<span class="hljs-title function_ invoke__">visit</span>(<span class="hljs-variable">$this</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSubject</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"love"</span>;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$visitor</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyVisitor</span>();<br><span class="hljs-variable">$sub</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySubject</span>();<br><span class="hljs-variable">$sub</span>-&gt;<span class="hljs-title function_ invoke__">accept</span>(<span class="hljs-variable">$visitor</span>);<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Visitor</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">visit</span>(<span class="hljs-params">Subject <span class="hljs-variable">$sub</span></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Visitor</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">visit</span>(<span class="hljs-params">Subject <span class="hljs-variable">$sub</span></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"visit the subject："</span> . <span class="hljs-variable">$sub</span>-&gt;<span class="hljs-title function_ invoke__">getSubject</span>();<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">accept</span>(<span class="hljs-params">Visitor <span class="hljs-variable">$visitor</span></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSubject</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">accept</span>(<span class="hljs-params">Visitor <span class="hljs-variable">$visitor</span></span>)</span>{<br>        <span class="hljs-variable">$visitor</span>-&gt;<span class="hljs-title function_ invoke__">visit</span>(<span class="hljs-variable">$this</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSubject</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"love"</span>;<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$visitor</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyVisitor</span>();<br><span class="hljs-variable">$sub</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySubject</span>();<br><span class="hljs-variable">$sub</span>-&gt;<span class="hljs-title function_ invoke__">accept</span>(<span class="hljs-variable">$visitor</span>);<br><span class="hljs-comment">// output:  visit the subject：love</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——责任链模式</title>
      <link href="/posts/chain-of-responsibility-pattern.html"/>
      <url>/posts/chain-of-responsibility-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下责任链模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Handler</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operation</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractHandler</span></span>{<br>    <span class="hljs-keyword">private</span> ?Handler <span class="hljs-variable">$handler</span>=<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHandler</span>(<span class="hljs-params"></span>): ?<span class="hljs-title">Handler</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;handler;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setHandler</span>(<span class="hljs-params">Handler <span class="hljs-variable">$handler</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;handler = <span class="hljs-variable">$handler</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Handler</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operation</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name . <span class="hljs-string">' deal!'</span> . PHP_EOL;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$handler</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getHandler</span>()) != <span class="hljs-literal">null</span>){<br>            <span class="hljs-variable">$handler</span>-&gt;<span class="hljs-title function_ invoke__">operation</span>();<br>        }<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$h1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>(<span class="hljs-string">"h1"</span>);<br><span class="hljs-variable">$h2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>(<span class="hljs-string">"h2"</span>);<br><span class="hljs-variable">$h3</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>(<span class="hljs-string">"h3"</span>);<br><br><span class="hljs-variable">$h1</span>-&gt;<span class="hljs-title function_ invoke__">setHandler</span>(<span class="hljs-variable">$h2</span>);<br><span class="hljs-variable">$h2</span>-&gt;<span class="hljs-title function_ invoke__">setHandler</span>(<span class="hljs-variable">$h3</span>);<br><br><span class="hljs-variable">$h1</span>-&gt;<span class="hljs-title function_ invoke__">operation</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * h1 deal! h2 deal! h3 deal!</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Handler</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operation</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractHandler</span></span>{<br>    <span class="hljs-keyword">private</span> ?Handler <span class="hljs-variable">$handler</span>=<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHandler</span>(<span class="hljs-params"></span>): ?<span class="hljs-title">Handler</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;handler;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setHandler</span>(<span class="hljs-params">Handler <span class="hljs-variable">$handler</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;handler = <span class="hljs-variable">$handler</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Handler</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operation</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name . <span class="hljs-string">' deal!'</span> . PHP_EOL;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$handler</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getHandler</span>()) != <span class="hljs-literal">null</span>){<br>            <span class="hljs-variable">$handler</span>-&gt;<span class="hljs-title function_ invoke__">operation</span>();<br>        }<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$h1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>(<span class="hljs-string">"h1"</span>);<br><span class="hljs-variable">$h2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>(<span class="hljs-string">"h2"</span>);<br><span class="hljs-variable">$h3</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandler</span>(<span class="hljs-string">"h3"</span>);<br><br><span class="hljs-variable">$h1</span>-&gt;<span class="hljs-title function_ invoke__">setHandler</span>(<span class="hljs-variable">$h2</span>);<br><span class="hljs-variable">$h2</span>-&gt;<span class="hljs-title function_ invoke__">setHandler</span>(<span class="hljs-variable">$h3</span>);<br><br><span class="hljs-variable">$h1</span>-&gt;<span class="hljs-title function_ invoke__">operation</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * h1 deal! h2 deal! h3 deal!</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件的设计模式</title>
      <link href="/posts/design-patterns.html"/>
      <url>/posts/design-patterns.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><ul><li><p>总原则：开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。</p></li><li><p>1、单一职责原则<br>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p></li><li><p>2、里氏替换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。<br>历史替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p></li><li><p>3、依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p></li><li><p>4、接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p></li><li><p>5、迪米特法则（最少知道原则）（Demeter Principle）<br>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p></li></ul><p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p><ul><li>6、合成复用原则（Composite Reuse Principle）<br>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</li></ul><h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h3><p>总体来说设计模式分为三大类：</p><ul><li>创建型模式，共五种：<a href="simple-factory-pattern.html" target="_blank">工厂方法模式</a>、抽象工厂模式、<a href="singleton-pattern.html" target="_blank">单例模式</a>、<a href="builder-pattern.html" target="_blank">建造者模式</a>、<a href="prototype-pattern.html" target="_blank">原型模式</a>。</li><li>结构型模式，共七种：<a href="adapter-pattern.html" target="_blank">适配器模式</a>、<a href="decorator-pattern.html" target="_blank">装饰器模式</a>、<a href="proxy-pattern.html" target="_blank">代理模式</a>、<a href="facade-pattern.html" target="_blank">外观模式</a>、<a href="bridge-pattern.html" target="_blank">桥接模式</a>、<a href="composite-pattern.html" target="_blank">组合模式</a>、<a href="flyweight-pattern.html" target="_blank">享元模式</a>。</li><li>行为型模式，共十一种：<a href="strategy-pattern.html" target="_blank">策略模式</a>、<a href="template-method-pattern.html" target="_blank">模板方法模式</a>、<a href="observer-pattern.html" target="_blank">观察者模式</a>、<a href="iterator-pattern.html" target="_blank">迭代子模式</a>、<a href="chain-of-responsibility-pattern.html" target="_blank">责任链模式</a>、<a href="command-pattern.html" target="_blank">命令模式</a>、<a href="memento-pattern.html" target="_blank">备忘录模式</a>、<a href="state-pattern.html" target="_blank">状态模式</a>、<a href="visitor-pattern.html" target="_blank">访问者模式</a>、<a href="mediator-pattern.html" target="_blank">中介者模式</a>、<a href="interpreter-pattern.html" target="_blank">解释器模式</a>。</li><li>其实还有两类：并发型模式和线程池模式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——迭代器模式</title>
      <link href="/posts/iterator-pattern.html"/>
      <url>/posts/iterator-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iterator</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$i</span></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span>(<span class="hljs-params"></span>): <span class="hljs-title">int</span></span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">previous</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasNext</span>(<span class="hljs-params"></span>): <span class="hljs-title">bool</span></span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">first</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span> = <span class="hljs-string">'ABCDE'</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iterator</span>(<span class="hljs-params"></span>): <span class="hljs-title">MyIterator</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyIterator</span>(<span class="hljs-variable language_">$this</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$i</span></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-variable">$i</span>];<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span>(<span class="hljs-params"></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;str);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span></span>{<br>    <span class="hljs-keyword">private</span> Collection <span class="hljs-variable">$collection</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$pos</span> = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Collection <span class="hljs-variable">$collection</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;collection = <span class="hljs-variable">$collection</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">previous</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;pos &gt; <span class="hljs-number">0</span>){<br>            <span class="hljs-variable language_">$this</span>-&gt;pos--;<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;collection-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;pos);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;pos &lt; <span class="hljs-variable language_">$this</span>-&gt;collection-&gt;<span class="hljs-title function_ invoke__">size</span>() - <span class="hljs-number">1</span>){<br>            <span class="hljs-variable language_">$this</span>-&gt;pos++;<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;collection-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;pos);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasNext</span>(<span class="hljs-params"></span>): <span class="hljs-title">bool</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;pos &lt; <span class="hljs-variable language_">$this</span>-&gt;collection-&gt;<span class="hljs-title function_ invoke__">size</span>() - <span class="hljs-number">1</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">first</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;collection-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;pos);<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$collection</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCollection</span>();<br><span class="hljs-variable">$it</span> = <span class="hljs-variable">$collection</span>-&gt;<span class="hljs-title function_ invoke__">iterator</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$it</span>-&gt;<span class="hljs-title function_ invoke__">hasNext</span>()){<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$it</span>-&gt;<span class="hljs-title function_ invoke__">next</span>().<span class="hljs-string">'&amp;nbsp;&amp;nbsp;'</span>;<br>}<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iterator</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$i</span></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span>(<span class="hljs-params"></span>): <span class="hljs-title">int</span></span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterator</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">previous</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasNext</span>(<span class="hljs-params"></span>): <span class="hljs-title">bool</span></span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">first</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span> = <span class="hljs-string">'ABCDE'</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iterator</span>(<span class="hljs-params"></span>): <span class="hljs-title">MyIterator</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyIterator</span>(<span class="hljs-variable language_">$this</span>);<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$i</span></span>): <span class="hljs-title">string</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-variable">$i</span>];<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span>(<span class="hljs-params"></span>): <span class="hljs-title">int</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;str);<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span></span>{<br>    <span class="hljs-keyword">private</span> Collection <span class="hljs-variable">$collection</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$pos</span> = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Collection <span class="hljs-variable">$collection</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;collection = <span class="hljs-variable">$collection</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">previous</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;pos &gt; <span class="hljs-number">0</span>){<br>            <span class="hljs-variable language_">$this</span>-&gt;pos--;<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;collection-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;pos);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;pos &lt; <span class="hljs-variable language_">$this</span>-&gt;collection-&gt;<span class="hljs-title function_ invoke__">size</span>() - <span class="hljs-number">1</span>){<br>            <span class="hljs-variable language_">$this</span>-&gt;pos++;<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;collection-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;pos);<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasNext</span>(<span class="hljs-params"></span>): <span class="hljs-title">bool</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;pos &lt; <span class="hljs-variable language_">$this</span>-&gt;collection-&gt;<span class="hljs-title function_ invoke__">size</span>() - <span class="hljs-number">1</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">first</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;collection-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;pos);<br>    }<br>}<br><br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$collection</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCollection</span>();<br><span class="hljs-variable">$it</span> = <span class="hljs-variable">$collection</span>-&gt;<span class="hljs-title function_ invoke__">iterator</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$it</span>-&gt;<span class="hljs-title function_ invoke__">hasNext</span>()){<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$it</span>-&gt;<span class="hljs-title function_ invoke__">next</span>().<span class="hljs-string">'&amp;nbsp;&amp;nbsp;'</span>;<br>}<br><span class="hljs-comment">// output: A  B  C  D  E</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——适配器模式</title>
      <link href="/posts/adapter-pattern.html"/>
      <url>/posts/adapter-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="类的适配器模式"><a href="#类的适配器模式" class="headerlink" title="类的适配器模式"></a>类的适配器模式</h4><p>  核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口是Targetable，通过Adapter类，将Source的功能扩展到Targetable里</p><p>示例<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Source</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'this is original method!'</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Targetable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-comment">//Adapter类继承Source类，实现Targetable接口，这样Targetable接口的实现类就具有了Source类的功能。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Source</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Targetable</span> </span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'this is the targetable method!'</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$target</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adapter</span>();<br><span class="hljs-variable">$target</span>-&gt;<span class="hljs-title function_ invoke__">method1</span>();<br><span class="hljs-variable">$target</span>-&gt;<span class="hljs-title function_ invoke__">method2</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * this is original method!</span><br><span class="hljs-comment"> * this is the targetable method!</span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Source</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'this is original method!'</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Targetable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-comment">//Adapter类继承Source类，实现Targetable接口，这样Targetable接口的实现类就具有了Source类的功能。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Source</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Targetable</span> </span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'this is the targetable method!'</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$target</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adapter</span>();<br><span class="hljs-variable">$target</span>-&gt;<span class="hljs-title function_ invoke__">method1</span>();<br><span class="hljs-variable">$target</span>-&gt;<span class="hljs-title function_ invoke__">method2</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * this is original method!</span><br><span class="hljs-comment"> * this is the targetable method!</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></tbody></table></figure><p></p><h4 id="对象的适配器模式"><a href="#对象的适配器模式" class="headerlink" title="对象的适配器模式"></a>对象的适配器模式</h4><p>  与类的适配器模式大体相同，只是适配的方法不同。</p><p>示例<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Source</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'this is original method!'</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Targetable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-comment">//Adapter类不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Wrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Targetable</span> </span>{<br>    <span class="hljs-keyword">private</span> Source <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Source <span class="hljs-variable">$source</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$source</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'this is the targetable method!'</span> . PHP_EOL;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source-&gt;<span class="hljs-title function_ invoke__">method1</span>();<br>    }<br>}<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$source</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Source</span>();<br><span class="hljs-variable">$target</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Wrapper</span>(<span class="hljs-variable">$source</span>);<br><span class="hljs-variable">$target</span>-&gt;<span class="hljs-title function_ invoke__">method1</span>();<br><span class="hljs-variable">$target</span>-&gt;<span class="hljs-title function_ invoke__">method2</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * this is original method!</span><br><span class="hljs-comment"> * this is the targetable method!</span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Source</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'this is original method!'</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Targetable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-comment">//Adapter类不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Wrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Targetable</span> </span>{<br>    <span class="hljs-keyword">private</span> Source <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Source <span class="hljs-variable">$source</span></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$source</span>;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'this is the targetable method!'</span> . PHP_EOL;<br>    }<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;source-&gt;<span class="hljs-title function_ invoke__">method1</span>();<br>    }<br>}<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable">$source</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Source</span>();<br><span class="hljs-variable">$target</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Wrapper</span>(<span class="hljs-variable">$source</span>);<br><span class="hljs-variable">$target</span>-&gt;<span class="hljs-title function_ invoke__">method1</span>();<br><span class="hljs-variable">$target</span>-&gt;<span class="hljs-title function_ invoke__">method2</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * this is original method!</span><br><span class="hljs-comment"> * this is the targetable method!</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><p></p><h4 id="接口的适配器模式"><a href="#接口的适配器模式" class="headerlink" title="接口的适配器模式"></a>接口的适配器模式</h4><p>  接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。</p><p>示例<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Wrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{}<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>{}<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceSub1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Wrapper</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"the sourceable interface's first Sub1!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceSub2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Wrapper</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"ths sourceable interface's second Sub2!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-variable">$source1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceSub1</span>();<br><span class="hljs-variable">$source2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceSub2</span>();<br><span class="hljs-variable">$source1</span>-&gt;<span class="hljs-title function_ invoke__">method1</span>();<br><span class="hljs-variable">$source1</span>-&gt;<span class="hljs-title function_ invoke__">method2</span>();<br><span class="hljs-variable">$source2</span>-&gt;<span class="hljs-title function_ invoke__">method1</span>();<br><span class="hljs-variable">$source2</span>-&gt;<span class="hljs-title function_ invoke__">method2</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * the sourceable interface's first Sub1!</span><br><span class="hljs-comment"> * ths sourceable interface's second Sub2!</span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>;<br>}<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Wrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sourceable</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{}<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>{}<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceSub1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Wrapper</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method1</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"the sourceable interface's first Sub1!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceSub2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Wrapper</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">method2</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">"ths sourceable interface's second Sub2!"</span> . PHP_EOL;<br>    }<br>}<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-variable">$source1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceSub1</span>();<br><span class="hljs-variable">$source2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceSub2</span>();<br><span class="hljs-variable">$source1</span>-&gt;<span class="hljs-title function_ invoke__">method1</span>();<br><span class="hljs-variable">$source1</span>-&gt;<span class="hljs-title function_ invoke__">method2</span>();<br><span class="hljs-variable">$source2</span>-&gt;<span class="hljs-title function_ invoke__">method1</span>();<br><span class="hljs-variable">$source2</span>-&gt;<span class="hljs-title function_ invoke__">method2</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * output:</span><br><span class="hljs-comment"> * the sourceable interface's first Sub1!</span><br><span class="hljs-comment"> * ths sourceable interface's second Sub2!</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>  类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。<br>  对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。<br>  接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis笔记</title>
      <link href="/posts/redis-note.html"/>
      <url>/posts/redis-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装redis客户端"><a href="#安装redis客户端" class="headerlink" title="安装redis客户端"></a>安装redis客户端</h3><p><code>yum install redis</code></p><h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><p><code>info</code><br><img src="/images/redis_note_1.png" alt=""></p><h3 id="通过命令行方式连接redis"><a href="#通过命令行方式连接redis" class="headerlink" title="通过命令行方式连接redis"></a>通过命令行方式连接redis</h3><p><code>redis-cli -h host -p port -a password</code><br>host:远程redis服务器host<br>port:远程redis服务端口<br>password:远程redis服务密码（无密码的的话就不需要-a参数了）<br><img src="/images/redis_note_2.png" alt=""></p><h3 id="redis执行lua脚本"><a href="#redis执行lua脚本" class="headerlink" title="redis执行lua脚本"></a>redis执行lua脚本</h3><p><img src="/images/redis_note_3.png" alt=""><br><img src="/images/redis_note_4.png" alt=""></p><h3 id="monitor监控"><a href="#monitor监控" class="headerlink" title="monitor监控"></a>monitor监控</h3><p>在项目中有时候需要查看某个redis数据的情况，可以使用monitor来监控<br><img src="/images/redis_monitor_1.png" alt=""><br>上述代码是在redis里监控key包含<code>pay_center_pay_methods</code>的信息，发现在db3里有被get一次。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm常用快捷键</title>
      <link href="/posts/phpstorm-quick-key.html"/>
      <url>/posts/phpstorm-quick-key.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="删除某行"><a href="#删除某行" class="headerlink" title="删除某行"></a>删除某行</h3><p>ctrl+Y</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决phpStorm无法显示目录结构的问题</title>
      <link href="/posts/phpstorm-show-dir.html"/>
      <url>/posts/phpstorm-show-dir.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>问题：PhpStorm侧边栏Project里面只显示文件不显示文件夹<br><img src="/images/phpstorm_show_dir_1.png" alt=""></p><p>解决：删除项目根目录下的.idea文件夹，重启Phpstorm打开项目目录。Alt + 1调出左侧的目录<br><img src="/images/phpstorm_show_dir_2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm使用笔记</title>
      <link href="/posts/phpstorm-notes.html"/>
      <url>/posts/phpstorm-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="phpStorm显示类的函数或方法列表"><a href="#phpStorm显示类的函数或方法列表" class="headerlink" title="phpStorm显示类的函数或方法列表"></a>phpStorm显示类的函数或方法列表</h4><p> 点击左下方的Structure即可<br><img src="/images/phpstorm_notes_1.png" alt=""></p><h4 id="设置在新窗口打开项目"><a href="#设置在新窗口打开项目" class="headerlink" title="设置在新窗口打开项目"></a>设置在新窗口打开项目</h4><p> 在File=&gt;Settings=&gt;Appearance &amp; Behavior=&gt;System Settings中设置<br><img src="/images/phpstorm_notes_2.png" alt=""></p><h4 id="修改字体的风格和大小"><a href="#修改字体的风格和大小" class="headerlink" title="修改字体的风格和大小"></a>修改字体的风格和大小</h4><p> 在File=&gt;Setting=&gt;Editor/Font中设置<br><img src="/images/phpstorm_notes_3.png" alt=""></p><h4 id="在phpstorm中写lua"><a href="#在phpstorm中写lua" class="headerlink" title="在phpstorm中写lua"></a>在phpstorm中写lua</h4><p> 可以安装插件<a href="https://github.com/EmmyLua/IntelliJ-EmmyLua">EmmyLua</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS命令进入MySQL</title>
      <link href="/posts/use-mysql-on-dos.html"/>
      <url>/posts/use-mysql-on-dos.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-先进入mysql安装目录下的bin目录中"><a href="#1-先进入mysql安装目录下的bin目录中" class="headerlink" title="1. 先进入mysql安装目录下的bin目录中"></a>1. 先进入mysql安装目录下的bin目录中</h3><p><img src="/images/doc_mysql_1.png" alt=""></p><h3 id="2-执行命令"><a href="#2-执行命令" class="headerlink" title="2. 执行命令"></a>2. 执行命令</h3><p><code>mysql -hlocalhost -uroot -p</code><br>按要求输入密码，回车即可。<br><img src="/images/doc_mysql_2.png" alt=""></p><h3 id="3-执行命令操作数据库"><a href="#3-执行命令操作数据库" class="headerlink" title="3. 执行命令操作数据库"></a>3. 执行命令操作数据库</h3><p>如：显示所有的数据库<br><img src="/images/doc_mysql_3.png" alt=""></p><h3 id="4-退出mysql数据库"><a href="#4-退出mysql数据库" class="headerlink" title="4. 退出mysql数据库"></a>4. 退出mysql数据库</h3><p>exit回车即可<br><img src="/images/doc_mysql_4.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOS命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的binlog</title>
      <link href="/posts/mysql-binlog.html"/>
      <url>/posts/mysql-binlog.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="如何查看binlog日志"><a href="#如何查看binlog日志" class="headerlink" title="如何查看binlog日志"></a>如何查看binlog日志</h3><h4 id="1-开启binlog"><a href="#1-开启binlog" class="headerlink" title="1. 开启binlog"></a>1. 开启binlog</h4><ul><li>在my.ini文件[mysqld]里添加<code>log_bin=mysql-bin</code>，值 mysql-bin 是日志的基本名或前缀名</li><li>通过mysql的变量配置表，查看二进制日志是否已开启<br><img src="/images/mysql_binlog_1.png" alt=""></li><li>查看MySQL的binlog模式<br><img src="/images/mysql_binlog_2.png" alt=""><br>在查看binlog的时候可能会遇到错误：<code>mysqlbinlog: [ERROR] unknown variable 'default-character-set=utf8'</code><br><img src="/images/mysql_binlog_3.png" alt=""><br>原因是mysqlbinlog这个工具无法识别binlog中的配置中的default-character-set=utf8这个指令。<br>两个方法可以解决这个问题<br>A. 在MySQL的配置/etc/my.cnf中将<code>default-character-set=utf8</code> 修改为<br><code>character-set-server = utf8</code>，但是这需要重启MySQL服务，如果你的MySQL服务正在忙，那这样的代价会比较大。<br>B. 用mysqlbinlog —no-defaults mysql-bin.000001 命令打开<br><img src="/images/mysql_binlog_4.png" alt=""></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/weixin_43944305/article/details/108620849">https://blog.csdn.net/weixin_43944305/article/details/108620849</a><br><a href="https://www.kancloud.cn/wenshunbiao/wenshunbiao/1403850">https://www.kancloud.cn/wenshunbiao/wenshunbiao/1403850</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binlog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5框架where条件中含有or的使用方法</title>
      <link href="/posts/thinkphp-where.html"/>
      <url>/posts/thinkphp-where.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-直接whereOr"><a href="#1-直接whereOr" class="headerlink" title="1. 直接whereOr"></a>1. 直接whereOr</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$list</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">'tb'</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>([<span class="hljs-string">'status'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'admin_id'</span>=&gt;<span class="hljs-number">5</span>])-&gt;<span class="hljs-title function_ invoke__">whereOr</span>([<span class="hljs-string">'type'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'step'</span>=&gt;<span class="hljs-number">2</span>])-&gt;<span class="hljs-title function_ invoke__">select</span>();<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-variable">$list</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">'tb'</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>([<span class="hljs-string">'status'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'admin_id'</span>=&gt;<span class="hljs-number">5</span>])-&gt;<span class="hljs-title function_ invoke__">whereOr</span>([<span class="hljs-string">'type'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'step'</span>=&gt;<span class="hljs-number">2</span>])-&gt;<span class="hljs-title function_ invoke__">select</span>();<br><span class="hljs-comment">// 生成的sql为：select * from `tb` where `status`=1 and `admin_id`=5 or (`type`=1 or `step`=2);</span><br></code></pre></td></tr></tbody></table></figure><h3 id="2-采用闭包的方式"><a href="#2-采用闭包的方式" class="headerlink" title="2. 采用闭包的方式"></a>2. 采用闭包的方式</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$map</span> = [<span class="hljs-string">'status'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'admin_id'</span>=&gt;<span class="hljs-number">5</span>];<br><span class="hljs-variable">$orMap</span> = [<span class="hljs-string">'type'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'step'</span>=&gt;<span class="hljs-number">2</span>];<br><span class="hljs-variable">$list</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">'tb'</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(function (<span class="hljs-variable">$query</span>) <span class="hljs-keyword">use</span> ($<span class="hljs-title">map</span>) {<br>    $<span class="hljs-title">query</span>-&gt;<span class="hljs-title">where</span>($<span class="hljs-title">map</span>);<br>})-&gt;<span class="hljs-title function_ invoke__">whereOr</span>(function (<span class="hljs-variable">$query</span>) <span class="hljs-keyword">use</span> ($<span class="hljs-title">orMap</span>) {<br>    $<span class="hljs-title">query</span>-&gt;<span class="hljs-title">where</span>($<span class="hljs-title">orMap</span>);<br>})-&gt;<span class="hljs-title function_ invoke__">order</span>(<span class="hljs-string">'id desc'</span>)-&gt;<span class="hljs-title function_ invoke__">select</span>();<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-variable">$map</span> = [<span class="hljs-string">'status'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'admin_id'</span>=&gt;<span class="hljs-number">5</span>];<br><span class="hljs-variable">$orMap</span> = [<span class="hljs-string">'type'</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">'step'</span>=&gt;<span class="hljs-number">2</span>];<br><span class="hljs-variable">$list</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">'tb'</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(function (<span class="hljs-variable">$query</span>) <span class="hljs-keyword">use</span> ($<span class="hljs-title">map</span>) {<br>    $<span class="hljs-title">query</span>-&gt;<span class="hljs-title">where</span>($<span class="hljs-title">map</span>);<br>})-&gt;<span class="hljs-title function_ invoke__">whereOr</span>(function (<span class="hljs-variable">$query</span>) <span class="hljs-keyword">use</span> ($<span class="hljs-title">orMap</span>) {<br>    $<span class="hljs-title">query</span>-&gt;<span class="hljs-title">where</span>($<span class="hljs-title">orMap</span>);<br>})-&gt;<span class="hljs-title function_ invoke__">order</span>(<span class="hljs-string">'id desc'</span>)-&gt;<span class="hljs-title function_ invoke__">select</span>();<br><span class="hljs-comment">// 生成的sql为：select * from `tb` where (`status`=1 and `admin_id`=5) or (`type`=1 and `step`=2);</span><br></code></pre></td></tr></tbody></table></figure><p>一般来说，在复杂的查询里，我们更多的是使用第二种方式。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中数组内容依次赋值给变量</title>
      <link href="/posts/a1b63ab8.html"/>
      <url>/posts/a1b63ab8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在日常开发过程中，经常需要把数组中的内容依次赋值给变量，可以使用list、[]、extract来处理。</p><h3 id="1-list-var1-var2…-arr"><a href="#1-list-var1-var2…-arr" class="headerlink" title="1. list($var1,$var2…) = $arr;"></a>1. list($var1,$var2…) = $arr;</h3><p>   或者[$var1,$var2…] = $arr;<br>   将数组中的值赋给一些变量<br>   该函数只能用于索引数组，且数字索引从0开始。<br>   如果对应的数字下标，则该变量赋值为null</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>) = [<span class="hljs-string">'Jone'</span>, <span class="hljs-string">'Jam'</span>, <span class="hljs-string">'Kav'</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>);       <span class="hljs-comment">//output：string(4) "Jone" string(3) "Jam" string(3) "Kav"</span><br><br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>) = [<span class="hljs-string">'Jone'</span>, <span class="hljs-string">'Jam'</span>, <span class="hljs-string">'Kav'</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>);           <span class="hljs-comment">//output：string(4) "Jone" string(3) "Jam"</span><br><br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>) = [<span class="hljs-number">2</span> =&gt; <span class="hljs-string">'Jone'</span>, <span class="hljs-number">3</span> =&gt; <span class="hljs-string">'Jam'</span>, <span class="hljs-number">4</span> =&gt; <span class="hljs-string">'Kav'</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>);       <span class="hljs-comment">//output：NULL NULL string(4) "Jone"</span><br><br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>) = [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">4</span>, <span class="hljs-number">2</span> =&gt; <span class="hljs-string">'Jam'</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Kav'</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>);       <span class="hljs-comment"><code class="language-hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>) = [<span class="hljs-string">'Jone'</span>, <span class="hljs-string">'Jam'</span>, <span class="hljs-string">'Kav'</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>);       <span class="hljs-comment">//output：string(4) "Jone" string(3) "Jam" string(3) "Kav"</span><br><br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>) = [<span class="hljs-string">'Jone'</span>, <span class="hljs-string">'Jam'</span>, <span class="hljs-string">'Kav'</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>);           <span class="hljs-comment">//output：string(4) "Jone" string(3) "Jam"</span><br><br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>) = [<span class="hljs-number">2</span> =&gt; <span class="hljs-string">'Jone'</span>, <span class="hljs-number">3</span> =&gt; <span class="hljs-string">'Jam'</span>, <span class="hljs-number">4</span> =&gt; <span class="hljs-string">'Kav'</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>);       <span class="hljs-comment">//output：NULL NULL string(4) "Jone"</span><br><br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>) = [<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">4</span>, <span class="hljs-number">2</span> =&gt; <span class="hljs-string">'Jam'</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Kav'</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>);       <span class="hljs-comment">//output：NULL NULL string(3) "Jam"</span><br></code></pre></td></tr></tbody></table></figure><p>   list()如果需要跳过某些值<br></p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs awk"><span class="hljs-variable">$info</span> = [<span class="hljs-string">'coffee'</span>, <span class="hljs-string">'brown'</span>, <span class="hljs-string">'caffeine'</span>];<br>[,<span class="hljs-variable">$a</span>,] = <span class="hljs-variable">$info</span>;<br>var_dump(<span class="hljs-variable">$a</span>);<span class="hljs-regexp">//</span> string(<span class="hljs-number">5</span>) <span class="hljs-string"><code class="language-hljs awk"><span class="hljs-variable">$info</span> = [<span class="hljs-string">'coffee'</span>, <span class="hljs-string">'brown'</span>, <span class="hljs-string">'caffeine'</span>];<br>[,<span class="hljs-variable">$a</span>,] = <span class="hljs-variable">$info</span>;<br>var_dump(<span class="hljs-variable">$a</span>);<span class="hljs-regexp">//</span> string(<span class="hljs-number">5</span>) <span class="hljs-string">"brown"</span><br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="2-extract-array-extract-rules-prefix"><a href="#2-extract-array-extract-rules-prefix" class="headerlink" title="2. extract(array,extract_rules,prefix);"></a>2. extract(array,extract_rules,prefix);</h3><p>   从数组中将变量导入到当前的符号表<br>   该函数使用数组键名作为变量名，使用数组键值作为变量值，进行依次赋值<br></p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs awk">extract([<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">3</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Hoj'</span>]);<br>/**<br> * 在IDE中会提示错误，加上注释即可<br> * @var <span class="hljs-variable">$id</span><br> * @var <span class="hljs-variable">$name</span><br> */<br>var_dump(<span class="hljs-variable">$id</span>, <span class="hljs-variable">$name</span>);       <span class="hljs-regexp">//</span>output：int(<span class="hljs-number">3</span>) string(<span class="hljs-number">3</span>) <span class="hljs-string">"Hoj"</span><br><br>extract([<span class="hljs-number">3</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Hoj'</span>]);<br>var_dump(<span class="hljs-variable">$name</span>);            <span class="hljs-regexp">//</span>output：string(<span class="hljs-number">3</span>) <span class="hljs-string"><code class="language-hljs awk">extract([<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">3</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Hoj'</span>]);<br>/**<br> * 在IDE中会提示错误，加上注释即可<br> * @var <span class="hljs-variable">$id</span><br> * @var <span class="hljs-variable">$name</span><br> */<br>var_dump(<span class="hljs-variable">$id</span>, <span class="hljs-variable">$name</span>);       <span class="hljs-regexp">//</span>output：int(<span class="hljs-number">3</span>) string(<span class="hljs-number">3</span>) <span class="hljs-string">"Hoj"</span><br><br>extract([<span class="hljs-number">3</span>, <span class="hljs-string">'name'</span> =&gt; <span class="hljs-string">'Hoj'</span>]);<br>var_dump(<span class="hljs-variable">$name</span>);            <span class="hljs-regexp">//</span>output：string(<span class="hljs-number">3</span>) <span class="hljs-string">"Hoj"</span><br></code></pre></td></tr></tbody></table></figure><br>总结：一般索引数组用list，关联数组用extract。<p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下快速拆分txt文件</title>
      <link href="/posts/windows-quick-split-file.html"/>
      <url>/posts/windows-quick-split-file.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时候，需要把一个大的txt文件拆分为多个小文件，并行处理文件里的内容，来提高工作效率。下面介绍一下在windows下的拆分方法。</p><p>现在有个a.txt文件，里面有若干行内容，现要拆分为多个小文件<br><img src="/images/split_txt_1.png" alt=""></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1、在文件所在目录打开git-bash；"><a href="#1、在文件所在目录打开git-bash；" class="headerlink" title="1、在文件所在目录打开git bash；"></a>1、在文件所在目录打开git bash；</h3><h3 id="2、创建一个文件夹"><a href="#2、创建一个文件夹" class="headerlink" title="2、创建一个文件夹"></a>2、创建一个文件夹</h3><p><img src="/images/split_txt_2.png" alt=""></p><h3 id="3、执行命令"><a href="#3、执行命令" class="headerlink" title="3、执行命令"></a>3、执行命令</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><span class="hljs-built_in">split</span> -l 5 -d -a 1 a.txt tmp/m_ &amp;&amp; <span class="hljs-built_in">cd</span> tmp/ &amp;&amp; <span class="hljs-built_in">ls</span>|grep m_|xargs -n1 -i{} <span class="hljs-built_in"><code class="language-hljs bash"><span class="hljs-built_in">split</span> -l 5 -d -a 1 a.txt tmp/m_ &amp;&amp; <span class="hljs-built_in">cd</span> tmp/ &amp;&amp; <span class="hljs-built_in">ls</span>|grep m_|xargs -n1 -i{} <span class="hljs-built_in">mv</span>  {} {}.txt<br></code></pre></td></tr></tbody></table></figure><p>命令分解：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs bash">-l 5 ：按行分割，每个文件5行<br>-d ：添加数字后缀，如00,01<br>-a 1 : 用一位数据来顺序命名(从0开始)<br>tmp/ ：拆分后的文件放在tmp目录下<br>m_ ：拆分后的文件名前缀<br>&amp;&amp; <span class="hljs-built_in">cd</span> tmp/ &amp;&amp; <span class="hljs-built_in">ls</span>|grep m_|xargs -n1 -i{} <span class="hljs-built_in"><code class="language-hljs bash">-l 5 ：按行分割，每个文件5行<br>-d ：添加数字后缀，如00,01<br>-a 1 : 用一位数据来顺序命名(从0开始)<br>tmp/ ：拆分后的文件放在tmp目录下<br>m_ ：拆分后的文件名前缀<br>&amp;&amp; <span class="hljs-built_in">cd</span> tmp/ &amp;&amp; <span class="hljs-built_in">ls</span>|grep m_|xargs -n1 -i{} <span class="hljs-built_in">mv</span>  {} {}.txt ：进入tmp目录，对拆分后的文件添加扩展名txt(默认生成的文件是没有扩展名的)<br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="4、在tmp目录下就看到生成的文件了"><a href="#4、在tmp目录下就看到生成的文件了" class="headerlink" title="4、在tmp目录下就看到生成的文件了"></a>4、在tmp目录下就看到生成的文件了</h3><p><img src="/images/split_txt_3.png" alt=""></p><p>注：对xlsx文件拆分有问题</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中不太常用的函数</title>
      <link href="/posts/28294742.html"/>
      <url>/posts/28294742.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-constant"><a href="#1-constant" class="headerlink" title="1. constant()"></a>1. constant()</h3><p>   返回常量的值<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs bash">define(<span class="hljs-string">'DEV'</span>,<span class="hljs-string">'test'</span>);<br><br>var_dump(constant(<span class="hljs-string">'DEV'</span>));       //string(4) <span class="hljs-string">"test"</span>     等同于var_dump(DEV);<br>var_dump(constant(<span class="hljs-string">'SORT_ASC'</span>));  //int(4)    等同于var_dump(SORT_ASC);<br>var_dump(constant(SORT_ASC));    //NULL<br>var_dump(TEST);                  //string(4) <span class="hljs-string"><code class="language-hljs bash">define(<span class="hljs-string">'DEV'</span>,<span class="hljs-string">'test'</span>);<br><br>var_dump(constant(<span class="hljs-string">'DEV'</span>));       //string(4) <span class="hljs-string">"test"</span>     等同于var_dump(DEV);<br>var_dump(constant(<span class="hljs-string">'SORT_ASC'</span>));  //int(4)    等同于var_dump(SORT_ASC);<br>var_dump(constant(SORT_ASC));    //NULL<br>var_dump(TEST);                  //string(4) <span class="hljs-string">"TEST"</span><br></code></pre></td></tr></tbody></table></figure><br>   个人感觉作用不大，还不如直接使用常量呢，最多也就是判断常量是否被定义。<p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 中order的使用</title>
      <link href="/posts/thinkphp-order.html"/>
      <url>/posts/thinkphp-order.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前一直在使用Yii2，在查询排序时习惯了使用 SORT_DESC | SORT_ASC，今天在使用的时候发现了问题，记录一下。<br>下面这个查询没有得到预期的结果：<br></p><figure class="highlight livescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs livescript"> $<span class="hljs-keyword">list</span> = Db::name<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">'tb'</span>)</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">([<span class="hljs-string">'status'</span>=&gt;<span class="hljs-number">1</span>])</span>-&gt;</span>order<span class="hljs-function"><span class="hljs-params">([<span class="hljs-string">'create_time'</span>=&gt;SORT_DESC])</span>-&gt;</span>field<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">'id,name'</span>)</span>-&gt;</span>select();<br><span class="hljs-regexp"><code class="language-hljs livescript"> $<span class="hljs-keyword">list</span> = Db::name<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">'tb'</span>)</span>-&gt;</span>where<span class="hljs-function"><span class="hljs-params">([<span class="hljs-string">'status'</span>=&gt;<span class="hljs-number">1</span>])</span>-&gt;</span>order<span class="hljs-function"><span class="hljs-params">([<span class="hljs-string">'create_time'</span>=&gt;SORT_DESC])</span>-&gt;</span>field<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">'id,name'</span>)</span>-&gt;</span>select();<br><span class="hljs-regexp">// 输出sql为：select id,name from tb where status=1 order by create_time;</span><br></code></pre></td></tr></tbody></table></figure><p></p><p>问题在于SORT_DESC=3、SORT_ASC=4，这不符合thinkphp中order方法的传参规则，<br>可以这样使用：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs stylus"><span class="hljs-function"><span class="hljs-title">order</span><span class="hljs-params">(<span class="hljs-string">'id'</span>,<span class="hljs-string">'desc'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">order</span><span class="hljs-params">(<span class="hljs-string">'id desc'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">order</span><span class="hljs-params">([<span class="hljs-string">'id'</span>=&gt;<span class="hljs-string">'desc'</span>,<span class="hljs-string">'create_time'</span>=&gt;<span class="hljs-string">'asc'</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">order</span><span class="hljs-params">(<span class="hljs-string"><code class="language-hljs stylus"><span class="hljs-function"><span class="hljs-title">order</span><span class="hljs-params">(<span class="hljs-string">'id'</span>,<span class="hljs-string">'desc'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">order</span><span class="hljs-params">(<span class="hljs-string">'id desc'</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">order</span><span class="hljs-params">([<span class="hljs-string">'id'</span>=&gt;<span class="hljs-string">'desc'</span>,<span class="hljs-string">'create_time'</span>=&gt;<span class="hljs-string">'asc'</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">order</span><span class="hljs-params">(<span class="hljs-string">'id,create_time desc'</span>)</span></span><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能测试——ab.exe</title>
      <link href="/posts/5081417f.html"/>
      <url>/posts/5081417f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ab.exe是apache server下的一个性能检测小组件，使用方便简单。<br>使用方法：</p><h3 id="1-找到ab-exe的位置"><a href="#1-找到ab-exe的位置" class="headerlink" title="1. 找到ab.exe的位置"></a>1. 找到ab.exe的位置</h3><p>在电脑中找到ab.exe的位置，一般在Apache文件下的bin目录中，我这里的目录路径为：D:\software\phpstudy_pro\Extensions\Apache2.4.39\bin<br><img src="/images/test_ab_1.png" alt=""></p><h3 id="2-打开cmd"><a href="#2-打开cmd" class="headerlink" title="2. 打开cmd"></a>2. 打开cmd</h3><h3 id="3-进入ab-exe所在目录"><a href="#3-进入ab-exe所在目录" class="headerlink" title="3. 进入ab.exe所在目录"></a>3. 进入ab.exe所在目录</h3><p><img src="/images/test_ab_2.png" alt=""></p><h3 id="4-开始压测"><a href="#4-开始压测" class="headerlink" title="4. 开始压测"></a>4. 开始压测</h3><p><img src="/images/test_ab_3.png" alt=""></p><p>常用参数说明：<br>-n：请求个数，默认一次一个<br>-c：并发数<br>-t：超时限制(秒)，默认不限制</p><p>结果分析：<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre class=" language-hljs shell">D:\software\phpstudy_pro\Extensions\Apache2.4.39\bin&gt;ab -n 10 -c 10 http://www.baidu.com/<br>This is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $&gt;<br>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/<br>Licensed to The Apache Software Foundation, http://www.apache.org/<br><br>Benchmarking www.baidu.com (be patient).....done<br><br><br>Server Software:        BWS/1.1<br>Server Hostname:        www.baidu.com<br>Server Port:            80    #端口<br><br>Document Path:          /<br>Document Length:        353122 bytes    #请求文件大小<br><br>Concurrency Level:      10           #并发数<br>Time taken for tests:   0.535 seconds    #整个测试所用的时间<br>Complete requests:      10               #完成的请求数量<br>Failed requests:        9                #失败的请求数量<br>   (Connect: 0, Receive: 0, Length: 9, Exceptions: 0)<br>Total transferred:      3548070 bytes    #整个场景的网络传输量<br>HTML transferred:       3536205 bytes    #整个场景的HTML传输量<br>Requests per second:    18.71 [#/sec] (mean)    #平均每秒请求数<br>Time per request:       534.535 [ms] (mean)     #平均每个请求的响应时间<br>Time per request:       53.453 [ms] (mean, across all concurrent requests)<br>Transfer rate:          6482.11 [Kbytes/sec] received    #平均每秒网络上的流量<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> # </span><span class="language-bash">网络上消耗时间分解</span><br>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:       30   34   3.3     34      39<br>Processing:   151  225  78.4    220     378<br>Waiting:       35  139  92.2    151     281<br>Total:        186  260  75.8    254     410<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下面为整个场景所有请求的响应情况，50%的响应时间小于254毫秒，66%的响应时间小于281毫秒……最长响应时间 410毫秒</span><br>Percentage of the requests served within a certain time (ms)<br><span class="hljs-meta prompt_">  50% </span><span class="language-bash">   254</span><br><span class="hljs-meta prompt_">  66% </span><span class="language-bash">   281</span><br><span class="hljs-meta prompt_">  75% </span><span class="language-bash">   314</span><br><span class="hljs-meta prompt_">  80% </span><span class="language-bash">   342</span><br><span class="hljs-meta prompt_">  90% </span><span class="language-bash">   410</span><br><span class="hljs-meta prompt_">  95% </span><span class="language-bash">   410</span><br><span class="hljs-meta prompt_">  98% </span><span class="language-bash">   410</span><br><span class="hljs-meta prompt_">  99% </span><span class="language-bash">   410</span><br><span class="hljs-meta prompt_"> 100% </span><span class="language-bash"><code class="language-hljs shell">D:\software\phpstudy_pro\Extensions\Apache2.4.39\bin&gt;ab -n 10 -c 10 http://www.baidu.com/<br>This is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $&gt;<br>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/<br>Licensed to The Apache Software Foundation, http://www.apache.org/<br><br>Benchmarking www.baidu.com (be patient).....done<br><br><br>Server Software:        BWS/1.1<br>Server Hostname:        www.baidu.com<br>Server Port:            80    #端口<br><br>Document Path:          /<br>Document Length:        353122 bytes    #请求文件大小<br><br>Concurrency Level:      10           #并发数<br>Time taken for tests:   0.535 seconds    #整个测试所用的时间<br>Complete requests:      10               #完成的请求数量<br>Failed requests:        9                #失败的请求数量<br>   (Connect: 0, Receive: 0, Length: 9, Exceptions: 0)<br>Total transferred:      3548070 bytes    #整个场景的网络传输量<br>HTML transferred:       3536205 bytes    #整个场景的HTML传输量<br>Requests per second:    18.71 [#/sec] (mean)    #平均每秒请求数<br>Time per request:       534.535 [ms] (mean)     #平均每个请求的响应时间<br>Time per request:       53.453 [ms] (mean, across all concurrent requests)<br>Transfer rate:          6482.11 [Kbytes/sec] received    #平均每秒网络上的流量<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> # </span><span class="language-bash">网络上消耗时间分解</span><br>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:       30   34   3.3     34      39<br>Processing:   151  225  78.4    220     378<br>Waiting:       35  139  92.2    151     281<br>Total:        186  260  75.8    254     410<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下面为整个场景所有请求的响应情况，50%的响应时间小于254毫秒，66%的响应时间小于281毫秒……最长响应时间 410毫秒</span><br>Percentage of the requests served within a certain time (ms)<br><span class="hljs-meta prompt_">  50% </span><span class="language-bash">   254</span><br><span class="hljs-meta prompt_">  66% </span><span class="language-bash">   281</span><br><span class="hljs-meta prompt_">  75% </span><span class="language-bash">   314</span><br><span class="hljs-meta prompt_">  80% </span><span class="language-bash">   342</span><br><span class="hljs-meta prompt_">  90% </span><span class="language-bash">   410</span><br><span class="hljs-meta prompt_">  95% </span><span class="language-bash">   410</span><br><span class="hljs-meta prompt_">  98% </span><span class="language-bash">   410</span><br><span class="hljs-meta prompt_">  99% </span><span class="language-bash">   410</span><br><span class="hljs-meta prompt_"> 100% </span><span class="language-bash">   410 (longest request)</span><br><br></code></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ab.exe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码规范建议</title>
      <link href="/posts/6541028b.html"/>
      <url>/posts/6541028b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-参数规范"><a href="#1-参数规范" class="headerlink" title="1. 参数规范"></a>1. 参数规范</h2><p> 在函数/方法里，未设置默认值的参数应放在设置默认值的参数前，如：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-built_in">test</span>(<span class="hljs-variable">$age</span> = 21, <span class="hljs-variable">$id</span>, <span class="hljs-variable"><code class="language-hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-built_in">test</span>(<span class="hljs-variable">$age</span> = 21, <span class="hljs-variable">$id</span>, <span class="hljs-variable">$options</span> = []){<br>     print_r(func_get_args());<br> }<br></code></pre></td></tr></tbody></table></figure><p></p><p> 上述代码在IDE中会对$age=21，提示“Optional parameter is provided before required”，应改为：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-built_in">test</span>(<span class="hljs-variable">$id</span>, <span class="hljs-variable">$age</span> = 21, <span class="hljs-variable"><code class="language-hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-built_in">test</span>(<span class="hljs-variable">$id</span>, <span class="hljs-variable">$age</span> = 21, <span class="hljs-variable">$options</span> = []){<br>     print_r(func_get_args());<br> }<br></code></pre></td></tr></tbody></table></figure><h2 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2. 命名规范"></a>2. 命名规范</h2><p> 常用的四种命名格式：驼峰、帕斯卡、蛇形、串形，主要是为了解决多个单词之间的空格问题。</p><ul><li>驼峰命名（Camel Case），又叫小驼峰，除了第一个单词，其他单词首字母大写：<br>原始：<code>last login time</code><br>驼峰：<code>lastLoginTime</code></li><li>帕斯卡（Pascal Case），又叫大驼峰，跟驼峰命名很像，只不过所有单词首字母都需要大写：<br>原始：<code>last login time</code><br>帕斯卡：<code>LastLoginTime</code></li><li>蛇形（Snake Case），全由小写字母和下划线组成，是指用下划线(_)作用单词间的分隔符：<br>原始：<code>last login time</code><br>蛇形：<code>last_login_time</code></li><li>串行（Kebab Case），又叫脊柱命名法（spinal case），是指用短横线(-)作用单词间的分隔符：<br>原始：<code>last login time</code><br>串行：<code>last-login-time</code><br>一般而言，函数名或方法名采用小驼峰，类名采用大驼峰，数据库字段名采用蛇形。</li></ul><h3 id="3-二次确认"><a href="#3-二次确认" class="headerlink" title="3. 二次确认"></a>3. 二次确认</h3><p> 不可撤销的高危操作需二次确认，如删除、批量推送</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm查找指定文件的修改历史</title>
      <link href="/posts/phpstorm-show-history.html"/>
      <url>/posts/phpstorm-show-history.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>打开需要查找的文件，对着文件右击选择Local History=&gt;Show History<br><img src="/images/phpstorm_show_history_1.png" alt=""><br><img src="/images/phpstorm_show_history_2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 中clone Query对象</title>
      <link href="/posts/thinkphp-clone-query.html"/>
      <url>/posts/thinkphp-clone-query.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们在给前端提供列表接口的时候，经常需要根据条件返回总条数和当页列表数据；这时，我们就需要复用共同的查询条件对数据库执行多次查询操作。</p><p>在Yii2里，可以通过clone处理：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-title class_">Post</span>::<span class="hljs-title function_ invoke__">find</span>()-&gt;<span class="hljs-title function_ invoke__">where</span>([<span class="hljs-string">'status'</span>=&gt;<span class="hljs-number">1</span>]);<br><span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">andFilterWhere</span>([<span class="hljs-string">'name'</span>=&gt;<span class="hljs-variable">$kw</span>]);<br><span class="hljs-variable">$count</span> = (<span class="hljs-keyword">clone</span> <span class="hljs-variable">$query</span>)-&gt;<span class="hljs-title function_ invoke__">count</span>();<br><span class="hljs-variable">$list</span> = <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">limit</span>(<span class="hljs-number">20</span>)-&gt;<span class="hljs-title function_ invoke__">offset</span>(<span class="hljs-number">0</span>)-&gt;<span class="hljs-title function_ invoke__">orderBy</span>([<span class="hljs-string">'id'</span>=&gt;SORT_DESC])-&gt;<span class="hljs-title function_ invoke__">all</span>()-&gt;<span class="hljs-title function_ invoke__">asArray</span>();<br></code></pre></td></tr></tbody></table></figure><br>在thinkphp5中，使用如下代码进行clone，会存在问题，提示：<code>SQLSTATE[HY000]: General error: 2031</code><br><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$offset</span> = (<span class="hljs-variable">$page</span> - <span class="hljs-number">1</span>) * <span class="hljs-variable">$pageSize</span>;<br><span class="hljs-variable">$query</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">'artist_bill'</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>([<span class="hljs-string">'month'</span> =&gt; <span class="hljs-variable">$month</span>]);<br><span class="hljs-variable">$count</span> = (<span class="hljs-keyword">clone</span> <span class="hljs-variable">$query</span>)-&gt;<span class="hljs-title function_ invoke__">count</span>();<br><span class="hljs-variable">$list</span> = <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">field</span>(<span class="hljs-string">'id,title,month'</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">limit</span>(<span class="hljs-variable">$offset</span>, <span class="hljs-variable">$pageSize</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">order</span>([<span class="hljs-string">'id'</span> =&gt; SORT_DESC])<br>    -&gt;<span class="hljs-title function_ invoke__"><code class="language-hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-title class_">Post</span>::<span class="hljs-title function_ invoke__">find</span>()-&gt;<span class="hljs-title function_ invoke__">where</span>([<span class="hljs-string">'status'</span>=&gt;<span class="hljs-number">1</span>]);<br><span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">andFilterWhere</span>([<span class="hljs-string">'name'</span>=&gt;<span class="hljs-variable">$kw</span>]);<br><span class="hljs-variable">$count</span> = (<span class="hljs-keyword">clone</span> <span class="hljs-variable">$query</span>)-&gt;<span class="hljs-title function_ invoke__">count</span>();<br><span class="hljs-variable">$list</span> = <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">limit</span>(<span class="hljs-number">20</span>)-&gt;<span class="hljs-title function_ invoke__">offset</span>(<span class="hljs-number">0</span>)-&gt;<span class="hljs-title function_ invoke__">orderBy</span>([<span class="hljs-string">'id'</span>=&gt;SORT_DESC])-&gt;<span class="hljs-title function_ invoke__">all</span>()-&gt;<span class="hljs-title function_ invoke__">asArray</span>();<br></code></pre></td></tr></tbody></table></figure><br>在thinkphp5中，使用如下代码进行clone，会存在问题，提示：<code>SQLSTATE[HY000]: General error: 2031</code><br><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$offset</span> = (<span class="hljs-variable">$page</span> - <span class="hljs-number">1</span>) * <span class="hljs-variable">$pageSize</span>;<br><span class="hljs-variable">$query</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">'artist_bill'</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>([<span class="hljs-string">'month'</span> =&gt; <span class="hljs-variable">$month</span>]);<br><span class="hljs-variable">$count</span> = (<span class="hljs-keyword">clone</span> <span class="hljs-variable">$query</span>)-&gt;<span class="hljs-title function_ invoke__">count</span>();<br><span class="hljs-variable">$list</span> = <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">field</span>(<span class="hljs-string">'id,title,month'</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">limit</span>(<span class="hljs-variable">$offset</span>, <span class="hljs-variable">$pageSize</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">order</span>([<span class="hljs-string">'id'</span> =&gt; SORT_DESC])<br>    -&gt;<span class="hljs-title function_ invoke__">select</span>();<br></code></pre></td></tr></tbody></table></figure><p></p><ul><li>如果把第3行改为：$count = $query-&gt;count();  第一个查询正常，之后的查询没有任何where条件；这是因为query执行完成后会把查询条件清空。</li><li>如果使用clone，打印处理的sql如下：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> t_artist_bill <span class="hljs-keyword">where</span> `<span class="hljs-keyword">month</span>` <span class="hljs-operator"><code class="language-hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> t_artist_bill <span class="hljs-keyword">where</span> `<span class="hljs-keyword">month</span>` <span class="hljs-operator">=</span> :where_AND_month;<br></code></pre></td></tr></tbody></table></figure>初步认为是参数没有绑定上去。应该也是query内部引用了一个对象，对象在clone之后与原有对象是一个地址引用。通过一步一步断点输出，确认在$this-&gt;builder-&gt;select($options);之后获得了bind数据。因此只需要解绑clone前后对象的builder属性即可完成query对象的复制。查看query对象的属性，只有builder,connection是对象，但是connection我们希望在整个请求中是一个单实例，所以没必要区分。<br>最终修改,新建query子类，添加__clone方法,指定clone后对新对象执行php $this-&gt;setBuilder();保证 clone之后的builder是一个新实例。<br>这样就可以正常使用clone了。</li></ul><p>另一种处理方式是把where条件提取出来共用：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getList</span>(<span class="hljs-params">?<span class="hljs-keyword">string</span> <span class="hljs-variable">$month</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$page</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$pageSize</span></span>): <span class="hljs-title">array</span></span>{<br>    <span class="hljs-variable">$offset</span> = (<span class="hljs-variable">$page</span> - <span class="hljs-number">1</span>) * <span class="hljs-variable">$pageSize</span>;<br><br>    <span class="hljs-variable">$where</span> = [];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$month</span>)) {<br>        <span class="hljs-variable">$where</span>[<span class="hljs-string">'month'</span>] = <span class="hljs-variable">$month</span>;<br>    }<br>    <span class="hljs-variable">$query</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">'artist_bill'</span>);<br>    <span class="hljs-variable">$count</span> = <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-variable">$where</span>)-&gt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-string">'id'</span>);<br><br>    <span class="hljs-variable">$list</span> = <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-variable">$where</span>)-&gt;<span class="hljs-title function_ invoke__">field</span>(<span class="hljs-string">'id,title,month'</span>)<br>        -&gt;<span class="hljs-title function_ invoke__">limit</span>(<span class="hljs-variable">$offset</span>, <span class="hljs-variable">$pageSize</span>)<br>        -&gt;<span class="hljs-title function_ invoke__">order</span>([<span class="hljs-string">'id'</span> =&gt; SORT_DESC])<br>        -&gt;<span class="hljs-title function_ invoke__">select</span>();<br><br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">'count'</span> =&gt; <span class="hljs-variable">$count</span>, <span class="hljs-string">'list'</span> =&gt; <span class="hljs-variable"><code class="language-hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getList</span>(<span class="hljs-params">?<span class="hljs-keyword">string</span> <span class="hljs-variable">$month</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$page</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$pageSize</span></span>): <span class="hljs-title">array</span></span>{<br>    <span class="hljs-variable">$offset</span> = (<span class="hljs-variable">$page</span> - <span class="hljs-number">1</span>) * <span class="hljs-variable">$pageSize</span>;<br><br>    <span class="hljs-variable">$where</span> = [];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$month</span>)) {<br>        <span class="hljs-variable">$where</span>[<span class="hljs-string">'month'</span>] = <span class="hljs-variable">$month</span>;<br>    }<br>    <span class="hljs-variable">$query</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">name</span>(<span class="hljs-string">'artist_bill'</span>);<br>    <span class="hljs-variable">$count</span> = <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-variable">$where</span>)-&gt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-string">'id'</span>);<br><br>    <span class="hljs-variable">$list</span> = <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-variable">$where</span>)-&gt;<span class="hljs-title function_ invoke__">field</span>(<span class="hljs-string">'id,title,month'</span>)<br>        -&gt;<span class="hljs-title function_ invoke__">limit</span>(<span class="hljs-variable">$offset</span>, <span class="hljs-variable">$pageSize</span>)<br>        -&gt;<span class="hljs-title function_ invoke__">order</span>([<span class="hljs-string">'id'</span> =&gt; SORT_DESC])<br>        -&gt;<span class="hljs-title function_ invoke__">select</span>();<br><br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">'count'</span> =&gt; <span class="hljs-variable">$count</span>, <span class="hljs-string">'list'</span> =&gt; <span class="hljs-variable">$list</span>];<br>}<br></code></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm实现保存后，代码自动格式化</title>
      <link href="/posts/phpstorm-auto-format.html"/>
      <url>/posts/phpstorm-auto-format.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>鉴于个人编程风格的不同，为了保证团队开发能更好地开展，需要进行代码统一格式化。我们可以在ctrl+s的时候让IED来自动格式化保存。<br>下面介绍下设置步骤：</p><h3 id="1-点击File-》Settings-》Keymap"><a href="#1-点击File-》Settings-》Keymap" class="headerlink" title="1. 点击File-》Settings-》Keymap"></a>1. 点击File-》Settings-》Keymap</h3><p><img src="/images/phpstorm_auth_format_1.png" alt=""></p><h3 id="2-在右侧搜索save-ALL"><a href="#2-在右侧搜索save-ALL" class="headerlink" title="2. 在右侧搜索save ALL"></a>2. 在右侧搜索save ALL</h3><p><img src="/images/phpstorm_auth_format_2.png" alt=""></p><h3 id="3-右键点击Save-All，选择Remove-Ctrl-S"><a href="#3-右键点击Save-All，选择Remove-Ctrl-S" class="headerlink" title="3. 右键点击Save All，选择Remove Ctrl+S"></a>3. 右键点击Save All，选择Remove Ctrl+S</h3><p><img src="/images/phpstorm_auth_format_3.png" alt=""></p><h3 id="4-右键点击Save-All，选择Add-Keyboard-Shortcut，然后按键盘shift-ctrl-alt-s，然后保存。"><a href="#4-右键点击Save-All，选择Add-Keyboard-Shortcut，然后按键盘shift-ctrl-alt-s，然后保存。" class="headerlink" title="4. 右键点击Save All，选择Add Keyboard Shortcut，然后按键盘shift+ctrl+alt+s，然后保存。"></a>4. 右键点击Save All，选择Add Keyboard Shortcut，然后按键盘shift+ctrl+alt+s，然后保存。</h3><p><img src="/images/phpstorm_auth_format_4.png" alt=""><br>PS:shift+ctrl+alt+s这个可以自己随便设置，但是不能和其他的快捷键冲突，而且要记住，一会我们会用得到。</p><h3 id="5-点击Edit-编辑-gt-Macros-宏-gt-Start-Macro-Recording-开始录制宏-。"><a href="#5-点击Edit-编辑-gt-Macros-宏-gt-Start-Macro-Recording-开始录制宏-。" class="headerlink" title="5. 点击Edit(编辑)->Macros(宏)->Start Macro Recording(开始录制宏)。"></a>5. 点击Edit(编辑)-&gt;Macros(宏)-&gt;Start Macro Recording(开始录制宏)。</h3><p>右下角会出现这样一个图标<br><img src="/images/phpstorm_auth_format_5.png" alt=""><br>然后先按ctrl+alt+l，再按我们刚刚把save  all设置的快捷键shift+ctrl+alt+s，最后点击红色的小方块结束录制宏<br><img src="/images/phpstorm_auth_format_6.png" alt=""><br>保存宏：名称设置为：Format And Save（这个名字随意啦，自己记得就好）<br><img src="/images/phpstorm_auth_format_7.png" alt=""></p><h3 id="6-点击File-》Settings-》Keymap-搜索Format-And-Save"><a href="#6-点击File-》Settings-》Keymap-搜索Format-And-Save" class="headerlink" title="6. 点击File-》Settings-》Keymap  搜索Format And Save"></a>6. 点击File-》Settings-》Keymap  搜索Format And Save</h3><h3 id="7-右键点击Format-And-Save，选择Add-Keyboard-Shortcut-设置为command-s，保存就可以了"><a href="#7-右键点击Format-And-Save，选择Add-Keyboard-Shortcut-设置为command-s，保存就可以了" class="headerlink" title="7. 右键点击Format And Save，选择Add Keyboard Shortcut,设置为command+s，保存就可以了"></a>7. 右键点击Format And Save，选择Add Keyboard Shortcut,设置为command+s，保存就可以了</h3><p><img src="/images/phpstorm_auth_format_8.png" alt=""><br>最后试一下吧，ctrl+s 就实现了 保存+代码格式化</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下快捷键使用</title>
      <link href="/posts/windows-short-cut.html"/>
      <url>/posts/windows-short-cut.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>通过Tab键可以在当前界面将光标向下切换，Tab+Shift是向上切换。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5使用笔记</title>
      <link href="/posts/thinkphp-note.html"/>
      <url>/posts/thinkphp-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-报错：Request-php中-variable-type-error-array"><a href="#1-报错：Request-php中-variable-type-error-array" class="headerlink" title="1. 报错：Request.php中 variable type error: array"></a>1. 报错：Request.php中 variable type error: array</h3><ul><li><p>描述：如果在post请求的时候，raw内容中某个参数的值为数组，直接使用$this-&gt;request-&gt;post(‘field’);，会报错<br><img src="/images/thinkphp_note_1.png" alt=""></p></li><li><p>原因：TP5之后，默认的变量修饰符为/s，转为字符串了。</p></li><li>解决办法：在变量名后加/a，转为数组：$this-&gt;request-&gt;post(‘field/a’);</li></ul><h3 id="2-回显处理"><a href="#2-回显处理" class="headerlink" title="2. 回显处理"></a>2. 回显处理</h3><p>如果请求参数里有&amp;等符号，在接收后会进行转义为&amp;，要使用htmlspecialchars_decode回显</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php中trait的用法</title>
      <link href="/posts/php-trait.html"/>
      <url>/posts/php-trait.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">trait是php的一种代码复用的方法。</div><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="1-通过use-Trait类来使用"><a href="#1-通过use-Trait类来使用" class="headerlink" title="1. 通过use Trait类来使用"></a>1. 通过use Trait类来使用</h4><p>可以将一些常用的处理封装到trait类里，在其他地方直接use就可以了。<br> 例如：封装单例<br>    先创建Singleton类，代码如下：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Singleton</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$instance</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ...$args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params">...<span class="hljs-variable">$args</span></span>) </span>{<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>)) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">static</span>(...<span class="hljs-variable">$args</span>);<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><br>再创建Test类，代码如下：<br><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>{<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">Singleton</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">'test'</span>;<br>    }    <br>}<br></code></pre></td></tr></tbody></table></figure><br>调用：<br><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title class_">Test</span>::<span class="hljs-title function_ invoke__">getInstance</span>()-&gt;<span class="hljs-title function_ invoke__"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Singleton</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$instance</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ...$args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params">...<span class="hljs-variable">$args</span></span>) </span>{<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>)) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">static</span>(...<span class="hljs-variable">$args</span>);<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><br>再创建Test类，代码如下：<br><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>{<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">Singleton</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">'test'</span>;<br>    }    <br>}<br></code></pre></td></tr></tbody></table></figure><br>调用：<br><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title class_">Test</span>::<span class="hljs-title function_ invoke__">getInstance</span>()-&gt;<span class="hljs-title function_ invoke__">test</span>();<br></code></pre></td></tr></tbody></table></figure><p></p><h4 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2. 优先级"></a>2. 优先级</h4><p>当前类中的方法会覆盖trait方法，而trait方法用覆盖了基类中的方法。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Hello '</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">SayWorld</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">sayHello</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'world!'</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span></span>{<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">SayWorld</span>;<br>}<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHelloWorld</span>();<br><span class="hljs-variable">$obj</span>-&gt;<span class="hljs-title function_ invoke__">sayHello</span>();     <br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'Hello '</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">SayWorld</span></span>{<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">sayHello</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'world!'</span>;<br>    }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span></span>{<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">SayWorld</span>;<br>}<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHelloWorld</span>();<br><span class="hljs-variable">$obj</span>-&gt;<span class="hljs-title function_ invoke__">sayHello</span>();     <br><span class="hljs-comment">//output: Hello world!</span><br></code></pre></td></tr></tbody></table></figure><h4 id="3-多个trait"><a href="#3-多个trait" class="headerlink" title="3. 多个trait"></a>3. 多个trait</h4><p>通过逗号分隔，在 use 声明列出多个 trait类</p><h3 id="常用的trait类"><a href="#常用的trait类" class="headerlink" title="常用的trait类"></a>常用的trait类</h3><h4 id="1-单例类"><a href="#1-单例类" class="headerlink" title="1. 单例类"></a>1. 单例类</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用作单例</span><br><span class="hljs-comment"> * Trait Singleton</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Singleton</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$instance</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ...$args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params">...<span class="hljs-variable">$args</span></span>)</span>{<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>)) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">static</span>(...<span class="hljs-variable">$args</span>);<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable"><code class="language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用作单例</span><br><span class="hljs-comment"> * Trait Singleton</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Singleton</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$instance</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ...$args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params">...<span class="hljs-variable">$args</span></span>)</span>{<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>)) {<br>            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">static</span>(...<span class="hljs-variable">$args</span>);<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="2-错误处理类"><a href="#2-错误处理类" class="headerlink" title="2. 错误处理类"></a>2. 错误处理类</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">common</span>\<span class="hljs-title class_">helper</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 错误操作类</span><br><span class="hljs-comment"> * Trait Error</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@package</span> app\common\helper</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Error</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_code</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_error</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setError</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$code</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$msg</span></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;_code = <span class="hljs-variable">$code</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;_error = <span class="hljs-variable">$msg</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getError</span>(<span class="hljs-params"></span>): ?<span class="hljs-title">array</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;_code) ? [<span class="hljs-string">'code'</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;_code, <span class="hljs-string">'msg'</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;_error] : <span class="hljs-literal"><code class="language-hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">common</span>\<span class="hljs-title class_">helper</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 错误操作类</span><br><span class="hljs-comment"> * Trait Error</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@package</span> app\common\helper</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Error</span></span>{<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_code</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_error</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setError</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$code</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$msg</span></span>): <span class="hljs-title">void</span></span>{<br>        <span class="hljs-variable language_">$this</span>-&gt;_code = <span class="hljs-variable">$code</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;_error = <span class="hljs-variable">$msg</span>;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getError</span>(<span class="hljs-params"></span>): ?<span class="hljs-title">array</span></span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;_code) ? [<span class="hljs-string">'code'</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;_code, <span class="hljs-string">'msg'</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;_error] : <span class="hljs-literal">null</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>使用方法：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">Error</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>{<br>        ……<br>        <span class="hljs-keyword">if</span>(){<br>             <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-number">0</span>, <span class="hljs-string">'数据不存在'</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal"><code class="language-hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">Error</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>{<br>        ……<br>        <span class="hljs-keyword">if</span>(){<br>             <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-number">0</span>, <span class="hljs-string">'数据不存在'</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;           <br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>调用：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$rs</span> = <span class="hljs-variable">$s</span>-&gt;<span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$error</span> = <span class="hljs-variable">$s</span>-&gt;<span class="hljs-title function_ invoke__">getError</span>()) {<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$error</span>);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> $code</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> $msg</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-variable">$code</span>, <span class="hljs-variable">$msg</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal"><code class="language-hljs php"><span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$rs</span> = <span class="hljs-variable">$s</span>-&gt;<span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$error</span> = <span class="hljs-variable">$s</span>-&gt;<span class="hljs-title function_ invoke__">getError</span>()) {<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$error</span>);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> $code</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> $msg</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-variable">$code</span>, <span class="hljs-variable">$msg</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.php.net/manual/zh/language.oop5.traits.php">https://www.php.net/manual/zh/language.oop5.traits.php</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trait </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP使用ES</title>
      <link href="/posts/php-elasticsearch.html"/>
      <url>/posts/php-elasticsearch.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p>下载安装java<br><code>https://www.oracle.com/java/technologies/downloads/#jdk18-windows</code><br>查看版本 java -version<br><img src="/images/php_es_1.png" alt=""></p></li><li><p>下载es<br><code>https://www.elastic.co/cn/downloads/elasticsearch</code></p></li><li><p>修改config\elasticsearch.yml文件的配置项</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs stylus">xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.enabled</span>: false<br>xpack<span class="hljs-selector-class">.ml</span><span class="hljs-selector-class"><code class="language-hljs stylus">xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.enabled</span>: false<br>xpack<span class="hljs-selector-class">.ml</span><span class="hljs-selector-class">.enabled</span>: false<br></code></pre></td></tr></tbody></table></figure></li><li><p>双击 bin\elasticsearch.bat<br>等几十秒后，在浏览器访问：<code>localhost:9200</code><br><img src="/images/php_es_2.png" alt=""></p></li><li><p>下载Kibana<br><code>https://www.elastic.co/cn/downloads/kibana</code><br>运行：<code>bin\kibana.bat</code><br>访问<code>http://localhost:5601</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈MySQL中的聚簇索引和非聚簇索引</title>
      <link href="/posts/mysql-clustered-index.html"/>
      <url>/posts/mysql-clustered-index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="聚簇索引和非聚簇索引的区别"><a href="#聚簇索引和非聚簇索引的区别" class="headerlink" title="聚簇索引和非聚簇索引的区别"></a>聚簇索引和非聚簇索引的区别</h3><p>聚簇索引的主索引的叶子结点存储的是键值对应的数据本身，辅助索引的叶子结点存储的是键值对应的数据的主键键值。</p><p>聚簇索引的数据和主键索引存储在一起。<br>聚簇索引的数据是根据主键的顺序保存。因此适合按主键索引的区间查找，可以有更少的磁盘I/O，加快查询速度。</p><p>MyISAM存储引擎采用的是非聚簇索引，非聚簇索引的主索引和辅助索引几乎是一样的，只是主索引不允许重复，不允许空值，他们的叶子结点的key都存储指向键值对应的数据的物理地址。<br>非聚簇索引的数据表和索引表是分开存储的。<br>非聚簇索引中的数据是根据数据的插入顺序保存。因此非聚簇索引更适合单个数据的查询。插入顺序不受键值影响。</p><p>聚集索引的B+Tree中的叶子节点存放的是整张表的行记录数据。辅助索引与聚集索引的区别在于辅助索引的叶子节点并不包含行记录的全部数据，而是存储相应行数据的聚集索引键，即主键。当通过辅助索引来查询数据时，InnoDB存储引擎会遍历辅助索引找到主键，然后再通过主键在聚集索引中找到完整的行记录数据。</p><p>MyISAM：非聚簇索引<br>innoDB：聚簇索引</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://mp.weixin.qq.com/s/pC0_Y7M7BkoUmlRwneZZdA">https://mp.weixin.qq.com/s/pC0_Y7M7BkoUmlRwneZZdA</a><br><a href="https://www.cnblogs.com/setalone/p/14851000.html">https://www.cnblogs.com/setalone/p/14851000.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 聚簇索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B树与B+树</title>
      <link href="/posts/btree-and-b+tree.html"/>
      <url>/posts/btree-and-b+tree.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="B-Tree对比BTree的优点"><a href="#B-Tree对比BTree的优点" class="headerlink" title="B+Tree对比BTree的优点"></a>B+Tree对比BTree的优点</h3><ul><li>磁盘读写代价更低<br>一般来说B+Tree比BTree更适合实现外存的索引结构，因为存储引擎的设计专家巧妙的利用了外存（磁盘）的存储结构，即磁盘的最小存储单位是扇区（sector），而操作系统的块（block）通常是整数倍的sector，操作系统以页（page）为单位管理内存，一页（page）通常默认为4K，数据库的页通常设置为操作系统页的整数倍，因此索引结构的节点被设计为一个页的大小，然后利用外存的“预读取”原则，每次读取的时候，把整个节点的数据读取到内存中，然后在内存中查找，已知内存的读取速度是外存读取I/O速度的几百倍，那么提升查找速度的关键就在于尽可能少的磁盘I/O，那么可以知道，每个节点中的key个数越多，那么树的高度越小，需要I/O的次数越少，因此一般来说B+Tree比BTree更快，因为B+Tree的非叶节点中不存储data，就可以存储更多的key。</li><li>查询速度更稳定<br>由于B+Tree非叶子节点不存储数据（data），因此所有的数据都要查询至叶子节点，而叶子节点的高度都是相同的，B+Tree的高度一般都在2~4层，因此所有数据的查询速度都是一样的。</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>  <a href="https://blog.csdn.net/u013235478/article/details/50625677">https://blog.csdn.net/u013235478/article/details/50625677</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下电脑截图</title>
      <link href="/posts/windows-screen-shot.html"/>
      <url>/posts/windows-screen-shot.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、QQ截图：<code>ctrl+alt+A</code><br>2、花式截图：<code>Win+shift+S</code>  可截任意形状<br>3、微信截图：<code>Alt+A</code><br>4、浏览器截图：<code>Ctrl+shift+X</code><br>5、WPS截图：<code>Ctrl+Alt+X</code> </p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP常见面试题</title>
      <link href="/posts/php-interview.html"/>
      <url>/posts/php-interview.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、什么是面向对象？主要特征是什么？"><a href="#1、什么是面向对象？主要特征是什么？" class="headerlink" title="1、什么是面向对象？主要特征是什么？"></a>1、什么是面向对象？主要特征是什么？</h4><p>面向对象是程序的一种设计方式，它利于提高程序的重用性，使程序结构更加清晰。主要特征：封装、继承、多态。</p><h4 id="2、session-与-cookie-的区别和联系，请从协议，产生的原因与作用说明"><a href="#2、session-与-cookie-的区别和联系，请从协议，产生的原因与作用说明" class="headerlink" title="2、session 与 cookie 的区别和联系，请从协议，产生的原因与作用说明?"></a>2、session 与 cookie 的区别和联系，请从协议，产生的原因与作用说明?</h4><p>A、http无状态协议，不能区分用户是否是从同一个网站上来的，同一个用户请求不同的页面不能看做是同一个用户。<br>B、SESSION存储在服务器端，COOKIE保存在客户端。Session比较安全，cookie用某些手段可以修改，不安全。Session依赖于cookie进行传递。<br>禁用cookie后，session不能正常使用。Session的缺点：保存在服务器端，每次读取都从服务器进行读取，对服务器有资源消耗。Session保存在服务器端的文件或数据库中，默认保存在文件中，文件路径由php配置文件的session.save_path指定。Session文件是公有的。</p><p>区别：</p><ol><li>存放位置：Session 保存在服务器，Cookie 保存在客户端。</li><li>存放的形式：Session 是以对象的形式保存在服务器，Cookie 以字符串的形式保存在客户端。</li><li>用途：Cookies 适合做保存用户的个人设置，爱好等，Session 适合做客户的身份验证</li><li>路径：Session 不能区分路径，同一个用户在访问一个网站期间，所有的 Session 在任何一个地方都可以访问到。而 Cookie 中如果设置了路径参数，那么同一个网站中不同路径下的 Cookie 互相是访问不到的。</li><li>安全性：Cookie 不是很安全，别人可以分析存放在本地的 COOKIE 并进行 COOKIE 欺骗，考虑到安全应当使用 session</li><li>大小以及数量限制：每个域名所包含的 cookie 数：IE7/8,FireFox:50 个，Opera30 个； Cookie 总大小：Firefox 和 Safari 允许 cookie 多达 4097 个字节，Opera 允许 cookie 多达 4096 个字 节，InternetExplorer 允许 cookie 多达 4095 个字节；一般认为 Session 没有大小和数量限制。</li></ol><p>关系：</p><ol><li>Session 需要借助 Cookie 才能正常工作。如果客户端完全禁止 Cookie，Session 将失效！因为 Session 是由应用服务器维持的一个 服务器端的存储空间，用户在连接服务器时，会由服务器生成一个唯一的 SessionID, 用该 SessionID 为标识符来存取服务器端的 Session 存储空间。而 SessionID 这一数据则是保存到客户端，用 Cookie 保存的，用户提交页面时，会将这一 SessionID 提交到服务器端，来存取 Session 数据。这一过程，是不用开发人员干预的。所以一旦客户端禁用 Cookie，那么 Session 也会失效。</li></ol><h4 id="3、HTTP-状态中302、403、-500代码含义？"><a href="#3、HTTP-状态中302、403、-500代码含义？" class="headerlink" title="3、HTTP 状态中302、403、 500代码含义？"></a>3、HTTP 状态中302、403、 500代码含义？</h4><p>一二三四五原则:（即一：消息系列；二：成功系列； 三：重定向系列；四：请求错误系列；五：服务器端错误系列。）<br>302:临时转移成功，请求的内容已转移到新位置<br>403:禁止访问<br>500:服务器内部错误<br>401：代表未授权。</p><h4 id="4、请写出数据类型-int-char-varchar-datetime-text-的意思；请问-varchar-和-char有什么区别？"><a href="#4、请写出数据类型-int-char-varchar-datetime-text-的意思；请问-varchar-和-char有什么区别？" class="headerlink" title="4、请写出数据类型(int char varchar datetime text)的意思；请问 varchar 和 char有什么区别？"></a>4、请写出数据类型(int char varchar datetime text)的意思；请问 varchar 和 char有什么区别？</h4><p>Int 整数char 定长字符 Varchar 变长字符 Datetime 日期时间型Text 文本型 Varchar与char的区别 char是固定长度的字符类型，分配多少空间，就占用多长空间。Varchar是可变长度的字符类型，内容有多大就占用多大的空间，能有效节省空间。由于varchar类型是可变的，所以在数据长度改变的时，服务器要进行额外的操作，所以效率比char类型低。</p><h4 id="5、MyISAM和-InnoDB-的基本区别？索引结构如何实现？"><a href="#5、MyISAM和-InnoDB-的基本区别？索引结构如何实现？" class="headerlink" title="5、MyISAM和 InnoDB 的基本区别？索引结构如何实现？"></a>5、MyISAM和 InnoDB 的基本区别？索引结构如何实现？</h4><p>A、MyISAM类型不支持事务，表锁，易产生碎片，要经常优化，读写速度较快，适合用于频繁查询的应用；<br>B、InnoDB类型支持事务，行锁，有崩溃恢复能力，读写速度比MyISAM慢，适合于插入和更新操作比较多的应用，空间占用大，不支持全文索引等。<br>创建索引：alert table tablename add index 索引名 (<code>字段名</code>)</p><h4 id="6、isset-和-empty-区别"><a href="#6、isset-和-empty-区别" class="headerlink" title="6、isset() 和 empty() 区别"></a>6、isset() 和 empty() 区别</h4><p>isset判断变量是否存在，可以传入多个变量，若其中一个变量不存在则返回假；empty判断变量是否为空为假，只可传一个变量，如果为空为假则返回真。</p><h4 id="7、请说明-PHP-中传值与传引用的区别。什么时候传值什么时候传引用？"><a href="#7、请说明-PHP-中传值与传引用的区别。什么时候传值什么时候传引用？" class="headerlink" title="7、请说明 PHP 中传值与传引用的区别。什么时候传值什么时候传引用？"></a>7、请说明 PHP 中传值与传引用的区别。什么时候传值什么时候传引用？</h4><p>按值传递：函数范围内对值的任何改变在函数外部都会被忽略<br>按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改<br>优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。按引用传递则不需要复制值，对于性能提高很有好处。</p><h4 id="8、在PHP中error-reporting这个函数有什么作用？"><a href="#8、在PHP中error-reporting这个函数有什么作用？" class="headerlink" title="8、在PHP中error_reporting这个函数有什么作用？"></a>8、在PHP中error_reporting这个函数有什么作用？</h4><p>设置PHP的报错级别并返回当前级别。</p><h4 id="9、说说你对缓存技术的了解？"><a href="#9、说说你对缓存技术的了解？" class="headerlink" title="9、说说你对缓存技术的了解？"></a>9、说说你对缓存技术的了解？</h4><p>缓存技术是将动态内容缓存到文件中，在一定时间内访问动态页面直接调用缓存文件，而不必重新访问数据库。</p><h4 id="10、现在编程中经常采取MVC三层结构，请问MVC分别指哪三层，有什么优点？"><a href="#10、现在编程中经常采取MVC三层结构，请问MVC分别指哪三层，有什么优点？" class="headerlink" title="10、现在编程中经常采取MVC三层结构，请问MVC分别指哪三层，有什么优点？"></a>10、现在编程中经常采取MVC三层结构，请问MVC分别指哪三层，有什么优点？</h4><p>MVC三层分别指：业务模型、视图、控制器，由控制器层调用模型处理数据，然后将数据映射到视图层进行显示，优点是：①可以实现代码的重用性，避免产生代码冗余；②M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式</p><h4 id="11、AJAX的优势是什么？"><a href="#11、AJAX的优势是什么？" class="headerlink" title="11、AJAX的优势是什么？"></a>11、AJAX的优势是什么？</h4><p>ajax是异步传输技术，可以通过javascript实现，也可以通过JQuery框架实现，实现局部刷新，减轻了服务器的压力，也提高了用户体验。</p><h4 id="12、在程序的开发中，如何提高程序的运行效率？"><a href="#12、在程序的开发中，如何提高程序的运行效率？" class="headerlink" title="12、在程序的开发中，如何提高程序的运行效率？"></a>12、在程序的开发中，如何提高程序的运行效率？</h4><p>A、优化SQL语句，查询语句中尽量不使用select *，用哪个字段查哪个字段；少用子查询可用表连接代替；少用模糊查询；<br>B、数据表中创建索引；<br>C、对程序中经常用到的数据生成缓存。</p><h4 id="13、请用正则表达式（Regular-Expression）写一个函数验证电子邮件的格式是否正确。"><a href="#13、请用正则表达式（Regular-Expression）写一个函数验证电子邮件的格式是否正确。" class="headerlink" title="13、请用正则表达式（Regular Expression）写一个函数验证电子邮件的格式是否正确。"></a>13、请用正则表达式（Regular Expression）写一个函数验证电子邮件的格式是否正确。</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkemail</span>(<span class="hljs-params"><span class="hljs-variable">$email</span></span>)</span>{<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_match</span>(‘/^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>a-zA-Z-]+@[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>a-zA-Z-]+\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>a-zA-Z]+$/’,<span class="hljs-variable"><code class="language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkemail</span>(<span class="hljs-params"><span class="hljs-variable">$email</span></span>)</span>{<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_match</span>(‘/^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>a-zA-Z-]+@[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>a-zA-Z-]+\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>a-zA-Z]+$/’,<span class="hljs-variable">$email</span>)?’email格式正确‘:’email格式不正确‘;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="14、接口和抽象类的区别"><a href="#14、接口和抽象类的区别" class="headerlink" title="14、接口和抽象类的区别"></a>14、接口和抽象类的区别</h4><p>当多个同类的类要设计一个上层，通常设计为抽象类，当多个异构的类要设计一个上层，通常设计为接口。</p><h4 id="15、说说数据库的索引"><a href="#15、说说数据库的索引" class="headerlink" title="15、说说数据库的索引"></a>15、说说数据库的索引</h4><p>唯一索引、主键索引、联合索引</p><h4 id="16、说说redis常用的数据结构"><a href="#16、说说redis常用的数据结构" class="headerlink" title="16、说说redis常用的数据结构"></a>16、说说redis常用的数据结构</h4><p>string、list、hash、set、zset等</p><h4 id="17、Redis的内存淘汰策略有哪些"><a href="#17、Redis的内存淘汰策略有哪些" class="headerlink" title="17、Redis的内存淘汰策略有哪些"></a>17、Redis的内存淘汰策略有哪些</h4><p>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p><ul><li>全局的键空间选择性移除<ol><li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。</li><li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。（这个是最常用的）</li><li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li></ol></li><li>设置过期时间的键空间选择性移除<ol><li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</li><li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</li><li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</li></ol></li></ul><h4 id="18、Redis如何实现延时队列"><a href="#18、Redis如何实现延时队列" class="headerlink" title="18、Redis如何实现延时队列"></a>18、Redis如何实现延时队列</h4><p>使用sortedset，使用时间戳做score, 消息内容作为key,调用zadd来生产消息，消费者使用zrangbyscore获取n秒之前的数据做轮询处理。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下批处理</title>
      <link href="/posts/php-bat.html"/>
      <url>/posts/php-bat.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因工作需要，需要按条件删除指定表中大批量数据，故用php做了个站点页面处理程序，每页处理500条数据，处理后sleep(5)，跳转下一页；但程序运行中可能出现超时页面挂掉的情况，为了减少个人的工作量，就借助windows的任务计划程序，设置每两个小时，关闭浏览器，休眠几秒，再次在浏览器中访问处理程序地址。没想到效果还不错。下面是计划任务的bat程序。<br></p><figure class="highlight dos"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs dos"><span class="hljs-built_in">TASKKILL</span> /F /IM chrome.exe<br><span class="hljs-built_in">ping</span> -n <span class="hljs-number">10</span> <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> &gt; <span class="hljs-built_in">nul</span><br><span class="hljs-built_in">cmd</span> /c <span class="hljs-built_in">start</span> https://manage.lepayedu.com/index.php/my-test/deal-school-entry?page=<span class="hljs-number"><code class="language-hljs dos"><span class="hljs-built_in">TASKKILL</span> /F /IM chrome.exe<br><span class="hljs-built_in">ping</span> -n <span class="hljs-number">10</span> <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> &gt; <span class="hljs-built_in">nul</span><br><span class="hljs-built_in">cmd</span> /c <span class="hljs-built_in">start</span> https://manage.lepayedu.com/index.php/my-test/deal-school-entry?page=<span class="hljs-number">100</span><br></code></pre></td></tr></tbody></table></figure><br><img src="/images/php_bat_1.png" alt=""><p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己封装的一些常用的PHP函数</title>
      <link href="/posts/61e2bcf6.html"/>
      <url>/posts/61e2bcf6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-将字符串每隔n位显示一个指定字符"><a href="#1-将字符串每隔n位显示一个指定字符" class="headerlink" title="1. 将字符串每隔n位显示一个指定字符"></a>1. 将字符串每隔n位显示一个指定字符</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将字符串每隔n位显示一个指定字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $str   原始字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> int $n        间隔位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $d     分隔符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> string       结果字符串</span><br><span class="hljs-comment"> * eg: ed4a32c2=&gt;ed:4a:32:c2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">divisionStr</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span>,<span class="hljs-keyword">int</span> <span class="hljs-variable">$n</span>,<span class="hljs-keyword">string</span> <span class="hljs-variable">$d</span>=<span class="hljs-string">" "</span></span>):<span class="hljs-title">string</span></span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">join</span>(<span class="hljs-variable">$d</span>,<span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable"><code class="language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将字符串每隔n位显示一个指定字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $str   原始字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> int $n        间隔位数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $d     分隔符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> string       结果字符串</span><br><span class="hljs-comment"> * eg: ed4a32c2=&gt;ed:4a:32:c2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">divisionStr</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span>,<span class="hljs-keyword">int</span> <span class="hljs-variable">$n</span>,<span class="hljs-keyword">string</span> <span class="hljs-variable">$d</span>=<span class="hljs-string">" "</span></span>):<span class="hljs-title">string</span></span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">join</span>(<span class="hljs-variable">$d</span>,<span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$n</span>)));<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-打印图片的每一个像素颜色值"><a href="#2-打印图片的每一个像素颜色值" class="headerlink" title="2. 打印图片的每一个像素颜色值"></a>2. 打印图片的每一个像素颜色值</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印图片的每一个像素颜色值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $picUrl    图片路径</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printPicPixels</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$picUrl</span></span>): <span class="hljs-title">void</span> </span>{<br>    <span class="hljs-variable">$i</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>(<span class="hljs-variable">$picUrl</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$i</span>)    <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">imagesy</span>(<span class="hljs-variable">$i</span>); <span class="hljs-variable">$y</span>++) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$x</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$x</span> &lt; <span class="hljs-title function_ invoke__">imagesx</span>(<span class="hljs-variable">$i</span>); <span class="hljs-variable">$x</span>++) {<br>            <span class="hljs-variable">$rgb</span> = <span class="hljs-title function_ invoke__">imagecolorat</span>(<span class="hljs-variable">$i</span>, <span class="hljs-variable">$x</span>, <span class="hljs-variable">$y</span>);<br>            <span class="hljs-variable">$r</span> = (<span class="hljs-variable">$rgb</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>;<br>            <span class="hljs-variable">$g</span> = (<span class="hljs-variable">$rgb</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>;<br>            <span class="hljs-variable">$b</span> = <span class="hljs-variable">$rgb</span> &amp; <span class="hljs-number">0xFF</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">"rgb(<span class="hljs-subst">$r</span>,<span class="hljs-subst">$g</span>,<span class="hljs-subst"><code class="language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印图片的每一个像素颜色值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $picUrl    图片路径</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printPicPixels</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$picUrl</span></span>): <span class="hljs-title">void</span> </span>{<br>    <span class="hljs-variable">$i</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>(<span class="hljs-variable">$picUrl</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$i</span>)    <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">imagesy</span>(<span class="hljs-variable">$i</span>); <span class="hljs-variable">$y</span>++) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$x</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$x</span> &lt; <span class="hljs-title function_ invoke__">imagesx</span>(<span class="hljs-variable">$i</span>); <span class="hljs-variable">$x</span>++) {<br>            <span class="hljs-variable">$rgb</span> = <span class="hljs-title function_ invoke__">imagecolorat</span>(<span class="hljs-variable">$i</span>, <span class="hljs-variable">$x</span>, <span class="hljs-variable">$y</span>);<br>            <span class="hljs-variable">$r</span> = (<span class="hljs-variable">$rgb</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>;<br>            <span class="hljs-variable">$g</span> = (<span class="hljs-variable">$rgb</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>;<br>            <span class="hljs-variable">$b</span> = <span class="hljs-variable">$rgb</span> &amp; <span class="hljs-number">0xFF</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">"rgb(<span class="hljs-subst">$r</span>,<span class="hljs-subst">$g</span>,<span class="hljs-subst">$b</span>)"</span>;<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="3-字符串按照ASCII码顺序排序"><a href="#3-字符串按照ASCII码顺序排序" class="headerlink" title="3. 字符串按照ASCII码顺序排序"></a>3. 字符串按照ASCII码顺序排序</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串按照ASCII码顺序排序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> int $sort 排序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortStr</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span>, <span class="hljs-variable">$sort</span>=SORT_ASC</span>): <span class="hljs-title">string</span></span>{<br>    <span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$str</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$sort</span> == SORT_ASC){<br>        <span class="hljs-title function_ invoke__">asort</span>(<span class="hljs-variable">$arr</span>);<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-title function_ invoke__">arsort</span>(<span class="hljs-variable">$arr</span>);<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">''</span>, <span class="hljs-variable"><code class="language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串按照ASCII码顺序排序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $str 字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> int $sort 排序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortStr</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span>, <span class="hljs-variable">$sort</span>=SORT_ASC</span>): <span class="hljs-title">string</span></span>{<br>    <span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$str</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$sort</span> == SORT_ASC){<br>        <span class="hljs-title function_ invoke__">asort</span>(<span class="hljs-variable">$arr</span>);<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-title function_ invoke__">arsort</span>(<span class="hljs-variable">$arr</span>);<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">''</span>, <span class="hljs-variable">$arr</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="4-字节数转化为常用单位"><a href="#4-字节数转化为常用单位" class="headerlink" title="4. 字节数转化为常用单位"></a>4. 字节数转化为常用单位</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字节数转化为常用单位</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> int $size 字节数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$size</span></span>): <span class="hljs-title">string</span></span>{<br>    <span class="hljs-variable">$unit</span> = [<span class="hljs-string">'b'</span>, <span class="hljs-string">'kb'</span>, <span class="hljs-string">'mb'</span>, <span class="hljs-string">'gb'</span>, <span class="hljs-string">'tb'</span>, <span class="hljs-string">'pb'</span>];<br>    <span class="hljs-variable">$exp</span> = <span class="hljs-title function_ invoke__">floor</span>(<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-variable">$size</span>, <span class="hljs-number">1024</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$size</span> / <span class="hljs-title function_ invoke__">pow</span>(<span class="hljs-number">1024</span>, <span class="hljs-variable">$exp</span>), <span class="hljs-number">2</span>) . <span class="hljs-string">' '</span> . <span class="hljs-variable">$unit</span>[<span class="hljs-variable">$exp</span>];<br>}<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字节数转化为常用单位</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> int $size 字节数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$size</span></span>): <span class="hljs-title">string</span></span>{<br>    <span class="hljs-variable">$unit</span> = [<span class="hljs-string">'b'</span>, <span class="hljs-string">'kb'</span>, <span class="hljs-string">'mb'</span>, <span class="hljs-string">'gb'</span>, <span class="hljs-string">'tb'</span>, <span class="hljs-string">'pb'</span>];<br>    <span class="hljs-variable">$exp</span> = <span class="hljs-title function_ invoke__">floor</span>(<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-variable">$size</span>, <span class="hljs-number">1024</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$size</span> / <span class="hljs-title function_ invoke__">pow</span>(<span class="hljs-number">1024</span>, <span class="hljs-variable">$exp</span>), <span class="hljs-number">2</span>) . <span class="hljs-string">' '</span> . <span class="hljs-variable">$unit</span>[<span class="hljs-variable">$exp</span>];<br>}<br><span class="hljs-comment">// 使用：查看内存使用 echo convert(memory_get_usage(false));</span><br></code></pre></td></tr></tbody></table></figure><h3 id="5-ping指定地址，用于监控服务器是否在线"><a href="#5-ping指定地址，用于监控服务器是否在线" class="headerlink" title="5. ping指定地址，用于监控服务器是否在线"></a>5. ping指定地址，用于监控服务器是否在线</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ping 指定地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $address</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pingHost</span>(<span class="hljs-params"><span class="hljs-variable">$address</span></span>)</span>{<br>    <span class="hljs-variable">$address</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$address</span>);<br>    <span class="hljs-variable">$host</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$address</span>[<span class="hljs-string">'host'</span>]) ? <span class="hljs-variable">$address</span>[<span class="hljs-string">'host'</span>] : <span class="hljs-string">''</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$host</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-variable">$status</span> = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strcasecmp</span>(PHP_OS, <span class="hljs-string">'WINNT'</span>) === <span class="hljs-number">0</span>) {<br>        <span class="hljs-variable">$rs</span> = <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">"ping -n 1 <span class="hljs-subst">{$host}</span>"</span>, <span class="hljs-variable">$outcome</span>, <span class="hljs-variable">$status</span>);  <span class="hljs-comment">// Windows 服务器下</span><br>    } <span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">strcasecmp</span>(PHP_OS, <span class="hljs-string">'Linux'</span>) === <span class="hljs-number">0</span>) {<br>        <span class="hljs-variable">$rs</span> = <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">"ping -c 1 <span class="hljs-subst">{$host}</span>"</span>, <span class="hljs-variable">$outcome</span>, <span class="hljs-variable">$status</span>);  <span class="hljs-comment">// Linux 服务器下</span><br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$status</span>==<span class="hljs-number">0</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>}<br><br><span class="hljs-comment">//$url = "https://cloud.tencent.com/document/api/457/37184?id=232";</span><br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ping 指定地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $address</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pingHost</span>(<span class="hljs-params"><span class="hljs-variable">$address</span></span>)</span>{<br>    <span class="hljs-variable">$address</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$address</span>);<br>    <span class="hljs-variable">$host</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$address</span>[<span class="hljs-string">'host'</span>]) ? <span class="hljs-variable">$address</span>[<span class="hljs-string">'host'</span>] : <span class="hljs-string">''</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$host</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-variable">$status</span> = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strcasecmp</span>(PHP_OS, <span class="hljs-string">'WINNT'</span>) === <span class="hljs-number">0</span>) {<br>        <span class="hljs-variable">$rs</span> = <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">"ping -n 1 <span class="hljs-subst">{$host}</span>"</span>, <span class="hljs-variable">$outcome</span>, <span class="hljs-variable">$status</span>);  <span class="hljs-comment">// Windows 服务器下</span><br>    } <span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">strcasecmp</span>(PHP_OS, <span class="hljs-string">'Linux'</span>) === <span class="hljs-number">0</span>) {<br>        <span class="hljs-variable">$rs</span> = <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">"ping -c 1 <span class="hljs-subst">{$host}</span>"</span>, <span class="hljs-variable">$outcome</span>, <span class="hljs-variable">$status</span>);  <span class="hljs-comment">// Linux 服务器下</span><br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$status</span>==<span class="hljs-number">0</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>}<br><br><span class="hljs-comment">//$url = "https://cloud.tencent.com/document/api/457/37184?id=232";</span><br><span class="hljs-comment">//var_dump(pingHost($url));       //true</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见颜色值</title>
      <link href="/posts/normal-rgb.html"/>
      <url>/posts/normal-rgb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>RGB(255,255,255)：白色   #FFFFFF<br>RGB(0,0,0)：黑色  #000000<br>RGB(255,0,0)：红色  #FF0000</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/posts/cross-domain.html"/>
      <url>/posts/cross-domain.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="存在原因"><a href="#存在原因" class="headerlink" title="存在原因"></a>存在原因</h3><p>浏览器的同源策略，一个源表示协议、端口、域名都相同，否则就形成跨域。<br><img src="/images/cross_domain_1.png" alt=""></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>  A. 服务器响应头：header(“Access-Control-Allow-Origin:*”);<br>  B. iframe实现跨域<br>  C. jsonp  带有 src属性的标签(&lt;script&gt;/&lt;img&gt;/&lt;iframe&gt;)不受同源策略限制</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锚定效应</title>
      <link href="/posts/anchoring-effect.html"/>
      <url>/posts/anchoring-effect.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>沉锚效应，心理学名词，指的是人们在对某人某事做出判断时，易受第一印象或第一信息支配，就像沉入海底的锚一样把人们的思想固定在某处。</p>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锚定效应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP常用的算法</title>
      <link href="/posts/php-common-algorithm.html"/>
      <url>/posts/php-common-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>时间复杂度：O(N^2)</li><li>代码实现<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bubbleSort</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span>{<br>    <span class="hljs-variable">$n</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$n</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>++){<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span>&lt;<span class="hljs-variable">$n</span>; <span class="hljs-variable">$j</span>++){<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>] &lt; <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>]){<br>                [<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>], <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>]] = [<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>], <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>]];<br>            }<br>        }<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>}<br><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">45</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">54</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">bubbleSort</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bubbleSort</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span>{<br>    <span class="hljs-variable">$n</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$n</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>++){<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span>&lt;<span class="hljs-variable">$n</span>; <span class="hljs-variable">$j</span>++){<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>] &lt; <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>]){<br>                [<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>], <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>]] = [<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>], <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>]];<br>            }<br>        }<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>}<br><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">45</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">54</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">bubbleSort</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-comment">// Array ( [0] => 2 [1] => 3 [2] => 5 [3] => 23 [4] => 45 [5] => 54 )</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span>{<br>    <span class="hljs-variable">$n</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$n</span> &lt;= <span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>    <span class="hljs-variable">$index</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$leftArr</span> = <span class="hljs-variable">$rightArr</span> = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++){<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>] &lt;= <span class="hljs-variable">$index</span>){<br>            <span class="hljs-variable">$leftArr</span>[] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>        }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-variable">$rightArr</span>[] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>        }<br>    }<br><br>    <span class="hljs-variable">$leftArr</span> = <span class="hljs-title function_ invoke__">quickSort</span>(<span class="hljs-variable">$leftArr</span>);<br>    <span class="hljs-variable">$rightArr</span> = <span class="hljs-title function_ invoke__">quickSort</span>(<span class="hljs-variable">$rightArr</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">array_merge</span>(<span class="hljs-variable">$leftArr</span>,[<span class="hljs-variable">$index</span>],<span class="hljs-variable">$rightArr</span>);<br>}<br><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">45</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">54</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">quickSort</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span>{<br>    <span class="hljs-variable">$n</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$n</span> &lt;= <span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>    <span class="hljs-variable">$index</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$leftArr</span> = <span class="hljs-variable">$rightArr</span> = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++){<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>] &lt;= <span class="hljs-variable">$index</span>){<br>            <span class="hljs-variable">$leftArr</span>[] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>        }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-variable">$rightArr</span>[] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>        }<br>    }<br><br>    <span class="hljs-variable">$leftArr</span> = <span class="hljs-title function_ invoke__">quickSort</span>(<span class="hljs-variable">$leftArr</span>);<br>    <span class="hljs-variable">$rightArr</span> = <span class="hljs-title function_ invoke__">quickSort</span>(<span class="hljs-variable">$rightArr</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">array_merge</span>(<span class="hljs-variable">$leftArr</span>,[<span class="hljs-variable">$index</span>],<span class="hljs-variable">$rightArr</span>);<br>}<br><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">45</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">54</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">quickSort</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-comment">// Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 5 [4] => 23 [5] => 45 [6] => 54 )</span><br></code></pre></td></tr></tbody></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li>时间复杂度：O(N^2)</li><li>代码实现<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectSort</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span>{<br>    <span class="hljs-variable">$n</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$n</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>++){<br>        <span class="hljs-variable">$k</span> = <span class="hljs-variable">$i</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span>&lt;<span class="hljs-variable">$n</span>; <span class="hljs-variable">$j</span>++){<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>] &gt; <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>]){<br>                <span class="hljs-variable">$k</span> = <span class="hljs-variable">$j</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$k</span> != <span class="hljs-variable">$i</span>){<br>            [<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>],<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>]] = [<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>],<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>]];<br>        }<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>}<br><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">45</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">54</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">selectSort</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectSort</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span>{<br>    <span class="hljs-variable">$n</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$n</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>++){<br>        <span class="hljs-variable">$k</span> = <span class="hljs-variable">$i</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span>&lt;<span class="hljs-variable">$n</span>; <span class="hljs-variable">$j</span>++){<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>] &gt; <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>]){<br>                <span class="hljs-variable">$k</span> = <span class="hljs-variable">$j</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$k</span> != <span class="hljs-variable">$i</span>){<br>            [<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>],<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>]] = [<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>],<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>]];<br>        }<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>}<br><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">45</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">54</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">selectSort</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-comment">// Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 5 [4] => 23 [5] => 45 [6] => 54 )</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul><li>流程<br>将一个待排序的无序的数组看作是两个列表，一个有序的列表，一个无序的列表，从无序的列表每次拿出一个待插入的元素，插入到有序的列表中，直到无序列表为空，排序完毕.</li><li>实例<ol><li>有一个无序的一维数组是这次需要排序的数组，数组是：[36,12,96,-1]</li><li>首先把数组的第一个元素 [36] 看作是一个独立的有序的列表，把剩下的元素 [12, 96, -1] 看作是一个无序的列表</li><li>第一个待插入的元素就是 12，要把 12 插入到有序的列表中，首先需要 12 和 36 比较，如果带插入的元素 12 小于 36, 就需要把 12 插入到 36前面，也就是 36 要后移一位。</li><li>插入排序实际是需要比较数组元素的总数减一轮，因为第一个元素不需要比较。</li></ol></li><li>时间复杂度：O(N^2)</li><li>代码实现  <figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertSort</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span>{<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$arr</span>))    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-variable">$count</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> &lt;= <span class="hljs-number">1</span>){<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>    }<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$count</span>; <span class="hljs-variable">$i</span>++){<br>        <span class="hljs-variable">$insertValue</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$insertIndex</span> = <span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-variable">$insertIndex</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$insertValue</span> &lt; <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$insertIndex</span>]){<br>            <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$insertIndex</span>+<span class="hljs-number">1</span>] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$insertIndex</span>];<br>            <span class="hljs-variable">$insertIndex</span>--;<br>        }<br>        <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$insertIndex</span>+<span class="hljs-number">1</span>] = <span class="hljs-variable">$insertValue</span>;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>}<br><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">45</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">54</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">insertSort</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-comment"><code class="language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertSort</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span>{<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$arr</span>))    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-variable">$count</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> &lt;= <span class="hljs-number">1</span>){<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>    }<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$count</span>; <span class="hljs-variable">$i</span>++){<br>        <span class="hljs-variable">$insertValue</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$insertIndex</span> = <span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-variable">$insertIndex</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$insertValue</span> &lt; <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$insertIndex</span>]){<br>            <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$insertIndex</span>+<span class="hljs-number">1</span>] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$insertIndex</span>];<br>            <span class="hljs-variable">$insertIndex</span>--;<br>        }<br>        <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$insertIndex</span>+<span class="hljs-number">1</span>] = <span class="hljs-variable">$insertValue</span>;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>}<br><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">45</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">54</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>];<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">insertSort</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-comment">//  Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 5 [4] => 23 [5] => 45 [6] => 54 )</span><br></code></pre></td></tr></tbody></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3></li></ul><h3 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h3><ul><li>概念<br>  二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。<br>  首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</li><li>代码实例<ul><li>循环二分查找<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binarySearch</span>(<span class="hljs-params"><span class="hljs-variable">$array</span>,<span class="hljs-variable">$findVal</span></span>)</span>{<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$array</span>) || <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$array</span>)) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-variable">$start</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$array</span>) - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$start</span> &lt;= <span class="hljs-variable">$end</span>){<br>        <span class="hljs-variable">$middle</span> = <span class="hljs-title function_ invoke__">intval</span>((<span class="hljs-variable">$start</span>+<span class="hljs-variable">$end</span>)/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$middle</span>] &gt; <span class="hljs-variable">$findVal</span>){<br>            <span class="hljs-variable">$end</span> = <span class="hljs-variable">$middle</span> - <span class="hljs-number">1</span>;<br>        }<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$middle</span>] &lt; <span class="hljs-variable">$findVal</span>){<br>            <span class="hljs-variable">$start</span> = <span class="hljs-variable">$middle</span> + <span class="hljs-number">1</span>;<br>        }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$middle</span>;<br>        }<br>    }<br>    <br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>}<br>    <br><span class="hljs-variable">$array</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">54</span>,<span class="hljs-number">67</span>,<span class="hljs-number">124</span>,<span class="hljs-number">542</span>,<span class="hljs-number">642</span>,<span class="hljs-number">843</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">binarySearch</span>(<span class="hljs-variable">$array</span>, <span class="hljs-number">542</span>);     <span class="hljs-comment"><code class="language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binarySearch</span>(<span class="hljs-params"><span class="hljs-variable">$array</span>,<span class="hljs-variable">$findVal</span></span>)</span>{<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$array</span>) || <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$array</span>)) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-variable">$start</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$array</span>) - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$start</span> &lt;= <span class="hljs-variable">$end</span>){<br>        <span class="hljs-variable">$middle</span> = <span class="hljs-title function_ invoke__">intval</span>((<span class="hljs-variable">$start</span>+<span class="hljs-variable">$end</span>)/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$middle</span>] &gt; <span class="hljs-variable">$findVal</span>){<br>            <span class="hljs-variable">$end</span> = <span class="hljs-variable">$middle</span> - <span class="hljs-number">1</span>;<br>        }<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$middle</span>] &lt; <span class="hljs-variable">$findVal</span>){<br>            <span class="hljs-variable">$start</span> = <span class="hljs-variable">$middle</span> + <span class="hljs-number">1</span>;<br>        }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$middle</span>;<br>        }<br>    }<br>    <br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>}<br>    <br><span class="hljs-variable">$array</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">54</span>,<span class="hljs-number">67</span>,<span class="hljs-number">124</span>,<span class="hljs-number">542</span>,<span class="hljs-number">642</span>,<span class="hljs-number">843</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">binarySearch</span>(<span class="hljs-variable">$array</span>, <span class="hljs-number">542</span>);     <span class="hljs-comment">// 4</span><br></code></pre></td></tr></tbody></table></figure></li><li>递归二分查找<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binarySearch</span>(<span class="hljs-params"><span class="hljs-variable">$array</span>,<span class="hljs-variable">$findVal</span>,<span class="hljs-variable">$start</span>,<span class="hljs-variable">$end</span></span>)</span>{<br>    <span class="hljs-variable">$middle</span> = <span class="hljs-title function_ invoke__">intval</span>((<span class="hljs-variable">$start</span>+<span class="hljs-variable">$end</span>)/<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$start</span>&gt;<span class="hljs-variable">$end</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$middle</span>] &gt; <span class="hljs-variable">$findVal</span>){<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">binarySearch</span>(<span class="hljs-variable">$array</span>,<span class="hljs-variable">$findVal</span>,<span class="hljs-variable">$start</span>,<span class="hljs-variable">$middle</span>-<span class="hljs-number">1</span>);<br>    }<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$middle</span>] &lt; <span class="hljs-variable">$findVal</span>){<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">binarySearch</span>(<span class="hljs-variable">$array</span>,<span class="hljs-variable">$findVal</span>,<span class="hljs-variable">$middle</span>+<span class="hljs-number">1</span>,<span class="hljs-variable">$end</span>);<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$middle</span>;<br>    }<br>}<br><br><span class="hljs-variable">$array</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">54</span>,<span class="hljs-number">67</span>,<span class="hljs-number">124</span>,<span class="hljs-number">542</span>,<span class="hljs-number">642</span>,<span class="hljs-number">843</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">binarySearch</span>(<span class="hljs-variable">$array</span>, <span class="hljs-number">542</span>,<span class="hljs-number">0</span>,<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$array</span>)-<span class="hljs-number">1</span>);     <span class="hljs-comment"><code class="language-hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binarySearch</span>(<span class="hljs-params"><span class="hljs-variable">$array</span>,<span class="hljs-variable">$findVal</span>,<span class="hljs-variable">$start</span>,<span class="hljs-variable">$end</span></span>)</span>{<br>    <span class="hljs-variable">$middle</span> = <span class="hljs-title function_ invoke__">intval</span>((<span class="hljs-variable">$start</span>+<span class="hljs-variable">$end</span>)/<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$start</span>&gt;<span class="hljs-variable">$end</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$middle</span>] &gt; <span class="hljs-variable">$findVal</span>){<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">binarySearch</span>(<span class="hljs-variable">$array</span>,<span class="hljs-variable">$findVal</span>,<span class="hljs-variable">$start</span>,<span class="hljs-variable">$middle</span>-<span class="hljs-number">1</span>);<br>    }<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$middle</span>] &lt; <span class="hljs-variable">$findVal</span>){<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">binarySearch</span>(<span class="hljs-variable">$array</span>,<span class="hljs-variable">$findVal</span>,<span class="hljs-variable">$middle</span>+<span class="hljs-number">1</span>,<span class="hljs-variable">$end</span>);<br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$middle</span>;<br>    }<br>}<br><br><span class="hljs-variable">$array</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">54</span>,<span class="hljs-number">67</span>,<span class="hljs-number">124</span>,<span class="hljs-number">542</span>,<span class="hljs-number">642</span>,<span class="hljs-number">843</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">binarySearch</span>(<span class="hljs-variable">$array</span>, <span class="hljs-number">542</span>,<span class="hljs-number">0</span>,<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$array</span>)-<span class="hljs-number">1</span>);     <span class="hljs-comment">// 4</span><br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB笔记</title>
      <link href="/posts/mongodb-notes.html"/>
      <url>/posts/mongodb-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="常用脚本"><a href="#常用脚本" class="headerlink" title="常用脚本"></a>常用脚本</h3><ol><li><p>修改字段名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql">db.getCollection(<span class="hljs-string">'集合名'</span>).<span class="hljs-keyword">update</span>({}, {$rename: {"修改前字段名1": "修改后字段名1", "修改前字段名2": "修改后字段名2"...}}, {multi:<span class="hljs-literal"><code class="language-hljs sql">db.getCollection(<span class="hljs-string">'集合名'</span>).<span class="hljs-keyword">update</span>({}, {$rename: {"修改前字段名1": "修改后字段名1", "修改前字段名2": "修改后字段名2"...}}, {multi:<span class="hljs-literal">true</span>})<br></code></pre></td></tr></tbody></table></figure><p><code>{multi:true}</code>表示 对该集合的所有数据生效</p></li><li><p>新增字段</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql">db.getCollection(<span class="hljs-string">'集合名'</span>).<span class="hljs-keyword">update</span>({}, {$<span class="hljs-keyword">set</span>: {"字段名1": "", "字段名2": ""...}}, {multi:<span class="hljs-literal"><code class="language-hljs sql">db.getCollection(<span class="hljs-string">'集合名'</span>).<span class="hljs-keyword">update</span>({}, {$<span class="hljs-keyword">set</span>: {"字段名1": "", "字段名2": ""...}}, {multi:<span class="hljs-literal">true</span>})<br></code></pre></td></tr></tbody></table></figure><p><code>{multi:true}</code>表示 对该集合的所有数据生效</p></li><li><p>更新某个字段的值，使其与另一个字段的值相同</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs sql">db.getCollection(<span class="hljs-string">'集合名'</span>).find().forEach(<br><span class="hljs-keyword">function</span>(item){<br>db.getCollection(<span class="hljs-string">'集合名'</span>).<span class="hljs-keyword"><code class="language-hljs sql">db.getCollection(<span class="hljs-string">'集合名'</span>).find().forEach(<br><span class="hljs-keyword">function</span>(item){<br>db.getCollection(<span class="hljs-string">'集合名'</span>).<span class="hljs-keyword">update</span>({"_id":item._id}, {"$set":{"字段名A":item.字段名B}}, {})<br>}<br>)<br></code></pre></td></tr></tbody></table></figure></li><li><p>创建集合</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><code class="language-hljs sql">db.createCollection("集合名");<br></code></pre></td></tr></tbody></table></figure></li></ol><ol><li>创建索引<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><code class="language-hljs sql">db.getCollection("集合名").createIndex({<br>    "字段名": NumberInt("1"),<br>    "字段名": NumberInt("-1"),<br>……<br>    "字段名": NumberInt("1")<br>}, {<br>    name: "索引名"<br>});<br></code></pre></td></tr></tbody></table></figure>1：升序，-1：降序</li></ol><ol><li>插入数据<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs sql">db.getCollection("集合名").<span class="hljs-keyword">insert</span>({<br>"字段1": 值<span class="hljs-number">1</span>,<br>"字段2": 值<span class="hljs-number"><code class="language-hljs sql">db.getCollection("集合名").<span class="hljs-keyword">insert</span>({<br>"字段1": 值<span class="hljs-number">1</span>,<br>"字段2": 值<span class="hljs-number">2</span>,<br>……<br>    "字段n": 值n<br>});<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标管理</title>
      <link href="/posts/target-management.html"/>
      <url>/posts/target-management.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目标管理"><a href="#目标管理" class="headerlink" title="目标管理"></a>目标管理</h2><h2 id="向上管理"><a href="#向上管理" class="headerlink" title="向上管理"></a>向上管理</h2><h2 id="向下负责"><a href="#向下负责" class="headerlink" title="向下负责"></a>向下负责</h2><h2 id="激励团队"><a href="#激励团队" class="headerlink" title="激励团队"></a>激励团队</h2>]]></content>
      
      
      <categories>
          
          <category> 技术管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号消息推送</title>
      <link href="/posts/wx-msg-push.html"/>
      <url>/posts/wx-msg-push.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、公众号模板消息推送"><a href="#1、公众号模板消息推送" class="headerlink" title="1、公众号模板消息推送"></a>1、公众号模板消息推送</h3><ol><li>需在公众号的IP白名单中添加IP<br><img src="/images/wx_msg_push_1.png" alt=""></li><li><p>启用服务器配置<br><img src="/images/wx_msg_push_2.png" alt=""></p></li><li><p>报错<code>ridinvalid weapp pagepath</code><br>说明公众号关联的小程序没有这个界面，可以不设置pagepath</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品设计</title>
      <link href="/posts/product-design.html"/>
      <url>/posts/product-design.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、我们的手机上都装了很多APP，而现在的APP基本上都需要账号登录。那么问题来了，如果手机丢了，你最关心的是什么呢，是这些APP的账号信息泄露被不法份子使用，还是这个应用里的个人隐私数据泄露呢？个人感觉可以从以下几个方面提高产品的安全性：</p><p>  A、APP内部涉及到交易功能需校验交易密码；</p><p>  B、在进入指定页面的时候，添加面容ID/手势解锁，如启动时、进入个人中心时等；</p><p>  C、APP内可进行设备管理，APP内可查看设备的最近登录信息，并解绑当前设备外的指定设备(或删除指定设备数据)；</p><p>  D、对于不合常规的系列行为进行限制，如：修改登录密码后立即注销账号。</p>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html网页内容转为pdf文件</title>
      <link href="/posts/html-to-pdf.html"/>
      <url>/posts/html-to-pdf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用wkhtmltopdf"><a href="#使用wkhtmltopdf" class="headerlink" title="使用wkhtmltopdf"></a>使用wkhtmltopdf</h3><p>软件下载地址：<a href="https://wkhtmltopdf.org/downloads.html，需翻墙">https://wkhtmltopdf.org/downloads.html，需翻墙</a></p><ul><li>windows下使用<br>下载并安装<br>cmd命令行执行示例：<br><code>wkhtmltopdf\bin\wkhtmltopdf.exe https://crazy-boy.com/xx.html F:/b.pdf</code><br>页面地址中不能含有&amp;等特殊符号</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.cnblogs.com/see7di/p/3781864.html">https://www.cnblogs.com/see7di/p/3781864.html</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goframe框架使用</title>
      <link href="/posts/goframe-note.html"/>
      <url>/posts/goframe-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="gen-dao使用"><a href="#gen-dao使用" class="headerlink" title="gen dao使用"></a>gen dao使用</h4><ol><li>下载软件：<a href="https://github.com/gogf/gf-cli/releases">https://github.com/gogf/gf-cli/releases</a></li><li><p>安装，并添加环境变量<br><img src="/images/goframe_note_1.png" alt=""></p></li><li><p>查看版本：<code>gf -version</code></p></li><li>更新model：<code>gf gen dao -c bin/config.toml -path . -r tf_</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Goframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化</title>
      <link href="/posts/mysql-optimization.html"/>
      <url>/posts/mysql-optimization.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">数据库优化无论实在面试还是工作中都非常重要，结合个人多年的从业经验，它主要从数据库设计、sql优化、服务器优化等方面来进行。</div><h3 id="数据库设计优化"><a href="#数据库设计优化" class="headerlink" title="数据库设计优化"></a>数据库设计优化</h3><h4 id="表设计方面"><a href="#表设计方面" class="headerlink" title="表设计方面"></a>表设计方面</h4><ul><li>1）表的数据类型是否合理，要遵守选取数据类型越简单越小的原则</li><li>2）表中碎片是否整理</li><li>3）表的统计信息是否收集，只有统计信息准确，执行计划才能帮助优化SQL</li><li>4）表设计时候增加必要的注释，说明字段的用途<h4 id="字段设计方面"><a href="#字段设计方面" class="headerlink" title="字段设计方面"></a>字段设计方面</h4></li><li>1）使用varchar替代char<br>   varchar的存储是按实际长度来存储的，可以节省存储空间，而char是按照定义长度来存储的，不足补充空格</li></ul><h3 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h3><h4 id="常规优化"><a href="#常规优化" class="headerlink" title="常规优化"></a>常规优化</h4><ul><li>1）尽量不要使用 <code>select *</code>，而是使用具体的字段<br>   避免了不需要的列返回给客户端调用，节约流量，<code>select *</code>可能会用到覆盖索引，直接从索引中获取要查询的列数据，减少了回表查询，调高查询效率</li><li>2）避免在where子句中使用OR来进行条件关联，有可能造成索引失效</li><li>3）尽量使用数值类型代替字符串<br>   处理引擎在执行查询和连接时候，如果是字符串类型则会逐个比较字符，要是数值类型的话直接比较一次就可以了，字符串的连接性能也会大大降低。</li><li>4）应尽量避免在where子句中使用!=或&lt;&gt;操作符<br>   这种情况可能会造成索引失效，经过sql优化器优化，执行引擎发现使用索引的代价比不走索引还要大，就会放弃使用索引直接走全表扫描</li><li>5）在inner join 、left join、right join都满足条件的状况下，优先使用inner join<br>   inner join内连接，只保留左右两张表中都匹配的结果集；left join 左连接，以左表为主表，返回左表中的所有行，即使右表中没有匹配的行；right join右连接，以右表为主表，返回右表中的所有数据，即使坐标中没有匹配的行；如果是inner join等值连接，返回的行数比较小，所以效率较高；左右连接的话，按照“小表驱动大表的原则”，用小表作为主表</li><li>6）遵循“小表驱动大表”的原则<br>   在含有复杂子查询的sql语句中，在满足条件的情况下，应该将小表放在里面层层过滤，缩小查询的范围</li><li>7）分组过滤的时候，应该先过滤，再分组</li><li>8）执行delete或update语句，加个limit或者循环分批次删除<br>   降低误删数据的代价，避免长事务，数据量大的话，容易把cpu打满，一次性删除数据太多的话可能造成锁表</li><li>9）用union all替代union<br>   union会对筛选掉重复的记录，所以会在连接后对所产生的结果集先进行排序运算，然后再删除重复记录返回，如果数据量比较大的情况下可能会使用磁盘排序</li><li>10）多条写数据，建议采用批量提交减少事务提交的次数，提高性能</li><li>11）关联查询的表连接不要太多<br>   关联表的个数越多，编译的时间和开销也越大，每次关联在内存中都会产生一个临时表</li><li>12）索引并不是越多越好<br>   索引虽然提高了查询性能，但是会降低数据写入的速度，并且索引的存储是要占用空间的，索引也是排序的，排序是要花费时间的，insert和update操作可能会导致重建索引，如果数据量巨大，这笔消耗也是非常惊人的 </li><li>13）去重distinct过滤字段要少<br>   数据库引擎对数据的比较、过滤是一个很耗费资源的操作</li><li><p>14）尽量避使用游标</p><h4 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h4></li><li>1）通过explain，查看执行计划，检查索引使用情况，没有用到索引，考虑创建</li><li>2）创建索引前，查看索引的选择性distinct，判断该字段是否适创建索引<br> 索引选择性指不重复的索引值和数据记录总数的比值，越接近1越好；主键索引和唯一索引选择性是1</li><li>3）创建索引后，再查看执行计划，对比两次结果，查看效率是否提高<h4 id="慢查询优化"><a href="#慢查询优化" class="headerlink" title="慢查询优化"></a>慢查询优化</h4></li><li>1）如果一个select语句中没有where条件，只有单纯的group by | order by，这是无法使用索引的。需要有where作为基础铺垫，遵从最左原则才能使用索引。</li></ul><h3 id="服务器优化"><a href="#服务器优化" class="headerlink" title="服务器优化"></a>服务器优化</h3><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitMQ+yii2实现远程过程调用(RPC)</title>
      <link href="/posts/yii2-rabbitmq.html"/>
      <url>/posts/yii2-rabbitmq.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="RPC服务端代码"><a href="#RPC服务端代码" class="headerlink" title="RPC服务端代码"></a>RPC服务端代码</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">console</span>\<span class="hljs-title class_">controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">yii</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">console</span>\<span class="hljs-title">Controller</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Connection</span>\<span class="hljs-title">AMQPStreamConnection</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">AMQPMessage</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RpcServerController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span>{<br><br><span class="hljs-keyword">private</span> <span class="hljs-variable">$channel</span>;<br><span class="hljs-keyword">private</span>  <span class="hljs-variable">$connection</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span> (<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable">$amqp</span> = yii::<span class="hljs-variable">$app</span>-&gt;params[<span class="hljs-string">'amqp'</span>];<br>        <br>        <span class="hljs-comment">//建立一个到RabbitMQ服务器的连接</span><br>        <span class="hljs-variable language_">$this</span>-&gt;connection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQPStreamConnection</span>(<span class="hljs-variable">$amqp</span>[<span class="hljs-string">"host"</span>], <span class="hljs-variable">$amqp</span>[<span class="hljs-string">"port"</span>], <span class="hljs-variable">$amqp</span>[<span class="hljs-string">"user"</span>], <span class="hljs-variable">$amqp</span>[<span class="hljs-string">"password"</span>]);<br>        <span class="hljs-variable language_">$this</span>-&gt;channel = <span class="hljs-variable language_">$this</span>-&gt;connection-&gt;<span class="hljs-title function_ invoke__">channel</span>();<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * RPC服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionRpcServer</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-comment">//建立一个到RabbitMQ服务器的连接</span><br>        <span class="hljs-variable">$connection</span> = <span class="hljs-variable language_">$this</span>-&gt;connection;<br>        <span class="hljs-variable">$channel</span> = <span class="hljs-variable language_">$this</span>-&gt;channel;<br>        <br>        <span class="hljs-comment">//接下来,我们创建一个通道</span><br>        <span class="hljs-variable">$channel</span>-&gt;<span class="hljs-title function_ invoke__">queue_declare</span>(<span class="hljs-string">'rpc_queue'</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>);<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fib</span>(<span class="hljs-params"><span class="hljs-variable">$n</span></span>) </span>{<br>           <span class="hljs-keyword">return</span> <span class="hljs-variable">$n</span>;<br>        }<br>        <br>        <span class="hljs-comment">//回调</span><br>        <span class="hljs-variable">$callback</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$req</span></span>)</span>{<br>            <span class="hljs-variable">$n</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$req</span>-&gt;body);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">" [.] fib("</span>, <span class="hljs-variable">$n</span>, <span class="hljs-string">")\n"</span>;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQPMessage</span>((<span class="hljs-keyword">string</span>) <span class="hljs-title function_ invoke__">fib</span>(<span class="hljs-variable">$n</span>),[]<span class="hljs-string">'correlation_id'</span> =&gt; <span class="hljs-variable">$req</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">'correlation_id'</span>)]);<br>            <span class="hljs-variable">$req</span>-&gt;delivery_info[<span class="hljs-string">'channel'</span>]-&gt;<span class="hljs-title function_ invoke__">basic_publish</span>(<span class="hljs-variable">$msg</span>,<span class="hljs-string">''</span>, <span class="hljs-variable">$req</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">'reply_to'</span>));<br>            <span class="hljs-variable">$req</span>-&gt;delivery_info[<span class="hljs-string">'channel'</span>]-&gt;<span class="hljs-title function_ invoke__">basic_ack</span>(<span class="hljs-variable">$req</span>-&gt;delivery_info[<span class="hljs-string">'delivery_tag'</span>]);<br>        };<br>        <br>        <span class="hljs-variable">$channel</span>-&gt;<span class="hljs-title function_ invoke__">basic_qos</span>(<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-variable">$channel</span>-&gt;<span class="hljs-title function_ invoke__">basic_consume</span>(<span class="hljs-string">'rpc_queue'</span>,<span class="hljs-string">''</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-variable">$callback</span>);<br>        <br>        <span class="hljs-keyword">while</span> (<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$channel</span>-&gt;callbacks)) {<br><span class="hljs-variable">$channel</span>-&gt;<span class="hljs-title function_ invoke__">wait</span>();<br>        }<br>        <br>        <span class="hljs-variable">$channel</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>        <span class="hljs-variable">$connection</span>-&gt;<span class="hljs-title function_ invoke__"><code class="language-hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">console</span>\<span class="hljs-title class_">controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">yii</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">console</span>\<span class="hljs-title">Controller</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Connection</span>\<span class="hljs-title">AMQPStreamConnection</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">AMQPMessage</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RpcServerController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span>{<br><br><span class="hljs-keyword">private</span> <span class="hljs-variable">$channel</span>;<br><span class="hljs-keyword">private</span>  <span class="hljs-variable">$connection</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span> (<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable">$amqp</span> = yii::<span class="hljs-variable">$app</span>-&gt;params[<span class="hljs-string">'amqp'</span>];<br>        <br>        <span class="hljs-comment">//建立一个到RabbitMQ服务器的连接</span><br>        <span class="hljs-variable language_">$this</span>-&gt;connection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQPStreamConnection</span>(<span class="hljs-variable">$amqp</span>[<span class="hljs-string">"host"</span>], <span class="hljs-variable">$amqp</span>[<span class="hljs-string">"port"</span>], <span class="hljs-variable">$amqp</span>[<span class="hljs-string">"user"</span>], <span class="hljs-variable">$amqp</span>[<span class="hljs-string">"password"</span>]);<br>        <span class="hljs-variable language_">$this</span>-&gt;channel = <span class="hljs-variable language_">$this</span>-&gt;connection-&gt;<span class="hljs-title function_ invoke__">channel</span>();<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * RPC服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionRpcServer</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-comment">//建立一个到RabbitMQ服务器的连接</span><br>        <span class="hljs-variable">$connection</span> = <span class="hljs-variable language_">$this</span>-&gt;connection;<br>        <span class="hljs-variable">$channel</span> = <span class="hljs-variable language_">$this</span>-&gt;channel;<br>        <br>        <span class="hljs-comment">//接下来,我们创建一个通道</span><br>        <span class="hljs-variable">$channel</span>-&gt;<span class="hljs-title function_ invoke__">queue_declare</span>(<span class="hljs-string">'rpc_queue'</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>);<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fib</span>(<span class="hljs-params"><span class="hljs-variable">$n</span></span>) </span>{<br>           <span class="hljs-keyword">return</span> <span class="hljs-variable">$n</span>;<br>        }<br>        <br>        <span class="hljs-comment">//回调</span><br>        <span class="hljs-variable">$callback</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$req</span></span>)</span>{<br>            <span class="hljs-variable">$n</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$req</span>-&gt;body);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">" [.] fib("</span>, <span class="hljs-variable">$n</span>, <span class="hljs-string">")\n"</span>;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQPMessage</span>((<span class="hljs-keyword">string</span>) <span class="hljs-title function_ invoke__">fib</span>(<span class="hljs-variable">$n</span>),[]<span class="hljs-string">'correlation_id'</span> =&gt; <span class="hljs-variable">$req</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">'correlation_id'</span>)]);<br>            <span class="hljs-variable">$req</span>-&gt;delivery_info[<span class="hljs-string">'channel'</span>]-&gt;<span class="hljs-title function_ invoke__">basic_publish</span>(<span class="hljs-variable">$msg</span>,<span class="hljs-string">''</span>, <span class="hljs-variable">$req</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">'reply_to'</span>));<br>            <span class="hljs-variable">$req</span>-&gt;delivery_info[<span class="hljs-string">'channel'</span>]-&gt;<span class="hljs-title function_ invoke__">basic_ack</span>(<span class="hljs-variable">$req</span>-&gt;delivery_info[<span class="hljs-string">'delivery_tag'</span>]);<br>        };<br>        <br>        <span class="hljs-variable">$channel</span>-&gt;<span class="hljs-title function_ invoke__">basic_qos</span>(<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-variable">$channel</span>-&gt;<span class="hljs-title function_ invoke__">basic_consume</span>(<span class="hljs-string">'rpc_queue'</span>,<span class="hljs-string">''</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-variable">$callback</span>);<br>        <br>        <span class="hljs-keyword">while</span> (<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$channel</span>-&gt;callbacks)) {<br><span class="hljs-variable">$channel</span>-&gt;<span class="hljs-title function_ invoke__">wait</span>();<br>        }<br>        <br>        <span class="hljs-variable">$channel</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>        <span class="hljs-variable">$connection</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="RPC客户端代码"><a href="#RPC客户端代码" class="headerlink" title="RPC客户端代码"></a>RPC客户端代码</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">service</span>\<span class="hljs-title class_">entry</span>;<br><br><br><span class="hljs-keyword">use</span> <span class="hljs-title">common</span>\<span class="hljs-title">components</span>\<span class="hljs-title">BaseServer</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">common</span>\<span class="hljs-title">library</span>\<span class="hljs-title">Helper</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Channel</span>\<span class="hljs-title">AMQPChannel</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Connection</span>\<span class="hljs-title">AMQPStreamConnection</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">AMQPMessage</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Wire</span>\<span class="hljs-title">AMQPTable</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Yii</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteOpenDoor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseServer</span></span><br><span class="hljs-class"></span>{<br>   <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">EXPIRE</span> = <span class="hljs-number">5</span>;<br>   <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QUEUE_NAME</span> = <span class="hljs-string">"remote_open_door"</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$devSn</span>,<span class="hljs-variable">$schoolId</span>;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@var</span> AMQPChannel</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-variable">$channel</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-variable">$connection</span>,<span class="hljs-variable">$replyQueue</span>,<span class="hljs-variable">$corrId</span>,<span class="hljs-variable">$response</span>,<span class="hljs-variable">$params</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-variable">$door</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>)</span>{<br>      <span class="hljs-variable">$amqp</span> = <span class="hljs-title class_">Yii</span>::<span class="hljs-variable">$app</span>-&gt;params[<span class="hljs-string">'rabbitMQ'</span>];<br>      <span class="hljs-variable language_">$this</span>-&gt;connection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQPStreamConnection</span>(<span class="hljs-variable">$amqp</span>[<span class="hljs-string">'host'</span>],<span class="hljs-variable">$amqp</span>[<span class="hljs-string">'port'</span>],<span class="hljs-variable">$amqp</span>[<span class="hljs-string">'user'</span>],<span class="hljs-variable">$amqp</span>[<span class="hljs-string">'password'</span>],<span class="hljs-variable">$amqp</span>[<span class="hljs-string">'vhost'</span>]);<br>      <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">$this</span>-&gt;connection-&gt;<span class="hljs-title function_ invoke__">isConnected</span>()){<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-number">10003</span>,<span class="hljs-string">'连接失败'</span>);<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      }<br>      <span class="hljs-variable language_">$this</span>-&gt;channel = <span class="hljs-variable language_">$this</span>-&gt;connection-&gt;<span class="hljs-title function_ invoke__">channel</span>();<br><br>      <span class="hljs-variable">$arguments</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQPTable</span>();<br>      <span class="hljs-variable">$arguments</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">"x-message-ttl"</span>,<span class="hljs-number">10000</span>);    <span class="hljs-comment">//消息10s过期</span><br>      <span class="hljs-comment">//$this-&gt;channel-&gt;queue_declare(self::QUEUE_NAME,false,false,false,false,false,$arguments);</span><br>      <span class="hljs-variable language_">$this</span>-&gt;channel-&gt;<span class="hljs-title function_ invoke__">exchange_declare</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">QUEUE_NAME</span>,<span class="hljs-string">'topic'</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">//$this-&gt;replyQueue = $this-&gt;devSn.'_'.$this-&gt;schoolId.'_'.microtime(true);</span><br>      <span class="hljs-keyword">list</span>(<span class="hljs-variable language_">$this</span>-&gt;replyQueue, ,) = <span class="hljs-variable language_">$this</span>-&gt;channel-&gt;<span class="hljs-title function_ invoke__">queue_declare</span>(<span class="hljs-string">""</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">//回调</span><br>      <span class="hljs-variable">$callback</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">AMQPMessage <span class="hljs-variable">$rep</span></span>)</span>{<br>         <span class="hljs-comment">//var_dump($rep-&gt;get_properties());die;</span><br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$rep</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">'correlation_id'</span>) == <span class="hljs-variable language_">$this</span>-&gt;corrId) {<br>            <span class="hljs-variable language_">$this</span>-&gt;response = <span class="hljs-variable">$rep</span>-&gt;body;<br>         }<br>      };<br><br>      <span class="hljs-comment">//接收回调信息</span><br>      <span class="hljs-variable language_">$this</span>-&gt;channel-&gt;<span class="hljs-title function_ invoke__">basic_consume</span>( <span class="hljs-variable">$this</span>-&gt;replyQueue,<span class="hljs-string">''</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-variable">$callback</span>);<br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">init</span>();<br>   }<br><br>   <span class="hljs-comment">//组装参数</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildParams</span>(<span class="hljs-params"></span>)</span>{<br>      <span class="hljs-variable">$params</span> = [<br>         <span class="hljs-string">'expire'</span>=&gt;<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">time</span>() + <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">EXPIRE</span>),<br>         <span class="hljs-string">'devSn'</span>=&gt;<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$this</span>-&gt;devSn),<br>         <span class="hljs-string">'door'</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;door,<br>      ];<br><br>      <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$params</span>,<span class="hljs-literal">true</span>);<br>   }<br><br><br>   <span class="hljs-comment">//发送mq开门指令</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span>{<br>      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildParams</span>();<br>      <span class="hljs-variable language_">$this</span>-&gt;corrId = <span class="hljs-title function_ invoke__">uniqid</span>();<br>      <span class="hljs-variable language_">$this</span>-&gt;response = <span class="hljs-literal">null</span>;<br>      <span class="hljs-variable">$properties</span> = [<span class="hljs-string">'correlation_id'</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;corrId,<span class="hljs-string">'reply_to'</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;replyQueue];<br>      <span class="hljs-variable">$message</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQPMessage</span>(<span class="hljs-variable language_">$this</span>-&gt;params,<span class="hljs-variable">$properties</span>);<br>      <span class="hljs-variable language_">$this</span>-&gt;channel-&gt;<span class="hljs-title function_ invoke__">basic_publish</span>(<span class="hljs-variable">$message</span>,<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">QUEUE_NAME</span>,<span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">'school.%d'</span>,<span class="hljs-variable">$this</span>-&gt;schoolId));<br><br>      <span class="hljs-comment">//test</span><br>      <span class="hljs-comment">/*$message = new AMQPMessage(json_encode(['FailDoor'=&gt;[1,2]],true),$properties);</span><br><span class="hljs-comment">      $this-&gt;channel-&gt;basic_publish($message,'',$this-&gt;replyQueue);*/</span><br><br>      <span class="hljs-keyword">try</span>{<br>         <span class="hljs-variable language_">$this</span>-&gt;channel-&gt;<span class="hljs-title function_ invoke__">wait</span>(<span class="hljs-literal">null</span>,<span class="hljs-literal">false</span>,<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">EXPIRE</span>);<br>      }<span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$exception</span>){<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-number">10003</span>,<span class="hljs-string">'开门失败'</span>);<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      }<br><br><br>      <span class="hljs-comment">//var_dump($this-&gt;response);</span><br>      <span class="hljs-comment">// // $this-&gt;channel-&gt;close();</span><br>      <span class="hljs-comment">// $this-&gt;connection-&gt;close();</span><br><br>      <span class="hljs-variable">$rs</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$this</span>-&gt;response,<span class="hljs-literal">true</span>);<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$rs</span>[<span class="hljs-string">'failDoor'</span>]) &amp;&amp; (!<span class="hljs-variable">$rs</span>[<span class="hljs-string">'failDoor'</span>] || <span class="hljs-variable">$rs</span>[<span class="hljs-string">'failDoor'</span>]!=<span class="hljs-variable language_">$this</span>-&gt;door)){<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      }<br><br>      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-number">10003</span>,<span class="hljs-string">'开门失败'</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal"><code class="language-hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">service</span>\<span class="hljs-title class_">entry</span>;<br><br><br><span class="hljs-keyword">use</span> <span class="hljs-title">common</span>\<span class="hljs-title">components</span>\<span class="hljs-title">BaseServer</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">common</span>\<span class="hljs-title">library</span>\<span class="hljs-title">Helper</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Channel</span>\<span class="hljs-title">AMQPChannel</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Connection</span>\<span class="hljs-title">AMQPStreamConnection</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">AMQPMessage</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">PhpAmqpLib</span>\<span class="hljs-title">Wire</span>\<span class="hljs-title">AMQPTable</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Yii</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteOpenDoor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseServer</span></span><br><span class="hljs-class"></span>{<br>   <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">EXPIRE</span> = <span class="hljs-number">5</span>;<br>   <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QUEUE_NAME</span> = <span class="hljs-string">"remote_open_door"</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$devSn</span>,<span class="hljs-variable">$schoolId</span>;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@var</span> AMQPChannel</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-variable">$channel</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-variable">$connection</span>,<span class="hljs-variable">$replyQueue</span>,<span class="hljs-variable">$corrId</span>,<span class="hljs-variable">$response</span>,<span class="hljs-variable">$params</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-variable">$door</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>)</span>{<br>      <span class="hljs-variable">$amqp</span> = <span class="hljs-title class_">Yii</span>::<span class="hljs-variable">$app</span>-&gt;params[<span class="hljs-string">'rabbitMQ'</span>];<br>      <span class="hljs-variable language_">$this</span>-&gt;connection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQPStreamConnection</span>(<span class="hljs-variable">$amqp</span>[<span class="hljs-string">'host'</span>],<span class="hljs-variable">$amqp</span>[<span class="hljs-string">'port'</span>],<span class="hljs-variable">$amqp</span>[<span class="hljs-string">'user'</span>],<span class="hljs-variable">$amqp</span>[<span class="hljs-string">'password'</span>],<span class="hljs-variable">$amqp</span>[<span class="hljs-string">'vhost'</span>]);<br>      <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">$this</span>-&gt;connection-&gt;<span class="hljs-title function_ invoke__">isConnected</span>()){<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-number">10003</span>,<span class="hljs-string">'连接失败'</span>);<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      }<br>      <span class="hljs-variable language_">$this</span>-&gt;channel = <span class="hljs-variable language_">$this</span>-&gt;connection-&gt;<span class="hljs-title function_ invoke__">channel</span>();<br><br>      <span class="hljs-variable">$arguments</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQPTable</span>();<br>      <span class="hljs-variable">$arguments</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">"x-message-ttl"</span>,<span class="hljs-number">10000</span>);    <span class="hljs-comment">//消息10s过期</span><br>      <span class="hljs-comment">//$this-&gt;channel-&gt;queue_declare(self::QUEUE_NAME,false,false,false,false,false,$arguments);</span><br>      <span class="hljs-variable language_">$this</span>-&gt;channel-&gt;<span class="hljs-title function_ invoke__">exchange_declare</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">QUEUE_NAME</span>,<span class="hljs-string">'topic'</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">//$this-&gt;replyQueue = $this-&gt;devSn.'_'.$this-&gt;schoolId.'_'.microtime(true);</span><br>      <span class="hljs-keyword">list</span>(<span class="hljs-variable language_">$this</span>-&gt;replyQueue, ,) = <span class="hljs-variable language_">$this</span>-&gt;channel-&gt;<span class="hljs-title function_ invoke__">queue_declare</span>(<span class="hljs-string">""</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">//回调</span><br>      <span class="hljs-variable">$callback</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">AMQPMessage <span class="hljs-variable">$rep</span></span>)</span>{<br>         <span class="hljs-comment">//var_dump($rep-&gt;get_properties());die;</span><br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$rep</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">'correlation_id'</span>) == <span class="hljs-variable language_">$this</span>-&gt;corrId) {<br>            <span class="hljs-variable language_">$this</span>-&gt;response = <span class="hljs-variable">$rep</span>-&gt;body;<br>         }<br>      };<br><br>      <span class="hljs-comment">//接收回调信息</span><br>      <span class="hljs-variable language_">$this</span>-&gt;channel-&gt;<span class="hljs-title function_ invoke__">basic_consume</span>( <span class="hljs-variable">$this</span>-&gt;replyQueue,<span class="hljs-string">''</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-variable">$callback</span>);<br>   }<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>{<br>      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">init</span>();<br>   }<br><br>   <span class="hljs-comment">//组装参数</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildParams</span>(<span class="hljs-params"></span>)</span>{<br>      <span class="hljs-variable">$params</span> = [<br>         <span class="hljs-string">'expire'</span>=&gt;<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">time</span>() + <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">EXPIRE</span>),<br>         <span class="hljs-string">'devSn'</span>=&gt;<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$this</span>-&gt;devSn),<br>         <span class="hljs-string">'door'</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;door,<br>      ];<br><br>      <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$params</span>,<span class="hljs-literal">true</span>);<br>   }<br><br><br>   <span class="hljs-comment">//发送mq开门指令</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span>{<br>      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">buildParams</span>();<br>      <span class="hljs-variable language_">$this</span>-&gt;corrId = <span class="hljs-title function_ invoke__">uniqid</span>();<br>      <span class="hljs-variable language_">$this</span>-&gt;response = <span class="hljs-literal">null</span>;<br>      <span class="hljs-variable">$properties</span> = [<span class="hljs-string">'correlation_id'</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;corrId,<span class="hljs-string">'reply_to'</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;replyQueue];<br>      <span class="hljs-variable">$message</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMQPMessage</span>(<span class="hljs-variable language_">$this</span>-&gt;params,<span class="hljs-variable">$properties</span>);<br>      <span class="hljs-variable language_">$this</span>-&gt;channel-&gt;<span class="hljs-title function_ invoke__">basic_publish</span>(<span class="hljs-variable">$message</span>,<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">QUEUE_NAME</span>,<span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">'school.%d'</span>,<span class="hljs-variable">$this</span>-&gt;schoolId));<br><br>      <span class="hljs-comment">//test</span><br>      <span class="hljs-comment">/*$message = new AMQPMessage(json_encode(['FailDoor'=&gt;[1,2]],true),$properties);</span><br><span class="hljs-comment">      $this-&gt;channel-&gt;basic_publish($message,'',$this-&gt;replyQueue);*/</span><br><br>      <span class="hljs-keyword">try</span>{<br>         <span class="hljs-variable language_">$this</span>-&gt;channel-&gt;<span class="hljs-title function_ invoke__">wait</span>(<span class="hljs-literal">null</span>,<span class="hljs-literal">false</span>,<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">EXPIRE</span>);<br>      }<span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$exception</span>){<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-number">10003</span>,<span class="hljs-string">'开门失败'</span>);<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      }<br><br><br>      <span class="hljs-comment">//var_dump($this-&gt;response);</span><br>      <span class="hljs-comment">// // $this-&gt;channel-&gt;close();</span><br>      <span class="hljs-comment">// $this-&gt;connection-&gt;close();</span><br><br>      <span class="hljs-variable">$rs</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$this</span>-&gt;response,<span class="hljs-literal">true</span>);<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$rs</span>[<span class="hljs-string">'failDoor'</span>]) &amp;&amp; (!<span class="hljs-variable">$rs</span>[<span class="hljs-string">'failDoor'</span>] || <span class="hljs-variable">$rs</span>[<span class="hljs-string">'failDoor'</span>]!=<span class="hljs-variable language_">$this</span>-&gt;door)){<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      }<br><br>      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-number">10003</span>,<span class="hljs-string">'开门失败'</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="客户端调用代码："><a href="#客户端调用代码：" class="headerlink" title="客户端调用代码："></a>客户端调用代码：</h3><figure class="highlight xl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs xl">$server = new RemoteOpenDoor();<br>$<span class="hljs-function"><span class="hljs-title">server</span>-&gt;</span>devSn = $devSn;<br>$<span class="hljs-function"><span class="hljs-title">server</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">schoolId</span> = $teacher-&gt;</span>getSchoolId();<br>$<span class="hljs-function"><span class="hljs-title">rs</span> = $server-&gt;</span>open();<br>$<span class="hljs-function"><span class="hljs-title">error</span> = $server-&gt;</span>getError();<br><span class="hljs-keyword">if</span>(!$rs){<br>   <span class="hljs-function"><span class="hljs-title">return</span> $error ? \Yii::$app-&gt;</span><span class="hljs-function"><span class="hljs-title">responseHelper</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">error</span>($error)-&gt;</span><span class="hljs-function"><span class="hljs-title">response</span>() : \Yii::$app-&gt;</span><span class="hljs-function"><span class="hljs-title">responseHelper</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">error</span>(new Error(110000,'操作失败！'))-&gt;</span>response();<br>}<br><br><span class="hljs-function"><span class="hljs-title">return</span> \Yii::$app-&gt;</span><span class="hljs-function"><span class="hljs-title">responseHelper</span>-&gt;</span><span class="hljs-function"><span class="hljs-title"><code class="language-hljs xl">$server = new RemoteOpenDoor();<br>$<span class="hljs-function"><span class="hljs-title">server</span>-&gt;</span>devSn = $devSn;<br>$<span class="hljs-function"><span class="hljs-title">server</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">schoolId</span> = $teacher-&gt;</span>getSchoolId();<br>$<span class="hljs-function"><span class="hljs-title">rs</span> = $server-&gt;</span>open();<br>$<span class="hljs-function"><span class="hljs-title">error</span> = $server-&gt;</span>getError();<br><span class="hljs-keyword">if</span>(!$rs){<br>   <span class="hljs-function"><span class="hljs-title">return</span> $error ? \Yii::$app-&gt;</span><span class="hljs-function"><span class="hljs-title">responseHelper</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">error</span>($error)-&gt;</span><span class="hljs-function"><span class="hljs-title">response</span>() : \Yii::$app-&gt;</span><span class="hljs-function"><span class="hljs-title">responseHelper</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">error</span>(new Error(110000,'操作失败！'))-&gt;</span>response();<br>}<br><br><span class="hljs-function"><span class="hljs-title">return</span> \Yii::$app-&gt;</span><span class="hljs-function"><span class="hljs-title">responseHelper</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">success</span>(null)-></span>response();<br></code></pre></td></tr></tbody></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/weixin_36851500/article/details/93501861">https://blog.csdn.net/weixin_36851500/article/details/93501861</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yii2使用笔记</title>
      <link href="/posts/php-yii2-notes.html"/>
      <url>/posts/php-yii2-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-安装Yii2第三方扩展"><a href="#1-安装Yii2第三方扩展" class="headerlink" title="1. 安装Yii2第三方扩展"></a>1. 安装Yii2第三方扩展</h3><ul><li>方法一：composer安装<figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs armasm"><span class="hljs-symbol">php</span> composer.phar <span class="hljs-meta">require</span> php-amqplib/php-amqplib<br>或者<br>在composer.json文件的<span class="hljs-meta">require</span>里添加<span class="hljs-string">"php-amqplib/php-amqplib"</span>: <span class="hljs-string"><code class="language-hljs armasm"><span class="hljs-symbol">php</span> composer.phar <span class="hljs-meta">require</span> php-amqplib/php-amqplib<br>或者<br>在composer.json文件的<span class="hljs-meta">require</span>里添加<span class="hljs-string">"php-amqplib/php-amqplib"</span>: <span class="hljs-string">"~2.7"</span>，然后执行composer update<br></code></pre></td></tr></tbody></table></figure></li><li>方法二：手动添加<br>1、拷贝php-amqplib扩展到vendor目录下，<br>2、在vendor/yiisoft/extensions.php里添加如下配置项： <figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs smali">'php-amqplib/php-amqplib' =&gt;<br>  <span class="hljs-built_in"> array </span>(<br>      'name' =&gt; 'php-amqplib/php-amqplib',<br>      'version' =&gt; '2.4.5.0',<br>      'alias' =&gt;<br>        <span class="hljs-built_in"><code class="language-hljs smali">'php-amqplib/php-amqplib' =&gt;<br>  <span class="hljs-built_in"> array </span>(<br>      'name' =&gt; 'php-amqplib/php-amqplib',<br>      'version' =&gt; '2.4.5.0',<br>      'alias' =&gt;<br>        <span class="hljs-built_in"> array </span>(<br>            '@PhpAmqpLib' => $vendorDir . '/php-amqplib/php-amqplib/PhpAmqpLib',<br>         ),<br>   ), <br></code></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yii2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php中composer的使用</title>
      <link href="/posts/php-composer.html"/>
      <url>/posts/php-composer.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li>降低composer版本<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">composer self-update -r<br>或者是 composer self-update -- l<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的SQL</title>
      <link href="/posts/common-sql.html"/>
      <url>/posts/common-sql.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、查看所有的触发器"><a href="#1、查看所有的触发器" class="headerlink" title="1、查看所有的触发器"></a>1、查看所有的触发器</h4><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> information_schema.<span class="hljs-symbol"><code class="language-hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> information_schema.<span class="hljs-symbol">`TRIGGERS`</span>;<br></code></pre></td></tr></tbody></table></figure><h4 id="2、查询所有的表"><a href="#2、查询所有的表" class="headerlink" title="2、查询所有的表"></a>2、查询所有的表</h4><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">TABLE_NAME</span> <span class="hljs-built_in">table_name</span>,TABLE_COMMENT table_comment <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">'myDB'</span> <span class="hljs-keyword">and</span> table_type=<span class="hljs-string">'BASE TABLE'</span>;   //表名(不包含视图)及备注<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">full</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> Table_type = <span class="hljs-string"><code class="language-hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">TABLE_NAME</span> <span class="hljs-built_in">table_name</span>,TABLE_COMMENT table_comment <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">'myDB'</span> <span class="hljs-keyword">and</span> table_type=<span class="hljs-string">'BASE TABLE'</span>;   //表名(不包含视图)及备注<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">full</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> Table_type = <span class="hljs-string">'BASE TABLE'</span>;    //表名<br></code></pre></td></tr></tbody></table></figure><h4 id="3、查询db1数据库中所有有触发器的表"><a href="#3、查询db1数据库中所有有触发器的表" class="headerlink" title="3、查询db1数据库中所有有触发器的表"></a>3、查询db1数据库中所有有触发器的表</h4><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> EVENT_OBJECT_TABLE <span class="hljs-keyword">FROM</span> information_schema.<span class="hljs-symbol">`TRIGGERS`</span> <span class="hljs-keyword">WHERE</span> EVENT_OBJECT_SCHEMA = <span class="hljs-string"><code class="language-hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> EVENT_OBJECT_TABLE <span class="hljs-keyword">FROM</span> information_schema.<span class="hljs-symbol">`TRIGGERS`</span> <span class="hljs-keyword">WHERE</span> EVENT_OBJECT_SCHEMA = <span class="hljs-string">"db1"</span>;<br></code></pre></td></tr></tbody></table></figure><h4 id="4、查询db1数据库中所有无触发器的表"><a href="#4、查询db1数据库中所有无触发器的表" class="headerlink" title="4、查询db1数据库中所有无触发器的表"></a>4、查询db1数据库中所有无触发器的表</h4><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs n1ql"><span class="hljs-keyword">SELECT</span> A.TABLE_NAME <span class="hljs-keyword">from</span> information_schema.<span class="hljs-symbol">`TABLES`</span> A <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> information_schema.<span class="hljs-symbol">`TRIGGERS`</span> B <span class="hljs-keyword">ON</span> A.TABLE_NAME=B.EVENT_OBJECT_TABLE <span class="hljs-keyword">where</span> B.EVENT_OBJECT_TABLE <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">and</span> A.TABLE_SCHEMA=<span class="hljs-string"><code class="language-hljs n1ql"><span class="hljs-keyword">SELECT</span> A.TABLE_NAME <span class="hljs-keyword">from</span> information_schema.<span class="hljs-symbol">`TABLES`</span> A <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> information_schema.<span class="hljs-symbol">`TRIGGERS`</span> B <span class="hljs-keyword">ON</span> A.TABLE_NAME=B.EVENT_OBJECT_TABLE <span class="hljs-keyword">where</span> B.EVENT_OBJECT_TABLE <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">and</span> A.TABLE_SCHEMA=<span class="hljs-string">"db1"</span>;<br></code></pre></td></tr></tbody></table></figure><h4 id="5、创建索引"><a href="#5、创建索引" class="headerlink" title="5、创建索引"></a>5、创建索引</h4><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">index</span> index_name (索引字段);   <span class="hljs-comment">-- 创建普通索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> index_name <span class="hljs-keyword">on</span> <span class="hljs-built_in">table_name</span> (索引字段);         <span class="hljs-comment">-- 创建普通索引</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary key</span>(colunm_name);     <span class="hljs-comment">-- 创建主键</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span>(colunm_name);          <span class="hljs-comment">-- 创建唯一索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_c1_c2 <span class="hljs-keyword">on</span> <span class="hljs-built_in">table_name</span>(c1,c2);             <span class="hljs-comment">-- 创建联合索引</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">index</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">table_name</span>;                              <span class="hljs-comment"><code class="language-hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">index</span> index_name (索引字段);   <span class="hljs-comment">-- 创建普通索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> index_name <span class="hljs-keyword">on</span> <span class="hljs-built_in">table_name</span> (索引字段);         <span class="hljs-comment">-- 创建普通索引</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary key</span>(colunm_name);     <span class="hljs-comment">-- 创建主键</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span>(colunm_name);          <span class="hljs-comment">-- 创建唯一索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> idx_c1_c2 <span class="hljs-keyword">on</span> <span class="hljs-built_in">table_name</span>(c1,c2);             <span class="hljs-comment">-- 创建联合索引</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">index</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">table_name</span>;                              <span class="hljs-comment">-- 查看表中的索引</span><br></code></pre></td></tr></tbody></table></figure><h4 id="6、去除数据表中指定字段的换行符"><a href="#6、去除数据表中指定字段的换行符" class="headerlink" title="6、去除数据表中指定字段的换行符"></a>6、去除数据表中指定字段的换行符</h4><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-comment">-- char(10)：换行符      char(13)：回车符</span><br><span class="hljs-keyword">update</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">set</span> <span class="hljs-type">name</span>=replace(replace(`field`,<span class="hljs-type">char</span>(<span class="hljs-number">10</span>),<span class="hljs-string">''</span>),<span class="hljs-type">char</span>(<span class="hljs-number">13</span>),<span class="hljs-string"><code class="language-hljs pgsql"><span class="hljs-comment">-- char(10)：换行符      char(13)：回车符</span><br><span class="hljs-keyword">update</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">set</span> <span class="hljs-type">name</span>=replace(replace(`field`,<span class="hljs-type">char</span>(<span class="hljs-number">10</span>),<span class="hljs-string">''</span>),<span class="hljs-type">char</span>(<span class="hljs-number">13</span>),<span class="hljs-string">''</span>);<br></code></pre></td></tr></tbody></table></figure><h4 id="7、修改表引擎"><a href="#7、修改表引擎" class="headerlink" title="7、修改表引擎"></a>7、修改表引擎</h4><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in"><code class="language-hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span> engine=MyISAM;<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统设计</title>
      <link href="/posts/soft-system-design.html"/>
      <url>/posts/soft-system-design.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-系统分析"><a href="#1-系统分析" class="headerlink" title="1. 系统分析"></a>1. 系统分析</h3><ul><li><p>对于初期单一系统的产品来说，一个数据库➕一个平台程序即可；</p></li><li><p>对于含有两个及以上平台的初期产品来说，系统结构应该是：多个平台程序➕一个服务中心➕一个或多个数据库；</p></li><li><p>对于多平台且需与第三方交互的产品来说，系统结构应该是：多个平台程序➕一个开放平台（含接口及订阅）➕一个服务中台（一个服务中心➕一个socket服务器➕一个异步数据处理中心）➕多个数据库；</p></li></ul><h3 id="2-如何设计一个高并发、高可用的系统"><a href="#2-如何设计一个高并发、高可用的系统" class="headerlink" title="2. 如何设计一个高并发、高可用的系统"></a>2. 如何设计一个高并发、高可用的系统</h3><p><img src="/images/soft_design_1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下网络相关的命令</title>
      <link href="/posts/network-command-on-linux.html"/>
      <url>/posts/network-command-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、检测IP-域名是否连通："><a href="#1、检测IP-域名是否连通：" class="headerlink" title="1、检测IP/域名是否连通："></a>1、检测IP/域名是否连通：</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">ping -c 4 192.168.10.8  #指定ping的次数  -c times<br>ping -q -c 4 www.baidu.com  #只显示结果  -q<br></code></pre></td></tr></tbody></table></figure><h2 id="2、测试端口的连通性："><a href="#2、测试端口的连通性：" class="headerlink" title="2、测试端口的连通性："></a>2、测试端口的连通性：</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">telnet ip port  #如果未安装telnet，需执行yum install telnet进行安装<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云闪付的商业模式</title>
      <link href="/posts/business-model-of-union-pay.html"/>
      <url>/posts/business-model-of-union-pay.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="ipage">    <div class="ititle">云闪付的商业模式</div>  <div class="izhengwen">  <p>2018年，由银联主导的一个APP——云闪付上线，之后以新用户前20笔消费可享优惠的方式吸引了一大批羊毛党，近一两年在各大地铁站、公交站等出现了云闪付的广告。个人及周边的朋友也有使用过，但都是从开始的频繁使用，到现在的基本不使用。</p>  <p>云闪付的目的是打破支付宝、财付通的垄断，挤入移动支付的阵营，而且统一银行APP，聚合网上商城、移动支付、交通扫码等，立足二线以下城市。</p>  <p>就公交地铁扫码支付这一业务，不及天府通。天府通可以根据本地的定价策略进行优惠折扣，而云闪付无法一一对接个性化本地定价策略。故用户粘性不高。</p>  </div></div>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云闪付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notepad++常用操作</title>
      <link href="/posts/notepad++-notes.html"/>
      <url>/posts/notepad++-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-将指定字符替换为换行"><a href="#1-将指定字符替换为换行" class="headerlink" title="1. 将指定字符替换为换行"></a>1. 将指定字符替换为换行</h3><p>  查找目标：待替换的字符<br>  替换为：\r<br>  查找模式：扩展<br>  如把 | 替换为换行<br><img src="/images/notepad_note_1.png" alt=""><br><img src="/images/notepad_note_2.png" alt=""></p><h3 id="2-去除重复的行"><a href="#2-去除重复的行" class="headerlink" title="2. 去除重复的行"></a>2. 去除重复的行</h3><ul><li>选择内容，然后点击 编辑-&gt;行操作-&gt;升(降)序排列文本行<br><img src="/images/notepad_note_3.png" alt=""></li><li>选择内容，然后点击 编辑-&gt;行操作-&gt;删除连续的重复行<br><img src="/images/notepad_note_4.png" alt=""></li><li>得到去重后的内容，唯一缺点是打乱了原有内容的顺序<br><img src="/images/notepad_note_5.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notepad++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP常用的魔术方法</title>
      <link href="/posts/php-magic-methods.html"/>
      <url>/posts/php-magic-methods.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>__construct()</p></li><li><p>__clone()</p></li><li><p>__get()</p></li><li><p>__set()</p></li><li><p>__call()</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔术方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库三范式</title>
      <link href="/posts/db-3nf.html"/>
      <url>/posts/db-3nf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h3><ol><li>第一范式(1NF)：规定表中的每个列都应该是不可分割的最小单元。</li><li>第二范式(2NF)：是在满足第一范式的基础上，规定表中的非主键列不存在对主键的部分依赖。<br>即要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。</li><li>第三范式(3NF)：是在满足第一范式和第二范式的基础上，规定表中的列不存在对非主键列的传递依赖。<br>所以第三范式具有如下特征：<pre><code>1. 每一列只有一个值2. 每一行都能区分。3. 每一个表都不包含其他表已经包含的非主关键字信息。</code></pre>例如，帖子表中只能出现发帖人的id，而不能出现发帖人的id，还同时出现发帖人姓名，否则，只要出现同一发帖人id的所有记录，它们中的姓名部分都必须严格保持一致，这就是数据冗余。<br>但在实际中，我们经常会进行反范式设计，适当增加表的冗余字段来提高查询效率。</li></ol><ul><li>优势：使表的结构更简单、优雅，表的逻辑和条理性更强，并且使用三范式可以很大程度的减少表中的冗余数据，很好的节省了数据库的存储资源。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL脚本执行中，预防误处理数据的方法</title>
      <link href="/posts/mysql-deal-miss-handle.html"/>
      <url>/posts/mysql-deal-miss-handle.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">在工作中，有时需要通过数据库脚本来变更生产数据，但稍有疏忽，就会误删数据、或者变更过多数据；为防预防这类情况的发生，根据我个人的工作经验，总结了以下几点方法：</div><h3 id="1、先测试"><a href="#1、先测试" class="headerlink" title="1、先测试"></a>1、先测试</h3><p>   脚本写好之后，先在测试环境执行一遍，一方面可以看看脚本是否有语法问题，另一方面看看数据是否正确被处理；</p><h3 id="2、脚本简单化"><a href="#2、脚本简单化" class="headerlink" title="2、脚本简单化"></a>2、脚本简单化</h3><p>   尽量将复杂的联表处理语句转为多条单表处理语句，这可以防止由于逻辑不严谨导致的数据过多被处理的问题；<br>如：现有脚本<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">update</span> personnel p <span class="hljs-keyword">set</span> p.status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> classes c <span class="hljs-keyword">on</span> p.class_id<span class="hljs-operator">=</span>c.class_id <span class="hljs-keyword">where</span> c.grade_id<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><br>假设经查询，grade_id=5的personnel 为201-296，可改为：<br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">201</span>;<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">202</span>;<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">203</span>;<br>……<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number"><code class="language-hljs sql"><span class="hljs-keyword">update</span> personnel p <span class="hljs-keyword">set</span> p.status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> classes c <span class="hljs-keyword">on</span> p.class_id<span class="hljs-operator">=</span>c.class_id <span class="hljs-keyword">where</span> c.grade_id<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><br>假设经查询，grade_id=5的personnel 为201-296，可改为：<br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">201</span>;<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">202</span>;<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">203</span>;<br>……<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">296</span>;<br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="3、Where条件精确化"><a href="#3、Where条件精确化" class="headerlink" title="3、Where条件精确化"></a>3、Where条件精确化</h3><p>   变更的where条件尽量为唯一索引字段，这可以防止由于条件过于复杂、数据表过大，导致锁表时间过长，执行效率过低的问题；<br>如：现有脚本<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> class_id<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">and</span> create_time<span class="hljs-operator">&lt;</span><span class="hljs-number"><code class="language-hljs sql"><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> class_id<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">and</span> create_time<span class="hljs-operator">&lt;</span><span class="hljs-number">1571580242</span>;<br></code></pre></td></tr></tbody></table></figure><p></p><p>假设经查询，满足上述条件的personnelId 为220、233、234、256，可改为：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">220</span>;<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">233</span>;<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">234</span>;<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number"><code class="language-hljs sql"><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">220</span>;<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">233</span>;<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">234</span>;<br><span class="hljs-keyword">update</span> personnel <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">256</span>;<br></code></pre></td></tr></tbody></table></figure><p></p><p>单条复杂语句拆分成多条单一条件语句的方法有很多，下面列举几种方式：<br>（1）将满足条件的数据导出，借助excel/Notepad++等工具进行批量补全sql语句；<br>（2）在数据库中使用concat函数进行sql拼接，如：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">select</span> CONCAT(<span class="hljs-string">'delete from t_bracelet_person_relation where person_id='</span>,person_id,<span class="hljs-string">' and mac_id="'</span>,mac_id,<span class="hljs-string">'";'</span>) <span class="hljs-keyword">from</span> t_bracelet_person_relation <span class="hljs-keyword">where</span> mac_id <span class="hljs-keyword">in</span> (<span class="hljs-string">'C9B1EC032CB3'</span>,<span class="hljs-string">'FCBA0EB1DA09'</span>) <span class="hljs-keyword">and</span> status<span class="hljs-operator">=</span><span class="hljs-number"><code class="language-hljs sql"><span class="hljs-keyword">select</span> CONCAT(<span class="hljs-string">'delete from t_bracelet_person_relation where person_id='</span>,person_id,<span class="hljs-string">' and mac_id="'</span>,mac_id,<span class="hljs-string">'";'</span>) <span class="hljs-keyword">from</span> t_bracelet_person_relation <span class="hljs-keyword">where</span> mac_id <span class="hljs-keyword">in</span> (<span class="hljs-string">'C9B1EC032CB3'</span>,<span class="hljs-string">'FCBA0EB1DA09'</span>) <span class="hljs-keyword">and</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="4、有条件处理"><a href="#4、有条件处理" class="headerlink" title="4、有条件处理"></a>4、有条件处理</h3><p>每条SQL语句必须有where条件，否则可能有问题，容易引起数据过度被处理的情况；<br>如：现有脚本<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">update</span> goods <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number"><code class="language-hljs sql"><span class="hljs-keyword">update</span> goods <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br></code></pre></td></tr></tbody></table></figure><p></p><p>经查上述语句本来只变更id=23的数据，由于疏忽大意忘些where条件，导致整个表的数据都被变更了，这个问题的严重性不亚于删库；<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">update</span> goods <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number"><code class="language-hljs sql"><span class="hljs-keyword">update</span> goods <span class="hljs-keyword">set</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">23</span>;<br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="5、脚本数据校验"><a href="#5、脚本数据校验" class="headerlink" title="5、脚本数据校验"></a>5、脚本数据校验</h3><p>脚本写好之后，可以将update、delete改为select查询下，从查询结果的数据总条数和具体数据上比对下，看看数据是否和预期需要处理的数据有出入，如果有就是条件未控制好，需修改；<br>如：现有脚本<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">update</span> personnel p <span class="hljs-keyword">set</span> p.status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> classes c <span class="hljs-keyword">on</span> p.class_id<span class="hljs-operator">=</span>c.class_id <span class="hljs-keyword">where</span> c.grade_id<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> personnel <span class="hljs-keyword">where</span> class_id<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">and</span> create_time<span class="hljs-operator">&lt;</span><span class="hljs-number">1571580242</span>;<br></code></pre></td></tr></tbody></table></figure><br>可改为如下语句，查询后核对数据<br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> p.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> personnel p <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> classes c <span class="hljs-keyword">on</span> p.class_id<span class="hljs-operator">=</span>c.class_id <span class="hljs-keyword">where</span> c.grade_id<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> personnel <span class="hljs-keyword">where</span> class_id<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">and</span> create_time<span class="hljs-operator">&lt;</span><span class="hljs-number"><code class="language-hljs sql"><span class="hljs-keyword">update</span> personnel p <span class="hljs-keyword">set</span> p.status<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> classes c <span class="hljs-keyword">on</span> p.class_id<span class="hljs-operator">=</span>c.class_id <span class="hljs-keyword">where</span> c.grade_id<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> personnel <span class="hljs-keyword">where</span> class_id<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">and</span> create_time<span class="hljs-operator">&lt;</span><span class="hljs-number">1571580242</span>;<br></code></pre></td></tr></tbody></table></figure><br>可改为如下语句，查询后核对数据<br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> p.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> personnel p <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> classes c <span class="hljs-keyword">on</span> p.class_id<span class="hljs-operator">=</span>c.class_id <span class="hljs-keyword">where</span> c.grade_id<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> personnel <span class="hljs-keyword">where</span> class_id<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> status<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">and</span> create_time<span class="hljs-operator">&lt;</span><span class="hljs-number">1571580242</span>;<br></code></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解php.ini</title>
      <link href="/posts/php-ini-config.html"/>
      <url>/posts/php-ini-config.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>safe_mode_exec_dir<br> 设置安全模式下脚本可执行的目录，如果要通过popen()、system()、exec()等执行脚本，则该脚本需放在本配置设置的目录下。</li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中decimal类型</title>
      <link href="/posts/mysql-decimal.html"/>
      <url>/posts/mysql-decimal.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在mysql中，经常会使用decimal数据类型来保存精度准确的数值，如工资、价格、金额等货币数据。</p><ul><li>语法及其说明<br><code>columName decimal(P,D);</code><br>P表示有效数字的精度，范围为1~65；P的默认值为10，如<code>columName decimal;</code>表示不含小数数字最大长度为10。<br>D表示小数点后的位数，范围为0~30，D&lt;=P；如果D为空(<code>columName decimal(P);</code>)或者0(<code>columName decimal(P,0);</code>)表示列不包含小数部分或小数点。</li><li>示例<br><code>amount decimal(6,2);</code>表示amount列最多可以存储6位数字，小数点位数为2位；amount列的范围为-9999.99~9999.99。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的explain</title>
      <link href="/posts/mysql-explain1.html"/>
      <url>/posts/mysql-explain1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们在执行sql时，一般都会使用explain来分析sql的效率情况。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>  只需要在查询的 SQL 前面添加上 explain 关键字即可。<br><img src="/images/mysql_explain_1.png" alt=""></p><h4 id="结果列说明"><a href="#结果列说明" class="headerlink" title="结果列说明"></a>结果列说明</h4><ul><li>id — 选择标识符，id 越大优先级越高，越先被执行；</li><li>select_type — 表示查询的类型；</li><li>table — 输出结果集的表；</li><li>partitions — 匹配的分区；</li><li>type — 表示表的连接类型；<br>  type 值有如下类型<ul><li>all — 全表扫描，在数据量大时效率极低；</li><li>index — 遍历索引，全索引排序；根据extra的内容分以下几种情况：<br>  Using Index：覆盖索引，即<strong>只需要</strong>通过索引就可以返回查询所需要的数据<br>  Using Where：查询列未用到索引<br>  Using Index  Using Where：其中的查询列是索引，但是并不是前导列，因此其实是没法用到这个索引的<br>  Null：查询列有些不是索引，需要回表来查询未被索引覆盖的字段（不是纯粹用了索引，也不是完全没用到索引）</li><li>range — 索引范围查找，有范围的索引排序；如：<code>between and &lt; &gt; in or</code></li><li>index_subquery — 在子查询中使用 ref；非唯一性索引，一般出现在in查询中；</li><li>unique_subquery — 在子查询中使用 eq_ref，一般出现在in查询中；</li><li>index_merge — 使用了索引合并优化。(对多个索引分别进行了条件的查询，最后对这几个查询的结果进行合并交集运算)</li><li>ref_or_null — 对 null 进行索引的优化的 ref； 类似 ref。区别是他会额外的搜索包含 null 的记录，他会对其进行一些优化。(例如：SELECT * FROM table WHERE age = 18 and name is null)</li><li>fulltext — 使用全文索引；</li><li>ref — 使用非唯一索引查找数据；利用查询索引来进行搜索。（非主键以及 UNIQUE）</li><li>eq_ref — 在 join 查询中使用主键或唯一索引关联；查询列是主键或者非 NULL 的 UNIQUE 索引，常用在联合查询。(例如：SELECT * FROM ref_table,other_table WHERE ref_table.key_column=other_table.column =&gt; ref_table.key_column 是主键或者非 NULL 的 UNIQUE 索引)</li><li>const — 将一个主键放置到 where 后面作为条件查询， MySQL 优化器就能把这次查询优化转化为一个常量，如何转化以及何时转化，这个取决于优化器，这个比 eq_ref 效率高一点。<br>  查询条件是主键或者非 NULL 的 UNIQUE 索引，因此结果只有一条，同时优化过程中查询列值会转成常量。</li><li>system — 表中数据只有一行的情况；</li><li>null — 不用访问表就可以直接得到结果。(例如：SELECT 1)<br>type的效率高低情况：<code>all &lt; index &lt; range &lt; index_subquery &lt; unique_subquery &lt; index_merge &lt; ref_or_null &lt; ref &lt; eq_ref &lt; const &lt; system</code></li></ul></li><li>possible_keys — 表示查询时，可能使用的索引；</li><li>key — 表示实际使用的索引；<br>  如果这一列为 NULL 则表示未使用索引，反之则使用了索引。</li><li>key_len — 索引字段的长度；</li><li>ref—  列与索引的比较；</li><li>rows — 大概估算的行数；</li><li>filtered — 按表条件过滤的行百分比；</li><li>Extra — 执行情况的描述和说明。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/posts/mysql-index.html"/>
      <url>/posts/mysql-index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="导致-MySQL-索引失效的常见场景"><a href="#导致-MySQL-索引失效的常见场景" class="headerlink" title="导致 MySQL 索引失效的常见场景"></a>导致 MySQL 索引失效的常见场景</h4><ol><li>联合索引不满足最左匹配原则<br> 最左匹配原则是指以最左边的为起点字段查询可以使用联合索引，否则将不能使用联合索引。<br> 假设联合索引为A+B+C，则能使用索引的为A+B+C、A+B、A+C。</li><li>模糊查询最前面的为不确定匹配字符<br> 只有模糊匹配后面任意字符：<code>like 'xx%'</code> 可以使用索引</li><li>索引列参与了运算<br> 如：<code>explain select * from tname where id+1=1;</code>未使用索引</li><li>索引列使用了函数<br> 如：<code>explain select * from tname where ifnull(id,0)=1;</code>未使用索引</li><li>索引列存在类型转换<br> 如果索引列存在类型转换，那么也不会走索引，比如 name 为字符串类型，而查询的时候设置了 int 类型的值就会导致索引失效</li><li>索引列使用 is not null 查询<br> 当在查询中使用了 is not null 也会导致索引失效，而 is null 则会正常触发索引的</li></ol><h4 id="哪些情况不适合创建索引"><a href="#哪些情况不适合创建索引" class="headerlink" title="哪些情况不适合创建索引"></a>哪些情况不适合创建索引</h4><ol><li>不应该在字段比较长的字段上建立索引，因为会消耗大量的空间</li><li>对于频繁更新、插入的字段应该少建立索引，因为在修改和插入之后，数据库会去维护索引，会消耗资源</li><li>尽量少在无用字段上建立索引【where条件中用不到的字段】</li><li>表记录太少不应该创建索引</li><li>数据重复且分布平均的表字段不应该创建索引【选择性太低，例如性别、状态、真假值等字段】</li><li>参与列计算的列不适合建索引【保持列”干净”，比如from_unixtime(create_time) = ‘2022-05-29’就不能使用到索引，原因是b+树中存的都是数据表中的字段值，但进行检索时需要把所有元素都应用函数才能比较，显然成本太大，所以语句应该写成create_time = unix_timestamp(‘2022-05-29’)】</li></ol><h4 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h4><ol><li>建立索引是要消耗一定的空间，况且在索引的维护上也会消耗资源</li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL架构设计</title>
      <link href="/posts/mysql-structural-design.html"/>
      <url>/posts/mysql-structural-design.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、MySQL架构设计中的经验"><a href="#1、MySQL架构设计中的经验" class="headerlink" title="1、MySQL架构设计中的经验"></a>1、MySQL架构设计中的经验</h3><ul><li>1）根据公司现有业务设计合理架构</li><li>2）选择成熟架构方案</li><li>3）因地制宜，根据实际设备情况做出选择</li><li>4）考虑方案的可行性</li><li>5）越简单越好，越适合公司越好</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL联表查询</title>
      <link href="/posts/mysql-join.html"/>
      <url>/posts/mysql-join.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-联表查询后的结果集比较"><a href="#1-联表查询后的结果集比较" class="headerlink" title="1. 联表查询后的结果集比较"></a>1. 联表查询后的结果集比较</h3><p><img src="/images/mysql_join_1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 联表查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人收集的一些公用数据</title>
      <link href="/posts/personnel-public-data.html"/>
      <url>/posts/personnel-public-data.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">这是个人采集的一些公用数据，大家可根据需要自取，不谢！</div><ul><li><a href="https://github.com/crazy-boy/public-data/blob/main/地名词库.txt" target="_blank">地名词库</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/歇后语.txt" target="_blank">歇后语</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/成语.txt" target="_blank">成语</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/品牌名(英文).txt" target="_blank">2015年搜集的一些英文版品牌名</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/常见的用户名.txt" target="_blank">常见的用户名</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/常见的弱密码.txt" target="_blank">常见的弱密码</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/姓氏(中文).txt" target="_blank">姓氏(中文)</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/姓氏(日文).txt" target="_blank">姓氏(日文)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛云图片</title>
      <link href="/posts/qiniu-storage.html"/>
      <url>/posts/qiniu-storage.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、七牛云图片地址："><a href="#1、七牛云图片地址：" class="headerlink" title="1、七牛云图片地址："></a>1、七牛云图片地址：</h3><p><code>域名/hash值</code><br>如：<a href="https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4">https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4</a></p><h3 id="2、按指定尺寸显示图片："><a href="#2、按指定尺寸显示图片：" class="headerlink" title="2、按指定尺寸显示图片："></a>2、按指定尺寸显示图片：</h3><p><code>域名/hash值?imageMogr2/auto-orient/thumbnail/!宽x高r/gravity/Center/crop/宽x高/interlace/1/blur/1x0/quality/80|imageslim</code><br>如：<a href="https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4?imageMogr2/auto-orient/thumbnail/!100x200r/gravity/Center/crop/100x200/interlace/1/blur/1x0/quality/80|imageslim">https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4?imageMogr2/auto-orient/thumbnail/!100x200r/gravity/Center/crop/100x200/interlace/1/blur/1x0/quality/80|imageslim</a></p><h3 id="3、资源下载："><a href="#3、资源下载：" class="headerlink" title="3、资源下载："></a>3、资源下载：</h3><p><code>域名/hash值?attname=文件名.扩展名</code><br>如：<a href="https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?attname=a.jpg">https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?attname=a.jpg</a></p><h3 id="4、图片等比例缩放："><a href="#4、图片等比例缩放：" class="headerlink" title="4、图片等比例缩放："></a>4、图片等比例缩放：</h3><p><code>域名/hash值?imageView2/&lt;mode&gt;/w/&lt;Width&gt;/h/&lt;Height&gt;</code><br>如：<a href="https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?imageView2/2/w/450/h/450">https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?imageView2/2/w/450/h/450</a></p><h3 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h3><p><a href="https://developer.qiniu.com/dora/api/1279/basic-processing-images-imageview2">https://developer.qiniu.com/dora/api/1279/basic-processing-images-imageview2</a></p>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel使用小技巧</title>
      <link href="/posts/e939ff3c.html"/>
      <url>/posts/e939ff3c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-excel固定第一行："><a href="#1-excel固定第一行：" class="headerlink" title="1. excel固定第一行："></a>1. excel固定第一行：</h3><p>选择第二行，点击视图里的冻结窗口即可。</p><h3 id="2-excel分列："><a href="#2-excel分列：" class="headerlink" title="2. excel分列："></a>2. excel分列：</h3><pre><code>如：将某一列的数据由C4159D5953D8转为C4:15:9D:59:53:D8格式：</code></pre><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">公式为</span><br>=left(A1,2) & ":" & mid(A1,3,2) & ":" & mid(A1,5,2) & ":" & mid(A1,7,2) & ":" & mid(A1,9,2) & ":" & right(A1,2)<br></code></pre></td></tr></tbody></table></figure><h3 id="3-删除重复项："><a href="#3-删除重复项：" class="headerlink" title="3. 删除重复项："></a>3. 删除重复项：</h3><pre><code>选中数据区域-&gt;数据-&gt;删除重复项-&gt;确定</code></pre><h3 id="4-VLOOKUP函数的使用"><a href="#4-VLOOKUP函数的使用" class="headerlink" title="4. VLOOKUP函数的使用"></a>4. VLOOKUP函数的使用</h3>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>领导与下属交往之道</title>
      <link href="/posts/relation-between-leaders-and-staffs.html"/>
      <url>/posts/relation-between-leaders-and-staffs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>非工作时间，不要拿工作上的事来打压威胁下属；这会让下属心生反感。<br> 如：领导让下属帮忙做某件事情，下属不肯，领导就说以后所有的工作都指派给你，升职加薪想都别想……</p></li><li><p>对下属不好分配任务，工期评估过长，如何处理？</p><ul><li>不要口头安排任务，引入任务管理系统，设置好截止日期，需求描述清楚，通知下属及时完成；</li><li>评估每个任务的标准产出(行业中等偏上水平的一个员工完成某个任务所需的时间)，由于每个任务有大小难易之分，所以要私下评估出每个任务的标准产出；如果无法评估，那就按照自己的水平来评估即可，即：假设自己来做这个任务需要花多少时间，就是标准产出时间。</li><li>定期对每个员工的标准产出进行统计，结合员工级别、薪资、工作时间和标准产出就可以对大家的状态有个清晰的认识了。<br><img src="/images/tec_manage_1.png" alt=""><br>从上面的统计中，很容易就能看出谁是老油条了</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装php5(php7)</title>
      <link href="/posts/install-php-on-linux.html"/>
      <url>/posts/install-php-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-先安装依赖包"><a href="#1-先安装依赖包" class="headerlink" title="1. 先安装依赖包"></a>1. 先安装依赖包</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">  yum install gcc bison bison-devel zlib-devel libmcrypt-devel mcrypt mhash-devel openssl-devel libxml2-devel libcurl-devel bzip2-devel readline-devel libedit-devel</span><br></code></pre></td></tr></tbody></table></figure><h3 id="2-下载php-5-3-0"><a href="#2-下载php-5-3-0" class="headerlink" title="2. 下载php-5.3.0"></a>2. 下载php-5.3.0</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs shell">wget http://cn2.php.net/get/php-5.3.0.tar.gz/from/this/mirror -o php-5.3.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf php-5.3.0.tar.gz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in"><code class="language-hljs shell">wget http://cn2.php.net/get/php-5.3.0.tar.gz/from/this/mirror -o php-5.3.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf php-5.3.0.tar.gz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> php-5.3.0</span><br><br>yum install libxml2<br><br>yum install libxml2-devel -y<br><br>yum install curl curl-devel<br>yum install -y epel-release<br>yum install -y libmcrypt-devel<br></code></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">php5 配置 <br><br> ./configure \<br>--prefix=/usr/local/php5 \<br>--with-config-file-path=/usr/local/php5/etc \<br>--enable-inline-optimization \<br>--disable-debug \<br>--disable-rpath \<br>--enable-shared \<br>--enable-opcache \<br>--enable-fpm \<br>--with-fpm-user=www \<br>--with-fpm-group=www \<br>--with-mysql=mysqlnd \<br>--with-mysqli=mysqlnd \<br>--with-pdo-mysql=mysqlnd \<br>--with-gettext \<br>--with-gd \<br>--enable-mbstring \<br>--with-iconv \<br>--with-mcrypt \<br>--with-mhash \<br>--with-openssl \<br>--enable-bcmath \<br>--enable-soap \<br>--with-libxml-dir \<br>--enable-pcntl \<br>--enable-shmop \<br>--enable-sysvmsg \<br>--enable-sysvsem \<br>--enable-sysvshm \<br>--enable-sockets \<br>--with-curl \<br>--with-zlib \<br>--enable-zip \<br>--with-bz2 \<br>--with-readline \<br>--with-xsl \<br>--without-sqlite3 \<br>--without-pdo-sqlite \<br>--with-pear<br></code></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">php7 配置<br><br> ./configure \<br>--prefix=/usr/local/php7 \<br>--with-config-file-path=/usr/local/php7/etc \<br>--enable-inline-optimization \<br>--disable-debug \<br>--disable-rpath \<br>--enable-shared \<br>--enable-opcache \<br>--enable-fpm \<br>--with-fpm-user=www \<br>--with-fpm-group=www \<br>--with-mysql=mysqlnd \<br>--with-mysqli=mysqlnd \<br>--with-pdo-mysql=mysqlnd \<br>--with-gettext \<br>--enable-mbstring \<br>--with-iconv \<br>--with-mcrypt \<br>--with-mhash \<br>--with-openssl \<br>--enable-bcmath \<br>--enable-soap \<br>--with-libxml-dir \<br>--enable-pcntl \<br>--enable-shmop \<br>--enable-sysvmsg \<br>--enable-sysvsem \<br>--enable-sysvshm \<br>--enable-sockets \<br>--with-curl \<br>--with-zlib \<br>--enable-zip \<br>--with-bz2 \<br>--with-readline \<br>--without-sqlite3 \<br>--without-pdo-sqlite \<br>--with-pear<br></code></pre></td></tr></tbody></table></figure><h3 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3. 编译安装"></a>3. 编译安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">make && make install</span><br></code></pre></td></tr></tbody></table></figure><h3 id="4-复制-php-配置文件"><a href="#4-复制-php-配置文件" class="headerlink" title="4. 复制 php 配置文件"></a>4. 复制 php 配置文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@VM_0_2_centos php-5.6.30]# cp php.ini-production /usr/local/php7/etc/php.ini<br>已经安装完成，查看版本号<br><br>[root@VM_0_2_centos php-5.6.30]# /usr/local/php7/bin/php -v<br>返回<br><br>PHP 5.6.30 (cli) (built: Aug 29 2018 09:09:28) <br>Copyright (c) 1997-2016 The PHP Group<br>Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies<br></code></pre></td></tr></tbody></table></figure><h3 id="5-配置-php-fpm"><a href="#5-配置-php-fpm" class="headerlink" title="5. 配置 php-fpm"></a>5. 配置 php-fpm</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@VM_0_2_centos php-5.6.30]# cp /usr/local/php7/etc/php-fpm.conf.default /usr/local/php7/etc/php-fpm.conf<br>[root@VM_0_2_centos php-5.6.30]# vim /usr/local/php7/etc/php-fpm.conf<br>查找 user 将<br><br>user = nobody<br>group = nobody<br>改成<br><br>user = www<br>group = www<br>查找 listen 将<br><br>listen = 127.0.0.1:9000<br>改成<br><br>listen = 127.0.0.1:9001<br><br>配置 php-fpm 服务<br><br>[root@VM_0_2_centos php-5.6.30]# cp sapi/fpm/php-fpm.service /usr/lib/systemd/system/php7-fpm.service<br>[root@VM_0_2_centos php-5.6.30]# vim /usr/lib/systemd/system/php7-fpm.service <br>将：<br><br>PIDFile=${prefix}/var/run/php-fpm.pid<br>ExecStart=${exec_prefix}/sbin/php-fpm --nodaemonize --fpm-config ${prefix}/etc/php-fpm.conf<br>改成<br><br>PIDFile=/usr/local/php7/var/run/php-fpm.pid<br>ExecStart=/usr/local/php7/sbin/php-fpm --nodaemonize --fpm-config /usr/local/php7/etc/php-fpm.conf<br></code></pre></td></tr></tbody></table></figure><h3 id="6-重新载入-systemd"><a href="#6-重新载入-systemd" class="headerlink" title="6. 重新载入 systemd"></a>6. 重新载入 systemd</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@VM_0_2_centos php-5.6.30]# systemctl daemon-reload<br>可以设置开机启动：<br><br>[root@VM_0_2_centos php-5.6.30]# systemctl enable php7-fpm<br>返回结果<br><br>Created symlink from /etc/systemd/system/multi-user.target.wants/php7-fpm.service to /usr/lib/systemd/system/php7-fpm.service.<br>启动：<br><br>[root@VM_0_2_centos php-5.6.30]# systemctl start php7-fpm<br>关闭：<br><br>[root@VM_0_2_centos php-5.6.30]# systemctl stop php7-fpm<br>查看状态：<br><br>[root@VM_0_2_centos php-5.6.30]# systemctl status php7-fpm<br>返回<br><br>● php5-fpm.service - The PHP FastCGI Process Manager<br>   Loaded: loaded (/usr/lib/systemd/system/php5-fpm.service; disabled; vendor preset: disabled)<br>   Active: active (running) since Wed 2018-08-29 09:36:39 CST; 47s ago<br> Main PID: 14996 (php-fpm)<br>   CGroup: /system.slice/php5-fpm.service<br>           ├─14996 php-fpm: master process (/usr/local/php5/etc/php-fpm.conf)<br>           ├─14997 php-fpm: pool www<br>           └─14998 php-fpm: pool www<br></code></pre></td></tr></tbody></table></figure><p>参考地址：<a href="https://blog.csdn.net/weixin_42579642/article/details/85290670">https://blog.csdn.net/weixin_42579642/article/details/85290670</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装mysql5.0版本教程</title>
      <link href="/posts/install-mysql-on-linux.html"/>
      <url>/posts/install-mysql-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载mysql-bundle-tar包"><a href="#1-下载mysql-bundle-tar包" class="headerlink" title="1. 下载mysql bundle.tar包"></a>1. 下载mysql bundle.tar包</h3><p>上传  mysql bundle.tar包到服务器<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">解压  tar -xvf mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar<br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="2-按顺序逐个安装rpm"><a href="#2-按顺序逐个安装rpm" class="headerlink" title="2. 按顺序逐个安装rpm"></a>2. 按顺序逐个安装rpm</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">rpm -qa|grep mariadb<br>rpm -e mariadb-libs-5.5.35-3.el7.x86_64 --nodeps<br>rpm - ivh mysql-community-common-<br>rpm - ivh mysql-community-libs-      <br>rpm - ivh mysql-community-client-  <br>rpm - ivh mysql-community-server-   <br>rpm - ivh mysql-community-devel-<br></code></pre></td></tr></tbody></table></figure><h3 id="3-启动-amp-配置"><a href="#3-启动-amp-配置" class="headerlink" title="3. 启动&amp;配置"></a>3. 启动&amp;配置</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>systemctl  start mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭</span><br>systemctl  stop mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开机启动</span><br>systemctl enable mysqld<br>systemctl daemon-reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看运行状态</span><br>systemctl  status mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">看到绿色的running代表已经启动成功，然后mysql在5.6之后的版本都会默认生成一个默认密码，是root用户的。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>systemctl  start mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭</span><br>systemctl  stop mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开机启动</span><br>systemctl enable mysqld<br>systemctl daemon-reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看运行状态</span><br>systemctl  status mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">看到绿色的running代表已经启动成功，然后mysql在5.6之后的版本都会默认生成一个默认密码，是root用户的。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看默认设置的密码</span><br>grep 'temporary password' /var/log/mysqld.log<br></code></pre></td></tr></tbody></table></figure><h3 id="4-进入mysql"><a href="#4-进入mysql" class="headerlink" title="4. 进入mysql"></a>4. 进入mysql</h3><p>执行完如下命令之后输入默认密码<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">mysql -u root -p<br></code></pre></td></tr></tbody></table></figure><p></p><p>MySQL 5调整密码验证规则：<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in">set</span> global validate_password_policy=0;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in"><code class="language-hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in">set</span> global validate_password_policy=0;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in">set</span> global validate_password_length=1;</span><br></code></pre></td></tr></tbody></table></figure><p></p><p>重新设置密码<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">ALTER USER  user() identified by "123456";<br></code></pre></td></tr></tbody></table></figure><p></p><p>授权 root 远程连接<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">use mysql;<br></code></pre></td></tr></tbody></table></figure><p></p><p>修改连接权限，执行：<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">update user set host='%' where user ='root';<br></code></pre></td></tr></tbody></table></figure><p></p><p>执行刷新权限：<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">flush privileges;<br></code></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装nodejs</title>
      <link href="/posts/linux-install-nodejs.html"/>
      <url>/posts/linux-install-nodejs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载nodejs"><a href="#1-下载nodejs" class="headerlink" title="1. 下载nodejs"></a>1. 下载nodejs</h3><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs apache"><span class="hljs-attribute">wget</span>&nbsp;https://nodejs.org/dist/v8.<span class="hljs-number">11</span>.<span class="hljs-number">4</span>/node-v8.<span class="hljs-number">11</span>.<span class="hljs-number"><code class="language-hljs apache"><span class="hljs-attribute">wget</span>&nbsp;https://nodejs.org/dist/v8.<span class="hljs-number">11</span>.<span class="hljs-number">4</span>/node-v8.<span class="hljs-number">11</span>.<span class="hljs-number">4</span>-linux-x64.tar.xz<br></code></pre></td></tr></tbody></table></figure><h3 id="2-解压nodejs"><a href="#2-解压nodejs" class="headerlink" title="2. 解压nodejs"></a>2. 解压nodejs</h3><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs crmsh">tar xvf <span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span>-linux-x64.tar.xz <span class="hljs-comment">#解压</span><br>mv <span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span>-linux-x64 <span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span> <span class="hljs-comment"><code class="language-hljs crmsh">tar xvf <span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span>-linux-x64.tar.xz <span class="hljs-comment">#解压</span><br>mv <span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span>-linux-x64 <span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span> <span class="hljs-comment">#改短名</span><br></code></pre></td></tr></tbody></table></figure><h3 id="3-查看版本"><a href="#3-查看版本" class="headerlink" title="3. 查看版本"></a>3. 查看版本</h3><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs crmsh">cd /<span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span>/bin &amp;&amp; ls <span class="hljs-comment">#进入目录并列出</span><br>./<span class="hljs-keyword">node</span> <span class="hljs-title">-v</span> <span class="hljs-comment">#查看node版本</span><br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span> <span class="hljs-comment"><code class="language-hljs crmsh">cd /<span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span>/bin &amp;&amp; ls <span class="hljs-comment">#进入目录并列出</span><br>./<span class="hljs-keyword">node</span> <span class="hljs-title">-v</span> <span class="hljs-comment">#查看node版本</span><br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span> <span class="hljs-comment">#无法获取，未配置</span><br></code></pre></td></tr></tbody></table></figure><p><img src="/images/linux_install_nodejs_1.png" alt=""></p><h3 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h3><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs crmsh">ln -s /<span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span>/bin/<span class="hljs-keyword">node</span> <span class="hljs-title">/usr</span>/bin/<span class="hljs-keyword">node</span><br><span class="hljs-title">ln</span> -s /<span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number"><code class="language-hljs crmsh">ln -s /<span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span>/bin/<span class="hljs-keyword">node</span> <span class="hljs-title">/usr</span>/bin/<span class="hljs-keyword">node</span><br><span class="hljs-title">ln</span> -s /<span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span>/bin/npm /usr/bin/npm<br></code></pre></td></tr></tbody></table></figure><p><img src="/images/linux_install_nodejs_2.png" alt=""></p><h3 id="5-清理安装包"><a href="#5-清理安装包" class="headerlink" title="5. 清理安装包"></a>5. 清理安装包</h3><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs crmsh">rm -rf <span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number"><code class="language-hljs crmsh">rm -rf <span class="hljs-keyword">node</span><span class="hljs-title">-v8</span>.<span class="hljs-number">11.4</span>-linux-x64.tar.xz<br></code></pre></td></tr></tbody></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/8cdbe4f4b533">https://www.jianshu.com/p/8cdbe4f4b533</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装Cacti</title>
      <link href="/posts/install-cacti-on-linux.html"/>
      <url>/posts/install-cacti-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、安装rrdtool"><a href="#1、安装rrdtool" class="headerlink" title="1、安装rrdtool"></a>1、安装rrdtool</h3><p><code>yum install rrdtool rrdtool-perl -y</code></p><h3 id="2、安装配置net-snmp"><a href="#2、安装配置net-snmp" class="headerlink" title="2、安装配置net-snmp"></a>2、安装配置net-snmp</h3><ul><li>(1)、安装net-snmp<br><code>yum install net-snmp net-snmp-libs net-snmp-utils</code></li></ul><p>可能报错：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs stylus">...<br><span class="hljs-number">2</span>:postfix-<span class="hljs-number">2.10</span>.<span class="hljs-number">1</span>-<span class="hljs-number">6</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span> has missing requires of libmysqlclient<span class="hljs-selector-class">.so</span>.<span class="hljs-number">18</span>()(<span class="hljs-number">64</span>bit)<br><span class="hljs-number">2</span>:postfix-<span class="hljs-number">2.10</span>.<span class="hljs-number">1</span>-<span class="hljs-number">6</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span> has missing requires of libmysqlclient<span class="hljs-selector-class">.so</span>.<span class="hljs-number">18</span>(libmysqlclient_18)(<span class="hljs-number"><code class="language-hljs stylus">...<br><span class="hljs-number">2</span>:postfix-<span class="hljs-number">2.10</span>.<span class="hljs-number">1</span>-<span class="hljs-number">6</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span> has missing requires of libmysqlclient<span class="hljs-selector-class">.so</span>.<span class="hljs-number">18</span>()(<span class="hljs-number">64</span>bit)<br><span class="hljs-number">2</span>:postfix-<span class="hljs-number">2.10</span>.<span class="hljs-number">1</span>-<span class="hljs-number">6</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span> has missing requires of libmysqlclient<span class="hljs-selector-class">.so</span>.<span class="hljs-number">18</span>(libmysqlclient_18)(<span class="hljs-number">64</span>bit)<br></code></pre></td></tr></tbody></table></figure><p>解决:缺少Percona-XtraDB-Cluster-shared-55-5.5.37-25.10.756.el6.x86_64.rpm这个包</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">wget http://www.percona.com/redir/downloads/Percona-XtraDB-Cluster/5.5.37-25.10/RPM/rhel6/x86_64/Percona-XtraDB-Cluster-shared-55-5.5.37-25.10.756.el6.x86_64.rpm</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><code class="language-hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">wget http://www.percona.com/redir/downloads/Percona-XtraDB-Cluster/5.5.37-25.10/RPM/rhel6/x86_64/Percona-XtraDB-Cluster-shared-55-5.5.37-25.10.756.el6.x86_64.rpm</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">rpm -ivh Percona-XtraDB-Cluster-shared-55-5.5.37-25.10.756.el6.x86_64.rp</span><br></code></pre></td></tr></tbody></table></figure><ul><li>(2)、配置net-snmp<br><code>vim /etc/snmp/snmpd.conf</code></li></ul><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-number">41</span>行 <span class="hljs-number">1</span>将<span class="hljs-keyword">default</span> 改为监控服务器ip;<span class="hljs-number">2</span> 将<span class="hljs-built_in">public</span> 改成复杂些的识别的字符串  <br>com2sec notConfigUser  <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>      <span class="hljs-built_in">public</span>  <br>  <br><span class="hljs-number">62</span>行 <span class="hljs-number">1</span>将systemview 改为<span class="hljs-keyword">all</span>,供所有snmp 访问权限  <br><span class="hljs-keyword">access</span>  notConfigGroup ""      <span class="hljs-keyword">any</span>       noauth    exact  <span class="hljs-keyword">all</span> <span class="hljs-keyword">none</span> <span class="hljs-keyword">none</span>  <br>  <br><span class="hljs-number">85</span>行 将#注释符号去掉  <br><span class="hljs-keyword">view</span> <span class="hljs-keyword">all</span>    included  <span class="hljs-number">.1</span>                               <span class="hljs-number"><code class="language-hljs pgsql"><span class="hljs-number">41</span>行 <span class="hljs-number">1</span>将<span class="hljs-keyword">default</span> 改为监控服务器ip;<span class="hljs-number">2</span> 将<span class="hljs-built_in">public</span> 改成复杂些的识别的字符串  <br>com2sec notConfigUser  <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>      <span class="hljs-built_in">public</span>  <br>  <br><span class="hljs-number">62</span>行 <span class="hljs-number">1</span>将systemview 改为<span class="hljs-keyword">all</span>,供所有snmp 访问权限  <br><span class="hljs-keyword">access</span>  notConfigGroup ""      <span class="hljs-keyword">any</span>       noauth    exact  <span class="hljs-keyword">all</span> <span class="hljs-keyword">none</span> <span class="hljs-keyword">none</span>  <br>  <br><span class="hljs-number">85</span>行 将#注释符号去掉  <br><span class="hljs-keyword">view</span> <span class="hljs-keyword">all</span>    included  <span class="hljs-number">.1</span>                               <span class="hljs-number">80</span>  <br></code></pre></td></tr></tbody></table></figure><ul><li><p>(3)、启动net-snmp<br><code>service snmpd start</code><br>可能提示：Redirecting to /bin/systemctl start snmpd.service<br>解决方法：<code>/bin/systemctl start snmpd</code></p></li><li><p>(4)、测试net-snmp<br>snmpd 使用 tcp/udp 161 端口,验证snmpd 服务<br><code>lsof -i :161</code><br><img src="/images/install_cacti_on_linux_1.png" alt=""><br>使用snmpwalk 命令验证</p><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs llvm">snmpwalk -v <span class="hljs-number">2</span><span class="hljs-keyword">c</span> -<span class="hljs-keyword">c</span> public <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <br>-v是指版本<span class="hljs-punctuation">,</span>-<span class="hljs-keyword"><code class="language-hljs llvm">snmpwalk -v <span class="hljs-number">2</span><span class="hljs-keyword">c</span> -<span class="hljs-keyword">c</span> public <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <br>-v是指版本<span class="hljs-punctuation">,</span>-<span class="hljs-keyword">c</span> 是指密钥，获取到系统信息则正常！<br>如果cacti搭建好后很久还是没出图，用这个命令试试看能否获取到数据。<br>正常情况下，执行完这个命令后会有很多数据出现！<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="3、安装cacti"><a href="#3、安装cacti" class="headerlink" title="3、安装cacti"></a>3、安装cacti</h3><ul><li>(1)、安装net-snmp<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">cd /tmp <br>wget http://www.cacti.net/downloads/cacti-0.8.8a.tar.gz <br>tar xzf cacti-0.8.8a.tar.gz <br>mv cacti-0.8.8a /var/www/cacti <br>cd /var/www/cacti<br></code></pre></td></tr></tbody></table></figure></li><li><p>(2)、创建数据库<br><code>mysqladmin --user=root -p create cacti</code></p></li><li><p>(3)、导入数据库<br><code>mysql -uroot -p cacti &lt; cacti.sql</code><br>可能报错：ERROR 1067 (42000) at line 1847: Invalid default value for ‘status_fail_date’<br>原因：status_fail_date的datetime默认类型是不允许的<br>解决方法：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs vim"><span class="hljs-keyword">vim</span> /etc/my.<span class="hljs-keyword">cnf</span><br>添加如下内容：<br>sql-<span class="hljs-keyword">mode</span>=<span class="hljs-string"><code class="language-hljs vim"><span class="hljs-keyword">vim</span> /etc/my.<span class="hljs-keyword">cnf</span><br>添加如下内容：<br>sql-<span class="hljs-keyword">mode</span>=<span class="hljs-string">"ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span><br>重启mysql服务：systemctl restart mysqld<br></code></pre></td></tr></tbody></table></figure></li><li><p>(4)、创建数据库用户</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql">shell&gt; mysql -uroot -p mysql <br>mysql&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">ON</span> cacti.* <span class="hljs-keyword">TO</span> cactiuser@localhost IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">'Cacti@pwd001231'</span>; <br>mysql&gt; flush <span class="hljs-keyword"><code class="language-hljs pgsql">shell&gt; mysql -uroot -p mysql <br>mysql&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">ON</span> cacti.* <span class="hljs-keyword">TO</span> cactiuser@localhost IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">'Cacti@pwd001231'</span>; <br>mysql&gt; flush <span class="hljs-keyword">privileges</span>; <br></code></pre></td></tr></tbody></table></figure></li><li><p>(5)、配置include/config.php</p><figure class="highlight perl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs perl">$database_type = <span class="hljs-string">"mysql"</span>; <br>$database_default = <span class="hljs-string">"cacti"</span>; <br>$database_hostname = <span class="hljs-string">"localhost"</span>; <br>$database_username = <span class="hljs-string">"cactiuser"</span>; <br>$database_password = <span class="hljs-string"><code class="language-hljs perl">$database_type = <span class="hljs-string">"mysql"</span>; <br>$database_default = <span class="hljs-string">"cacti"</span>; <br>$database_hostname = <span class="hljs-string">"localhost"</span>; <br>$database_username = <span class="hljs-string">"cactiuser"</span>; <br>$database_password = <span class="hljs-string">"Cacti@pwd001231"</span>; <br></code></pre></td></tr></tbody></table></figure></li></ul><p>打开注释掉的：<code>$url_path = "/cacti/";</code></p><ul><li><p>(6)、配置include/global.php</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-comment">/* Default database settings*/</span> <br><span class="hljs-variable">$database_type</span> = <span class="hljs-string">"mysql"</span>; <br><span class="hljs-variable">$database_default</span> = <span class="hljs-string">"cacti"</span>; <br><span class="hljs-variable">$database_hostname</span> = <span class="hljs-string">"localhost"</span>; <br><span class="hljs-variable">$database_username</span> = <span class="hljs-string">"cactiuser"</span>; <br><span class="hljs-variable">$database_password</span> = <span class="hljs-string">"Cacti@pwd001231"</span>; <br><span class="hljs-variable">$database_port</span> = <span class="hljs-string">"3306"</span>; <br><span class="hljs-variable">$database_ssl</span> = <span class="hljs-literal"><code class="language-hljs php"><span class="hljs-comment">/* Default database settings*/</span> <br><span class="hljs-variable">$database_type</span> = <span class="hljs-string">"mysql"</span>; <br><span class="hljs-variable">$database_default</span> = <span class="hljs-string">"cacti"</span>; <br><span class="hljs-variable">$database_hostname</span> = <span class="hljs-string">"localhost"</span>; <br><span class="hljs-variable">$database_username</span> = <span class="hljs-string">"cactiuser"</span>; <br><span class="hljs-variable">$database_password</span> = <span class="hljs-string">"Cacti@pwd001231"</span>; <br><span class="hljs-variable">$database_port</span> = <span class="hljs-string">"3306"</span>; <br><span class="hljs-variable">$database_ssl</span> = <span class="hljs-literal">false</span>; <br></code></pre></td></tr></tbody></table></figure></li><li><p>(7)、设置目录权限</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash">useradd cactiuser <br><span class="hljs-built_in">chown</span> -R cactiuser rra/ <span class="hljs-built_in"><code class="language-hljs bash">useradd cactiuser <br><span class="hljs-built_in">chown</span> -R cactiuser rra/ <span class="hljs-built_in">log</span>/ <br></code></pre></td></tr></tbody></table></figure></li><li><p>(8)、配置计划任务</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs awk"><span class="hljs-comment">#crontab -e </span><br>*<span class="hljs-regexp">/5 * * * * /u</span>sr<span class="hljs-regexp">/bin/</span>php <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>cacti<span class="hljs-regexp">/poller.php &gt; /</span>dev<span class="hljs-regexp">/null 2&gt;&amp;1 /</span>/让系统每<span class="hljs-number"><code class="language-hljs awk"><span class="hljs-comment">#crontab -e </span><br>*<span class="hljs-regexp">/5 * * * * /u</span>sr<span class="hljs-regexp">/bin/</span>php <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>cacti<span class="hljs-regexp">/poller.php &gt; /</span>dev<span class="hljs-regexp">/null 2&gt;&amp;1 /</span>/让系统每<span class="hljs-number">5</span>分钟收集<br>service crond restart <br></code></pre></td></tr></tbody></table></figure></li><li><p>(9)、完成cacti的安装<br>注意关闭防火墙或者允许80端口，关闭selinux<br>1) 在浏览器中输入：<a href="http://监控服务器IP/cacti/">http://监控服务器IP/cacti/</a><br>默认用户名：admin 密码：admin<br>2）设置cacti用到的命令路径<br>3) 更改密码<br>登陆成功户 next&gt;&gt;   next&gt;&gt;<br><img src="/images/install_cacti_on_linux_2.png" alt=""><br><img src="/images/install_cacti_on_linux_3.png" alt=""></p></li></ul><p>参考地址：<a href="https://www.cnblogs.com/liuyansheng/p/6118535.html">https://www.cnblogs.com/liuyansheng/p/6118535.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cacti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下操作MySQL</title>
      <link href="/posts/use-mysql-on-linux.html"/>
      <url>/posts/use-mysql-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-登录MySQL数据库"><a href="#1-登录MySQL数据库" class="headerlink" title="1. 登录MySQL数据库"></a>1. 登录MySQL数据库</h3><p><code>mysql -uroot -p</code><br><img src="/images/use_mysql_on_linux_1.png" alt=""></p><h3 id="2-退出MySQL"><a href="#2-退出MySQL" class="headerlink" title="2. 退出MySQL"></a>2. 退出MySQL</h3><p><code>quit或者exit</code><br><img src="/images/use_mysql_on_linux_2.png" alt=""></p><h3 id="3-查看MySQL版本-四种方法"><a href="#3-查看MySQL版本-四种方法" class="headerlink" title="3. 查看MySQL版本(四种方法)"></a>3. 查看MySQL版本(四种方法)</h3><ul><li><p>在终端下执行： <code>mysql -V</code><br><img src="/images/show_mysql_version_on_linux_1.png" alt=""></p></li><li><p>在help中查找 <code>mysql --help | grep Distrib</code><br><img src="/images/show_mysql_version_on_linux_2.png" alt=""></p></li><li><p>在mysql 里查看 <code>select version()</code><br><img src="/images/show_mysql_version_on_linux_3.png" alt=""></p></li><li><p>在mysql 里查看 <code>status</code><br><img src="/images/show_mysql_version_on_linux_4.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS点击复制指定内容</title>
      <link href="/posts/js-copy-object.html"/>
      <url>/posts/js-copy-object.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>点击按钮，复制指定文本框内容，代码如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy</span>(<span class="hljs-params"></span>){</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"my-data"</span>);</span><br><span class="language-javascript">    str.<span class="hljs-title function_">select</span>(); <span class="hljs-comment">// 选择对象</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">"Copy"</span>); <span class="hljs-comment">// 执行浏览器复制命令</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">"复制成功！"</span>);</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"20"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"my-data"</span>&gt;</span>我的测试内容<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">"copy();"</span> <span class="hljs-attr">value</span>=<span class="hljs-string"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy</span>(<span class="hljs-params"></span>){</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"my-data"</span>);</span><br><span class="language-javascript">    str.<span class="hljs-title function_">select</span>(); <span class="hljs-comment">// 选择对象</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">"Copy"</span>); <span class="hljs-comment">// 执行浏览器复制命令</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">"复制成功！"</span>);</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"20"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"my-data"</span>&gt;</span>我的测试内容<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">"copy();"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"复制"</span> /></span><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中rz的使用</title>
      <link href="/posts/rz-on-linux.html"/>
      <url>/posts/rz-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们常常需要在客户端和服务器(windows和linux)之间互传文件，这就可以使用rz(sz)命令。</p><ol><li><p>如果服务器不支持rz命令，需安装：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">sudo yum -y install lrzsz<br></code></pre></td></tr></tbody></table></figure></li><li><p>从客户端上传文件(可多选)到服务器：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">sudo rz<br>sudo rz -be<br></code></pre></td></tr></tbody></table></figure></li><li><p>从服务端发送文件到客户端：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">sudo sz filename<br></code></pre></td></tr></tbody></table></figure></li><li><p>卸载rz：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">yum remove lrzsz<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rz/sz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常见报错问题</title>
      <link href="/posts/mysql-errors.html"/>
      <url>/posts/mysql-errors.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>[Err] 1066 - Not unique table/alias: ‘s’</p><p>原因：SQL语句中存在多个表的别名为’s’</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP运维笔记</title>
      <link href="/posts/php-operate-note.html"/>
      <url>/posts/php-operate-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-常见命令"><a href="#1-常见命令" class="headerlink" title="1. 常见命令"></a>1. 常见命令</h3><pre><code>查看PHP扩展：`php -m`查看扩展的版本信息：`php -ri 扩展名`  如：`php -ri redis`</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown笔记</title>
      <link href="/posts/markdown-note.html"/>
      <url>/posts/markdown-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>解决有序列表排序失败的问题，格式如下：<figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs css"><span class="hljs-number">1</span>.<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">1</span> <br><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">1</span>-<span class="hljs-number">1</span> <br><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">1</span>-<span class="hljs-number">2</span> <br><span class="hljs-number">2</span>.<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">2</span> <br><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">2</span>-<span class="hljs-number">1</span> <br><span class="hljs-selector-attr">[Tab]</span><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">2</span>-<span class="hljs-number">1</span>-<span class="hljs-number">1</span> <br><span class="hljs-selector-attr">[Tab]</span><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">2</span>-<span class="hljs-number">1</span>-<span class="hljs-number">2</span> <br><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">2</span>-<span class="hljs-number"><code class="language-hljs css"><span class="hljs-number">1</span>.<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">1</span> <br><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">1</span>-<span class="hljs-number">1</span> <br><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">1</span>-<span class="hljs-number">2</span> <br><span class="hljs-number">2</span>.<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">2</span> <br><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">2</span>-<span class="hljs-number">1</span> <br><span class="hljs-selector-attr">[Tab]</span><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">2</span>-<span class="hljs-number">1</span>-<span class="hljs-number">1</span> <br><span class="hljs-selector-attr">[Tab]</span><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">2</span>-<span class="hljs-number">1</span>-<span class="hljs-number">2</span> <br><span class="hljs-selector-attr">[Tab]</span>-<span class="hljs-selector-attr">[空格]</span>测试文字<span class="hljs-number">2</span>-<span class="hljs-number">2</span><br></code></pre></td></tr></tbody></table></figure> 代码段使用Tab退格</li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prolog笔记</title>
      <link href="/posts/prolog-notes.html"/>
      <url>/posts/prolog-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-加载脚本"><a href="#1-加载脚本" class="headerlink" title="1. 加载脚本"></a>1. 加载脚本</h2><p><code>?- ['E:/SWI-Prolog/test/friend.pl'].       %true</code></p><h2 id="2-教程"><a href="#2-教程" class="headerlink" title="2. 教程"></a>2. 教程</h2><p><a href="https://riptutorial.com/zh-CN/prolog">https://riptutorial.com/zh-CN/prolog</a></p><h2 id="3-简单的计算求解："><a href="#3-简单的计算求解：" class="headerlink" title="3. 简单的计算求解："></a>3. 简单的计算求解：</h2><p><code>?- X is 3*7.       %X = 21</code></p><h2 id="4-CLP（约束逻辑编程）库的使用"><a href="#4-CLP（约束逻辑编程）库的使用" class="headerlink" title="4. CLP（约束逻辑编程）库的使用"></a>4. CLP（约束逻辑编程）库的使用</h2><p>求解方程，CLP只能处理整数运算<br>    </p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs ruby"><span class="hljs-string">?-</span> use_module(library(clpfd)).<br><span class="hljs-string">?-</span> Y <span class="hljs-comment">#= 3+4.                    %Y = 7.</span><br><span class="hljs-string">?-</span> <span class="hljs-number">5</span> <span class="hljs-comment"><code class="language-hljs ruby"><span class="hljs-string">?-</span> use_module(library(clpfd)).<br><span class="hljs-string">?-</span> Y <span class="hljs-comment">#= 3+4.                    %Y = 7.</span><br><span class="hljs-string">?-</span> <span class="hljs-number">5</span> <span class="hljs-comment">#= 4+W.                    %W = 1.</span><br></code></pre></td></tr></tbody></table></figure><p></p><h2 id="5-单行注释"><a href="#5-单行注释" class="headerlink" title="5. 单行注释"></a>5. 单行注释</h2><p>使用”%”</p><h2 id="6-知识库"><a href="#6-知识库" class="headerlink" title="6. 知识库"></a>6. 知识库</h2><p>事实 + 规则 = 知识库。<br>事实是我们对这个世界直接观察的结果。规则是关于现实世界的逻辑推论。</p><h2 id="7-合一（unification）"><a href="#7-合一（unification）" class="headerlink" title="7. 合一（unification）"></a>7. 合一（unification）</h2><p>找出那些使规则匹配的值。<br>合一有时候不是唯一的，可以通过“;”来进行追问，有时候我们可能不满足于一个答案。</p><h2 id="8-列表-元组"><a href="#8-列表-元组" class="headerlink" title="8. 列表/元组"></a>8. 列表/元组</h2><p>程序 = 算法 + 数据结构。      列表是变长的容器，元组是定长的容器。<br>    </p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs gcode">?- <span class="hljs-comment">(1,2,3)</span> = <span class="hljs-comment">(1,2,3)</span>.               <span class="hljs-meta">%</span>元组<br>yes<br><br>?- [A,B,C] = [A,B,C].               <span class="hljs-meta"><code class="language-hljs gcode">?- <span class="hljs-comment">(1,2,3)</span> = <span class="hljs-comment">(1,2,3)</span>.               <span class="hljs-meta">%</span>元组<br>yes<br><br>?- [A,B,C] = [A,B,C].               <span class="hljs-meta">%</span>列表<br>yes<br></code></pre></td></tr></tbody></table></figure><p></p><h2 id="9-内置谓词"><a href="#9-内置谓词" class="headerlink" title="9. 内置谓词"></a>9. 内置谓词</h2><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>获取列表的长度   <code>?- length([1,2,3],L).      %L = 3.</code></p><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><p>可以用来合并两个列表<br>    </p><figure class="highlight inform7"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs inform7">?- append(<span class="hljs-comment">[1]</span>,<span class="hljs-comment">[2]</span>,What).      %What = <span class="hljs-comment">[1, 2]</span>.<br>?- append(<span class="hljs-comment">[1]</span>,W,<span class="hljs-comment">[1,2,3]</span>).      %W = <span class="hljs-comment"><code class="language-hljs inform7">?- append(<span class="hljs-comment">[1]</span>,<span class="hljs-comment">[2]</span>,What).      %What = <span class="hljs-comment">[1, 2]</span>.<br>?- append(<span class="hljs-comment">[1]</span>,W,<span class="hljs-comment">[1,2,3]</span>).      %W = <span class="hljs-comment">[2, 3]</span>.<br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="member"><a href="#member" class="headerlink" title="member"></a>member</h3><p>检查某一个值是否在一个列表内<br>    </p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs ruby"><span class="hljs-string">?-</span> member(<span class="hljs-number">1</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]).      %<span class="hljs-literal">true</span>.<br><span class="hljs-string">?-</span>  member(<span class="hljs-number">3</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]).      %<span class="hljs-literal"><code class="language-hljs ruby"><span class="hljs-string">?-</span> member(<span class="hljs-number">1</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]).      %<span class="hljs-literal">true</span>.<br><span class="hljs-string">?-</span>  member(<span class="hljs-number">3</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]).      %<span class="hljs-literal">false</span>.<br></code></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> Prolog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prolog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPExcel笔记</title>
      <link href="/posts/php-excel.html"/>
      <url>/posts/php-excel.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-设置字体和样式"><a href="#1-设置字体和样式" class="headerlink" title="1. 设置字体和样式"></a>1. 设置字体和样式</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="hljs-string">'A1'</span>)-&gt;applyFromArray([<span class="hljs-string">'font'</span>=&gt;[<span class="hljs-string">'bold'</span>=&gt;<span class="hljs-literal">true</span>]]);//设置单元格A1字体加粗<br><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="hljs-string">'A1:GL1'</span>)-&gt;applyFromArray([<span class="hljs-string">'font'</span>=&gt;[<span class="hljs-string">'bold'</span>=&gt;<span class="hljs-literal">true</span>]]);//设置单元格A1-GL1字体加粗<br><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="hljs-string">'A1:B3'</span>)-&gt;getFont()-&gt;setBold(<span class="hljs-literal"><code class="language-hljs bash"><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="hljs-string">'A1'</span>)-&gt;applyFromArray([<span class="hljs-string">'font'</span>=&gt;[<span class="hljs-string">'bold'</span>=&gt;<span class="hljs-literal">true</span>]]);//设置单元格A1字体加粗<br><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="hljs-string">'A1:GL1'</span>)-&gt;applyFromArray([<span class="hljs-string">'font'</span>=&gt;[<span class="hljs-string">'bold'</span>=&gt;<span class="hljs-literal">true</span>]]);//设置单元格A1-GL1字体加粗<br><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="hljs-string">'A1:B3'</span>)-&gt;getFont()-&gt;setBold(<span class="hljs-literal">true</span>);//设置A1-B3之间的单元格字体加粗<br></code></pre></td></tr></tbody></table></figure><h3 id="2-设置行高"><a href="#2-设置行高" class="headerlink" title="2. 设置行高"></a>2. 设置行高</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getDefaultRowDimension()-&gt;setRowHeight(20);//设置默认行高<br><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getRowDimension(<span class="hljs-string"><code class="language-hljs bash"><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getDefaultRowDimension()-&gt;setRowHeight(20);//设置默认行高<br><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getRowDimension(<span class="hljs-string">'1'</span>)->setRowHeight(30);//设置第一行行高<br></code></pre></td></tr></tbody></table></figure><h3 id="3-设置列宽"><a href="#3-设置列宽" class="headerlink" title="3. 设置列宽"></a>3. 设置列宽</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getColumnDimension(<span class="hljs-string"><code class="language-hljs bash"><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getColumnDimension(<span class="hljs-string">'A'</span>)->setWidth(20);//设置A列列宽<br></code></pre></td></tr></tbody></table></figure><h3 id="4-单元格内容特定位置换行"><a href="#4-单元格内容特定位置换行" class="headerlink" title="4. 单元格内容特定位置换行"></a>4. 单元格内容特定位置换行</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><span class="hljs-variable">$objPHPExcel</span>-&gt;setActiveSheetIndex(0)-&gt;setCellValue(<span class="hljs-string">'A3'</span>, <span class="hljs-string">"第三节\n11:00-12:00"</span>);   //注意双引号<br><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="hljs-string">'A3'</span>)-&gt;getAlignment()-&gt;setWrapText(<span class="hljs-literal"><code class="language-hljs bash"><span class="hljs-variable">$objPHPExcel</span>-&gt;setActiveSheetIndex(0)-&gt;setCellValue(<span class="hljs-string">'A3'</span>, <span class="hljs-string">"第三节\n11:00-12:00"</span>);   //注意双引号<br><span class="hljs-variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="hljs-string">'A3'</span>)-&gt;getAlignment()-&gt;setWrapText(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></tbody></table></figure><h3 id="5-PhpSpreadsheet日期格式问题"><a href="#5-PhpSpreadsheet日期格式问题" class="headerlink" title="5. PhpSpreadsheet日期格式问题"></a>5. PhpSpreadsheet日期格式问题</h3><p>使用PhpSpreadsheet  进行导入处理时，如果单元格格式为：自定义的<code>yyyy/m/d</code>，导入后的数据格式会变为<code>m/d/yyyy</code>，即12/13/2021<br><img src="/images/php_excel_note_1.png" alt=""><br>这是因为PhpSpreadsheet会把单元格转为数字，而校验出的单元格格式为<code>m/d/yyyy</code>。<br>解决办法：使用日期格式的<code>yyyy/m/d</code><br><img src="/images/php_excel_note_2.png" alt=""><br>程序校验出的日期格式为：<code>yyyy/m/d;@</code><br>excel导入，获取数据：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-variable">$allobjWorksheets</span> = <span class="hljs-variable">$objPHPExcel</span>-&gt;<span class="hljs-title function_ invoke__">getAllSheets</span>();<br><span class="hljs-variable">$result</span> = [];<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$allobjWorksheets</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$objWorksheet</span>) {<br>    <span class="hljs-variable">$sheetname</span> = <span class="hljs-variable">$objWorksheet</span>-&gt;<span class="hljs-title function_ invoke__">getTitle</span>();<br>    <span class="hljs-variable">$highestRow</span> = <span class="hljs-variable">$objWorksheet</span>-&gt;<span class="hljs-title function_ invoke__">getHighestRow</span>();<br>    <span class="hljs-variable">$highestColumn</span> = <span class="hljs-variable">$objWorksheet</span>-&gt;<span class="hljs-title function_ invoke__">getHighestColumn</span>();<br>    <span class="hljs-variable">$highestColumnIndex</span> = <span class="hljs-title class_">Coordinate</span>::<span class="hljs-title function_ invoke__">columnIndexFromString</span>(<span class="hljs-variable">$highestColumn</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$row</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$row</span> &lt;= <span class="hljs-variable">$highestRow</span>; ++<span class="hljs-variable">$row</span>) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$col</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$col</span> &lt;= <span class="hljs-variable">$highestColumnIndex</span>; ++<span class="hljs-variable">$col</span>) {<br>            <span class="hljs-variable">$cell</span> = <span class="hljs-variable">$objWorksheet</span>-&gt;<span class="hljs-title function_ invoke__">getCellByColumnAndRow</span>(<span class="hljs-variable">$col</span>, <span class="hljs-variable">$row</span>);<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable">$cell</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$cell</span>-&gt;<span class="hljs-title function_ invoke__">getDataType</span>() == <span class="hljs-title class_">DataType</span>::<span class="hljs-variable constant_">TYPE_NUMERIC</span>) {<br>                <span class="hljs-variable">$formatcode</span> = <span class="hljs-variable">$cell</span>-&gt;<span class="hljs-title function_ invoke__">getStyle</span>()-&gt;<span class="hljs-title function_ invoke__">getNumberFormat</span>()-&gt;<span class="hljs-title function_ invoke__">getFormatCode</span>();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/^(\[\$[A-Z]*-[0-9A-F]*\])*[hmsdy]/i'</span>, <span class="hljs-variable">$formatcode</span>)) {<br>                    <span class="hljs-variable">$value</span> = <span class="hljs-variable">$cell</span>-&gt;<span class="hljs-title function_ invoke__">getFormattedValue</span>();<br>                    <span class="hljs-comment">//$value=gmdate("Y-m-d", PHPExcel_Shared_Date::ExcelToPHP($value));</span><br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-variable">$value</span> = <span class="hljs-title class_">NumberFormat</span>::<span class="hljs-title function_ invoke__">toFormattedString</span>(<span class="hljs-variable">$value</span>, <span class="hljs-variable">$formatcode</span>);<br>                }<br>            }<br>            <span class="hljs-variable">$result</span>[<span class="hljs-variable">$sheetname</span>][<span class="hljs-variable">$row</span> - <span class="hljs-number">1</span>][<span class="hljs-variable">$col</span>] = <span class="hljs-variable">$value</span>;<br>        }<br>    }<br>}<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$result</span>);<br><span class="hljs-keyword"><code class="language-hljs php"><span class="hljs-variable">$allobjWorksheets</span> = <span class="hljs-variable">$objPHPExcel</span>-&gt;<span class="hljs-title function_ invoke__">getAllSheets</span>();<br><span class="hljs-variable">$result</span> = [];<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$allobjWorksheets</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$objWorksheet</span>) {<br>    <span class="hljs-variable">$sheetname</span> = <span class="hljs-variable">$objWorksheet</span>-&gt;<span class="hljs-title function_ invoke__">getTitle</span>();<br>    <span class="hljs-variable">$highestRow</span> = <span class="hljs-variable">$objWorksheet</span>-&gt;<span class="hljs-title function_ invoke__">getHighestRow</span>();<br>    <span class="hljs-variable">$highestColumn</span> = <span class="hljs-variable">$objWorksheet</span>-&gt;<span class="hljs-title function_ invoke__">getHighestColumn</span>();<br>    <span class="hljs-variable">$highestColumnIndex</span> = <span class="hljs-title class_">Coordinate</span>::<span class="hljs-title function_ invoke__">columnIndexFromString</span>(<span class="hljs-variable">$highestColumn</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$row</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$row</span> &lt;= <span class="hljs-variable">$highestRow</span>; ++<span class="hljs-variable">$row</span>) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$col</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$col</span> &lt;= <span class="hljs-variable">$highestColumnIndex</span>; ++<span class="hljs-variable">$col</span>) {<br>            <span class="hljs-variable">$cell</span> = <span class="hljs-variable">$objWorksheet</span>-&gt;<span class="hljs-title function_ invoke__">getCellByColumnAndRow</span>(<span class="hljs-variable">$col</span>, <span class="hljs-variable">$row</span>);<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable">$cell</span>-&gt;<span class="hljs-title function_ invoke__">getValue</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$cell</span>-&gt;<span class="hljs-title function_ invoke__">getDataType</span>() == <span class="hljs-title class_">DataType</span>::<span class="hljs-variable constant_">TYPE_NUMERIC</span>) {<br>                <span class="hljs-variable">$formatcode</span> = <span class="hljs-variable">$cell</span>-&gt;<span class="hljs-title function_ invoke__">getStyle</span>()-&gt;<span class="hljs-title function_ invoke__">getNumberFormat</span>()-&gt;<span class="hljs-title function_ invoke__">getFormatCode</span>();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">'/^(\[\$[A-Z]*-[0-9A-F]*\])*[hmsdy]/i'</span>, <span class="hljs-variable">$formatcode</span>)) {<br>                    <span class="hljs-variable">$value</span> = <span class="hljs-variable">$cell</span>-&gt;<span class="hljs-title function_ invoke__">getFormattedValue</span>();<br>                    <span class="hljs-comment">//$value=gmdate("Y-m-d", PHPExcel_Shared_Date::ExcelToPHP($value));</span><br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-variable">$value</span> = <span class="hljs-title class_">NumberFormat</span>::<span class="hljs-title function_ invoke__">toFormattedString</span>(<span class="hljs-variable">$value</span>, <span class="hljs-variable">$formatcode</span>);<br>                }<br>            }<br>            <span class="hljs-variable">$result</span>[<span class="hljs-variable">$sheetname</span>][<span class="hljs-variable">$row</span> - <span class="hljs-number">1</span>][<span class="hljs-variable">$col</span>] = <span class="hljs-variable">$value</span>;<br>        }<br>    }<br>}<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$result</span>);<br><span class="hljs-keyword">die</span>;<br></code></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHPExcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL自定义函数</title>
      <link href="/posts/mysql-custom-functions.html"/>
      <url>/posts/mysql-custom-functions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">有时候要对MySQL数据进行批量处理，仅仅依靠已有的内置函数是不够的，这个时候就需要添加一些自定义的函数了，下面列举一些常用的自定义函数</div><h3 id="1-批量处理字符串，将”FEEED305904B”转为”FE-EE-D3-05-90-4B”格式："><a href="#1-批量处理字符串，将”FEEED305904B”转为”FE-EE-D3-05-90-4B”格式：" class="headerlink" title="1. 批量处理字符串，将”FEEED305904B”转为”FE:EE:D3:05:90:4B”格式："></a>1. 批量处理字符串，将”FEEED305904B”转为”FE:EE:D3:05:90:4B”格式：</h3><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> `SPLIT_STR`; <br><span class="hljs-keyword">delimiter</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> SPLIT_STR(</span><br><span class="language-pgsql">  x <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),</span><br><span class="language-pgsql">  delim <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">12</span>),</span><br><span class="language-pgsql">  pos <span class="hljs-type">INT</span></span><br><span class="language-pgsql">)</span><br><span class="language-pgsql"><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>)</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">BEGIN</span></span><br><span class="language-pgsql">    <span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;</span><br><span class="language-pgsql">    <span class="hljs-keyword">DECLARE</span> s <span class="hljs-type">text</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span>;</span><br><span class="language-pgsql">    myloop: <span class="hljs-keyword">LOOP</span></span><br><span class="language-pgsql">        <span class="hljs-keyword">SET</span> i = i+pos;</span><br><span class="language-pgsql">        <span class="hljs-keyword">SET</span> s = CONCAT(s,delim,left(x,pos));</span><br><span class="language-pgsql">        <span class="hljs-keyword">SET</span> x = right(x,length(x)-pos);</span><br><span class="language-pgsql">        <span class="hljs-keyword">if</span> pos&gt;length(x) <span class="hljs-keyword">then</span></span><br><span class="language-pgsql">            <span class="hljs-keyword">if</span> length(x)&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="language-pgsql">                <span class="hljs-keyword">SET</span> s = CONCAT(s,delim,x);</span><br><span class="language-pgsql">            <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;</span><br><span class="language-pgsql">            leave myloop;</span><br><span class="language-pgsql">        <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;</span><br><span class="language-pgsql">    <span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span> myloop;</span><br><span class="language-pgsql"><span class="hljs-keyword">RETURN</span> right(s,length(s)-length(delim));</span><br><span class="language-pgsql"><span class="hljs-keyword"><code class="language-hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> `SPLIT_STR`; <br><span class="hljs-keyword">delimiter</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> SPLIT_STR(</span><br><span class="language-pgsql">  x <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),</span><br><span class="language-pgsql">  delim <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">12</span>),</span><br><span class="language-pgsql">  pos <span class="hljs-type">INT</span></span><br><span class="language-pgsql">)</span><br><span class="language-pgsql"><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>)</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">BEGIN</span></span><br><span class="language-pgsql">    <span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;</span><br><span class="language-pgsql">    <span class="hljs-keyword">DECLARE</span> s <span class="hljs-type">text</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">''</span>;</span><br><span class="language-pgsql">    myloop: <span class="hljs-keyword">LOOP</span></span><br><span class="language-pgsql">        <span class="hljs-keyword">SET</span> i = i+pos;</span><br><span class="language-pgsql">        <span class="hljs-keyword">SET</span> s = CONCAT(s,delim,left(x,pos));</span><br><span class="language-pgsql">        <span class="hljs-keyword">SET</span> x = right(x,length(x)-pos);</span><br><span class="language-pgsql">        <span class="hljs-keyword">if</span> pos&gt;length(x) <span class="hljs-keyword">then</span></span><br><span class="language-pgsql">            <span class="hljs-keyword">if</span> length(x)&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">then</span></span><br><span class="language-pgsql">                <span class="hljs-keyword">SET</span> s = CONCAT(s,delim,x);</span><br><span class="language-pgsql">            <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;</span><br><span class="language-pgsql">            leave myloop;</span><br><span class="language-pgsql">        <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;</span><br><span class="language-pgsql">    <span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span> myloop;</span><br><span class="language-pgsql"><span class="hljs-keyword">RETURN</span> right(s,length(s)-length(delim));</span><br><span class="language-pgsql"><span class="hljs-keyword">END</span> $$</span><br></code></pre></td></tr></tbody></table></figure><p>调用：<code>SELECT SPLIT_STR('FEEED305904B', ':', 2);</code></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP生成数据字典</title>
      <link href="/posts/make-dictionary-by-php.html"/>
      <url>/posts/make-dictionary-by-php.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过php代码生成MySQL数据字典，代码如下：</p><figure class="highlight php-template"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre class=" language-hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-php"> * 生成mysql数据字典</span></span><br><span class="hljs-comment"><span class="language-php"> */</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">"Content-type: text/html; charset=utf-8"</span>);</span><br><span class="language-php"><span class="hljs-comment">//配置数据库</span></span><br><span class="language-php"><span class="hljs-variable">$dbserver</span>   = <span class="hljs-string">"127.0.0.1"</span>;</span><br><span class="language-php"><span class="hljs-variable">$dbusername</span> = <span class="hljs-string">"root"</span>;</span><br><span class="language-php"><span class="hljs-variable">$dbpassword</span> = <span class="hljs-string">"root"</span>;</span><br><span class="language-php"><span class="hljs-variable">$database</span>   = <span class="hljs-string">"demodb"</span>;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">//其他配置</span></span><br><span class="language-php"><span class="hljs-variable">$mysql_conn</span> = @<span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-variable">$dbserver</span>, <span class="hljs-variable">$dbusername</span>, <span class="hljs-variable">$dbpassword</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"Mysql connect is error."</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-variable">$database</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">'SET NAMES utf8'</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php"><span class="hljs-variable">$table_result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">'show tables'</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$no_show_table</span> = <span class="hljs-keyword">array</span>();    <span class="hljs-comment">//不需要显示的表</span></span><br><span class="language-php"><span class="hljs-variable">$no_show_field</span> = <span class="hljs-keyword">array</span>();   <span class="hljs-comment">//不需要显示的字段</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">//取得所有的表名</span></span><br><span class="language-php"><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$table_result</span>)){</span><br><span class="language-php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>],<span class="hljs-variable">$no_show_table</span>)){</span><br><span class="language-php"><span class="hljs-variable">$tables</span>[][<span class="hljs-string">'TABLE_NAME'</span>] = <span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>];</span><br><span class="language-php">}</span><br><span class="language-php">}</span><br><span class="language-php"><span class="hljs-comment">//替换所以表的表前缀</span></span><br><span class="language-php"><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'prefix'</span>])){ </span><br><span class="language-php"><span class="hljs-variable">$prefix</span> = <span class="hljs-string">'wxaj'</span>;</span><br><span class="language-php"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$tables</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>){</span><br><span class="language-php"><span class="hljs-variable">$tableName</span> = <span class="hljs-variable">$val</span>[<span class="hljs-string">'TABLE_NAME'</span>];</span><br><span class="language-php"><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">'_'</span>,<span class="hljs-variable">$tableName</span>);</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$string</span>[<span class="hljs-number">0</span>] != <span class="hljs-variable">$prefix</span>){  </span><br><span class="language-php"><span class="hljs-variable">$string</span>[<span class="hljs-number">0</span>] = <span class="hljs-variable">$prefix</span>;  </span><br><span class="language-php"><span class="hljs-variable">$newTableName</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">'_'</span>, <span class="hljs-variable">$string</span>);  </span><br><span class="language-php"><span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">'rename table '</span>.<span class="hljs-variable">$tableName</span>.<span class="hljs-string">' TO '</span>.<span class="hljs-variable">$newTableName</span>);  </span><br><span class="language-php">}</span><br><span class="language-php">}</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"替换成功！"</span>;<span class="hljs-keyword">exit</span>();</span><br><span class="language-php">}</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">//循环取得所有表的备注及表中列消息</span></span><br><span class="language-php"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$tables</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>) {</span><br><span class="language-php">    <span class="hljs-variable">$sql</span>  = <span class="hljs-string">'SELECT * FROM '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'INFORMATION_SCHEMA.TABLES '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'WHERE '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">"table_name = '<span class="hljs-subst">{$v['TABLE_NAME']}</span>'  AND table_schema = '<span class="hljs-subst">{$database}</span>'"</span>;</span><br><span class="language-php">    <span class="hljs-variable">$table_result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php">    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$t</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$table_result</span>) ) {</span><br><span class="language-php">        <span class="hljs-variable">$tables</span>[<span class="hljs-variable">$k</span>][<span class="hljs-string">'TABLE_COMMENT'</span>] = <span class="hljs-variable">$t</span>[<span class="hljs-string">'TABLE_COMMENT'</span>];</span><br><span class="language-php">    }</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-variable">$sql</span>  = <span class="hljs-string">'SELECT column_name FROM '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'INFORMATION_SCHEMA.`KEY_COLUMN_USAGE` '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'WHERE '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">"table_name = '<span class="hljs-subst">{$v['TABLE_NAME']}</span>'  AND constraint_name = 'PRIMARY'"</span>;</span><br><span class="language-php">    <span class="hljs-variable">$pk_result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php">    <span class="hljs-variable">$pks</span> = [];</span><br><span class="language-php">    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$t</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$pk_result</span>) ) {</span><br><span class="language-php">        <span class="hljs-variable">$pks</span>[] = <span class="hljs-variable">$t</span>[<span class="hljs-string">'column_name'</span>];</span><br><span class="language-php">    }</span><br><span class="language-php">    <span class="hljs-variable">$tables</span>[<span class="hljs-variable">$k</span>][<span class="hljs-string">'PRIMARY_KEY'</span>] = <span class="hljs-variable">$pks</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-variable">$sql</span>  = <span class="hljs-string">'SELECT * FROM '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'INFORMATION_SCHEMA.COLUMNS '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'WHERE '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">"table_name = '<span class="hljs-subst">{$v['TABLE_NAME']}</span>' AND table_schema = '<span class="hljs-subst">{$database}</span>'"</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-variable">$fields</span> = [];</span><br><span class="language-php">    <span class="hljs-variable">$field_result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php">    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$t</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$field_result</span>) ) {</span><br><span class="language-php">        <span class="hljs-variable">$fields</span>[] = <span class="hljs-variable">$t</span>;</span><br><span class="language-php">    }</span><br><span class="language-php">    <span class="hljs-variable">$tables</span>[<span class="hljs-variable">$k</span>][<span class="hljs-string">'COLUMN'</span>] = <span class="hljs-variable">$fields</span>;</span><br><span class="language-php">}</span><br><span class="language-php"><span class="hljs-title function_ invoke__">mysql_close</span>(<span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php"></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$html</span> = <span class="hljs-string">''</span>;</span><br><span class="language-php"><span class="hljs-comment">//循环所有表</span></span><br><span class="language-php"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$tables</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>) {</span><br><span class="language-php">    <span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;h3&gt;'</span> . (<span class="hljs-variable">$k</span> + <span class="hljs-number">1</span>) . <span class="hljs-string">'、'</span> . <span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_COMMENT'</span>] .<span class="hljs-string">'  （'</span>. <span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_NAME'</span>]. <span class="hljs-string">'）&lt;/h3&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php">    <span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;table border="1" cellspacing="0" cellpadding="0" width="100%"&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php">    <span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;tbody&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;tr&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;字段名&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;数据类型&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;默认值&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;允许非空&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;自动递增&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;是否主键&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;备注&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;/tr&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$v</span>[<span class="hljs-string">'COLUMN'</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) {</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$no_show_field</span>[<span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_NAME'</span>]]) || !<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$no_show_field</span>[<span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_NAME'</span>]])){ </span><br><span class="language-php"><span class="hljs-variable">$no_show_field</span>[<span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_NAME'</span>]] = <span class="hljs-keyword">array</span>();</span><br><span class="language-php">}</span><br><span class="language-php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_NAME'</span>],<span class="hljs-variable">$no_show_field</span>[<span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_NAME'</span>]])){</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;tr&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c1"&gt;'</span> . <span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_NAME'</span>] . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c2"&gt;'</span> . <span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_TYPE'</span>] . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c3"&gt;'</span> . <span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_DEFAULT'</span>] . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c4"&gt;'</span> . <span class="hljs-variable">$f</span>[<span class="hljs-string">'IS_NULLABLE'</span>] . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c5"&gt;'</span> . (<span class="hljs-variable">$f</span>[<span class="hljs-string">'EXTRA'</span>]==<span class="hljs-string">'auto_increment'</span>?<span class="hljs-string">'是'</span>:<span class="hljs-string">'&amp;nbsp;'</span>) . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c6"&gt;'</span> . (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_NAME'</span>],<span class="hljs-variable">$v</span>[<span class="hljs-string">'PRIMARY_KEY'</span>])?<span class="hljs-string">'是'</span>:<span class="hljs-string">'&amp;nbsp;'</span>) . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c7"&gt;'</span> . <span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_COMMENT'</span>] . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;/tr&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php">}</span><br><span class="language-php">    }</span><br><span class="language-php">    <span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;/tbody&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;/table&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php">}</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数据字典<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"generator"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ThinkDb V1.0"</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"author"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"Crazy_boy"</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"copyright"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"2014-208 zotuo.com"</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">body</span>, <span class="hljs-selector-tag">td</span>, <span class="hljs-selector-tag">th</span> { <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"微软雅黑"</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>; }</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.warp</span>{<span class="hljs-attribute">margin</span>:auto; <span class="hljs-attribute">width</span>:<span class="hljs-number">900px</span>;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.warp</span> <span class="hljs-selector-tag">h3</span>{<span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">0px</span>; <span class="hljs-attribute">line-height</span>:<span class="hljs-number">30px</span>; <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">10px</span>;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">table</span> { <span class="hljs-attribute">border-collapse</span>: collapse; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#CCC</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#efefef</span>; }</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">th</span> { <span class="hljs-attribute">text-align</span>: left; <span class="hljs-attribute">font-weight</span>: bold; <span class="hljs-attribute">height</span>: <span class="hljs-number">26px</span>; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">26px</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>; <span class="hljs-attribute">text-align</span>:center; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#CCC</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span> { <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#CCC</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c1</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>; }</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c2</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>; }</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c3</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>; }</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c4</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>; <span class="hljs-attribute">text-align</span>:center;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c5</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>; <span class="hljs-attribute">text-align</span>:center;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c6</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>; <span class="hljs-attribute">text-align</span>:center;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c7</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">270px</span>; }</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"warp"</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align:center;"</span>&gt;</span>数据字典<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$html</span>; <span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><code class="language-hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-php"> * 生成mysql数据字典</span></span><br><span class="hljs-comment"><span class="language-php"> */</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">"Content-type: text/html; charset=utf-8"</span>);</span><br><span class="language-php"><span class="hljs-comment">//配置数据库</span></span><br><span class="language-php"><span class="hljs-variable">$dbserver</span>   = <span class="hljs-string">"127.0.0.1"</span>;</span><br><span class="language-php"><span class="hljs-variable">$dbusername</span> = <span class="hljs-string">"root"</span>;</span><br><span class="language-php"><span class="hljs-variable">$dbpassword</span> = <span class="hljs-string">"root"</span>;</span><br><span class="language-php"><span class="hljs-variable">$database</span>   = <span class="hljs-string">"demodb"</span>;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">//其他配置</span></span><br><span class="language-php"><span class="hljs-variable">$mysql_conn</span> = @<span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-variable">$dbserver</span>, <span class="hljs-variable">$dbusername</span>, <span class="hljs-variable">$dbpassword</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"Mysql connect is error."</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-variable">$database</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">'SET NAMES utf8'</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php"><span class="hljs-variable">$table_result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">'show tables'</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$no_show_table</span> = <span class="hljs-keyword">array</span>();    <span class="hljs-comment">//不需要显示的表</span></span><br><span class="language-php"><span class="hljs-variable">$no_show_field</span> = <span class="hljs-keyword">array</span>();   <span class="hljs-comment">//不需要显示的字段</span></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">//取得所有的表名</span></span><br><span class="language-php"><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$table_result</span>)){</span><br><span class="language-php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>],<span class="hljs-variable">$no_show_table</span>)){</span><br><span class="language-php"><span class="hljs-variable">$tables</span>[][<span class="hljs-string">'TABLE_NAME'</span>] = <span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>];</span><br><span class="language-php">}</span><br><span class="language-php">}</span><br><span class="language-php"><span class="hljs-comment">//替换所以表的表前缀</span></span><br><span class="language-php"><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">'prefix'</span>])){ </span><br><span class="language-php"><span class="hljs-variable">$prefix</span> = <span class="hljs-string">'wxaj'</span>;</span><br><span class="language-php"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$tables</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>){</span><br><span class="language-php"><span class="hljs-variable">$tableName</span> = <span class="hljs-variable">$val</span>[<span class="hljs-string">'TABLE_NAME'</span>];</span><br><span class="language-php"><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">'_'</span>,<span class="hljs-variable">$tableName</span>);</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$string</span>[<span class="hljs-number">0</span>] != <span class="hljs-variable">$prefix</span>){  </span><br><span class="language-php"><span class="hljs-variable">$string</span>[<span class="hljs-number">0</span>] = <span class="hljs-variable">$prefix</span>;  </span><br><span class="language-php"><span class="hljs-variable">$newTableName</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">'_'</span>, <span class="hljs-variable">$string</span>);  </span><br><span class="language-php"><span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">'rename table '</span>.<span class="hljs-variable">$tableName</span>.<span class="hljs-string">' TO '</span>.<span class="hljs-variable">$newTableName</span>);  </span><br><span class="language-php">}</span><br><span class="language-php">}</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">"替换成功！"</span>;<span class="hljs-keyword">exit</span>();</span><br><span class="language-php">}</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-comment">//循环取得所有表的备注及表中列消息</span></span><br><span class="language-php"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$tables</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>) {</span><br><span class="language-php">    <span class="hljs-variable">$sql</span>  = <span class="hljs-string">'SELECT * FROM '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'INFORMATION_SCHEMA.TABLES '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'WHERE '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">"table_name = '<span class="hljs-subst">{$v['TABLE_NAME']}</span>'  AND table_schema = '<span class="hljs-subst">{$database}</span>'"</span>;</span><br><span class="language-php">    <span class="hljs-variable">$table_result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php">    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$t</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$table_result</span>) ) {</span><br><span class="language-php">        <span class="hljs-variable">$tables</span>[<span class="hljs-variable">$k</span>][<span class="hljs-string">'TABLE_COMMENT'</span>] = <span class="hljs-variable">$t</span>[<span class="hljs-string">'TABLE_COMMENT'</span>];</span><br><span class="language-php">    }</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-variable">$sql</span>  = <span class="hljs-string">'SELECT column_name FROM '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'INFORMATION_SCHEMA.`KEY_COLUMN_USAGE` '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'WHERE '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">"table_name = '<span class="hljs-subst">{$v['TABLE_NAME']}</span>'  AND constraint_name = 'PRIMARY'"</span>;</span><br><span class="language-php">    <span class="hljs-variable">$pk_result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php">    <span class="hljs-variable">$pks</span> = [];</span><br><span class="language-php">    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$t</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$pk_result</span>) ) {</span><br><span class="language-php">        <span class="hljs-variable">$pks</span>[] = <span class="hljs-variable">$t</span>[<span class="hljs-string">'column_name'</span>];</span><br><span class="language-php">    }</span><br><span class="language-php">    <span class="hljs-variable">$tables</span>[<span class="hljs-variable">$k</span>][<span class="hljs-string">'PRIMARY_KEY'</span>] = <span class="hljs-variable">$pks</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-variable">$sql</span>  = <span class="hljs-string">'SELECT * FROM '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'INFORMATION_SCHEMA.COLUMNS '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">'WHERE '</span>;</span><br><span class="language-php">    <span class="hljs-variable">$sql</span> .= <span class="hljs-string">"table_name = '<span class="hljs-subst">{$v['TABLE_NAME']}</span>' AND table_schema = '<span class="hljs-subst">{$database}</span>'"</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-variable">$fields</span> = [];</span><br><span class="language-php">    <span class="hljs-variable">$field_result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php">    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$t</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$field_result</span>) ) {</span><br><span class="language-php">        <span class="hljs-variable">$fields</span>[] = <span class="hljs-variable">$t</span>;</span><br><span class="language-php">    }</span><br><span class="language-php">    <span class="hljs-variable">$tables</span>[<span class="hljs-variable">$k</span>][<span class="hljs-string">'COLUMN'</span>] = <span class="hljs-variable">$fields</span>;</span><br><span class="language-php">}</span><br><span class="language-php"><span class="hljs-title function_ invoke__">mysql_close</span>(<span class="hljs-variable">$mysql_conn</span>);</span><br><span class="language-php"></span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$html</span> = <span class="hljs-string">''</span>;</span><br><span class="language-php"><span class="hljs-comment">//循环所有表</span></span><br><span class="language-php"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$tables</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>) {</span><br><span class="language-php">    <span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;h3&gt;'</span> . (<span class="hljs-variable">$k</span> + <span class="hljs-number">1</span>) . <span class="hljs-string">'、'</span> . <span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_COMMENT'</span>] .<span class="hljs-string">'  （'</span>. <span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_NAME'</span>]. <span class="hljs-string">'）&lt;/h3&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php">    <span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;table border="1" cellspacing="0" cellpadding="0" width="100%"&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php">    <span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;tbody&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;tr&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;字段名&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;数据类型&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;默认值&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;允许非空&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;自动递增&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;是否主键&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;th&gt;备注&lt;/th&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;/tr&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$v</span>[<span class="hljs-string">'COLUMN'</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) {</span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$no_show_field</span>[<span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_NAME'</span>]]) || !<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$no_show_field</span>[<span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_NAME'</span>]])){ </span><br><span class="language-php"><span class="hljs-variable">$no_show_field</span>[<span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_NAME'</span>]] = <span class="hljs-keyword">array</span>();</span><br><span class="language-php">}</span><br><span class="language-php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_NAME'</span>],<span class="hljs-variable">$no_show_field</span>[<span class="hljs-variable">$v</span>[<span class="hljs-string">'TABLE_NAME'</span>]])){</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;tr&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c1"&gt;'</span> . <span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_NAME'</span>] . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c2"&gt;'</span> . <span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_TYPE'</span>] . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c3"&gt;'</span> . <span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_DEFAULT'</span>] . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c4"&gt;'</span> . <span class="hljs-variable">$f</span>[<span class="hljs-string">'IS_NULLABLE'</span>] . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c5"&gt;'</span> . (<span class="hljs-variable">$f</span>[<span class="hljs-string">'EXTRA'</span>]==<span class="hljs-string">'auto_increment'</span>?<span class="hljs-string">'是'</span>:<span class="hljs-string">'&amp;nbsp;'</span>) . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c6"&gt;'</span> . (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_NAME'</span>],<span class="hljs-variable">$v</span>[<span class="hljs-string">'PRIMARY_KEY'</span>])?<span class="hljs-string">'是'</span>:<span class="hljs-string">'&amp;nbsp;'</span>) . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;td class="c7"&gt;'</span> . <span class="hljs-variable">$f</span>[<span class="hljs-string">'COLUMN_COMMENT'</span>] . <span class="hljs-string">'&lt;/td&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;/tr&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php">}</span><br><span class="language-php">    }</span><br><span class="language-php">    <span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;/tbody&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php"><span class="hljs-variable">$html</span> .= <span class="hljs-string">'&lt;/table&gt;'</span>.<span class="hljs-string">"\n"</span>;</span><br><span class="language-php">}</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数据字典<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"generator"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ThinkDb V1.0"</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"author"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"Crazy_boy"</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"copyright"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"2014-208 zotuo.com"</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">body</span>, <span class="hljs-selector-tag">td</span>, <span class="hljs-selector-tag">th</span> { <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"微软雅黑"</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>; }</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.warp</span>{<span class="hljs-attribute">margin</span>:auto; <span class="hljs-attribute">width</span>:<span class="hljs-number">900px</span>;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.warp</span> <span class="hljs-selector-tag">h3</span>{<span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">0px</span>; <span class="hljs-attribute">line-height</span>:<span class="hljs-number">30px</span>; <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">10px</span>;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">table</span> { <span class="hljs-attribute">border-collapse</span>: collapse; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#CCC</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#efefef</span>; }</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">th</span> { <span class="hljs-attribute">text-align</span>: left; <span class="hljs-attribute">font-weight</span>: bold; <span class="hljs-attribute">height</span>: <span class="hljs-number">26px</span>; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">26px</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>; <span class="hljs-attribute">text-align</span>:center; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#CCC</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span> { <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#CCC</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c1</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>; }</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c2</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>; }</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c3</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>; }</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c4</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>; <span class="hljs-attribute">text-align</span>:center;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c5</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>; <span class="hljs-attribute">text-align</span>:center;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c6</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>; <span class="hljs-attribute">text-align</span>:center;}</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.c7</span> { <span class="hljs-attribute">width</span>: <span class="hljs-number">270px</span>; }</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"warp"</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align:center;"</span>&gt;</span>数据字典<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$html</span>; <span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></tbody></table></figure><p>其中$dbserver、$dbusername、$dbpassword、$database需配置为相应的数据库IP地址、用户名、密码、数据库名。<br>代码下载：<a href="/codes/dictionary.php">dictionary.php</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle笔记</title>
      <link href="/posts/oracle-note.html"/>
      <url>/posts/oracle-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-强制并行处理"><a href="#1-强制并行处理" class="headerlink" title="1. 强制并行处理"></a>1. 强制并行处理</h4><p><code>/*+ monitor parallel(8)*/</code></p><h3 id="2-plsql查看sql性能"><a href="#2-plsql查看sql性能" class="headerlink" title="2. plsql查看sql性能"></a>2. plsql查看sql性能</h3><p><code>F5</code></p><h3 id="3-在oracle中有时候需要进行MySQL中的find-in-set查询，故封装了如下函数："><a href="#3-在oracle中有时候需要进行MySQL中的find-in-set查询，故封装了如下函数：" class="headerlink" title="3. 在oracle中有时候需要进行MySQL中的find_in_set查询，故封装了如下函数："></a>3. 在oracle中有时候需要进行MySQL中的find_in_set查询，故封装了如下函数：</h3><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span> FIND_IN_SET(piv_str1 varchar2, piv_str2 varchar2, p_sep varchar2 := <span class="hljs-string">','</span>)<br><span class="hljs-keyword">RETURN</span> NUMBER <span class="hljs-keyword">IS</span><br>  l_idx    number:=<span class="hljs-number">0</span>; <span class="hljs-comment">-- 用于计算piv_str2中分隔符的位置</span><br>  str      varchar2(<span class="hljs-number">500</span>);  <span class="hljs-comment">-- 根据分隔符截取的子字符串</span><br>  piv_str  varchar2(<span class="hljs-number">500</span>) := piv_str2; <span class="hljs-comment">-- 将piv_str2赋值给piv_str</span><br>  res      number:=<span class="hljs-number">0</span>; <span class="hljs-comment">-- 返回结果</span><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-comment">-- 如果piv_str中没有分割符，直接判断piv_str1和piv_str是否相等，相等 res=1</span><br><span class="hljs-keyword">IF</span> instr(piv_str, p_sep, <span class="hljs-number">1</span>) = <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>   <span class="hljs-keyword">IF</span> piv_str = piv_str1 <span class="hljs-keyword">THEN</span><br>      res:= <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br><span class="hljs-keyword">ELSE</span><br><span class="hljs-comment">-- 循环按分隔符截取piv_str</span><br><span class="hljs-keyword">LOOP</span><br>    l_idx := instr(piv_str,p_sep);<br><span class="hljs-comment">-- 当piv_str中还有分隔符时</span><br>      <span class="hljs-keyword">IF</span> l_idx &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>   <span class="hljs-comment">-- 截取第一个分隔符前的字段str</span><br>         str:= substr(piv_str,<span class="hljs-number">1</span>,l_idx<span class="hljs-number">-1</span>);<br>   <span class="hljs-comment">-- 判断 str 和piv_str1 是否相等，相等 res=1 并结束循环判断</span><br>         <span class="hljs-keyword">IF</span> str = piv_str1 <span class="hljs-keyword">THEN</span><br>           res:= <span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">EXIT</span>;<br>         <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br>        piv_str := substr(piv_str,l_idx+length(p_sep));<br>      <span class="hljs-keyword">ELSE</span><br>   <span class="hljs-comment">-- 当截取后的piv_str 中不存在分割符时，判断piv_str和piv_str1是否相等，相等 res=1</span><br>        <span class="hljs-keyword">IF</span> piv_str = piv_str1 <span class="hljs-keyword">THEN</span><br>           res:= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br>        <span class="hljs-comment">-- 无论最后是否相等，都跳出循环</span><br>        <span class="hljs-keyword">EXIT</span>;<br>      <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span>;<br><span class="hljs-comment">-- 结束循环</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br><span class="hljs-comment">-- 返回res</span><br><span class="hljs-keyword">RETURN</span> res;<br><span class="hljs-keyword"><code class="language-hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">FUNCTION</span> FIND_IN_SET(piv_str1 varchar2, piv_str2 varchar2, p_sep varchar2 := <span class="hljs-string">','</span>)<br><span class="hljs-keyword">RETURN</span> NUMBER <span class="hljs-keyword">IS</span><br>  l_idx    number:=<span class="hljs-number">0</span>; <span class="hljs-comment">-- 用于计算piv_str2中分隔符的位置</span><br>  str      varchar2(<span class="hljs-number">500</span>);  <span class="hljs-comment">-- 根据分隔符截取的子字符串</span><br>  piv_str  varchar2(<span class="hljs-number">500</span>) := piv_str2; <span class="hljs-comment">-- 将piv_str2赋值给piv_str</span><br>  res      number:=<span class="hljs-number">0</span>; <span class="hljs-comment">-- 返回结果</span><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-comment">-- 如果piv_str中没有分割符，直接判断piv_str1和piv_str是否相等，相等 res=1</span><br><span class="hljs-keyword">IF</span> instr(piv_str, p_sep, <span class="hljs-number">1</span>) = <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>   <span class="hljs-keyword">IF</span> piv_str = piv_str1 <span class="hljs-keyword">THEN</span><br>      res:= <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br><span class="hljs-keyword">ELSE</span><br><span class="hljs-comment">-- 循环按分隔符截取piv_str</span><br><span class="hljs-keyword">LOOP</span><br>    l_idx := instr(piv_str,p_sep);<br><span class="hljs-comment">-- 当piv_str中还有分隔符时</span><br>      <span class="hljs-keyword">IF</span> l_idx &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>   <span class="hljs-comment">-- 截取第一个分隔符前的字段str</span><br>         str:= substr(piv_str,<span class="hljs-number">1</span>,l_idx<span class="hljs-number">-1</span>);<br>   <span class="hljs-comment">-- 判断 str 和piv_str1 是否相等，相等 res=1 并结束循环判断</span><br>         <span class="hljs-keyword">IF</span> str = piv_str1 <span class="hljs-keyword">THEN</span><br>           res:= <span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">EXIT</span>;<br>         <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br>        piv_str := substr(piv_str,l_idx+length(p_sep));<br>      <span class="hljs-keyword">ELSE</span><br>   <span class="hljs-comment">-- 当截取后的piv_str 中不存在分割符时，判断piv_str和piv_str1是否相等，相等 res=1</span><br>        <span class="hljs-keyword">IF</span> piv_str = piv_str1 <span class="hljs-keyword">THEN</span><br>           res:= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br>        <span class="hljs-comment">-- 无论最后是否相等，都跳出循环</span><br>        <span class="hljs-keyword">EXIT</span>;<br>      <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span>;<br><span class="hljs-comment">-- 结束循环</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br><span class="hljs-comment">-- 返回res</span><br><span class="hljs-keyword">RETURN</span> res;<br><span class="hljs-keyword">END</span> FIND_IN_SET;<br></code></pre></td></tr></tbody></table></figure><h3 id="4-日期转时间戳函数"><a href="#4-日期转时间戳函数" class="headerlink" title="4. 日期转时间戳函数"></a>4. 日期转时间戳函数</h3><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> oracle_to_unix(in_date <span class="hljs-keyword">IN</span> <span class="hljs-type">DATE</span>) <span class="hljs-keyword">return</span> number <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">begin</span> <br>        <span class="hljs-keyword">return</span>( (in_date -TO_DATE(<span class="hljs-string">'19700101'</span>,<span class="hljs-string">'yyyymmdd'</span>))*<span class="hljs-number">86400</span> - TO_NUMBER(SUBSTR(TZ_OFFSET(sessiontimezone),<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))*<span class="hljs-number">3600</span>);<br>    <span class="hljs-keyword"><code class="language-hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> oracle_to_unix(in_date <span class="hljs-keyword">IN</span> <span class="hljs-type">DATE</span>) <span class="hljs-keyword">return</span> number <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">begin</span> <br>        <span class="hljs-keyword">return</span>( (in_date -TO_DATE(<span class="hljs-string">'19700101'</span>,<span class="hljs-string">'yyyymmdd'</span>))*<span class="hljs-number">86400</span> - TO_NUMBER(SUBSTR(TZ_OFFSET(sessiontimezone),<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))*<span class="hljs-number">3600</span>);<br>    <span class="hljs-keyword">end</span> oracle_to_unix;<br></code></pre></td></tr></tbody></table></figure><h3 id="5-时间戳转日期函数"><a href="#5-时间戳转日期函数" class="headerlink" title="5. 时间戳转日期函数"></a>5. 时间戳转日期函数</h3><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> unix_to_oracle(in_number NUMBER) <span class="hljs-keyword">return</span> <span class="hljs-type">date</span> <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">return</span>(TO_DATE(<span class="hljs-string">'19700101'</span>,<span class="hljs-string">'yyyymmdd'</span>) + in_number/<span class="hljs-number">86400</span> +TO_NUMBER(SUBSTR(TZ_OFFSET(sessiontimezone),<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))/<span class="hljs-number">24</span>);<br>    <span class="hljs-keyword"><code class="language-hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> unix_to_oracle(in_number NUMBER) <span class="hljs-keyword">return</span> <span class="hljs-type">date</span> <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">return</span>(TO_DATE(<span class="hljs-string">'19700101'</span>,<span class="hljs-string">'yyyymmdd'</span>) + in_number/<span class="hljs-number">86400</span> +TO_NUMBER(SUBSTR(TZ_OFFSET(sessiontimezone),<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))/<span class="hljs-number">24</span>);<br>    <span class="hljs-keyword">end</span> unix_to_oracle;<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心跳包机制</title>
      <link href="/posts/a0da6bc4.html"/>
      <url>/posts/a0da6bc4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>心跳包机制：主要也就是用于长连接的保活和断线处理。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心跳包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript笔记</title>
      <link href="/posts/javascript-notes.html"/>
      <url>/posts/javascript-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="如果想获取ajax里的function返回值，可用同步ajax。"><a href="#如果想获取ajax里的function返回值，可用同步ajax。" class="headerlink" title="如果想获取ajax里的function返回值，可用同步ajax。"></a>如果想获取ajax里的function返回值，可用同步ajax。</h3><h3 id="JavaScript不定参数"><a href="#JavaScript不定参数" class="headerlink" title="JavaScript不定参数"></a>JavaScript不定参数</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript不定参数<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"> </span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>){</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++ ){</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[i]);</span><br><span class="language-javascript">    }</span><br><span class="language-javascript">}</span><br><span class="language-javascript"> </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">"test('one','two','three','four');"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript不定参数<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"> </span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>){</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++ ){</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[i]);</span><br><span class="language-javascript">    }</span><br><span class="language-javascript">}</span><br><span class="language-javascript"> </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">"test('one','two','three','four');"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel使用小技巧</title>
      <link href="/posts/excel-tips.html"/>
      <url>/posts/excel-tips.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>excel固定第一行：选择第二行，点击视图里的冻结窗口即可。</p></li><li><p>excel分列：<br> 如将某一列的数据由C4159D5953D8转为C4:15:9D:59:53:D8格式：<br> <code>公式为：=left(A1,2) &amp; ":" &amp; mid(A1,3,2) &amp; ":" &amp; mid(A1,5,2) &amp; ":" &amp; mid(A1,7,2) &amp; ":" &amp; mid(A1,9,2) &amp; ":" &amp; right(A1,2)</code></p></li><li><p>删除重复项：<br> 选中数据区域-&gt;数据-&gt;删除重复项-&gt;确定</p></li><li><p>VLOOKUP函数的使用</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言学习</title>
      <link href="/posts/r-notes.html"/>
      <url>/posts/r-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前断断续续看了一些R语言的视频，一直没什么效果，看来还得做笔记：</p><ol><li>&lt;- 是赋值的意思</li><li>向量是下标以1开始的</li><li>区分大小写</li><li>路径：<code>C://a.txt</code></li><li>round：四舍五入</li></ol>]]></content>
      
      
      <categories>
          
          <category> R语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEO——权重转移</title>
      <link href="/posts/seo-weight-transfer.html"/>
      <url>/posts/seo-weight-transfer.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong> 产品列表存在多页，或者文章内容过多存在多页时，为了SEO考虑，避免权重流失，内容重复，可以通过下面的方法优化：</strong><br></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"canonical"</span> <span class="hljs-attr">href</span>=<span class="hljs-string"><code class="language-hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"canonical"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"主页url"</span>/></span><br></code></pre></td></tr></tbody></table></figure><br>Google 等搜索引擎最终都会只收录 canonical 标签指定的这个网址，搜索引擎会将其它页面作为重复内容，这些重复的内容不再参与页面的权重分配(如 Google 的 PR 值)。<p></p><p>如：<br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=1">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=1</a><br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=2">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=2</a><br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=3">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=3</a><br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=4">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=4</a><br>……<br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=45">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=45</a></p><p>就可以在每个页面的head标签内添加代码：</p><link rel="canonical" href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html">]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言基础</title>
      <link href="/posts/go-note.html"/>
      <url>/posts/go-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自学Go语言的过程漫长而坎坷，先记录一些基础知识。</p><h3 id="执行go文件"><a href="#执行go文件" class="headerlink" title="执行go文件"></a>执行go文件</h3><p><code>E:\Go_WorkSpace&gt;go run test.go</code></p><h3 id="把go程序编译成exe文件"><a href="#把go程序编译成exe文件" class="headerlink" title="把go程序编译成exe文件"></a>把go程序编译成exe文件</h3><p><code>E:\Go_WorkSpace&gt;go build test.go</code></p><h3 id="打印内容"><a href="#打印内容" class="headerlink" title="打印内容"></a>打印内容</h3><p><code>fmt.Printf("Hello,World!")</code></p><h3 id="switch语句中，多个case共用一组执行语句"><a href="#switch语句中，多个case共用一组执行语句" class="headerlink" title="switch语句中，多个case共用一组执行语句"></a>switch语句中，多个case共用一组执行语句</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">switch A{<br>case a,b,c:<br>...<br>case d:<br>...<br>default :<br>...<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="GoLand使用"><a href="#GoLand使用" class="headerlink" title="GoLand使用"></a>GoLand使用</h3><p>新部署项目后，需通过<code>go mod download</code> 下载第三方依赖包，如果报错，需设置Go Modules中的Proxy为：<code>https://goproxy.cn</code></p><h3 id="GoLand使用下载第三方依赖包"><a href="#GoLand使用下载第三方依赖包" class="headerlink" title="GoLand使用下载第三方依赖包"></a>GoLand使用下载第三方依赖包</h3><p>1、 IDE-》setting-》Go-》Go Modules中，设置代理：<a href="https://goproxy.cn">https://goproxy.cn</a><br><img src="/images/goland_1.png" alt=""><br>2、项目中，创建go.mod文件，包含需要引入的依赖包，<br>如：导入 gin：require github.com/gin-gonic/gin latest<br>在Terminal上，运行go mod download即可，系统会自动将版本号回填到go.mod中<br><img src="/images/goland_2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitBook使用笔记</title>
      <link href="/posts/gitbook-note.html"/>
      <url>/posts/gitbook-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">使用GitBook来写书还是比较方便的，可以部署在github上的，总的来说，不太复杂。现记录一些常用的操作，方便大家参考。</div><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><ol><li>编译文件生成网页        <code>gitbook build</code></li><li>启动服务        <code>gitbook serve</code></li><li>安装可以参考这个网页 <a href="https://www.jianshu.com/p/421cc442f06c">gitbook安装</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用笔记</title>
      <link href="/posts/hexo-notes.html"/>
      <url>/posts/hexo-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：这个博客网站是使用hexo搭建，部署在github上的，总的来说，不太复杂。现记录一些常用的操作，方便大家参考。</div><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol><li>清除当前缓存        <code>$ hexo clean</code></li><li>重新生成并部署到github上        <code>$ hexo g -d</code></li><li>启动服务        <code>$ hexo s</code></li><li>新建页面        <code>$ hexo new page categories</code></li><li>快速构建        <code>$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code></li></ol><h3 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h3><h4 id="1-如何在首页设置「阅读全文」"><a href="#1-如何在首页设置「阅读全文」" class="headerlink" title="1. 如何在首页设置「阅读全文」?"></a>1. 如何在首页设置「阅读全文」?</h4><p>   在首页显示一篇文章的部分内容(或者摘要)，并提供一个链接(「阅读全文」)跳转到文章详情页。 NexT 提供以下三种方式：</p><ol><li>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式(<font color="#FF0000">推荐</font> )</li><li>在文章的 <a href="https://hexo.io/docs/front-matter.html">front-matter</a> 中添加 description，并提供文章摘录</li><li>自动形成摘要，在 主题配置文件_config.yml 中添加：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash">auto_excerpt:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal"><code class="language-hljs bash">auto_excerpt:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  length: 150<br></code></pre></td></tr></tbody></table></figure>默认截取的长度为 150 字符，可以根据需要自行设定。</li></ol><p>建议使用 <code>&lt;!-- more --&gt;</code>方式，既可以精确控制需要显示的摘录内容， 还可以让 Hexo 中的插件更好的识别。    </p><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><h4 id="1-文章生成永久短链接"><a href="#1-文章生成永久短链接" class="headerlink" title="1. 文章生成永久短链接"></a>1. 文章生成永久短链接</h4><p><code>npm install hexo-abbrlink --save</code><br>在站点配置项文件_config.yml下添加：<br></p><figure class="highlight oxygene"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class=" language-hljs oxygene">url: https:<span class="hljs-comment">//crazy-boy.com</span><br>root: /<br>permalink: archives/:abbrlink.html<br>abbrlink:<br>  alg: crc32  # 算法：crc16(<span class="hljs-keyword">default</span>) <span class="hljs-keyword">and</span> crc32<br>  rep: hex    # 进制：dec(<span class="hljs-keyword">default</span>) <span class="hljs-keyword">and</span> hex<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: <span class="hljs-keyword">true</span> # <span class="hljs-keyword">Set</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">false</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">remove</span> trailing <span class="hljs-string">'index.html'</span> <span class="hljs-keyword">from</span> permalinks<br>  trailing_html: <span class="hljs-keyword">true</span> # <span class="hljs-keyword">Set</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">false</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">remove</span> trailing <span class="hljs-string">'.html'</span> <span class="hljs-keyword"><code class="language-hljs oxygene">url: https:<span class="hljs-comment">//crazy-boy.com</span><br>root: /<br>permalink: archives/:abbrlink.html<br>abbrlink:<br>  alg: crc32  # 算法：crc16(<span class="hljs-keyword">default</span>) <span class="hljs-keyword">and</span> crc32<br>  rep: hex    # 进制：dec(<span class="hljs-keyword">default</span>) <span class="hljs-keyword">and</span> hex<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: <span class="hljs-keyword">true</span> # <span class="hljs-keyword">Set</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">false</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">remove</span> trailing <span class="hljs-string">'index.html'</span> <span class="hljs-keyword">from</span> permalinks<br>  trailing_html: <span class="hljs-keyword">true</span> # <span class="hljs-keyword">Set</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">false</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">remove</span> trailing <span class="hljs-string">'.html'</span> <span class="hljs-keyword">from</span> permalinks<br></code></pre></td></tr></tbody></table></figure><br>当然文章的短链部分可以在文章的首部进行设置，如：<code>abbrlink: 'hexo-notes'</code>，如果不设置就会自动生成随机短链。<p></p><h4 id="2-开启文章字数统计"><a href="#2-开启文章字数统计" class="headerlink" title="2. 开启文章字数统计"></a>2. 开启文章字数统计</h4><p><code>npm i --save hexo-wordcount</code></p><h4 id="3-文章设置密码"><a href="#3-文章设置密码" class="headerlink" title="3. 文章设置密码"></a>3. 文章设置密码</h4><p><code>npm install --save hexo-blog-encrypt</code><br>将”password”字段添加到文章的信息头：<code>password: abc123</code><br>文章可以按标签进行加密，优先级为：文章信息头&gt;按标签加密<br>文章信息头的设置示例<br><img src="/images/hexo_notes_2.png" alt=""></p><p>_config.yml示例<br></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre class=" language-hljs yaml"><span class="hljs-comment"># Security</span><br><span class="hljs-attr">encrypt:</span> <span class="hljs-comment"># hexo-blog-encrypt</span><br>  <span class="hljs-attr">abstract:</span> <span class="hljs-string">有东西被加密了,</span> <span class="hljs-string">请输入密码查看.</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">您好,</span> <span class="hljs-string">这里需要密码.</span><br>  <span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> {<span class="hljs-attr">name:</span> <span class="hljs-string">tagNameA</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">密码A</span>}<br>  <span class="hljs-bullet">-</span> {<span class="hljs-attr">name:</span> <span class="hljs-string">tagNameB</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">密码B</span>}<br>  <span class="hljs-attr">wrong_pass_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">密码不太对哟.</span><br>  <span class="hljs-attr">wrong_hash_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个文章不能被校验,</span> <span class="hljs-string"><code class="language-hljs yaml"><span class="hljs-comment"># Security</span><br><span class="hljs-attr">encrypt:</span> <span class="hljs-comment"># hexo-blog-encrypt</span><br>  <span class="hljs-attr">abstract:</span> <span class="hljs-string">有东西被加密了,</span> <span class="hljs-string">请输入密码查看.</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">您好,</span> <span class="hljs-string">这里需要密码.</span><br>  <span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> {<span class="hljs-attr">name:</span> <span class="hljs-string">tagNameA</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">密码A</span>}<br>  <span class="hljs-bullet">-</span> {<span class="hljs-attr">name:</span> <span class="hljs-string">tagNameB</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">密码B</span>}<br>  <span class="hljs-attr">wrong_pass_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">密码不太对哟.</span><br>  <span class="hljs-attr">wrong_hash_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个文章不能被校验,</span> <span class="hljs-string">不过您还是能看看解密后的内容.</span><br></code></pre></td></tr></tbody></table></figure><br>如果tagNameA中的某篇博文不想被加密，只需把博文头部的password设置为””即可。<p></p><h3 id="多台电脑同步更新hexo博客"><a href="#多台电脑同步更新hexo博客" class="headerlink" title="多台电脑同步更新hexo博客"></a>多台电脑同步更新hexo博客</h3><ul><li>在github上切个hexo分支，把源代码push上去。</li><li>在需要同步更新的电脑上进行如下操作：<br>  安装git<br>  下载安装nodejs<br>  node -v<br>  npm -v<br>  git clone xx.git<br>  删除主题下.git目录<br>  进入目录，执行下面命令：  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs sql">$ npm install<br>$ npm install hexo<span class="hljs-operator">-</span>generator<span class="hljs-operator">-</span><span class="hljs-keyword">search</span> <span class="hljs-comment">--save</span><br>$ npm i hexo<span class="hljs-operator">-</span>permalink<span class="hljs-operator">-</span>pinyin <span class="hljs-comment">--save</span><br>$ npm install hexo<span class="hljs-operator">-</span><span class="hljs-keyword">filter</span><span class="hljs-operator">-</span>github<span class="hljs-operator">-</span>emojis <span class="hljs-comment">--save</span><br>$ npm install hexo<span class="hljs-operator">-</span>generator<span class="hljs-operator">-</span>feed <span class="hljs-comment"><code class="language-hljs sql">$ npm install<br>$ npm install hexo<span class="hljs-operator">-</span>generator<span class="hljs-operator">-</span><span class="hljs-keyword">search</span> <span class="hljs-comment">--save</span><br>$ npm i hexo<span class="hljs-operator">-</span>permalink<span class="hljs-operator">-</span>pinyin <span class="hljs-comment">--save</span><br>$ npm install hexo<span class="hljs-operator">-</span><span class="hljs-keyword">filter</span><span class="hljs-operator">-</span>github<span class="hljs-operator">-</span>emojis <span class="hljs-comment">--save</span><br>$ npm install hexo<span class="hljs-operator">-</span>generator<span class="hljs-operator">-</span>feed <span class="hljs-comment">--save</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1-执行hexo命令，提示hexo-command-not-found"><a href="#1-执行hexo命令，提示hexo-command-not-found" class="headerlink" title="1. 执行hexo命令，提示hexo: command not found"></a>1. 执行hexo命令，提示<code>hexo: command not found</code></h4><ul><li>首先检查nodejs和npm是否正常，依次输入<code>node -v</code>和<code>npm -v</code>检查版本信息</li><li>将与_config.yml同级的node_modules下的.bin路径(F:\GitHub\crazy-boy.github.io\node_modules.bin)添加到系统环境变量的Path里</li><li>如果还不行，就重装hexo：<code>npm install hexo-cli -g</code></li></ul><h4 id="2-hexo-g-d报错fatal-in-unpopulated-submodule-‘-deploy-git’"><a href="#2-hexo-g-d报错fatal-in-unpopulated-submodule-‘-deploy-git’" class="headerlink" title="2. hexo g -d报错fatal: in unpopulated submodule ‘.deploy_git’"></a>2. hexo g -d报错fatal: in unpopulated submodule ‘.deploy_git’</h4><ul><li>删除.deploy_git文件夹</li><li>再执行<code>hexo g -d</code></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a><br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a><br><a href="https://blog.csdn.net/qq_30105599/article/details/118302086">https://blog.csdn.net/qq_30105599/article/details/118302086</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用</title>
      <link href="/posts/docker-notes.html"/>
      <url>/posts/docker-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>windows7 安装docker，需要利用 docker toolbox 来安装。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构学习</title>
      <link href="/posts/architecture-notes.html"/>
      <url>/posts/architecture-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>架构设计的主要目的是为了解决软件系统复杂度带来的问题。</li><li>架构的复杂度来源：高性能、高可用、可扩展性、其它(低成本、安全、规模等)。</li><li>架构设计的三原则：合适优于业界领先、简单优于复杂、演化优于一步到位。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高德地图API使用</title>
      <link href="/posts/amap-api.html"/>
      <url>/posts/amap-api.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>高德地图的覆盖物label默认是蓝框白底的，className为amap-marker-label，可以通过css来修改样式。如：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash"><style><br>    .amap-marker-label{<br>        height:40px;<br>        width:120px;<br>        background-color: red;<br>        border: solid 1px black;<br>    }<br></style><br></code></pre></td></tr></tbody></table></figure></li><li><p>高德地图，根据地址搜索经纬度，再次搜索时清除遮盖物：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">var markers = [];<br>map.remove(markers);<br>markers.push(marker);<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高德地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>富文本编辑器</title>
      <link href="/posts/rich-text-editor.html"/>
      <url>/posts/rich-text-editor.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>解决umeditor富文本内容居中可能失效的问题：更改umeditor.config.js的xss过滤为false    <pre><code> 即：`,xssFilterRules: false,inputXssFilter: false,outputXssFilter: false`</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 富文本编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记</title>
      <link href="/posts/mysql-notes.html"/>
      <url>/posts/mysql-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-mysql根据汉字首字母排序的方法"><a href="#1-mysql根据汉字首字母排序的方法" class="headerlink" title="1. mysql根据汉字首字母排序的方法"></a>1. mysql根据汉字首字母排序的方法</h3><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql"><span class="hljs-comment">-- utf8_general_ci编码</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tname <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> convert(<span class="hljs-type">name</span> <span class="hljs-keyword"><code class="language-hljs pgsql"><span class="hljs-comment">-- utf8_general_ci编码</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tname <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> convert(<span class="hljs-type">name</span> <span class="hljs-keyword">using</span> gbk);<br></code></pre></td></tr></tbody></table></figure><h3 id="2-删除表数据的时候，如果表使用了别名"><a href="#2-删除表数据的时候，如果表使用了别名" class="headerlink" title="2. 删除表数据的时候，如果表使用了别名"></a>2. 删除表数据的时候，如果表使用了别名</h3><p>应该这样写：<code>DELETE a FROM table a;</code></p><h3 id="3-不使用缓存执行某个查询sql"><a href="#3-不使用缓存执行某个查询sql" class="headerlink" title="3. 不使用缓存执行某个查询sql"></a>3. 不使用缓存执行某个查询sql</h3><p><code>SELECT SQL_NO_CACHE xx, xx from tb;</code></p><h3 id="4-MySql中Blob与Text的区别"><a href="#4-MySql中Blob与Text的区别" class="headerlink" title="4. MySql中Blob与Text的区别"></a>4. MySql中Blob与Text的区别</h3><p>BLOB列被视为二进制字符串，TEXT列被视为非二进制字符串。</p><h3 id="5-MyISAM和InnoDB的区别"><a href="#5-MyISAM和InnoDB的区别" class="headerlink" title="5. MyISAM和InnoDB的区别"></a>5. MyISAM和InnoDB的区别</h3><p>Innodb 支持事务处理与外键和行级锁；<br>MyISAM类型的表强调的是性能，其执行速度比InnoDB类型更快。</p><h3 id="6-数据库恢复"><a href="#6-数据库恢复" class="headerlink" title="6. 数据库恢复"></a>6. 数据库恢复</h3><p>是指通过技术手段将保存在数据库中丢失的电子数据进行抢救和恢复的技术。</p><h3 id="7-mysql删除自定义函数："><a href="#7-mysql删除自定义函数：" class="headerlink" title="7. mysql删除自定义函数："></a>7. mysql删除自定义函数：</h3><p><code>DROP FUNCTION IF EXISTS `函数名`;</code></p><h3 id="8-插入数据："><a href="#8-插入数据：" class="headerlink" title="8. 插入数据："></a>8. 插入数据：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb (field1,field2,field3……) <span class="hljs-keyword">value</span> (val1,val2,val3……);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb (field1,field2,field3……) <span class="hljs-keyword">values</span> (val1,val2,val3……);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb <span class="hljs-keyword">set</span> field1<span class="hljs-operator">=</span>val1,field2<span class="hljs-operator">=</span>val2,field3<span class="hljs-operator">=</span>val3;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb (field1,field2,field3……) <span class="hljs-keyword">values</span> (val11,val12,val13……),(val21,val22,val23……),(val31,val32,val33……);<br><span class="hljs-keyword">insert</span> ignore <span class="hljs-keyword">into</span> tb (field1,field2,field3……) <span class="hljs-keyword">values</span> (val1,val2,val3……);<span class="hljs-operator">/</span><span class="hljs-operator"><code class="language-hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb (field1,field2,field3……) <span class="hljs-keyword">value</span> (val1,val2,val3……);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb (field1,field2,field3……) <span class="hljs-keyword">values</span> (val1,val2,val3……);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb <span class="hljs-keyword">set</span> field1<span class="hljs-operator">=</span>val1,field2<span class="hljs-operator">=</span>val2,field3<span class="hljs-operator">=</span>val3;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb (field1,field2,field3……) <span class="hljs-keyword">values</span> (val11,val12,val13……),(val21,val22,val23……),(val31,val32,val33……);<br><span class="hljs-keyword">insert</span> ignore <span class="hljs-keyword">into</span> tb (field1,field2,field3……) <span class="hljs-keyword">values</span> (val1,val2,val3……);<span class="hljs-operator">/</span><span class="hljs-operator">/</span>使用ignore关键字忽略错误<br></code></pre></td></tr></tbody></table></figure><h3 id="9-查询数据库中每个表的记录数："><a href="#9-查询数据库中每个表的记录数：" class="headerlink" title="9. 查询数据库中每个表的记录数："></a>9. 查询数据库中每个表的记录数：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs sql">use information_schema;<br><span class="hljs-keyword">select</span> table_name,table_rows <span class="hljs-keyword">from</span> tables <span class="hljs-keyword">where</span> TABLE_SCHEMA <span class="hljs-operator">=</span> <span class="hljs-string">'dataBase'</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> table_rows <span class="hljs-keyword"><code class="language-hljs sql">use information_schema;<br><span class="hljs-keyword">select</span> table_name,table_rows <span class="hljs-keyword">from</span> tables <span class="hljs-keyword">where</span> TABLE_SCHEMA <span class="hljs-operator">=</span> <span class="hljs-string">'dataBase'</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> table_rows <span class="hljs-keyword">desc</span>;  <br></code></pre></td></tr></tbody></table></figure><h3 id="10-mysql查询主键字段名："><a href="#10-mysql查询主键字段名：" class="headerlink" title="10. mysql查询主键字段名："></a>10. mysql查询主键字段名：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.`KEY_COLUMN_USAGE` <span class="hljs-keyword">WHERE</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">'表名'</span> <span class="hljs-keyword">AND</span> constraint_name<span class="hljs-operator">=</span><span class="hljs-string"><code class="language-hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.`KEY_COLUMN_USAGE` <span class="hljs-keyword">WHERE</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">'表名'</span> <span class="hljs-keyword">AND</span> constraint_name<span class="hljs-operator">=</span><span class="hljs-string">'PRIMARY'</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="11-mysql查询所有字段名："><a href="#11-mysql查询所有字段名：" class="headerlink" title="11. mysql查询所有字段名："></a>11. mysql查询所有字段名：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">FROM</span> information_schema.columns <span class="hljs-keyword">WHERE</span> table_name<span class="hljs-operator">=</span><span class="hljs-string"><code class="language-hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">FROM</span> information_schema.columns <span class="hljs-keyword">WHERE</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">'表名'</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="12、null的问题："><a href="#12、null的问题：" class="headerlink" title="12、null的问题："></a>12、null的问题：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">update</span> t_classroom <span class="hljs-keyword">set</span> building_name<span class="hljs-operator">=</span><span class="hljs-keyword">null</span> <span class="hljs-keyword">where</span> build_id <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword"><code class="language-hljs sql"><span class="hljs-keyword">update</span> t_classroom <span class="hljs-keyword">set</span> building_name<span class="hljs-operator">=</span><span class="hljs-keyword">null</span> <span class="hljs-keyword">where</span> build_id <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="13、获取指定字段的默认值："><a href="#13、获取指定字段的默认值：" class="headerlink" title="13、获取指定字段的默认值："></a>13、获取指定字段的默认值：</h3><p>DEFAULT(col_name)<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">DEFAULT</span>(sort) <span class="hljs-keyword">from</span> t_node_school limit <span class="hljs-number"><code class="language-hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">DEFAULT</span>(sort) <span class="hljs-keyword">from</span> t_node_school limit <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="14、mysql重命名表名："><a href="#14、mysql重命名表名：" class="headerlink" title="14、mysql重命名表名："></a>14、mysql重命名表名：</h3><p><code>alter table tb1 rename to tb2;</code><br>或者<br><code>rename tb1 to tb2;</code></p><h3 id="15、null字段排序问题："><a href="#15、null字段排序问题：" class="headerlink" title="15、null字段排序问题："></a>15、null字段排序问题：</h3><p>设排序字段为sort，使用order by sort desc实现降序时，sort为null的数据会排在最后面；<br>但是使用order by sort升序时，sort为null的数据会排在最前面，如果想将sort为null的数据排在后面，就需要加is null。<br>如：<code>select * from t_grade order by sort is null, sort, create_time desc;</code></p><h3 id="16、主键设置规则"><a href="#16、主键设置规则" class="headerlink" title="16、主键设置规则"></a>16、主键设置规则</h3><p> 主键的值不可更新，未来可能会变更的字段不能设置为主键；<br> 主键的值不可为空，且不能重复；</p><h3 id="17、查看某个表的所有列："><a href="#17、查看某个表的所有列：" class="headerlink" title="17、查看某个表的所有列："></a>17、查看某个表的所有列：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">show</span> columns <span class="hljs-keyword">from</span> tableName;  或者  <span class="hljs-keyword">describe</span> tableName; <span class="hljs-operator">/</span><span class="hljs-operator"><code class="language-hljs sql"><span class="hljs-keyword">show</span> columns <span class="hljs-keyword">from</span> tableName;  或者  <span class="hljs-keyword">describe</span> tableName; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>可以用来生成数据字典<br></code></pre></td></tr></tbody></table></figure><h3 id="18、下划线”-”通配符-匹配一个字符"><a href="#18、下划线”-”通配符-匹配一个字符" class="headerlink" title="18、下划线”_”通配符 匹配一个字符"></a>18、下划线”_”通配符 匹配一个字符</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">select</span> field1,field2 <span class="hljs-keyword">from</span> tableName <span class="hljs-keyword">where</span> field3 <span class="hljs-keyword"><code class="language-hljs sql"><span class="hljs-keyword">select</span> field1,field2 <span class="hljs-keyword">from</span> tableName <span class="hljs-keyword">where</span> field3 <span class="hljs-keyword">like</span> "_xx";<br></code></pre></td></tr></tbody></table></figure><h3 id="19、日期转星期"><a href="#19、日期转星期" class="headerlink" title="19、日期转星期"></a>19、日期转星期</h3> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-keyword">select</span> weekday("2021-11-10")<span class="hljs-operator">+</span><span class="hljs-number">1</span> week;      <br><span class="hljs-comment"><code class="language-hljs sql"><span class="hljs-keyword">select</span> weekday("2021-11-10")<span class="hljs-operator">+</span><span class="hljs-number">1</span> week;      <br><span class="hljs-comment">-- 2021年11月10日是星期三</span><br></code></pre></td></tr></tbody></table></figure><h3 id="20、单条SQL语句完成多种数据统计"><a href="#20、单条SQL语句完成多种数据统计" class="headerlink" title="20、单条SQL语句完成多种数据统计"></a>20、单条SQL语句完成多种数据统计</h3> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs sql"><span class="hljs-comment">-- 现需分别统计wl_student_score_logs表中exam_id为5的change_score增加量和减少量</span><br><span class="hljs-keyword">select</span><br><span class="hljs-built_in">sum</span>( if( change_score <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>, change_score, <span class="hljs-number">0</span>)) <span class="hljs-keyword">as</span> increase_score,<br><span class="hljs-built_in">sum</span>( if( change_score  <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span>, change_score, <span class="hljs-number">0</span>)) <span class="hljs-keyword">as</span> reduce_score<br><span class="hljs-keyword">from</span> wl_student_score_logs <span class="hljs-keyword">where</span> exam_id<span class="hljs-operator">=</span><span class="hljs-number"><code class="language-hljs sql"><span class="hljs-comment">-- 现需分别统计wl_student_score_logs表中exam_id为5的change_score增加量和减少量</span><br><span class="hljs-keyword">select</span><br><span class="hljs-built_in">sum</span>( if( change_score <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>, change_score, <span class="hljs-number">0</span>)) <span class="hljs-keyword">as</span> increase_score,<br><span class="hljs-built_in">sum</span>( if( change_score  <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span>, change_score, <span class="hljs-number">0</span>)) <span class="hljs-keyword">as</span> reduce_score<br><span class="hljs-keyword">from</span> wl_student_score_logs <span class="hljs-keyword">where</span> exam_id<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br></code></pre></td></tr></tbody></table></figure><h3 id="21、truncate、drop-和-delete-的区别"><a href="#21、truncate、drop-和-delete-的区别" class="headerlink" title="21、truncate、drop 和 delete 的区别"></a>21、truncate、drop 和 delete 的区别</h3><pre><code>1. 执行速度：drop &gt; truncate &gt; detele；2. delete 和 truncate 只删除表数据，而 drop 会删除表数据和表结构以及表的索引、约束和触发器；3. delete 可以加 where 条件实现部分数据删除，而 truncate 和 drop 不能加 where 条件是整体删除；4. truncate 和 drop 是立即执行，且不能恢复；而 delete 会走事务，可以撤回和恢复；5. truncate 会重置自增列为 1，而 delete 不会重置自增列；6. truncate 和 drop 是 DDL 语句，而 delete 是 DML 语句。</code></pre><h3 id="22、修改自增列的值"><a href="#22、修改自增列的值" class="headerlink" title="22、修改自增列的值"></a>22、修改自增列的值</h3><pre><code>`alter table tname auto_increment=n;`一个表中只能有一个自增列,如果设置多个自增列，那么 SQL 执行就会报错。除此之外还要注意自增列应该为整数类型，且 auto_increment 需要配合 key 一起使用，这个 key 可以是 primary key 或 foreign key。</code></pre><h3 id="23、生成批量清空指定数据库的语句"><a href="#23、生成批量清空指定数据库的语句" class="headerlink" title="23、生成批量清空指定数据库的语句"></a>23、生成批量清空指定数据库的语句</h3><pre><code>`select CONCAT('TRUNCATE TABLE ',table_schema,'.',TABLE_NAME, ';') 清空语句 from INFORMATION_SCHEMA.TABLES where table_schema ='库名';`    </code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记</title>
      <link href="/posts/1822a0ce.html"/>
      <url>/posts/1822a0ce.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>如果希望css样式不被覆盖，可以在后面加上!important，如：<code>.cntck{ margin-right: 5px!important;}</code></p></li><li><p>如果css希望两个标签对齐，可以用position来处理，如：<code>.cntck{position: relative; bottom: -2px;}</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery笔记</title>
      <link href="/posts/jquery-note.html"/>
      <url>/posts/jquery-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="jquery获取json的长度"><a href="#jquery获取json的长度" class="headerlink" title="jquery获取json的长度"></a>jquery获取json的长度</h3><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs arcade"><span class="hljs-comment">//一维：</span><br><span class="hljs-keyword">var</span> JsonTemp = {<span class="hljs-string">'id'</span>:<span class="hljs-number">5</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'lilei'</span>};  <br><span class="hljs-built_in">length</span> = JsonTemp.<span class="hljs-built_in">length</span>;<br><br><span class="hljs-comment">//二维：</span><br><span class="hljs-keyword">var</span> JsonTemp = [{<span class="hljs-string">"name"</span>:<span class="hljs-string">"张三"</span>,<span class="hljs-string">"age"</span>:<span class="hljs-number">18</span>},{<span class="hljs-string">"name"</span>:<span class="hljs-string">"李四"</span>,<span class="hljs-string">"age"</span>:<span class="hljs-number">19</span>}];  <br><span class="hljs-built_in">length</span> = Object.keys(JsonTemp).<span class="hljs-built_in"><code class="language-hljs arcade"><span class="hljs-comment">//一维：</span><br><span class="hljs-keyword">var</span> JsonTemp = {<span class="hljs-string">'id'</span>:<span class="hljs-number">5</span>,<span class="hljs-string">'name'</span>:<span class="hljs-string">'lilei'</span>};  <br><span class="hljs-built_in">length</span> = JsonTemp.<span class="hljs-built_in">length</span>;<br><br><span class="hljs-comment">//二维：</span><br><span class="hljs-keyword">var</span> JsonTemp = [{<span class="hljs-string">"name"</span>:<span class="hljs-string">"张三"</span>,<span class="hljs-string">"age"</span>:<span class="hljs-number">18</span>},{<span class="hljs-string">"name"</span>:<span class="hljs-string">"李四"</span>,<span class="hljs-string">"age"</span>:<span class="hljs-number">19</span>}];  <br><span class="hljs-built_in">length</span> = Object.keys(JsonTemp).<span class="hljs-built_in">length</span>;<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/posts/linux-common-commands.html"/>
      <url>/posts/linux-common-commands.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本人编程多年，一直对Linux操作不熟练，主要原因是命令不熟悉，为方便记忆，现罗列一些常用的命令：</p><h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><ul><li>创建文件夹：<code>mkdir dir</code></li><li>删除文件夹：<code>rm -rf dir</code>   -r向下递归，-f强制删除</li><li>创建文件：<code>touch a.txt</code></li><li>删除文件：<code>rm -f /var/log/a.txt</code></li><li>追加内容到文件：<code>echo sssss &gt;&gt; a.txt</code></li><li>插入内容：<code>vi text.txt =》按i =》插入内容 =》按Esc =》:wq</code></li><li>查看文件的行数：<code>wc -l xx.txt</code></li><li>查看文件里有多少个word：<code>wc -l xx.txt</code></li><li>顺序查看指定文件的内容：<code>cat xx.php</code></li><li>倒序查看指定文件的内容：<code>tac xx.log</code></li></ul><h3 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h3><ul><li><p>修改密码</p><ol><li>选择要修改密码的用户名，以root用户为例<br><code>passwd root</code></li><li>输入2次一样的新密码，当提示更新成功即可。<br><img src="/images/linux_command_1.png" alt=""></li></ol></li><li><p>查看系统环境</p> <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs shell"><code class="language-hljs shell">[root@VM_0_7_centos ~]# cat /etc/redhat-release <br>CentOS Linux release 7.6.1810 (Core) <br>[root@VM_0_7_centos ~]# uname -a<br>Linux VM_0_7_centos 3.10.0-957.27.2.el7.x86_64 #1 SMP Mon Jul 29 17:46:05 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux<br></code></pre></td></tr></tbody></table></figure><p> 从上述结果可以看出：系统为CentOS 7.6 内核为3.10.0-957.27.2.el7.x86_64</p></li></ul><h3 id="日志操作"><a href="#日志操作" class="headerlink" title="日志操作"></a>日志操作</h3><ul><li>实时查看日志：<code>tail -f xx.log</code></li><li>实时查看日志最后100行的内容： <code>tail -f -n 100 xx.log</code></li><li>查询最后100行的内容：<code>tail -n 100 xx.log</code></li><li>查询100行之后的所有内容：<code>tail -n +100 xx.log</code></li><li>查询头10行的内容：<code>head -n 10 xx.log</code></li><li>查询除最后100行外的内容：<code>head -n -100 xx.log</code></li><li>根据关键字查询日志：<code>cat -n xx.log |grep "charge"</code>   可以得到关键字日志的行号和内容</li><li>根据关键字查询日志并获取最后5行：<code>grep 'charge' xx.log |tail -n 5</code></li><li>根据关键字查询日志内容：<code>grep 'charge' xx.log</code>   不返回行号，如果为空，则说明日志中无此关键字<ul><li>如果日志太多，可分页查看：<code>cat -n xx.log |grep 'charge' | more</code>  按空格键进行翻页</li><li>如果日志太大，也可以只把关键字部分保存到文件中，提取下来，命令如下：<br>  <code>cat -n xx.log |grep 'charge' &gt; aa.txt</code><br>  然后下载下来：<code>sz aa.txt</code><br>  最后删除文件：<code>rm -f aa.txt</code></li></ul></li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li>清空当前界面信息：<code>clear</code> 或者 Ctrl+L</li><li>显示当前时间：<code>date</code></li><li>显示当前路径：<code>pwd</code></li><li>查看历史命令：<code>history</code></li><li>Tab键：自动补齐，按两下是查询相同前缀的目录或文件</li><li>more的辅助操作：按空格键进行翻页</li><li>less的辅助操作：按空格键进行翻页   [up]向上滚动一行   [down]或者回车先后滚动一行   Q：退出</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书单心愿墙</title>
      <link href="/posts/wished-book-list.html"/>
      <url>/posts/wished-book-list.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="罗列一些自己后续要读的书籍或者文章："><a href="#罗列一些自己后续要读的书籍或者文章：" class="headerlink" title="罗列一些自己后续要读的书籍或者文章："></a>罗列一些自己后续要读的书籍或者文章：</h3><ul><li>《黑客与画家》</li><li>《UNIX编程艺术》</li><li>《异类》</li><li>《羊皮卷》——《选择的力量》</li><li>《优秀到不能被忽视》</li><li>《无言的宇宙》</li><li>《数学女孩》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用笔记</title>
      <link href="/posts/git-notes.html"/>
      <url>/posts/git-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs mipsasm">git pull                <span class="hljs-comment">#拉取代码到本地</span><br>git <span class="hljs-keyword">add </span>.               <span class="hljs-comment">#将文件添加到暂存区</span><br>git commit -m <span class="hljs-string">"xx"</span>      <span class="hljs-comment">#提交代码，并填写描述</span><br>git push                <span class="hljs-comment">#推送代码到远端</span><br>git status              <span class="hljs-comment">#显示所有需提交的文件</span><br>git <span class="hljs-keyword">branch </span>             <span class="hljs-comment">#显示当前代码库中所有的本地分支</span><br>git <span class="hljs-keyword">branch </span>xx           <span class="hljs-comment">#创建一个新分支xx</span><br>git <span class="hljs-keyword">branch </span>-d xx        <span class="hljs-comment">#删除指定分支xx</span><br>git checkout xx         <span class="hljs-comment">#切换到分支xx</span><br>git checkout -<span class="hljs-keyword">b </span>xx      <span class="hljs-comment">#创建一个分支xx，并切换到新分支</span><br>git merge xx            <span class="hljs-comment">#将指定分支xx的历史记录合并到当前分支</span><br>git stash save          <span class="hljs-comment">#临时保存所有修改的文件</span><br>git stash pop           <span class="hljs-comment"><code class="language-hljs mipsasm">git pull                <span class="hljs-comment">#拉取代码到本地</span><br>git <span class="hljs-keyword">add </span>.               <span class="hljs-comment">#将文件添加到暂存区</span><br>git commit -m <span class="hljs-string">"xx"</span>      <span class="hljs-comment">#提交代码，并填写描述</span><br>git push                <span class="hljs-comment">#推送代码到远端</span><br>git status              <span class="hljs-comment">#显示所有需提交的文件</span><br>git <span class="hljs-keyword">branch </span>             <span class="hljs-comment">#显示当前代码库中所有的本地分支</span><br>git <span class="hljs-keyword">branch </span>xx           <span class="hljs-comment">#创建一个新分支xx</span><br>git <span class="hljs-keyword">branch </span>-d xx        <span class="hljs-comment">#删除指定分支xx</span><br>git checkout xx         <span class="hljs-comment">#切换到分支xx</span><br>git checkout -<span class="hljs-keyword">b </span>xx      <span class="hljs-comment">#创建一个分支xx，并切换到新分支</span><br>git merge xx            <span class="hljs-comment">#将指定分支xx的历史记录合并到当前分支</span><br>git stash save          <span class="hljs-comment">#临时保存所有修改的文件</span><br>git stash pop           <span class="hljs-comment">#恢复最近一次存储的文件</span><br></code></pre></td></tr></tbody></table></figure><h3 id="文件忽略"><a href="#文件忽略" class="headerlink" title="文件忽略"></a>文件忽略</h3><p>软件项目使用git提交远程仓库时，如果需要忽略某些文件(如缓存文件、框架核心文件)的变更，可以在项目的根目录下创建.gitignore文件，并罗列需忽略的文件或者文件夹。</p><p>如下为PHP Yii2下的.gitignore文件内容：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">.idea/<br>.project<br>.settings<br>/vendor<br>assets/<br>/runtime<br>/Runtime<br>/upload<br></code></pre></td></tr></tbody></table></figure><br>但有时候忽略文件不起作用，其原因是：git设置本地忽略时，必须保证远程仓库分支上没有这个要忽略的文件；否则本地的ignore将不起作用。<br>解决方式：删除要忽略的文件并提交远程仓库，ignore该文件。<p></p><h3 id="git设置"><a href="#git设置" class="headerlink" title="git设置"></a>git设置</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><span class="hljs-built_in"><code class="language-hljs bash"><span class="hljs-built_in">cat</span> .git/config<br>git remote set-url origin ssh地址<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP实现AES加解密</title>
      <link href="/posts/php-aes-encrypt.html"/>
      <url>/posts/php-aes-encrypt.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">系统中的账号信息在进行存储的时候，需要做相应的加密处理；比如用户密码一般是以密文形式存储，而且是不可逆的，常用的就是md5加密；而对于某些账户信息(如：手机号码、银行卡号等)就需要进行可逆加密(如：AES)保存，这样既可以保证数据的安全性，又不影响正常的业务处理。</div><p>下面介绍一下以PHP实现AES加密解密：</p><h3 id="1-AES加密解密类"><a href="#1-AES加密解密类" class="headerlink" title="1. AES加密解密类"></a>1. AES加密解密类</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">libs</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 利用mcrypt做AES加密解密</span><br><span class="hljs-comment">* 支持密钥：64bit（字节长度8）</span><br><span class="hljs-comment">* 支持算法：DES</span><br><span class="hljs-comment">* 支持模式：ECB</span><br><span class="hljs-comment">* 填充方式：PKCS5</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Aes</span></span>{<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CIPHER</span> = MCRYPT_DES;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MODE</span> = MCRYPT_MODE_ECB;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $str需加密的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $key密钥(8位)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string   密文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>,<span class="hljs-variable">$key</span></span>)</span>{<br>        <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">mcrypt_get_block_size</span> ( MCRYPT_DES, <span class="hljs-string">'ecb'</span> );<br>        <span class="hljs-variable">$str</span> = <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">pkcs5_pad</span>(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$size</span>);<br>        <span class="hljs-variable">$iv</span> = <span class="hljs-title function_ invoke__">mcrypt_create_iv</span>(<span class="hljs-title function_ invoke__">mcrypt_get_iv_size</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">CIPHER</span>,<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">MODE</span>),MCRYPT_RAND);<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mcrypt_encrypt</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">CIPHER</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$str</span>, <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">MODE</span>, <span class="hljs-variable">$iv</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$result</span>);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $str   密文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $key   密钥(8位)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string   明文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>,<span class="hljs-variable">$key</span></span>)</span>{<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$str</span>);<br>        <span class="hljs-variable">$iv</span> = <span class="hljs-title function_ invoke__">mcrypt_create_iv</span>(<span class="hljs-title function_ invoke__">mcrypt_get_iv_size</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">CIPHER</span>,<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">MODE</span>),MCRYPT_RAND);<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">mcrypt_decrypt</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">CIPHER</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$str</span>, <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">MODE</span>, <span class="hljs-variable">$iv</span>));<br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">pkcs5_unpad</span>(<span class="hljs-variable">$str</span>);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * PKCS5填充</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $text</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $blocksize</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pkcs5_pad</span>(<span class="hljs-params"><span class="hljs-variable">$text</span>, <span class="hljs-variable">$blocksize</span></span>) </span>{<br>        <span class="hljs-variable">$pad</span> = <span class="hljs-variable">$blocksize</span> - (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>) % <span class="hljs-variable">$blocksize</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span> . <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$pad</span>), <span class="hljs-variable">$pad</span>);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $text</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool|string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pkcs5_unpad</span>(<span class="hljs-params"><span class="hljs-variable">$text</span></span>) </span>{<br>        <span class="hljs-variable">$pad</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$text</span>{<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>) - <span class="hljs-number">1</span>});<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pad</span> &gt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>)) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strspn</span>(<span class="hljs-variable">$text</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$pad</span>), <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>)-<span class="hljs-variable">$pad</span>) != <span class="hljs-variable">$pad</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$text</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span> * <span class="hljs-variable"><code class="language-hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">libs</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 利用mcrypt做AES加密解密</span><br><span class="hljs-comment">* 支持密钥：64bit（字节长度8）</span><br><span class="hljs-comment">* 支持算法：DES</span><br><span class="hljs-comment">* 支持模式：ECB</span><br><span class="hljs-comment">* 填充方式：PKCS5</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Aes</span></span>{<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CIPHER</span> = MCRYPT_DES;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MODE</span> = MCRYPT_MODE_ECB;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $str需加密的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $key密钥(8位)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string   密文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>,<span class="hljs-variable">$key</span></span>)</span>{<br>        <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">mcrypt_get_block_size</span> ( MCRYPT_DES, <span class="hljs-string">'ecb'</span> );<br>        <span class="hljs-variable">$str</span> = <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">pkcs5_pad</span>(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$size</span>);<br>        <span class="hljs-variable">$iv</span> = <span class="hljs-title function_ invoke__">mcrypt_create_iv</span>(<span class="hljs-title function_ invoke__">mcrypt_get_iv_size</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">CIPHER</span>,<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">MODE</span>),MCRYPT_RAND);<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mcrypt_encrypt</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">CIPHER</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$str</span>, <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">MODE</span>, <span class="hljs-variable">$iv</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$result</span>);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $str   密文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $key   密钥(8位)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string   明文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>,<span class="hljs-variable">$key</span></span>)</span>{<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$str</span>);<br>        <span class="hljs-variable">$iv</span> = <span class="hljs-title function_ invoke__">mcrypt_create_iv</span>(<span class="hljs-title function_ invoke__">mcrypt_get_iv_size</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">CIPHER</span>,<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">MODE</span>),MCRYPT_RAND);<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">mcrypt_decrypt</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">CIPHER</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$str</span>, <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">MODE</span>, <span class="hljs-variable">$iv</span>));<br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">pkcs5_unpad</span>(<span class="hljs-variable">$str</span>);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * PKCS5填充</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $text</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $blocksize</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pkcs5_pad</span>(<span class="hljs-params"><span class="hljs-variable">$text</span>, <span class="hljs-variable">$blocksize</span></span>) </span>{<br>        <span class="hljs-variable">$pad</span> = <span class="hljs-variable">$blocksize</span> - (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>) % <span class="hljs-variable">$blocksize</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span> . <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$pad</span>), <span class="hljs-variable">$pad</span>);<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $text</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool|string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pkcs5_unpad</span>(<span class="hljs-params"><span class="hljs-variable">$text</span></span>) </span>{<br>        <span class="hljs-variable">$pad</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$text</span>{<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>) - <span class="hljs-number">1</span>});<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pad</span> &gt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>)) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strspn</span>(<span class="hljs-variable">$text</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$pad</span>), <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$text</span>)-<span class="hljs-variable">$pad</span>) != <span class="hljs-variable">$pad</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$text</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span> * <span class="hljs-variable">$pad</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-调用"><a href="#2-调用" class="headerlink" title="2. 调用"></a>2. 调用</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">modules</span>\<span class="hljs-title class_">demo</span>\<span class="hljs-title class_">controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">app</span>\<span class="hljs-title">common</span>\<span class="hljs-title">components</span>\<span class="hljs-title">Controller</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">libs</span>\<span class="hljs-title">Aes</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span>{<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionTest</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable">$key</span> = <span class="hljs-string">'WGiSP3UQ'</span>;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-string">'18958019299'</span>;<br>        <span class="hljs-variable">$enStr</span> = <span class="hljs-title class_">Aes</span>::<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$key</span>);<br>        <span class="hljs-variable">$deStr</span> = <span class="hljs-title class_">Aes</span>::<span class="hljs-title function_ invoke__">decode</span>(<span class="hljs-variable">$enStr</span>,<span class="hljs-variable">$key</span>);<br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$enStr</span>,<span class="hljs-variable"><code class="language-hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">modules</span>\<span class="hljs-title class_">demo</span>\<span class="hljs-title class_">controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">app</span>\<span class="hljs-title">common</span>\<span class="hljs-title">components</span>\<span class="hljs-title">Controller</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">libs</span>\<span class="hljs-title">Aes</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span>{<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionTest</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-variable">$key</span> = <span class="hljs-string">'WGiSP3UQ'</span>;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-string">'18958019299'</span>;<br>        <span class="hljs-variable">$enStr</span> = <span class="hljs-title class_">Aes</span>::<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$key</span>);<br>        <span class="hljs-variable">$deStr</span> = <span class="hljs-title class_">Aes</span>::<span class="hljs-title function_ invoke__">decode</span>(<span class="hljs-variable">$enStr</span>,<span class="hljs-variable">$key</span>);<br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$enStr</span>,<span class="hljs-variable">$deStr</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="3-访问http-127-0-0-1-web-demo-test-test-，运行结果如下："><a href="#3-访问http-127-0-0-1-web-demo-test-test-，运行结果如下：" class="headerlink" title="3. 访问http://127.0.0.1/web/demo/test/test ，运行结果如下："></a>3. 访问<a href="http://127.0.0.1/web/demo/test/test">http://127.0.0.1/web/demo/test/test</a> ，运行结果如下：</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs php"><span class="hljs-keyword">string</span>(<span class="hljs-number">11</span>) <span class="hljs-string">"18958019299"</span> <br><span class="hljs-keyword">string</span>(<span class="hljs-number">24</span>) <span class="hljs-string">"WiBZggO/DRaczJ3wSirvEw=="</span> <br><span class="hljs-keyword">string</span>(<span class="hljs-number">11</span>) <span class="hljs-string"><code class="language-hljs php"><span class="hljs-keyword">string</span>(<span class="hljs-number">11</span>) <span class="hljs-string">"18958019299"</span> <br><span class="hljs-keyword">string</span>(<span class="hljs-number">24</span>) <span class="hljs-string">"WiBZggO/DRaczJ3wSirvEw=="</span> <br><span class="hljs-keyword">string</span>(<span class="hljs-number">11</span>) <span class="hljs-string">"18958019299"</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery面向对象写法</title>
      <link href="/posts/jquery-obj.html"/>
      <url>/posts/jquery-obj.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>书写Jquery代码时，普通的面向过程的写法可以实现功能，但不利于后期维护。现介绍面向对象的写法。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-event</span>=<span class="hljs-string">"list"</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-event</span>=<span class="hljs-string">"search"</span> <span class="hljs-attr">data-name</span>=<span class="hljs-string">"大班"</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-event</span>=<span class="hljs-string">"add"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-event</span>=<span class="hljs-string">"update"</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-event</span>=<span class="hljs-string">"del"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-event</span>=<span class="hljs-string">"list"</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-event</span>=<span class="hljs-string">"search"</span> <span class="hljs-attr">data-name</span>=<span class="hljs-string">"大班"</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-event</span>=<span class="hljs-string">"add"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-event</span>=<span class="hljs-string">"update"</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">data-event</span>=<span class="hljs-string">"del"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>></span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> clickAct = {</span><br><span class="language-javascript"><span class="hljs-attr">btn</span>: $(<span class="hljs-string">'button'</span>),</span><br><span class="language-javascript"><span class="hljs-attr">init</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">btn</span>.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> func = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">'data-event'</span>);</span><br><span class="language-javascript">that[func]($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">'data-name'</span>));</span><br><span class="language-javascript">})</span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">list</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>){</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'1'</span>);</span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">search</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>){</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(param);</span><br><span class="language-javascript"></span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>){</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'3'</span>);</span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">update</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>){</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'4'</span>);</span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">del</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>){</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'5'</span>);</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><br><span class="language-javascript">clickAct.<span class="hljs-title function_">init</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> clickAct = {</span><br><span class="language-javascript"><span class="hljs-attr">btn</span>: $(<span class="hljs-string">'button'</span>),</span><br><span class="language-javascript"><span class="hljs-attr">init</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">btn</span>.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> func = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">'data-event'</span>);</span><br><span class="language-javascript">that[func]($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">'data-name'</span>));</span><br><span class="language-javascript">})</span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">list</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>){</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'1'</span>);</span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">search</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>){</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(param);</span><br><span class="language-javascript"></span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>){</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'3'</span>);</span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">update</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>){</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'4'</span>);</span><br><span class="language-javascript">},</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">del</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>){</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'5'</span>);</span><br><span class="language-javascript">}</span><br><span class="language-javascript">}</span><br><span class="language-javascript"></span><br><span class="language-javascript">clickAct.<span class="hljs-title function_">init</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>></span><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL函数</title>
      <link href="/posts/mysql-functions.html"/>
      <url>/posts/mysql-functions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录几个常用的MySQL函数：</p><h4 id="LAST-INSERT-ID-expr"><a href="#LAST-INSERT-ID-expr" class="headerlink" title="LAST_INSERT_ID([expr])"></a>LAST_INSERT_ID([expr])</h4><p>自动返回最后一个INSERT或 UPDATE 问询为 AUTO_INCREMENT列设置的第一个发生的值。<br>如果一次性insert多条数据，只返回第一个数据的主键。<br></p><figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs gherkin">mysql&gt; SELECT <span class="hljs-symbol">*</span> FROM t;<br>+----+------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name </span>|<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> Bob  </span>|<br>+----+------+<br><br>mysql&gt; INSERT INTO t VALUES  (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');<br>mysql&gt; SELECT <span class="hljs-symbol">*</span> FROM t;<br>+----+------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name </span>|<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> Bob  </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> Mary </span>|<br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> Jane </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"><code class="language-hljs gherkin">mysql&gt; SELECT <span class="hljs-symbol">*</span> FROM t;<br>+----+------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name </span>|<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> Bob  </span>|<br>+----+------+<br><br>mysql&gt; INSERT INTO t VALUES  (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');<br>mysql&gt; SELECT <span class="hljs-symbol">*</span> FROM t;<br>+----+------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name </span>|<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> Bob  </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> Mary </span>|<br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> Jane </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> Lisa </span>|<br>+----+------+<br>mysql> SELECT LAST_INSERT_ID();<br>->2;<br></code></pre></td></tr></tbody></table></figure><br>注：假如你使用 INSERT IGNORE而记录被忽略，则AUTO_INCREMENT 计数器不会增量，而 LAST_INSERT_ID() 返回0,这反映出没有插入任何记录。<p></p><p>若给出作为到LAST_INSERT_ID()的参数expr ，则参数的值被函数返回，并作为被LAST_INSERT_ID()返回的下一个值而被记忆。这可用于模拟序列：</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs pgsql">mysql&gt; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">sequence</span> (id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>);<br>mysql&gt; <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">sequence</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">0</span>);<br>mysql&gt; <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">sequence</span> <span class="hljs-keyword">SET</span> id=LAST_INSERT_ID(id+<span class="hljs-number">1</span>);<br>mysql&gt; <span class="hljs-keyword">SELECT</span> LAST_INSERT_ID();<br>     -&gt;<span class="hljs-number"><code class="language-hljs pgsql">mysql&gt; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">sequence</span> (id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>);<br>mysql&gt; <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">sequence</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">0</span>);<br>mysql&gt; <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">sequence</span> <span class="hljs-keyword">SET</span> id=LAST_INSERT_ID(id+<span class="hljs-number">1</span>);<br>mysql&gt; <span class="hljs-keyword">SELECT</span> LAST_INSERT_ID();<br>     -&gt;<span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-03-29杂谈</title>
      <link href="/posts/971629fc.html"/>
      <url>/posts/971629fc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈哈，科目一96！</p><p><img src="/images/happy.jpg" alt="I'm very happy."></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具推荐</title>
      <link href="/posts/normal-tools.html"/>
      <url>/posts/normal-tools.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、windows文件搜索工具"><a href="#1、windows文件搜索工具" class="headerlink" title="1、windows文件搜索工具"></a>1、windows文件搜索工具</h3><p>给大家推荐一款windows下的文件搜索工具——Everything，下载地址：<a href="http://www.voidtools.com/">http://www.voidtools.com/</a></p><h3 id="2、文档搜索工具"><a href="#2、文档搜索工具" class="headerlink" title="2、文档搜索工具"></a>2、文档搜索工具</h3><p>安利一个文档搜索工具——鸠摩搜索，各种格式的电子书、文档都可以下载，比如PDF、TXT、MOBI、DOC等，地址：<a href="https://www.jiumodiary.com/">鸠摩搜索</a></p><h3 id="3、API接口文档管理工具——小幺鸡"><a href="#3、API接口文档管理工具——小幺鸡" class="headerlink" title="3、API接口文档管理工具——小幺鸡"></a>3、API接口文档管理工具——<a href="http://www.xiaoyaoji.cn">小幺鸡</a></h3><h3 id="4、Git项目搜索工具——BitHubLab"><a href="#4、Git项目搜索工具——BitHubLab" class="headerlink" title="4、Git项目搜索工具——BitHubLab"></a>4、Git项目搜索工具——BitHubLab</h3><p><a href="https://bithublab.org/">BitHubLab</a>，可以搜索所有Git平台上的公开项目，包括GitHub、GitLab和BitBucket等的项目。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用JQuery进行md5加密</title>
      <link href="/posts/jquery-md5.html"/>
      <url>/posts/jquery-md5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在开发中，有时候需要前端将数据加密后传给后端，下面介绍下jquery md5加密：</p><p>先引入<a href="/codes/md5.min.js">md5.min.js</a>，再调用，代码如下：<br></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"md5.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'input'</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">md5</span>(str));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"md5.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'input'</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">md5</span>(str));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>></span><br></code></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
