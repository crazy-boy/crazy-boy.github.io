<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git Commit Message 的最佳实践</title>
      <link href="/posts/git-commit-message-best-practices.html"/>
      <url>/posts/git-commit-message-best-practices.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 Git 中，一个好的 commit message 应该清晰、简洁，并能准确描述本次提交的内容。良好的 commit 规范有助于团队协作、代码审查（Code Review）以及后续的版本维护。以下是 Git Commit Message 的最佳实践：</p><hr><p><strong>1. Commit Message 结构</strong><br>推荐采用 Conventional Commits 规范，格式如下：<br></p><figure class="highlight fortran"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">type</span>&gt;[<span class="keyword">optional</span> scope]: &lt;description&gt;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">optional</span> body]</span><br><span class="line"></span><br><span class="line">[<span class="keyword">optional</span> footer(s)]</span><br></pre></td></tr></tbody></table></figure><br><strong>示例</strong><br><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">feat(auth): <span class="keyword">add</span> <span class="keyword">user</span> <span class="keyword">login</span> API</span><br><span class="line"></span><br><span class="line">- Implement JWT-based authentication</span><br><span class="line">- <span class="keyword">Add</span> <span class="keyword">login</span> endpoint `/api/auth/<span class="keyword">login</span>`</span><br><span class="line">- <span class="keyword">Update</span> README <span class="keyword">with</span> API docs</span><br><span class="line"></span><br><span class="line">fix: resolve memory leak <span class="keyword">in</span> image processing</span><br><span class="line"></span><br><span class="line">The previous implementation caused OOM errors <span class="keyword">when</span> processing <span class="keyword">large</span> images.</span><br><span class="line">This fix uses a streaming approach <span class="keyword">to</span> reduce memory <span class="keyword">usage</span>.</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: The `processImage` <span class="keyword">function</span> now requires a callback.</span><br></pre></td></tr></tbody></table></figure><p></p><hr><p><strong>2. Commit Message 各部分说明</strong><br>| 部分 | 说明 | 示例 |<br>|———|———|———|<br>| type | 提交的类型，通常使用以下几种：<br> - <code>feat</code> (新功能)<br> - <code>fix</code> (Bug 修复)<br> - <code>docs</code> (文档更新)<br> - <code>style</code> (代码格式化，不影响逻辑)<br> - <code>refactor</code> (代码重构，既不是新功能也不是 Bug 修复)<br> - <code>test</code> (测试相关)<br> - <code>chore</code> (构建过程或辅助工具的变动)<br> - <code>perf</code> (性能优化)<br> - <code>revert</code> (回滚之前的提交) | <code>feat: add user login</code> |<br>| scope <em>(可选)</em> | 影响的范围（可选），如模块名、文件名等 | <code>(auth)</code> <code>(api)</code> |<br>| description | 简短描述本次提交的内容（现在时态，首字母小写） | <code>add user login API</code> |<br>| body <em>(可选)</em> | 详细说明变更内容（可多行） | <code>- 改进点1&lt;br&gt;- 改进点2</code> |<br>| footer <em>(可选)</em> | 重大变更、Breaking Changes 或关联的 Issue | <code>BREAKING CHANGE: ...</code> 或 <code>Closes #123</code> |</p><hr><p><strong>3. 常见 Commit Type 示例</strong><br>| Type | 说明 | 示例 |<br>|———|———|———|<br>| <code>feat</code> | 新增功能 | <code>feat: add dark mode</code> |<br>| <code>fix</code> | Bug 修复 | <code>fix: correct login validation</code> |<br>| <code>docs</code> | 文档更新 | <code>docs: update README.md</code> |<br>| <code>style</code> | 代码格式化（不影响逻辑） | <code>style: format code with Prettier</code> |<br>| <code>refactor</code> | 代码重构（非新功能/非 Bug 修复） | <code>refactor: optimize database queries</code> |<br>| <code>test</code> | 测试相关 | <code>test: add unit tests for utils</code> |<br>| <code>chore</code> | 构建/工具变更 | <code>chore: update dependencies</code> |<br>| <code>perf</code> | 性能优化 | <code>perf: improve rendering speed</code> |<br>| <code>revert</code> | 回滚提交 | <code>revert: revert "feat: add user login"</code> |</p><hr><p><strong>4. 不好的 Commit Message 示例</strong><br>❌ 模糊不清<br></p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> code</span><br><span class="line"><span class="keyword">fix</span> bug</span><br></pre></td></tr></tbody></table></figure><br>✅ 改进后<br><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fix</span><span class="params">(auth)</span></span>: correct login validation error</span><br><span class="line"><span class="function"><span class="title">feat</span><span class="params">(api)</span></span>: add user registration endpoint</span><br></pre></td></tr></tbody></table></figure><p></p><p>❌ 缺少类型<br></p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add <span class="keyword">new</span> <span class="built_in">feature</span></span><br></pre></td></tr></tbody></table></figure><br>✅ 改进后<br><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feat: implement <span class="keyword">user</span> <span class="title">profile</span> page</span><br></pre></td></tr></tbody></table></figure><p></p><p>❌ 过于冗长<br></p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this commit adds <span class="keyword">a</span> <span class="built_in">new</span> feature that allows users <span class="built_in">to</span> <span class="built_in">log</span> <span class="keyword">in</span> <span class="keyword">and</span> also fixes some minor bugs <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">process</span></span><br></pre></td></tr></tbody></table></figure><br>✅ 改进后<br><figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">feat:</span> <span class="keyword">add</span> user login API  </span><br><span class="line"><span class="symbol">fix:</span> resolve minor UI alignment issues</span><br></pre></td></tr></tbody></table></figure><p></p><hr><p><strong>5. 如何规范 Commit Message？</strong><br><strong>(1) 使用 Git Hooks（推荐）</strong><br>• Husky + commitlint（强制检查 Commit 格式）</p>  <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install husky --save-dev</span><br><span class="line">npx husky-init &amp;&amp; npm install</span><br><span class="line">npm install @commitlint/{config-conventional,cli} --save-dev</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"module.exports = {extends: ['@commitlint/config-conventional']}"</span> &gt; commitlint.config.js</span><br><span class="line">npx husky add .husky/commit-msg <span class="string">"npx --no-install commitlint --edit <span class="variable">$1</span>"</span></span><br></pre></td></tr></tbody></table></figure><p>这样提交时如果不符合规范会被阻止。</p><p><strong>(2) 使用 Commitizen（交互式提交）</strong><br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'{ "path": "cz-conventional-changelog" }'</span> &gt; ~/.czrc</span><br></pre></td></tr></tbody></table></figure><br>然后使用 <code>git cz</code> 代替 <code>git commit</code>，它会引导你填写规范的 Commit Message。<p></p><hr><p><strong>6. 总结</strong><br>✅ 好的 Commit Message 应该：<br>• 简洁明了，准确描述变更内容</p><p>• 遵循 <code>&lt;type&gt;: &lt;description&gt;</code> 格式</p><p>• 关键变更可加 <code>BREAKING CHANGE</code> 或关联 Issue</p><p>• 使用工具（Husky + commitlint）强制规范</p><p>这样可以让团队协作更高效，代码历史更清晰！ 🚀</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Commit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git解决本地未跟踪文件的问题</title>
      <link href="/posts/git-pull-untracked-files.html"/>
      <url>/posts/git-pull-untracked-files.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>git pull origin xx</code> 提示有 <code>untracked files</code>，报错如同所示<br>   <img src="/images/git-faq-1.jpg" alt=""></p><p>这个错误的意思是：Git 发现你的工作目录中有一个未跟踪（untracked）的文件 <code>app/xx.php</code>，而远程 <code>develop</code> 分支上也有这个文件。Git 不允许直接覆盖它，所以合并失败了。</p><hr><p><strong>解决方法</strong><br>你有几种选择，取决于这个文件的来源和你的需求：</p><hr><p><strong>方法 1：删除本地未跟踪文件（推荐）</strong><br>如果这个文件是你不需要的，或者你可以从远程重新获取它，可以删除本地文件后重试：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> app/xx.php  <span class="comment"># 删除本地文件</span></span><br><span class="line">git pull origin develop  <span class="comment"># 再次尝试拉取</span></span><br></pre></td></tr></tbody></table></figure><br>或者更安全的方式（避免误删）：<br><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clean -n  <span class="comment"># 查看哪些文件会被删除（模拟运行）</span></span><br><span class="line">git clean -f  <span class="comment"># 强制删除未跟踪的文件（谨慎使用！）</span></span><br><span class="line">git pull origin develop</span><br></pre></td></tr></tbody></table></figure><p></p><hr><p><strong>方法 2：备份并提交本地文件（如果需要保留）</strong><br>如果这个文件是你本地新增的，并且你希望保留它，可以：</p><ol><li>提交到你的分支（如果你正在自己的分支上开发）：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add app/xx.php</span><br><span class="line">git commit -m <span class="string">"保存本地新增的 xx.php"</span></span><br><span class="line">git pull origin develop</span><br></pre></td></tr></tbody></table></figure>• 如果仍然冲突，Git 会提示你合并冲突，你需要手动解决。</li></ol><ol><li>或者暂存（stash）你的修改（如果你不想立即提交）：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash -u  <span class="comment"># -u 表示包括未跟踪的文件</span></span><br><span class="line">git pull origin develop</span><br><span class="line">git stash pop  <span class="comment"># 恢复暂存的修改（可能会冲突）</span></span><br></pre></td></tr></tbody></table></figure>• 如果 <code>git stash pop</code> 后有冲突，需要手动解决。</li></ol><hr><p><strong>方法 3：重命名本地文件（避免覆盖）</strong><br>如果你希望保留本地文件，但不想提交它，可以重命名它：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> app/xx.php app/xx.local.php</span><br><span class="line">git pull origin develop</span><br></pre></td></tr></tbody></table></figure><br>然后你可以手动比较两个文件，决定如何合并。<p></p><hr><p><strong>方法 4：强制覆盖本地文件（不推荐）</strong><br>如果你确定远程的 <code>xx.php</code> 是正确的，并且你不需要本地的修改，可以：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin  <span class="comment"># 先获取远程最新代码</span></span><br><span class="line">git reset --hard origin/develop  <span class="comment"># 强制重置到远程分支（会丢失所有未提交的修改！）</span></span><br></pre></td></tr></tbody></table></figure><br>⚠️ 注意：这个操作会丢弃所有未提交的更改，慎用！<p></p><hr><p><strong>总结</strong><br>| 情况 | 解决方案 |<br>|———|————-|<br>| 本地文件不需要 | <code>rm 文件</code> 或 <code>git clean -f</code> 后 <code>git pull</code> |<br>| 本地文件需要保留并提交 | <code>git add</code> + <code>git commit</code> 后 <code>git pull</code> |<br>| 本地文件需要保留但不提交 | <code>git stash -u</code> + <code>git pull</code> + <code>git stash pop</code> |<br>| 重命名本地文件避免冲突 | <code>mv 文件 文件.local</code> 后 <code>git pull</code> |<br>| 强制覆盖本地文件（危险！） | <code>git reset --hard origin/develop</code> |</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实时定位追踪系统（RTLS）详解</title>
      <link href="/posts/rtls-detailed-analysis.html"/>
      <url>/posts/rtls-detailed-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>一、RTLS 定义与核心功能</strong></p><p>实时定位追踪系统（Real-Time Location System, RTLS） 是一种通过无线通信技术实时获取物体或人员位置信息的系统，广泛应用于工业、医疗、物流、安防等领域。</p><p><strong>核心功能</strong></p><ol><li>实时性：毫秒级延迟的位置更新（如 UWB 可达 10cm 精度，延迟 &lt;100ms）。</li><li>高精度：支持厘米级（UWB）、分米级（Wi-Fi/蓝牙）或米级（RFID）定位。</li><li>多目标追踪：同时跟踪数十至数百个标签（Tag）。</li><li>环境适应性：支持室内/室外、遮挡环境下的定位。</li></ol><hr><p><strong>二、RTLS 的关键技术</strong><br><strong>1. 定位技术分类</strong><br>| 技术类型       | 代表协议      | 工作频段       | 典型精度 | 适用场景               |<br>|————————|———————-|————————|—————|————————————|<br>| UWB（超宽带） | IEEE 802.15.4z | 3.1~10.6 GHz   | ±10cm    | 工业AGV、医疗设备定位  |<br>| 蓝牙AOA/AOD | Bluetooth 5.1 | 2.4 GHz        | ±1m（AOA）| 智能楼宇、仓储         |<br>| Wi-Fi RTT   | IEEE 802.11mc | 2.4/5 GHz      | ±1~3m    | 商场、办公室           |<br>| RFID        | ISO 15693     | 125kHz/13.56MHz| ±1~5m    | 物流资产追踪           |<br>| Zigbee/LoRa | IEEE 802.15.4 | 2.4GHz/868MHz  | ±5~10m   | 低功耗远距离场景       |</p><p><strong>主流技术对比</strong><br>• UWB：抗干扰强、功耗低，但需专用硬件（如Decawave DW1000）。</p><p>• 蓝牙AOA：利用天线阵列测向，精度优于传统RSSI，但依赖基站部署。</p><p>• Wi-Fi RTT：无需额外硬件，但受多径效应影响较大。</p><hr><p><strong>2. 定位算法</strong><br><strong>（1）基于测距的算法</strong><br>• TOA（Time of Arrival）：测量信号到达时间，需严格时钟同步（如UWB）。</p><p>• TDOA（Time Difference of Arrival）：计算信号到达不同基站的时间差，消除时钟误差。</p><p>• RSSI（Received Signal Strength Indication）：根据信号强度衰减估算距离（精度低，易受干扰）。</p><p><strong>（2）基于角度的算法</strong><br>• AOA（Angle of Arrival）：通过天线阵列测量信号入射角度（如蓝牙5.1）。</p><p>• AOA + TDOA融合：提升复杂环境下的定位鲁棒性。</p><p><strong>（3）指纹识别（Fingerprinting）</strong><br>• 预先采集参考点（RP）的信号特征（如Wi-Fi RSSI），通过匹配实时数据定位。</p><p>• 优点：适应环境变化；缺点：需离线训练，计算复杂度高。</p><hr><p><strong>三、RTLS 系统架构</strong><br>典型RTLS由以下组件构成：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[标签/设备]</span> → <span class="selector-attr">[无线接入点/AP]</span> → <span class="selector-attr">[定位引擎]</span> → <span class="selector-attr">[应用层]</span></span><br></pre></td></tr></tbody></table></figure><ol><li><p>标签（Tag）<br>• 被定位目标携带的设备（如手环、工牌、资产标签）。</p><p>• 支持UWB/蓝牙/Wi-Fi等协议，主动或被动发送信号。</p></li></ol><ol><li><p>锚点/基站（Anchor/Base Station）<br>• 固定部署的接收设备，用于接收标签信号并上传至定位引擎。</p><p>• UWB基站通常呈三角形或六边形布局以提高精度。</p></li></ol><ol><li><p>定位引擎（Server）<br>• 运行定位算法（如卡尔曼滤波、粒子滤波），计算标签坐标。</p><p>• 支持边缘计算（本地处理）或云端部署。</p></li></ol><ol><li>应用层<br>• 可视化界面（Web/移动端）、告警系统（越界报警）、数据分析（轨迹回放）。</li></ol><hr><p><strong>四、RTLS 典型应用场景</strong><br><strong>1. 工业物联网（IIoT）</strong><br>• AGV/叉车定位：UWB实现厘米级导航，避免碰撞。</p><p>• 人员安全管理：电子围栏告警，危险区域自动锁止。</p><p><strong>2. 医疗与养老</strong><br>• 婴儿防盗：RFID标签绑定婴儿手环，出口监测报警。</p><p>• 医护人员追踪：实时掌握位置，优化调度响应速度。</p><p><strong>3. 智能仓储</strong><br>• 资产定位：蓝牙AOA定位货架/工具，提升拣货效率。</p><p>• 库存管理：RFID批量读取货物信息，减少人工盘点时间。</p><p><strong>4. 智慧城市</strong><br>• 共享单车管理：LoRa+GPS定位车辆分布，动态调运。</p><p>• 应急搜救：UWB穿透障碍物，定位受困人员。</p><hr><p><strong>五、RTLS 部署挑战与解决方案</strong><br>| 挑战                | 解决方案                          |<br>|——————————-|—————————————————|<br>| 多径效应干扰    | 使用UWB+天线阵列，或融合多种技术（如UWB+蓝牙） |<br>| 信号遮挡问题    | 增加锚点密度，或采用惯性导航（IMU）辅助 |<br>| 功耗限制        | 低功耗协议（如BLE 5.0），或太阳能供电标签 |<br>| 成本控制        | 根据场景选择技术（如仓库用蓝牙，工业用UWB） |</p><hr><p><strong>六、未来趋势</strong></p><ol><li>5G+RTLS融合：利用5G基站的定位能力（3GPP R16标准支持厘米级定位）。</li><li>AI优化算法：深度学习提升复杂环境下的定位鲁棒性。</li><li>无源标签普及：基于反向散射通信的超低功耗标签（如LoRa Backscatter）。</li></ol><hr><p><strong>总结</strong><br>RTLS的核心在于精准定位和实时性，选择技术时需权衡精度、成本和部署难度。随着物联网发展，RTLS将在更多领域释放潜力！</p>]]></content>
      
      
      <categories>
          
          <category> 实时定位 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实时定位 </tag>
            
            <tag> 追踪系统 </tag>
            
            <tag> RTLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导航系统如何感知红绿灯变化？技术解析</title>
      <link href="/posts/navigation-system-traffic-light-sensing.html"/>
      <url>/posts/navigation-system-traffic-light-sensing.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>近年来，部分高精度导航（如百度地图、高德地图、特斯拉导航等）开始支持红绿灯倒计时功能，即导航能实时显示前方路口红绿灯的状态及剩余时间。这一功能的实现依赖于车路协同（V2X）、AI视觉识别、高精地图、云计算等多种技术。以下是详细分析：</p><hr><p><strong>1. 红绿灯感知的主要技术手段</strong></p><p><strong>1.1 车路协同（V2X）——最精准的方式</strong><br>车路协同（Vehicle-to-Everything, V2X） 是目前最可靠的红绿灯感知方式，车辆与交通基础设施（如红绿灯控制器）直接通信，获取实时信号灯状态。</p><p><strong>技术实现方式</strong><br>• V2I（Vehicle-to-Infrastructure）通信：</p><p>• 车辆通过DSRC（专用短程通信）或C-V2X（蜂窝车联网）与路侧单元（RSU, Road Side Unit）通信。</p><p>• RSU 直接连接交通信号灯控制系统，获取红绿灯的实时状态（红灯/绿灯/黄灯剩余时间）。</p><p>• 典型应用：</p><p>• 特斯拉FSD Beta（部分版本支持V2X）。</p><p>• 华为智能汽车解决方案（MDC平台+V2X）。</p><p>• 国内部分智能网联示范区（如无锡、长沙）。</p><p><strong>优势</strong><br>✅ 高精度：直接获取信号灯状态，误差极小。<br>✅ 实时性强：不受天气、光照影响。</p><p><strong>挑战</strong><br>❌ 基础设施依赖：需大规模部署RSU，目前仅部分城市试点。<br>❌ 成本较高：路侧设备建设和维护成本较高。</p><hr><p><strong>1.2 AI视觉识别——基于摄像头+AI算法</strong><br>部分导航系统（如百度地图、高德地图）通过AI视觉识别技术，从车载摄像头或手机摄像头获取红绿灯状态。</p><p><strong>技术实现方式</strong></p><ol><li><p>图像采集：<br>• 车载摄像头（如特斯拉Autopilot）或手机摄像头（如百度地图）拍摄路口画面。</p></li><li><p>目标检测：<br>• 使用YOLO、Faster R-CNN等深度学习模型识别红绿灯位置。</p></li><li><p>颜色识别：<br>• 通过HSV色彩空间分析或深度学习分类判断红绿灯颜色。</p></li><li><p>时间估算（可选）：<br>• 结合交通流预测模型或历史数据估算剩余时间（精度较低）。</p></li></ol><p><strong>优势</strong><br>✅ 无需额外基础设施，适用于普通车辆。<br>✅ 可扩展性强，适用于多种车型。</p><p><strong>挑战</strong><br>❌ 受天气/光照影响（雨雪、强光可能导致误判）。<br>❌ 识别精度有限（部分路口红绿灯设计复杂，如箭头灯、倒计时数字不清晰）。<br>❌ 无法获取精确倒计时（仅能判断颜色变化）。</p><hr><p><strong>1.3 高精地图+云端计算——间接预测红绿灯状态</strong><br>部分导航系统（如百度地图）结合高精地图和云端数据，通过交通流量预测和信号灯配时规则间接推算红绿灯状态。</p><p><strong>技术实现方式</strong></p><ol><li><p>高精地图存储信号灯位置：<br>• 高精地图标注红绿灯坐标、类型（普通灯/箭头灯）。</p></li><li><p>云端交通数据融合：<br>• 结合车联网数据（如附近车辆的速度、位置）和交通管理系统数据，预测红绿灯变化。</p></li><li><p>动态调整：<br>• 根据实时交通流量优化信号灯配时（如绿波带优化）。</p></li></ol><p><strong>优势</strong><br>✅ 适用于无V2X的区域，依赖已有交通数据。<br>✅ 可优化交通流（如绿波带导航）。</p><p><strong>挑战</strong><br>❌ 依赖数据质量，需大量历史数据和实时交通信息。<br>❌ 无法100%准确，仅能概率性预测。</p><hr><p><strong>2. 红绿灯倒计时的实现方式</strong></p><p><strong>2.1 V2X直连（最精准）</strong><br>• 原理：车辆直接接收RSU发送的信号灯倒计时数据。</p><p>• 精度：±1秒（取决于通信延迟）。</p><p><strong>2.2 AI视觉+算法估算（较粗略）</strong><br>• 原理：通过摄像头识别红绿灯变化，并结合历史数据估算剩余时间。</p><p>• 精度：±3~5秒（受天气、光照影响较大）。</p><p><strong>2.3 高精地图+云端预测（间接推算）</strong><br>• 原理：结合交通流量和信号灯配时规则推算剩余时间。</p><p>• 精度：±5~10秒（依赖数据质量和算法优化）。</p><hr><p><strong>3. 当前主流导航的红绿灯功能对比</strong></p><div class="table-container"><table><thead><tr><th>导航APP</th><th>技术实现</th><th>精度</th><th>适用场景</th></tr></thead><tbody><tr><td>特斯拉导航</td><td>V2X（部分版本）+ 视觉识别</td><td>±1~3秒</td><td>支持V2X的区域</td></tr><tr><td>百度地图</td><td>V2X（试点）+ AI视觉+高精地图</td><td>±3~10秒</td><td>部分城市（如北京、上海）</td></tr><tr><td>高德地图</td><td>AI视觉+高精地图</td><td>±5~10秒</td><td>部分城市（如广州、深圳）</td></tr><tr><td>华为地图</td><td>V2X（车联网支持）</td><td>±1~5秒</td><td>华为智能汽车生态</td></tr></tbody></table></div><hr><p><strong>4. 技术挑战与未来趋势</strong></p><p><strong>4.1 当前技术挑战</strong></p><ol><li>V2X覆盖不足：仅部分城市试点，尚未普及。</li><li>视觉识别受环境干扰：雨雪、强光影响识别精度。</li><li>数据融合难度大：不同来源的数据（V2X、视觉、地图）需精准对齐。</li></ol><p><strong>4.2 未来发展趋势</strong></p><ol><li>V2X大规模部署（智能交通基础设施升级）。</li><li>AI视觉优化（更鲁棒的识别算法，适应复杂场景）。</li><li>车路云一体化（V2X+高精地图+云端协同）。</li><li>AI大模型赋能（如Transformer提升感知能力）。</li></ol><hr><p><strong>5. 总结</strong><br>导航系统感知红绿灯变化的技术手段主要包括：</p><ol><li>V2X（最精准）：依赖车路协同，直接获取信号灯状态。</li><li>AI视觉识别（较灵活）：通过摄像头+AI算法识别红绿灯。</li><li>高精地图+云端计算（间接预测）：结合交通数据推算信号灯状态。</li></ol><p>目前，V2X是未来主流方向，但受限于基础设施覆盖；AI视觉+高精地图是目前较可行的方案，精度逐步提升。随着智能交通的发展，红绿灯倒计时功能将更加精准和普及！ 🚦🚗  </p>]]></content>
      
      
      <categories>
          
          <category> 导航系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 导航系统 </tag>
            
            <tag> 红绿灯感知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下棋机器人技术解析</title>
      <link href="/posts/chess-robot-technology-analysis.html"/>
      <url>/posts/chess-robot-technology-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>下棋机器人（如AlphaGo、AlphaZero等）是人工智能在博弈领域的重要突破，其核心技术结合了深度学习、强化学习、蒙特卡洛树搜索（MCTS）等，能够在围棋、国际象棋、中国象棋等复杂策略游戏中击败人类顶尖选手。以下是详细分析：</p><hr><p><strong>1. 下棋机器人的核心工作原理</strong></p><p><strong>1.1 深度神经网络（DNN）——评估棋局</strong><br>下棋机器人通常采用深度神经网络（Deep Neural Network, DNN）来评估棋盘状态，预测最佳落子位置。</p><p><strong>关键组件</strong></p><ol><li><p>策略网络（Policy Network）<br>• 输入：当前棋盘状态（棋子位置）。</p><p>• 输出：每个可能落子位置的概率分布（即AI认为哪些位置更优）。</p><p>• 作用：快速筛选出较优的落子候选，减少搜索空间。</p></li></ol><ol><li><p>价值网络（Value Network）<br>• 输入：当前棋盘状态。</p><p>• 输出：当前局面的胜率评估（AI认为己方赢的概率）。</p><p>• 作用：评估当前局面优劣，避免盲目搜索。</p></li></ol><p><strong>训练方式</strong><br>• 监督学习（SL）：使用人类高手对局数据（如KGS围棋数据库）预训练策略网络。</p><p>• 强化学习（RL）：让AI自我对弈，不断优化策略网络和价值网络。</p><hr><p><strong>1.2 蒙特卡洛树搜索（MCTS）——全局搜索优化</strong><br>MCTS 是一种概率性搜索算法，用于在巨大搜索空间中寻找最优解，适用于围棋等复杂博弈。</p><p><strong>MCTS 四大步骤</strong></p><ol><li>选择（Selection）：从根节点（当前棋盘）开始，根据UCT（Upper Confidence Bound for Trees）公式选择最优子节点（平衡探索与利用）。</li><li>扩展（Expansion）：若当前节点未结束，生成新的子节点（模拟下一步落子）。</li><li>模拟（Simulation）：随机模拟到游戏结束（胜负判定），得到结果。</li><li>回溯（Backpropagation）：将模拟结果反向传播，更新节点胜率。</li></ol><p><strong>与神经网络的结合（AlphaGo的核心改进）</strong><br>• 传统MCTS：依赖随机模拟评估局面，效率低。</p><p>• AlphaGo的MCTS：</p><p>• 策略网络：替代部分随机模拟，提高搜索效率。</p><p>• 价值网络：减少模拟次数，直接评估局面胜率。</p><hr><p><strong>1.3 强化学习（RL）——自我进化</strong><br>下棋机器人通过自我对弈（Self-Play）不断优化策略：</p><ol><li>初始阶段：使用人类棋谱训练策略网络。</li><li>强化学习阶段：AI与自己对弈，采用策略梯度（Policy Gradient）或PPO（Proximal Policy Optimization）优化策略。</li><li>价值网络优化：通过自我对弈数据训练价值网络，提高胜率评估能力。</li></ol><p><strong>AlphaZero 的突破</strong><br>• 不依赖人类棋谱，仅通过自我对弈+强化学习，在围棋、国际象棋、日本将棋上均超越人类顶尖水平。</p><hr><p><strong>2. 下棋机器人的技术演进</strong></p><div class="table-container"><table><thead><tr><th>代表模型</th><th>技术特点</th><th>突破点</th></tr></thead><tbody><tr><td>深蓝（Deep Blue）</td><td>基于规则+暴力搜索（1997年击败卡斯帕罗夫）</td><td>依赖手工规则，仅适用于国际象棋</td></tr><tr><td>AlphaGo</td><td>深度神经网络 + MCTS</td><td>首次在围棋上击败人类（2016年击败李世石）</td></tr><tr><td>AlphaGo Zero</td><td>无监督学习（仅自我对弈）</td><td>不依赖人类棋谱，性能更强</td></tr><tr><td>AlphaZero</td><td>通用强化学习（围棋/国际象棋/将棋）</td><td>统一框架，横扫多种博弈游戏</td></tr><tr><td>MuZero</td><td>不依赖具体规则（仅观察输入）</td><td>更通用，适用于复杂环境</td></tr></tbody></table></div><hr><p><strong>3. 下棋机器人的优势 vs. 人类棋手</strong></p><div class="table-container"><table><thead><tr><th>对比维度</th><th>下棋机器人（如AlphaGo）</th><th>人类棋手</th></tr></thead><tbody><tr><td>计算速度</td><td>极快（每秒数百万次模拟）</td><td>较慢（依赖经验）</td></tr><tr><td>记忆能力</td><td>可存储海量棋谱和模式</td><td>记忆有限</td></tr><tr><td>稳定性</td><td>几乎不会犯低级错误</td><td>易受情绪、疲劳影响</td></tr><tr><td>创造力</td><td>能发现人类未探索的新定式</td><td>依赖经验积累</td></tr><tr><td>适应性</td><td>可快速适应新规则</td><td>学习新规则较慢</td></tr></tbody></table></div><p>但人类仍有优势：<br>• 直觉与洞察力：人类能凭直觉抓住关键棋局。</p><p>• 全局理解：人类更擅长宏观战略布局。</p><hr><p><strong>4. 技术挑战与未来方向</strong></p><p><strong>4.1 当前挑战</strong></p><ol><li>计算资源需求高：AlphaGo训练需数千块GPU/TPU，普通设备难以运行。</li><li>泛化能力有限：AlphaZero虽通用，但在非完全信息博弈（如德州扑克）表现较弱。</li><li>可解释性差：神经网络决策过程难以直观理解。</li></ol><p><strong>4.2 未来发展方向</strong></p><ol><li>轻量化AI（如AlphaGo Zero的优化版，降低计算需求）。</li><li>多模态博弈AI（结合视觉、语音等多模态输入）。</li><li>非完全信息博弈（如德州扑克、星际争霸等）。</li><li>人机协作（AI辅助人类决策，而非完全替代）。</li></ol><hr><p><strong>5. 总结</strong><br>下棋机器人（如AlphaGo）的核心技术包括：</p><ol><li>深度神经网络（策略网络+价值网络）——高效评估棋局。</li><li>蒙特卡洛树搜索（MCTS）——全局优化搜索路径。</li><li>强化学习（Self-Play）——自我进化，超越人类。</li></ol><p>未来，随着计算能力提升、算法优化，AI将在更多复杂博弈场景中展现强大能力，同时推动人机协作新模式的发展！ 🎮🤖</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下棋机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点餐牌震动闪灯提醒系统分析与设计方案</title>
      <link href="/posts/order-reminder-device-analysis-design.html"/>
      <url>/posts/order-reminder-device-analysis-design.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>1. 系统概述</strong><br>点餐牌震动闪灯提醒系统是一种用于餐饮行业的智能设备，当顾客的餐品准备好时，通过震动+闪灯的方式快速提醒顾客取餐，提升服务效率和顾客体验。该系统适用于快餐店、咖啡厅、自助餐厅、外卖取餐柜等场景。</p><hr><p><strong>2. 系统工作流程</strong><br><strong>2.1 流程图</strong><br></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">顾客点餐 → 厨房/服务员准备 → 餐品完成 → 系统发送通知 → 点餐牌震动+闪灯提醒 → 顾客取餐</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>2.2 详细流程</strong></p><ol><li><p>顾客点餐<br>• 顾客通过扫码点餐、POS机或服务员下单。</p><p>• 订单信息同步到厨房/收银系统，并分配桌号/座位号。</p></li></ol><ol><li><p>厨房/服务员准备餐品<br>• 厨师完成菜品后，在系统点击“已完成”。</p><p>• 系统记录订单状态（如“已出餐”）。</p></li></ol><ol><li><p>点餐牌接收通知<br>• 系统通过Wi-Fi/蓝牙/NFC发送“上菜通知”到对应桌号/座位号的点餐牌。</p><p>• 点餐牌收到信号后触发提醒机制。</p></li></ol><ol><li><p>震动+闪灯提醒<br>• 震动模块：短促震动（1-2秒），吸引顾客注意。</p><p>• 闪灯模块：LED闪烁（如绿色/蓝色），持续3-5秒。</p><p>• 屏幕显示：“已准备好”或订单号（可选）。</p></li></ol><ol><li>顾客取餐<br>• 顾客看到提醒后取餐，服务员可手动清除提醒状态（或自动超时清除）。</li></ol><hr><p><strong>3. 技术原理</strong><br><strong>3.1 硬件组成</strong><br>| 组件 | 功能 | 技术方案 |<br>|———|———|————-|<br>| 主控芯片 | 控制震动、闪灯、通信 | ESP32（Wi-Fi+蓝牙）、STM32（低功耗） |<br>| 震动模块 | 提供震动提醒 | 小型马达（如手机震动马达） |<br>| 闪灯模块 | LED闪烁提醒 | RGB LED（WS2812B可编程控制） |<br>| 通信模块 | 接收上菜通知 | Wi-Fi（MQTT/HTTP）、蓝牙（BLE）、NFC |<br>| 电源 | 供电 | USB-C / 可充电锂电池 |</p><p><strong>3.2 软件架构</strong><br>• 通信协议：MQTT（低延迟）、HTTP API（兼容性强）、WebSocket（实时通信）。</p><p>• 控制逻辑：</p><p>• 收到“上菜通知” → 触发震动（PWM控制马达）。</p><p>• 同时控制LED闪烁（如RGB LED的WS2812B驱动）。</p><p>• 更新屏幕状态（OLED/LCD显示“已准备好”）。</p><p>• 低功耗模式：待机时进入睡眠模式，减少电量消耗。</p><hr><p><strong>4. 优缺点分析</strong><br><strong>✅ 优点</strong></p><ol><li>快速提醒：震动+闪灯比单纯屏幕显示更直观，减少顾客等待焦虑。</li><li>降低服务员工作量：无需服务员逐一通知顾客，提高效率。</li><li>适用于多种场景：快餐店、咖啡厅、自助餐厅、外卖取餐柜均可使用。</li><li>可扩展性强：可结合订单管理系统，实现自动化提醒。</li></ol><p><strong>❌ 缺点</strong></p><ol><li>成本较高：相比传统点餐牌，需增加震动马达、LED灯、通信模块等硬件。</li><li>可能干扰其他顾客：震动和闪灯可能影响邻近顾客（需优化提醒强度）。</li><li>依赖网络稳定性：Wi-Fi/蓝牙故障可能导致通知延迟。</li><li>需定期维护：电池续航、硬件故障需定期检查。</li></ol><hr><p><strong>5. 使用场景</strong><br><strong>5.1 快餐店（如麦当劳、肯德基）</strong><br>• 顾客扫码点餐后，系统自动分配取餐号。</p><p>• 餐品准备好后，对应取餐柜或座位号点餐牌震动+闪灯提醒。</p><p><strong>5.2 咖啡厅（如星巴克）</strong><br>• 顾客点单后，系统记录桌号。</p><p>• 饮品制作完成后，对应桌号的点餐牌提醒顾客取餐。</p><p><strong>5.3 自助餐厅</strong><br>• 顾客取餐后，系统记录订单。</p><p>• 餐品补货或特殊菜品（如现做小吃）准备好后，提醒顾客取餐。</p><p><strong>5.4 外卖取餐柜</strong><br>• 外卖员放入餐品后，系统通知顾客取餐。</p><p>• 顾客手机扫码后，取餐柜LED灯闪烁+震动提醒（如有内置马达）。</p><hr><p><strong>6. 技术优化方向</strong><br><strong>6.1 提升用户体验</strong><br>• 个性化提醒：不同颜色代表不同状态（如绿色=已准备好，红色=订单出错）。</p><p>• 震动强度调节：避免过强震动影响顾客体验。</p><p>• 语音提醒（可选）：增加语音播报（如“您的餐已准备好”）。</p><p><strong>6.2 提升系统可靠性</strong><br>• 防误触机制：避免误触发提醒（如服务员确认后才发送通知）。</p><p>• 低功耗设计：待机时进入睡眠模式，减少电量消耗。</p><p>• 离线模式：支持本地存储未读通知（防止网络中断）。</p><p><strong>6.3 硬件优化</strong><br>• 灵活降本：改成手持设备，不与餐桌绑定，用户下单就添加提醒设备，设备与订单绑定，订单完成即回收解绑设备，以便下次使用。</p><p><strong>6.4 扩展功能</strong><br>• 多语言支持：适应不同地区顾客需求。</p><p>• 数据分析：统计上菜速度，优化厨房效率。</p><p>• 与收银系统联动：自动结账或提醒顾客支付。</p><hr><p><strong>7. 总结</strong><br>| 维度 | 分析 |<br>|———|———|<br>| 技术可行性 | 高（ESP32/STM32+LED+马达成熟方案） |<br>| 成本 | 中等（硬件成本约￥50-200/台） |<br>| 适用场景 | 快餐店、咖啡厅、自助餐厅、外卖柜 |<br>| 用户体验 | 提升取餐效率，减少等待焦虑 |<br>| 优化方向 | 低功耗、防误触、个性化提醒 |</p><p><strong>结论</strong><br>这套点餐牌震动闪灯提醒系统能显著提升餐饮服务效率，适用于快餐、咖啡厅、自助餐厅、外卖柜等场景。未来可结合AI点餐分析和智能厨房调度，进一步优化餐饮流程。</p><p>🚀 适合餐饮智能化升级方案！ 🍔🍟</p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点餐牌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟雾报警器工作原理及技术分析</title>
      <link href="/posts/smoke-alarm-technology-analysis.html"/>
      <url>/posts/smoke-alarm-technology-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>烟雾报警器（Smoke Detector）是一种用于检测火灾早期烟雾并发出警报的设备，广泛应用于家庭、办公室、工厂等场所。其核心功能是通过传感器检测空气中的烟雾颗粒，并在浓度超标时触发声光报警，提醒人员疏散或采取灭火措施。</p><hr><p><strong>1. 烟雾报警器的分类及工作原理</strong></p><p>烟雾报警器主要分为两大类：</p><ol><li>离子式烟雾报警器（Ionization Smoke Detector）</li><li>光电式烟雾报警器（Photoelectric Smoke Detector）</li></ol><p>此外，还有复合式烟雾报警器（Dual-Sensor Smoke Detector），结合两种技术以提高检测准确性。</p><hr><p><strong>1.1 离子式烟雾报警器（Ionization Smoke Detector）</strong><br><strong>工作原理</strong><br>• 核心组件：放射性镅-241（Am-241）源 + 两个电极 + 放大电路。</p><p>• 检测机制：</p><ol><li>电离室形成：镅-241释放α粒子，使空气电离，形成微弱电流。</li><li>烟雾干扰：当烟雾进入电离室时，颗粒吸附离子，导致电流变化。</li><li>报警触发：电流变化超过阈值时，电路触发报警。</li></ol><p><strong>特点</strong><br>✅ 优点：<br>• 对快速燃烧、明火（如厨房油锅起火）敏感，响应速度快。</p><p>• 成本较低，适合普通家庭使用。</p><p>❌ 缺点：<br>• 对阴燃、慢速燃烧（如家具、窗帘起火）不敏感。</p><p>• 含有微量放射性物质（镅-241），需妥善处理（但辐射量极低，符合安全标准）。</p><hr><p><strong>1.2 光电式烟雾报警器（Photoelectric Smoke Detector）</strong><br><strong>工作原理</strong><br>• 核心组件：光源（LED/红外光） + 光电传感器（光敏二极管） + 反射腔/遮光腔。</p><p>• 检测机制（两种方式）：</p><ol><li><p>遮光式（Light Obscuration）：<br>◦ 光源和传感器相对放置，正常时无光到达传感器。</p><p>◦ 烟雾颗粒散射光线，部分到达传感器，触发报警。</p></li><li><p>反射式（Light Scattering）：<br>◦ 光源和传感器呈一定角度，正常时光线不直接照射传感器。</p><p>◦ 烟雾颗粒散射光线到传感器，触发报警。</p></li></ol><p><strong>特点</strong><br>✅ 优点：<br>• 对阴燃、慢速燃烧（如家具、窗帘起火）更敏感。</p><p>• 无放射性，更环保安全。</p><p>❌ 缺点：<br>• 对快速燃烧、明火（如油锅起火）响应较慢。</p><p>• 可能受灰尘、昆虫等干扰误报。</p><hr><p><strong>1.3 复合式烟雾报警器（Dual-Sensor Smoke Detector）</strong><br>• 结合离子式+光电式，提高检测准确性，减少误报。</p><p>• 适用于对火灾敏感度要求高的场所（如卧室、走廊）。</p><hr><p><strong>2. 烟雾报警器的关键技术</strong></p><p><strong>2.1 传感器技术</strong><br>| 类型 | 核心技术 | 适用场景 |<br>|———|————-|————-|<br>| 离子式 | 放射性电离 | 快速燃烧（明火） |<br>| 光电式 | 光散射/遮光 | 阴燃（慢速燃烧） |<br>| 复合式 | 离子+光电结合 | 综合检测 |</p><p><strong>2.2 信号处理与报警逻辑</strong><br>• 阈值检测：当烟雾浓度超过设定阈值时触发报警。</p><p>• 算法优化：部分高端型号采用AI算法，区分烟雾和干扰（如蒸汽、灰尘）。</p><p><strong>2.3 电源与供电方式</strong><br>| 供电方式 | 特点 |<br>|————-|———|<br>| 电池供电（9V/锂电池） | 无线安装，但需定期更换电池 |<br>| 交流电+电池备份 | 稳定供电，断电时仍能工作 |<br>| 物联网联网型（Wi-Fi/LoRa） | 可远程监控，支持智能报警 |</p><hr><p><strong>3. 烟雾报警器的工作流程</strong></p><ol><li>正常状态：传感器监测空气，无异常。</li><li>烟雾进入：烟雾颗粒干扰传感器（离子式电流变化 / 光电式光散射）。</li><li>信号处理：微控制器（MCU）分析信号，判断是否超过阈值。</li><li><p>报警触发：<br>• 声音报警（85dB以上，确保唤醒睡眠中的人）。</p><p>• 光报警（LED闪烁）。</p><p>• 联网报警（部分型号可发送手机通知）。</p></li><li><p>故障自检：定期检测传感器、电池状态，异常时提示维护。</p></li></ol><hr><p><strong>4. 优缺点分析</strong></p><p><strong>✅ 优点</strong></p><ol><li>早期火灾预警：可在火势蔓延前提供逃生时间。</li><li>多种检测方式：离子式（明火）、光电式（阴燃）、复合式（综合）。</li><li>低误报率（现代型号优化算法，减少蒸汽、灰尘干扰）。</li><li>联网功能（高端型号）：支持远程监控、APP推送。</li></ol><p><strong>❌ 缺点</strong></p><ol><li>电池寿命问题：需定期更换（一般1-2年）。</li><li>误报可能（如烹饪蒸汽、浴室蒸汽、昆虫进入）。</li><li>放射性担忧（仅离子式，但镅-241辐射量极低，符合安全标准）。</li><li>安装位置要求：需避免高温、潮湿、强气流环境。</li></ol><hr><p><strong>5. 使用场景与选型建议</strong></p><div class="table-container"><table><thead><tr><th>场景</th><th>推荐类型</th><th>原因</th></tr></thead><tbody><tr><td>家庭卧室、走廊</td><td>光电式/复合式</td><td>对阴燃火灾更敏感，适合睡眠环境</td></tr><tr><td>厨房附近</td><td>离子式（需防误报设计）</td><td>对明火敏感，但需避免蒸汽干扰</td></tr><tr><td>办公室、商场</td><td>复合式+联网型</td><td>综合检测+远程监控</td></tr><tr><td>工业场所</td><td>高灵敏度光电式</td><td>适用于大空间、阴燃风险</td></tr></tbody></table></div><hr><p><strong>6. 技术发展趋势</strong></p><ol><li>AI智能分析：利用机器学习区分烟雾和干扰（如蒸汽、灰尘）。</li><li>物联网联网：支持Wi-Fi/LoRa/NB-IoT，实现远程监控和报警推送。</li><li>低功耗设计：延长电池寿命（如采用低功耗MCU+传感器）。</li><li>多传感器融合：结合温度、CO（一氧化碳）传感器，提高火灾预警准确性。</li></ol><hr><p><strong>7. 总结</strong><br>烟雾报警器是火灾早期预警的关键设备，其核心技术包括：<br>• 离子式（明火敏感）</p><p>• 光电式（阴燃敏感）</p><p>• 复合式（综合检测）</p><p>选型建议：<br>• 家庭推荐光电式或复合式（更安全）。</p><p>• 工业场所推荐高灵敏度光电式+联网功能。</p><p>未来，随着AI和物联网技术的发展，烟雾报警器将更加智能化，进一步提升火灾预警能力。 🚒🔥</p>]]></content>
      
      
      <categories>
          
          <category> 硬件技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 烟雾报警器 </tag>
            
            <tag> 技术分析 </tag>
            
            <tag> 安全设备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电子镣铐（Electronic Shackles）详解</title>
      <link href="/posts/electronic-shackles.html"/>
      <url>/posts/electronic-shackles.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>一、电子镣铐的定义与用途</strong><br>电子镣铐是一种结合了定位追踪、行为监控和报警功能的可穿戴设备，主要用于对特定人群（如罪犯、精神病患者、失智老人、儿童等）进行安全管控和行为约束。</p><p>其核心功能包括：<br>• 实时定位（GPS/北斗/LBS/Wi-Fi/UWB）</p><p>• 电子围栏（越界报警）</p><p>• 运动监测（异常活动检测）</p><p>• 紧急呼叫（SOS求救）</p><p>• 防拆报警（物理破坏检测）</p><hr><p><strong>二、电子镣铐的核心技术</strong><br><strong>1. 定位技术</strong><br>| 技术类型       | 精度       | 适用场景                     | 代表协议/频段          |<br>|————————|——————|———————————————|————————————|<br>| GPS/北斗   | 5~10米     | 户外追踪（罪犯监管）         | L1/L2/L5频段           |<br>| 基站定位   | 10~50米    | 城市环境（无GPS信号时备用）  | 4G/5G/NB-IoT           |<br>| 蓝牙/Wi-Fi | 5~10米     | 室内定位（如医院、养老院）   | Bluetooth 5.1/AOA      |<br>| UWB        | 10~30厘米  | 高精度场景（监狱、戒毒所）   | IEEE 802.15.4z         |</p><p><strong>典型组合方案</strong><br>• GPS+LBS：户外+室内混合定位（如罪犯外出劳作时）。</p><p>• UWB+蓝牙：高精度+低功耗（如精神病院患者监控）。</p><hr><p><strong>2. 传感器技术</strong><br>| 传感器类型       | 功能                           | 典型应用                     |<br>|—————————|———————————————-|———————————————|<br>| 加速度计     | 检测剧烈运动（逃跑、自残）     | 异常行为报警                 |<br>| 陀螺仪       | 监测异常姿态（攀爬、挣扎）     | 防暴力逃脱                   |<br>| 心率/血氧    | 健康监测（老人、病人）         | 紧急医疗预警                 |<br>| 温度传感器   | 防拆卸检测（高温熔断报警）     | 物理破坏告警                 |</p><hr><p><strong>3. 通信技术</strong><br>| 通信方式       | 特点                          | 适用场景                     |<br>|————————|———————————————-|———————————————|<br>| GSM/4G     | 广域覆盖，但功耗较高          | 常规监控（罪犯、老人）       |<br>| NB-IoT     | 低功耗、广覆盖                | 长时间佩戴（精神病患者）     |<br>| LoRa       | 远距离、低功耗                | 偏远地区监管                 |<br>| Wi-Fi      | 室内精准定位                  | 医院、养老院                 |</p><hr><p><strong>三、电子镣铐的系统架构</strong><br></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[电子镣铐设备]</span> → <span class="selector-attr">[无线通信模块]</span> → <span class="selector-attr">[定位/传感器数据]</span> → <span class="selector-attr">[云平台/服务器]</span></span><br><span class="line">                                                                 ↓</span><br><span class="line">                                                          <span class="selector-attr">[管理终端]</span></span><br><span class="line">                                                          （PC/手机APP）</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>关键组件</strong></p><ol><li><p>硬件端<br>• 主控芯片（如STM32、Nordic nRF52840）</p><p>• GNSS模块（GPS/北斗）</p><p>• 通信模块（4G/NB-IoT/LoRa）</p><p>• 传感器（加速度计、心率、温度等）</p><p>• 电源管理（低功耗设计，支持充电/换电池）</p></li></ol><ol><li><p>软件端<br>• 定位算法（卡尔曼滤波、粒子滤波）</p><p>• 电子围栏规则引擎（越界报警阈值设置）</p><p>• 数据可视化平台（地图展示、轨迹回放）</p><p>• 告警系统（短信/APP推送/电话通知）</p></li></ol><hr><p><strong>四、电子镣铐的应用场景</strong><br><strong>1. 司法矫正</strong><br>• 监狱/看守所：防止服刑人员逃脱，实时监控活动范围。</p><p>• 社区矫正：对假释、缓刑人员进行行为管控。</p><p><strong>2. 医疗监护</strong><br>• 精神病院：监控患者异常行为（如自残、攻击他人）。</p><p>• 失智老人：防止走失，紧急情况下快速定位。</p><p><strong>3. 儿童安全</strong><br>• 防走失手环：家长可通过APP查看孩子位置，设置安全区域。</p><p><strong>4. 宠物追踪</strong><br>• 防止宠物丢失，部分高端产品支持双向通话功能。</p><hr><p><strong>五、电子镣铐的技术挑战</strong><br>| 挑战                | 解决方案                          |<br>|——————————-|—————————————————|<br>| 续航能力不足    | 低功耗芯片+可充电电池+太阳能辅助 |<br>| 信号遮挡问题    | 多模通信（GPS+LBS+蓝牙）         |<br>| 防拆卸难度      | 物理防拆（熔断报警）+电子签名认证 |<br>| 隐私争议        | 数据加密+合法授权使用            |</p><hr><p><strong>六、未来发展趋势</strong></p><ol><li><p>AI行为分析<br>• 通过机器学习识别异常行为（如奔跑、攀爬）。</p></li><li><p>柔性电子技术<br>• 更舒适的佩戴体验（如电子纹身式镣铐）。</p></li><li><p>区块链存证<br>• 确保定位数据的不可篡改性，用于司法取证。</p></li><li><p>多模态融合<br>• GPS+UWB+蓝牙+惯性导航，提升复杂环境定位精度。</p></li></ol><hr><p><strong>七、典型产品案例</strong><br>| 品牌/型号       | 定位方式         | 主要功能                     | 应用场景       |<br>|————————-|—————————|———————————————|————————|<br>| 恒高科技H1  | GPS+北斗+LBS     | 电子围栏、SOS、运动监测      | 监狱矫正       |<br>| 清研讯科JW600| UWB+蓝牙AOA      | 高精度定位（±10cm）、防拆报警| 医院/养老院    |<br>| 小米儿童手表| GPS+Wi-Fi+基站   | 定位、通话、健康监测         | 儿童安全       |</p><hr><p><strong>总结</strong><br>电子镣铐是定位技术+安防监控的典型应用，其核心价值在于安全管控和行为干预。未来随着AI、柔性电子等技术的发展，电子镣铐将更加智能化、人性化，同时面临隐私和伦理的挑战。  </p>]]></content>
      
      
      <categories>
          
          <category> 物联网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实时定位 </tag>
            
            <tag> 电子镣铐 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>共享单车的核心技术解析</title>
      <link href="/posts/shared-bicycle-core-tech.html"/>
      <url>/posts/shared-bicycle-core-tech.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>共享单车作为物联网（IoT）与共享经济的典型应用，其核心技术涵盖定位导航、智能锁控制、移动支付、大数据运营、车辆调度等多个方面。以下是共享单车的关键技术及其分析：</p><hr><p><strong>1. 定位技术（核心基础）</strong><br>共享单车需要精准定位以实现用户查找车辆、平台调度管理、电子围栏停车等功能。</p><p><strong>主流定位技术</strong><br>| 技术类型       | 精度       | 适用场景                     | 代表方案                     |<br>|————————|——————|———————————————|———————————————|<br>| GPS        | 5~10米     | 户外开阔区域（城市街道）     | 单GPS模块（如ublox NEO-6M）  |<br>| 北斗+GPS   | 3~8米      | 国内复杂环境（高楼、隧道）   | 双模定位芯片（如MTK MT3333） |<br>| 基站定位（LBS） | 10~50米    | 室内/地下停车场（GPS信号弱时） | 4G/5G/NB-IoT基站辅助         |<br>| 蓝牙信标（Beacon） | 1~5米      | 停车区精准定位（电子围栏）   | 蓝牙4.0/5.0（iBeacon/Eddystone） |<br>| 惯性导航（IMU） | 短距离高精度 | 短时无GPS信号时辅助定位      | 加速度计+陀螺仪（MPU6050）   |</p><p><strong>优化方案</strong><br>• 多模定位融合（GPS+基站+蓝牙）提升精度，减少漂移。</p><p>• AI算法修正（如卡尔曼滤波）降低信号干扰影响。</p><hr><p><strong>2. 智能锁技术（核心控制）</strong><br>智能锁是共享单车的关键部件，负责开锁、关锁、状态上报等功能。</p><p><strong>智能锁类型</strong><br>| 类型       | 技术原理                     | 优点                          | 缺点                  |<br>|——————|———————————————|———————————————-|———————————-|<br>| 机械密码锁 | 固定密码，易破解             | 成本低                        | 安全性差，易被破坏    |<br>| GPRS+蓝牙锁 | 远程开锁（GPRS）+备用蓝牙   | 稳定性较好，支持APP控制       | 耗电较高              |<br>| NB-IoT锁  | 窄带物联网，低功耗广覆盖     | 超低功耗，信号穿透强          | 响应速度较慢          |<br>| BLE 5.0锁 | 蓝牙5.0高精度通信            | 低功耗，支持mesh组网          | 需手机蓝牙支持        |</p><p><strong>关键技术</strong><br>• 低功耗设计（MCU休眠+唤醒机制，延长电池寿命）。</p><p>• 远程控制（通过2G/4G/NB-IoT通信模块实现云端开锁）。</p><p>• 防破坏机制（异常开锁报警、锁体加固）。</p><hr><p><strong>3. 移动支付与用户认证</strong><br>共享单车的商业模式依赖扫码支付，涉及用户身份认证、计费、信用管理等。</p><p><strong>核心技术</strong><br>| 技术类型       | 实现方式                     | 应用场景                     |<br>|————————|———————————————|———————————————|<br>| 二维码识别 | 手机APP扫描单车二维码        | 用户解锁车辆                 |<br>| NFC支付    | 手机NFC直接刷卡解锁          | 高端车型（如哈啰单车NFC版）  |<br>| 信用免押   | 芝麻信用评分+风控模型        | 降低用户使用门槛             |<br>| 动态计费   | 基于骑行时间、距离、拥堵情况 | 灵活调整价格                 |</p><p><strong>安全措施</strong><br>• 防二维码伪造（动态加密二维码，防止复制攻击）。</p><p>• 支付风控（异常订单拦截，如短时间多次开锁）。</p><hr><p><strong>4. 大数据与智能调度</strong><br>共享单车平台需要实时监控车辆分布，优化运营效率。</p><p><strong>关键技术</strong><br>| 技术类型       | 功能                         | 应用场景                     |<br>|————————|———————————————|———————————————|<br>| 车辆定位追踪 | 实时获取车辆位置             | 调度车辆至需求热点           |<br>| 用户行为分析 | 骑行轨迹、热点区域预测       | 优化投放策略                 |<br>| AI调度算法   | 基于供需预测的车辆调度       | 减少闲置/短缺现象            |<br>| 故障预测     | 通过骑行数据判断车辆健康状态 | 提前维护，降低故障率         |</p><p><strong>典型算法</strong><br>• 聚类分析（K-Means）：识别热门停车区域。</p><p>• 时间序列预测（ARIMA/LSTM）：预测未来用车需求。</p><hr><p><strong>5. 车辆设计与物联网模块</strong><br>共享单车需适应复杂环境，其硬件设计至关重要。</p><p><strong>关键硬件</strong><br>| 组件       | 技术要求                     | 典型方案                     |<br>|——————|———————————————|———————————————|<br>| 车锁   | 防水、防震、低功耗           | NB-IoT+蓝牙双模锁            |<br>| 定位模块 | GPS/北斗+基站辅助            | Ublox NEO-M8N                |<br>| 通信模块 | 2G/4G/NB-IoT                 | Quectel BC95（NB-IoT）       |<br>| 电源管理 | 超低功耗设计（待机数月）     | 超级电容+可充电电池          |<br>| 防盗设计 | 防拆卸报警、异常震动检测     | 加速度传感器+蜂鸣器          |</p><hr><p><strong>6. 安全与隐私保护</strong><br>共享单车涉及大量用户数据，需保障信息安全。</p><p><strong>关键技术</strong><br>| 技术类型       | 实现方式                     | 应用场景                     |<br>|————————|———————————————|———————————————|<br>| 数据加密   | HTTPS/TLS传输，AES存储       | 用户信息、支付数据安全       |<br>| 隐私保护   | 匿名化处理骑行轨迹           | 符合GDPR/CCPA等法规          |<br>| 防破解措施 | 动态令牌、防重放攻击         | 防止黑客篡改开锁指令         |</p><hr><p><strong>7. 未来技术趋势</strong></p><ol><li>AIoT融合：结合计算机视觉（如自动识别违规停车）。</li><li>自动驾驶单车：低速无人驾驶，适用于特定场景（如园区）。</li><li>碳纤维/轻量化材料：降低车辆重量，提升耐用性。</li><li>太阳能充电：部分智能锁采用太阳能供电，延长续航。</li></ol><hr><p><strong>总结</strong><br>共享单车的核心技术涵盖定位导航、智能锁控制、移动支付、大数据运营等，其成功依赖于物联网、AI、大数据的深度融合。未来，随着AIoT、自动驾驶、新能源技术的发展，共享单车将更加智能、高效和环保。  </p>]]></content>
      
      
      <categories>
          
          <category> 物联网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
            <tag> 共享单车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电影密钥技术解析：从授权到防盗的完整体系</title>
      <link href="/posts/film-key-technology.html"/>
      <url>/posts/film-key-technology.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、电影密钥的概念与核心作用</p><p>电影密钥（KDM，Key Delivery Message）是现代数字电影放映系统的核心安全组件，是电影发行方赋予影院合法放映特定影片的数字授权凭证。每个密钥包含：<br>• 影院ID信息：唯一标识授权的影院</p><p>• 影片ID信息：明确授权的影片内容</p><p>• 时间限制：精确到秒的放映有效期</p><p>• 设备绑定：与特定放映设备绑定</p><p>• 哈希校验：防止篡改的安全验证</p><p>1.1 密钥在数字电影流程中的位置<br>密钥位于电影数字版权保护系统的最关键环节，形成完整保护链：<br></p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数字电影包<span class="comment">(DCP)</span> → 密钥系统 → 放映服务器 → 放映机</span><br></pre></td></tr></tbody></table></figure><p></p><p>二、密钥的分发与授权全流程</p><p>2.1 影片上映前的准备工作</p><p>（1）密钥生成系统<br>发行方使用KDM生成系统创建授权密钥：<br>• 录入影片元数据（片名、版本、时长等）</p><p>• 选择放映时间窗口（如20XX-XX-XX至20XX-XX-XX）</p><p>• 指定授权影院及设备清单</p><p>• 设置播放限制条件（如IMAX/Dolby版本）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简化的KDM生成伪代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_kdm</span>(<span class="params">film_id, cinema_id, start_time, end_time</span>):</span><br><span class="line">    private_key = get_issuer_private_key()</span><br><span class="line">    cinema_cert = get_cinema_certificate(cinema_id)</span><br><span class="line">    film_cert = get_film_certificate(film_id)</span><br><span class="line">    </span><br><span class="line">    data_to_sign = {</span><br><span class="line">        <span class="string">'film_id'</span>: film_id,</span><br><span class="line">        <span class="string">'cinema_id'</span>: cinema_id,</span><br><span class="line">        <span class="string">'valid_from'</span>: start_time,</span><br><span class="line">        <span class="string">'valid_to'</span>: end_time,</span><br><span class="line">        <span class="string">'hash'</span>: generate_content_hash()</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    signature = sign_data(private_key, data_to_sign)</span><br><span class="line">    <span class="keyword">return</span> create_kdm(data_to_sign, signature, cinema_cert, film_cert)</span><br></pre></td></tr></tbody></table></figure><p>（2）密钥分发机制<br>KDM通过多重加密通道分发：<br></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发行方KMS → 有线/加密卫星 → 影院TMS → 加密存储</span><br></pre></td></tr></tbody></table></figure><br>• 采用AES-256全链路加密<p></p><p>• 动态密钥交换协议（如TLS 1.3）</p><p>• 传输完整性校验（HMAC-SHA256）</p><p>2.2 影片的放映授权过程</p><p>（1）影院设备注册<br>新设备开机时需完成：<br></p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设备序列号 → 影院管理系统 → 电影数字版权署<span class="comment">(CDSA)</span> → 返回证书</span><br></pre></td></tr></tbody></table></figure><br>证书包含：<br>• 设备唯一标识码（UID）<p></p><p>• 安全认证等级</p><p>• 兼容版本号</p><p>• 认证有效期</p><p>（2）放映授权流程</p><ol><li>放映服务器接收到DCP包</li><li>请求对应KDM（通过影院管理系统TMS）</li><li><p>验证KDM有效性：<br>• 数字签名验证</p><p>• 时间窗口验证</p><p>• 设备绑定验证</p></li><li><p>解密DCP并载入放映列表</p></li></ol><p>三、密钥保护的核心技术</p><p>3.1 数字签名与证书体系<br>• 电影数字版权署(CDSA)作为CA机构</p><p>• 采用X.509证书标准</p><p>• 使用SHA-3哈希算法</p><p>• 基于椭圆曲线的ECC签名方案</p><p>3.2 反盗版技术措施</p><ol><li><p>放映水印系统：<br>• 每台放映机生成唯一可见水印（左上角）</p><p>• 帧级音轨水印（人耳不可察）</p><p>• 实时定位追踪系统（RTLS）</p></li></ol><ol><li><p>数字内容防篡改：<br>• 影片数据块级加密</p><p>• 播放时动态校验</p><p>• 异常操作自动熔断</p></li></ol><ol><li><p>播放行为审计：<br>• 每场放映日志加密上传</p><p>• 完整播放记录（播放开始到结束）</p><p>• 防中断机制（断电自动锁定）</p></li></ol><p>四、反票房造假的技术手段</p><p>4.1 播放日志防篡改系统<br>每台放映机生成不可篡改的播放日志：<br></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[设备ID]</span><span class="selector-attr">[放映开始时间]</span><span class="selector-attr">[片名]</span><span class="selector-attr">[版本]</span><span class="selector-attr">[哈希值]</span></span><br><span class="line">→ 本地加密存储</span><br><span class="line">→ 逐级上传至中央服务器</span><br><span class="line">→ 时间戳认证</span><br></pre></td></tr></tbody></table></figure><p></p><p>4.2 多维度监测系统</p><ol><li><p>票房校验机制：<br>• 票务系统与时长校验</p><p>• 现场监片+远程监播</p><p>• 异常场次自动标记（如超短片长）</p></li></ol><ol><li><p>红外监测系统：<br>• 通过红外摄像头识别观众实际观影人数</p><p>• 与售票数据对比</p><p>• 异常波动预警</p></li></ol><p>五、系统漏洞与防范措施</p><div class="table-container"><table><thead><tr><th>漏洞类型</th><th>潜在风险</th><th>防御措施</th></tr></thead><tbody><tr><td>KDM伪造</td><td>非法放映</td><td>量子安全签名（NIST PQC）</td></tr><tr><td>设备克隆</td><td>设备虚拟化逃票</td><td>芯片级硬件信任锚</td></tr><tr><td>日志篡改</td><td>虚假票房数据</td><td>区块链存证</td></tr><tr><td>网络攻击</td><td>KMS劫持</td><td>量子抗DDoS防护</td></tr></tbody></table></div><p>5.1 已知漏洞案例<br>202X年巴西票房造假事件：<br>• 攻击者劫持TMS服务器</p><p>• 注入假KDM生成指令</p><p>• 通过克隆放映机绕过水印验证</p><p>修复方案：</p><ol><li>实施NIST SP 800-175B密钥管理标准</li><li>引入硬件安全模块(HSM)存储根密钥</li><li>部署基于硬件的可信执行环境(TEE)</li></ol><p>六、未来技术发展方向</p><ol><li><p>量子安全演进：<br>• 20XX年起支持CRYSTALS-Kyber抗量子加密</p><p>• 混合加密框架（传统+量子安全）</p></li></ol><ol><li><p>区块链存证：<br>• 每帧数据区块哈希</p><p>• 跨链票房审计</p></li></ol><ol><li><p>AI反作弊系统：<br>• 观众行为模式分析</p><p>• 异常观影行为实时检测</p></li></ol><ol><li><p>自主可控芯片：<br>• 国产密码芯片</p><p>• 可信执行环境(TEE)标准化</p></li></ol><p>七、完整保密性验证流程示例</p><p>以《星际穿越X》首映为例：</p><ol><li><p>密钥生成：<br>• 时间：XX月XX日23:59</p><p>• 有效期：首映后72小时</p><p>• 设备绑定：全球仅限5台IMAX放映机</p></li></ol><ol><li><p>放映验证：<br>• 设备启动自检（耗时47秒）</p><p>• KDM验证通过（耗时23毫秒）</p><p>• 加密DCP解密（AESCBC-256）</p></li></ol><ol><li><p>水印嵌入：<br>• 可见水印（左上角”IMAX”字样+时间码）</p><p>• 音轨水印（DC偏移调制）</p><p>• 频率：17.8kHz（人耳不可察）</p></li></ol><ol><li><p>数据上传：<br>• 本地哈希校验（SHA-3-512）</p><p>• 分段加密上传（AES-GCM-256）</p><p>• 自动错误重传机制</p></li></ol><p>八、结论</p><p>现代电影密钥系统已形成完整的”生成-分发-验证-审计”技术链，融合密码学、区块链、硬件安全等多重防护。未来随着量子计算等新技术的发展，电影反盗版体系将持续演进。对于行业从业者，建议：</p><ol><li>定期更新密钥管理策略</li><li>采用多因子认证（MFA）TMS系统</li><li>建立应急响应预案</li></ol><p>通过技术与管理手段的结合，方能有效维护电影产业的健康生态。</p>]]></content>
      
      
      <categories>
          
          <category> 密钥技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密钥技术 </tag>
            
            <tag> 电影 </tag>
            
            <tag> 防盗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电影票房统计与反作弊体系解析</title>
      <link href="/posts/film-box-office.html"/>
      <url>/posts/film-box-office.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、电影票房统计的基本原理</p><p>1.1 传统票房统计方式<br>中国电影票房数据主要通过以下系统采集：<br>• 国家电影专资办系统：全国唯一官方票房统计平台</p><p>• 院线管理系统：各电影院线使用的售票数据汇总系统</p><p>• TMS（Theater Management System）：影院管理系统</p><p>• 放映服务器：记录每场实际放映数据</p><p>统计流程：<br></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">售票系统 → 院线管理系统 → 国家电影专资办系统</span><br></pre></td></tr></tbody></table></figure><p></p><p>1.2 现代票房统计技术</p><ol><li><p>实时数据上传：<br>• 每张电影票信息实时上传至专资办系统</p><p>• 包含时间、影厅、座位、票价等详细信息</p></li></ol><ol><li><p>双重校验机制：<br>• 票务系统与放映系统数据比对</p><p>• 实际放映记录与售票记录交叉验证</p></li></ol><ol><li><p>区块链存证（试点中）：<br>• 关键数据上链存证</p><p>• 防篡改可追溯</p></li></ol><p>二、票房造假的主要手段</p><p>2.1 幽灵场次<br>• 操作方式：影院在无观众情况下虚假排片放映</p><p>• 特征：</p><p>• 非黄金时段（如凌晨）</p><p>• 固定影厅固定时间</p><p>• 票价异常（如统一9.9元）</p><p>2.2 自购票房<br>• 操作方式：片方自掏腰包购买自家电影票</p><p>• 常见手法：</p><p>• 员工福利票</p><p>• 团体包场（实际无人观看）</p><p>• 与影院协议返点购票</p><p>2.3 数据篡改<br>• 技术手段：</p><p>• 篡改售票系统数据</p><p>• 修改放映日志</p><p>• 注入虚假订单</p><p>2.4 并场统计<br>• 操作方式：将多部影片合并统计为同一部</p><p>• 隐蔽手法：</p><p>• 使用相似片名</p><p>• 调整放映时间间隔</p><p>三、反作弊技术体系</p><p>3.1 放映端防护</p><ol><li><p>水印系统：<br>• 每台放映机生成唯一水印</p><p>• 水印包含设备ID、时间戳</p><p>• 实时嵌入影片画面和音轨</p></li></ol><ol><li><p>红外监测：<br>• 红外摄像头识别实际观影人数</p><p>• 与售票数据比对</p><p>• 异常波动自动报警</p></li></ol><ol><li><p>播放日志：<br>• 每场放映完整记录</p><p>• 包含起止时间、实际播放时长</p><p>• 加密上传至监管系统</p></li></ol><p>3.2 数据校验机制</p><ol><li><p>票务系统与放映系统比对：<br>• 实时比对售票记录与放映记录</p><p>• 异常情况自动标记</p></li></ol><ol><li><p>票房数据实时监测：<br>• 建立异常数据模型</p><p>• 自动识别异常购票行为</p><p>• 人工复核可疑数据</p></li></ol><ol><li><p>区块链存证（试点）：<br>• 关键数据上链</p><p>• 防篡改可追溯</p><p>• 多节点验证</p></li></ol><p>3.3 监管技术升级</p><ol><li><p>AI监播系统：<br>• 计算机视觉识别实际观影人数</p><p>• 分析观众行为模式</p><p>• 检测异常观影行为</p></li></ol><ol><li><p>动态密钥系统：<br>• 每场放映动态密钥验证</p><p>• 防止放映数据篡改</p><p>• 实时更新密钥</p></li></ol><ol><li><p>多维数据分析：<br>• 建立票房预测模型</p><p>• 异常数据自动预警</p><p>• 跨影院数据比对</p></li></ol><p>四、反作弊实战案例分析</p><p>4.1 某影片幽灵场次事件<br>作弊手段：<br>• 凌晨时段安排多场次</p><p>• 固定影厅固定时间</p><p>• 票价统一9.9元</p><p>检测过程：</p><ol><li>发现异常放映时段分布</li><li>比对红外监测数据</li><li>调取监控录像验证</li><li>确认幽灵场次事实</li></ol><p>处理结果：<br>• 取消相关票房成绩</p><p>• 影院停业整顿</p><p>• 片方公开道歉</p><p>4.2 自购票房检测案例<br>作弊手段：<br>• 片方员工批量购票</p><p>• 使用优惠券降低票价</p><p>• 票务系统数据异常</p><p>检测手段：</p><ol><li>分析购票行为模式</li><li>检测异常优惠订单</li><li>核实购票IP地址</li><li>确认自购行为</li></ol><p>处罚措施：<br>• 剔除相关票房数据</p><p>• 片方记入不良记录</p><p>• 行业通报批评</p><p>五、反作弊体系的技术挑战</p><p>5.1 技术漏洞</p><ol><li><p>数据篡改风险：<br>• 放映日志可被修改</p><p>• 票务系统存在后门</p></li></ol><ol><li><p>硬件造假可能：<br>• 伪造放映水印设备</p><p>• 克隆红外监测系统</p></li></ol><ol><li><p>网络攻击威胁：<br>• DDoS攻击监管系统</p><p>• 中间人攻击数据传输</p></li></ol><p>5.2 管理漏洞</p><ol><li><p>人员违规操作：<br>• 内部人员协助造假</p><p>• 数据录入错误</p></li></ol><ol><li><p>影院利益驱动：<br>• 片方返点诱惑</p><p>• 排片压力导致造假</p></li></ol><ol><li><p>监管盲区：<br>• 二三线城市监管薄弱</p><p>• 新兴放映形式监管滞后</p></li></ol><p>六、未来反作弊技术发展方向</p><p>6.1 技术创新</p><ol><li><p>量子加密技术：<br>• 量子密钥分发(QKD)</p><p>• 防量子计算攻击</p></li></ol><ol><li><p>AI深度学习：<br>• 异常观影行为识别</p><p>• 自动检测幽灵场次</p></li></ol><ol><li><p>区块链存证：<br>• 全链路数据上链</p><p>• 多节点验证机制</p></li></ol><ol><li><p>生物识别技术：<br>• 观众面部识别</p><p>• 实时人数统计</p></li></ol><p>6.2 管理优化</p><ol><li><p>建立行业黑名单：<br>• 记录违规影院和片方</p><p>• 实行行业禁入制度</p></li></ol><ol><li><p>加强人员培训：<br>• 票务系统操作规范</p><p>• 反作弊意识培养</p></li></ol><ol><li><p>完善法律法规：<br>• 明确票房造假处罚标准</p><p>• 提高违法成本</p></li></ol><ol><li><p>建立第三方监管：<br>• 引入独立审计机构</p><p>• 定期抽查影院数据</p></li></ol><p>七、结论</p><p>电影票房统计与反作弊是一个系统工程，需要技术、管理和法律的协同配合。随着技术的进步，造假手段也在不断升级，但反作弊体系也在持续进化。未来，通过量子加密、AI监控、区块链存证等先进技术的应用，配合严格的管理制度和法律法规，将构建起更加完善的票房监管体系，确保电影市场的公平竞争和健康发展。</p><p>对于行业从业者而言，应认识到：</p><ol><li>诚信是电影产业的基石</li><li>技术手段需要与管理相结合</li><li>行业自律与外部监管同样重要</li><li>持续创新才能应对新挑战</li></ol><p>只有建立透明、公正、高效的票房统计体系，才能促进电影产业的可持续发展，保护创作者和观众的合法权益。</p>]]></content>
      
      
      <categories>
          
          <category> 电影票房 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影票房 </tag>
            
            <tag> 反作弊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红外成像原理及人体检测技术解析</title>
      <link href="/posts/red-thermal-imaging.html"/>
      <url>/posts/red-thermal-imaging.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>一、红外成像的基本原理</strong><br>红外成像（Infrared Imaging）利用物体发出的红外辐射（热辐射）生成图像，其核心原理如下：</p><ol><li><p>红外辐射（热辐射）<br>• 所有物体都会发射红外线（波长范围：0.7μm~1000μm），温度越高，辐射越强。</p><p>• 人体温度约 36~37℃，辐射的红外波长主要集中在 8~14μm（远红外波段）。</p></li></ol><ol><li><p>红外探测器（Sensor）<br>• 红外摄像头内置微测辐射热计（Microbolometer）或量子型探测器（如InSb、HgCdTe），能感知红外辐射并转换为电信号。</p><p>• 信号经处理后生成热图像（灰度图或伪彩色图）。</p></li></ol><ol><li>图像处理<br>• 热图像经过算法增强（如边缘检测、温度阈值分割）后，可识别人体轮廓或运动轨迹。</li></ol><hr><p><strong>二、如何通过红外摄像头识别有人靠近？</strong><br><strong>1. 基于温度阈值的检测</strong><br>• 原理：人体温度（36~37℃）高于环境背景（如墙壁、家具），通过设定温度阈值（如 30℃）筛选出人体区域。</p><p>• 实现步骤：</p><ol><li>摄像头采集红外图像，转换为灰度值（温度越高，灰度值越大）。</li><li>设定温度阈值（如 <code>T &gt; 30℃</code>），提取高温区域。</li><li>通过形态学处理（如膨胀、腐蚀）去除噪声，得到人体轮廓。</li></ol><p>示例代码（Python + OpenCV + FLIR Lepton 模块）：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取红外图像（假设已转换为灰度图）</span></span><br><span class="line">frame = cv2.imread(<span class="string">"thermal_image.png"</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定温度阈值（需根据实际标定调整）</span></span><br><span class="line">threshold = <span class="number">150</span>  <span class="comment"># 假设150对应30℃</span></span><br><span class="line">_, binary = cv2.threshold(frame, threshold, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 形态学处理（去除噪声）</span></span><br><span class="line">kernel = np.ones((<span class="number">5</span>, <span class="number">5</span>), np.uint8)</span><br><span class="line">binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找轮廓</span></span><br><span class="line">contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否有人靠近（轮廓面积阈值）</span></span><br><span class="line"><span class="keyword">for</span> cnt <span class="keyword">in</span> contours:</span><br><span class="line">    area = cv2.contourArea(cnt)</span><br><span class="line">    <span class="keyword">if</span> area &gt; <span class="number">500</span>:  <span class="comment"># 假设500像素对应人体大小</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"有人靠近！"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><hr><p><strong>2. 基于运动检测的优化</strong><br>• 问题：单纯温度阈值可能误判（如高温物体）。</p><p>• 改进：结合帧间差分法检测运动目标。</p><p>• 步骤：</p><ol><li>连续采集多帧红外图像。</li><li>计算相邻帧的差异（<code>frame_diff = |frame_t - frame_{t-1}|</code>）。</li><li>对差异图像进行阈值分割，提取移动目标。</li></ol><hr><p><strong>三、如何识别人数？</strong><br><strong>1. 目标分割与计数</strong><br>• 步骤：</p><ol><li>提取人体轮廓（如前述方法）。</li><li>对轮廓进行聚类（如DBSCAN算法），区分重叠目标。</li><li>统计独立轮廓数量即为人数。</li></ol><p>示例代码（基于OpenCV）：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设binary是二值化后的人体区域</span></span><br><span class="line">labels, _ = cv2.connectedComponents(binary)  <span class="comment"># 连通域标记</span></span><br><span class="line">num_people = np.<span class="built_in">max</span>(labels) - <span class="number">1</span>  <span class="comment"># 减去背景</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"检测到 <span class="subst">{num_people}</span> 人"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>2. 多摄像头融合</strong><br>• 场景：单摄像头可能漏检遮挡人群。</p><p>• 方案：部署多个红外摄像头，通过坐标映射合并检测结果。</p><hr><p><strong>四、实际应用中的挑战与优化</strong><br>| 挑战                | 解决方案                          |<br>|——————————-|—————————————————|<br>| 环境温度干扰        | 动态调整阈值，或结合可见光辅助识别 |<br>| 人体遮挡            | 使用多角度摄像头或深度学习模型   |<br>| 长距离检测精度下降  | 选用高分辨率红外传感器           |</p><hr><p><strong>五、典型产品案例</strong></p><ol><li>安防监控：FLIR Lepton 红外模块 + AI算法（如YOLOv8-Tiny）。</li><li>智能门禁：结合PIR（被动红外）传感器实现人员计数。</li><li>工业检测：用于夜间或烟雾环境的人员搜救。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 红外成像 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红外成像 </tag>
            
            <tag> 人像检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>萝卜快跑（Robotaxi）关键技术分析</title>
      <link href="/posts/robotaxi-key-technologies.html"/>
      <url>/posts/robotaxi-key-technologies.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>萝卜快跑（百度Apollo旗下自动驾驶出行服务）作为国内领先的自动驾驶出租车（Robotaxi）项目，其核心技术融合了感知、决策、执行、通信、云平台等多方面技术，旨在实现安全、高效的无人驾驶出行服务。以下是其关键技术的详细分析：</p><hr><p><strong>1. 感知技术（Perception）——环境理解的核心</strong><br>感知系统是Robotaxi的“眼睛”和“耳朵”，负责识别周围环境，包括车辆、行人、交通标志、车道线等。</p><p><strong>1.1 传感器融合（Sensor Fusion）</strong><br>| 传感器类型       | 技术特点                     | 作用                           |<br>|—————————|———————————————|————————————————|<br>| 激光雷达（LiDAR） | 360°扫描，高精度3D点云       | 检测车辆、行人、障碍物         |<br>| 摄像头（Camera） | RGB/红外，视觉识别           | 识别交通标志、车道线、红绿灯   |<br>| 毫米波雷达（mmWave Radar） | 探测距离远，抗干扰强         | 检测车辆速度、距离             |<br>| 超声波雷达（Ultrasonic Sensor） | 近距离检测（&lt;5m）            | 泊车辅助、低速避障             |<br>| GNSS+IMU     | 高精度定位（厘米级）         | 车辆全局定位                   |</p><p><strong>技术难点</strong><br>• 多传感器数据融合（如激光雷达点云与摄像头图像对齐）。</p><p>• 极端天气适应性（雨雪雾对传感器的影响）。</p><hr><p><strong>1.2 高精地图（HD Map）</strong><br>• 作用：提供厘米级道路信息（车道线、坡度、曲率、交通标志）。</p><p>• 更新方式：众包采集（Robotaxi自身数据）+ 专业测绘。</p><p>• 技术挑战：实时更新与数据压缩（避免存储过大）。</p><hr><p><strong>2. 决策与规划（Decision &amp; Planning）——智能驾驶的大脑</strong><br>决策系统相当于Robotaxi的“大脑”，负责路径规划、行为决策和运动控制。</p><p><strong>2.1 路径规划（Path Planning）</strong><br>• 全局规划：基于高精地图，选择最优路线（类似导航）。</p><p>• 局部规划：动态避障，调整行驶轨迹（如绕过突然出现的行人）。</p><p><strong>2.2 行为决策（Behavior Decision）</strong><br>• 场景识别：识别交通灯、行人、车辆等动态对象。</p><p>• 决策逻辑：</p><p>• 遵守交规（红灯停、绿灯行）。</p><p>• 安全优先（遇到障碍物减速或变道）。</p><p>• 舒适性优化（平稳加速、刹车）。</p><p><strong>2.3 运动控制（Motion Control）</strong><br>• 纵向控制：油门/刹车控制车速。</p><p>• 横向控制：方向盘控制转向。</p><p>• 控制算法：PID控制、MPC（模型预测控制）、强化学习等。</p><hr><p><strong>3. 车路协同（V2X）——提升安全性与效率</strong><br>车路协同（Vehicle-to-Everything, V2X）技术让Robotaxi与道路基础设施、其他车辆通信，提升安全性。</p><p><strong>3.1 V2X通信技术</strong><br>| 通信方式       | 技术特点                     | 应用场景                     |<br>|————————|———————————————|———————————————|<br>| DSRC（专用短程通信） | 低延迟（&lt;10ms），但覆盖有限   | 车车通信（V2V）、车路通信（V2I） |<br>| C-V2X（蜂窝车联网） | 基于5G，覆盖广，支持高带宽   | 未来主流方向                 |</p><p><strong>3.2 典型应用</strong><br>• 交通信号灯信息共享：提前获知红绿灯状态，优化驾驶策略。</p><p>• 紧急车辆预警：让行救护车、消防车。</p><p>• 道路施工提醒：避开施工路段。</p><hr><p><strong>4. 云平台与大数据（Cloud &amp; Big Data）</strong><br>云平台是Robotaxi的“远程大脑”，负责数据存储、仿真测试、远程监控等。</p><p><strong>4.1 数据闭环（Data Loop）</strong></p><ol><li>数据采集：Robotaxi行驶中收集路况、驾驶行为数据。</li><li>数据标注：人工/自动标注（如障碍物位置、交通灯状态）。</li><li>模型训练：优化感知、决策算法（如深度学习模型）。</li><li>仿真测试：在虚拟环境中验证新算法（如Apollo Cyber RT仿真平台）。</li></ol><p><strong>4.2 远程运维（Remote Operation）</strong><br>• 远程监控：实时查看车辆状态（电量、传感器健康度）。</p><p>• 远程接管：极端情况下人工介入（如系统故障）。</p><hr><p><strong>5. 安全与冗余设计（Safety &amp; Redundancy）</strong><br>自动驾驶的安全性至关重要，Robotaxi采用多重冗余设计确保可靠性。</p><p><strong>5.1 硬件冗余</strong><br>• 计算单元冗余：主控芯片（如英伟达Orin）+ 备用芯片。</p><p>• 传感器冗余：多激光雷达、多摄像头、多毫米波雷达。</p><p>• 制动冗余：线控刹车+机械备份（如EPB电子驻车）。</p><p><strong>5.2 软件冗余</strong><br>• 故障诊断：实时监测系统状态，异常时切换备用模式。</p><p>• 安全停车（Minimally Risk Condition, MRC）：无法继续行驶时靠边停车。</p><hr><p><strong>6. 人机交互（HMI）——提升用户体验</strong><br>Robotaxi需要与乘客交互，提供舒适、安全的乘坐体验。</p><p><strong>6.1 车内交互</strong><br>• 语音交互：乘客可通过语音控制空调、播放音乐。</p><p>• 屏幕显示：实时显示行驶路线、周围环境（增强信任感）。</p><p><strong>6.2 远程交互</strong><br>• APP预约：用户通过百度地图/萝卜快跑APP下单。</p><p>• 行程分享：家人可实时查看行程位置。</p><hr><p><strong>7. 未来技术趋势</strong></p><ol><li>AI大模型赋能：Transformer、BEV（Bird’s Eye View）感知提升环境理解能力。</li><li>无图化（Mapless）自动驾驶：减少对高精地图依赖，适应更多场景。</li><li>Robotaxi商业化落地：扩大运营范围，降低成本（如车路协同优化）。</li><li>车云一体化：云端训练+车端推理，提升决策效率。</li></ol><hr><p><strong>总结🚗💨</strong><br>萝卜快跑的核心技术涵盖感知、决策、车路协同、云平台、安全冗余、人机交互六大方面，其成功依赖于AI算法、高精地图、5G通信、大数据的深度融合。未来，随着AI大模型、无图化、车路协同等技术进步，Robotaxi将更智能、更安全、更高效。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 萝卜快跑 </tag>
            
            <tag> 智能交通 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 生成列</title>
      <link href="/posts/generated-columns.html"/>
      <url>/posts/generated-columns.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MySQL 生成列（Generated Column），也称为虚拟列，是一种特殊类型的列，其值由其他列的值通过表达式计算得出，而不是直接存储在表中。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>生成列分为两种类型：</p><ol><li>虚拟列（VIRTUAL）：值在查询时动态计算，不占用存储空间</li><li>存储列（STORED）：值在插入或更新时计算并存储，占用存储空间</li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>表达式支持：可以使用大多数MySQL表达式，包括算术运算、函数调用、CASE表达式等</li><li>约束：虚拟列可以有NOT NULL约束，但不能有DEFAULT或AUTO_INCREMENT约束</li><li>索引：存储列可以建立索引，虚拟列也可以（MySQL 5.7.6+）</li><li>外键：不能作为外键引用</li></ol><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>简化查询：避免在查询中重复计算</li><li>数据一致性：确保派生值始终与源数据一致</li><li>性能优化：对存储列建立索引可以提高查询性能</li></ol><h3 id="创建生成列"><a href="#创建生成列" class="headerlink" title="创建生成列"></a>创建生成列</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    full_name <span class="type">VARCHAR</span>(<span class="number">100</span>) GENERATED ALWAYS <span class="keyword">AS</span> (CONCAT(first_name, <span class="string">' '</span>, last_name)) VIRTUAL,</span><br><span class="line">    salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    annual_salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) GENERATED ALWAYS <span class="keyword">AS</span> (salary <span class="operator">*</span> <span class="number">12</span>) STORED</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h3 id="修改生成列"><a href="#修改生成列" class="headerlink" title="修改生成列"></a>修改生成列</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employees </span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> full_name <span class="type">VARCHAR</span>(<span class="number">100</span>) GENERATED ALWAYS <span class="keyword">AS</span> (CONCAT(first_name, <span class="string">' '</span>, last_name, <span class="string">' (Employee)'</span>)) VIRTUAL;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除生成列"><a href="#删除生成列" class="headerlink" title="删除生成列"></a>删除生成列</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employees <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> full_name;</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>• 虚拟列不能引用其他虚拟列</p><p>• 在MySQL 5.7中，只有存储列可以有索引</p><p>• 在MySQL 8.0中，虚拟列也可以有索引</p><p>• 虚拟列的值在查询时计算，可能影响性能（特别是复杂表达式）</p><h3 id="PHP-laravel中如何查找指定表中的生成列"><a href="#PHP-laravel中如何查找指定表中的生成列" class="headerlink" title="PHP laravel中如何查找指定表中的生成列"></a>PHP laravel中如何查找指定表中的生成列</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取指定表的生成列</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> string $tableName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getGeneratedColumns</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$tableName</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">   </span>{</span><br><span class="line">       <span class="variable">$database</span> = <span class="title function_ invoke__">env</span>(<span class="string">"DB_DATABASE"</span>);</span><br><span class="line">       <span class="variable">$cacheKey</span> = <span class="string">"db_generated_columns_<span class="subst">{$database}</span>_<span class="subst">{$tableName}</span>"</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">RedisService</span>::<span class="title function_ invoke__">cacheObject</span>(<span class="variable">$cacheKey</span>, [], function () <span class="keyword">use</span> ($<span class="title">tableName</span>, $<span class="title">database</span>) {</span><br><span class="line">           <span class="title">try</span> {</span><br><span class="line">               <span class="title">return</span> <span class="title">DB</span>::<span class="title">table</span>('<span class="title">information_schema</span>.<span class="title">COLUMNS</span>')</span><br><span class="line">                   -&gt;<span class="title">where</span>('<span class="title">TABLE_SCHEMA</span>', $<span class="title">database</span>)</span><br><span class="line">                   -&gt;<span class="title">where</span>('<span class="title">TABLE_NAME</span>', $<span class="title">tableName</span>)</span><br><span class="line">                   -&gt;<span class="title">whereIn</span>('<span class="title">EXTRA</span>', [</span><br><span class="line">                       '<span class="title">VIRTUAL</span> <span class="title">GENERATED</span>',</span><br><span class="line">                       '<span class="title">STORED</span> <span class="title">GENERATED</span>',</span><br><span class="line">                       '<span class="title">auto_increment</span>',     // 自增列</span><br><span class="line">                       '<span class="title">DEFAULT_GENERATED</span>',</span><br><span class="line">                       '<span class="title">DEFAULT_GENERATED</span> <span class="title">on</span> <span class="title">update</span> <span class="title">CURRENT_TIMESTAMP</span>',    // 时间戳列</span><br><span class="line">                       '<span class="title">on</span> <span class="title">update</span> <span class="title">CURRENT_TIMESTAMP</span>'     // 时间戳列</span><br><span class="line">                   ])</span><br><span class="line">                   -&gt;<span class="title">select</span>('<span class="title">COLUMN_NAME</span>')</span><br><span class="line">                   -&gt;<span class="title">pluck</span>('<span class="title">COLUMN_NAME</span>')</span><br><span class="line">                   -&gt;<span class="title">toArray</span>();</span><br><span class="line">           } <span class="keyword">catch</span> (\<span class="built_in">Throwable</span> <span class="variable">$e</span>) {</span><br><span class="line">               <span class="title class_">Log</span>::<span class="title function_ invoke__">error</span>(<span class="string">"Failed to get generated columns for table <span class="subst">{$tableName}</span> in database <span class="subst">{$database}</span>: "</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">               <span class="keyword">return</span> [];</span><br><span class="line">           }</span><br><span class="line">       });</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>虚拟列的内容不能修改，如果直接修改会报错，提示<code>The value specified for generated column 'sc_gmv' in table 'sc_storage_game' is not allowed.</code>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MySQL 生成列为数据库设计提供了强大的功能，可以简化应用逻辑、提高数据一致性并优化查询性能。在 Laravel 中，通过封装服务类并结合缓存机制，可以高效地管理和使用生成列。开发者应根据具体业务场景选择虚拟列或存储列，并注意相关限制和最佳实践。</p><p>通过合理使用生成列，可以显著提升数据库设计的灵活性和性能，同时保持代码的简洁性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 生成列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canal：MySQL 实时数据同步的核心解决方案</title>
      <link href="/posts/canal-mysql-data-sync.html"/>
      <url>/posts/canal-mysql-data-sync.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Canal-是什么？"><a href="#1-Canal-是什么？" class="headerlink" title="1. Canal 是什么？"></a><strong>1. Canal 是什么？</strong></h2><p>Canal（意为“运河”）是<strong>阿里巴巴开源</strong>的一款基于 <strong>MySQL 增量日志解析</strong> 的数据同步工具，主要用于实现 <strong>MySQL 实库到其他数据存储系统</strong>（如 Elasticsearch、Kafka、HBase、Redis 等）的<strong>实时数据同步</strong>。</p><p>它的工作原理是 <strong>模拟 MySQL 主从复制（Replication）</strong>，通过解析 MySQL 的 <strong>binlog（二进制日志）</strong> 来获取数据的变更（INSERT、UPDATE、DELETE），并将其同步到目标系统。</p><hr><h2 id="2-Canal-的核心架构"><a href="#2-Canal-的核心架构" class="headerlink" title="2. Canal 的核心架构"></a><strong>2. Canal 的核心架构</strong></h2><p>Canal 的架构主要包括以下几个部分：</p><h3 id="2-1-Canal-Server"><a href="#2-1-Canal-Server" class="headerlink" title="2.1 Canal Server"></a><strong>2.1 Canal Server</strong></h3><ul><li><strong>负责连接 MySQL</strong>，解析 binlog，并将数据变更发送给客户端。</li><li><strong>主要流程</strong>：<ol><li><strong>连接 MySQL</strong>：以 <code>Slave（从库）</code> 身份连接 MySQL <code>Master（主库）</code>。</li><li><strong>解析 binlog</strong>：监听 MySQL 的 binlog，解析其中的变更事件（INSERT/UPDATE/DELETE）。</li><li><strong>发送数据变更</strong>：将解析后的数据变更发送给 Canal Client（如 Kafka、Elasticsearch 等）。</li></ol></li></ul><h3 id="2-2-Canal-Client"><a href="#2-2-Canal-Client" class="headerlink" title="2.2 Canal Client"></a><strong>2.2 Canal Client</strong></h3><ul><li><strong>接收 Canal Server 发送的数据变更</strong>，并进行业务处理（如写入 Elasticsearch、Kafka、Redis 等）。</li><li><strong>支持容错机制</strong>：<ul><li><strong>断点续传</strong>：如果客户端宕机，重启后可以继续消费未处理的数据。</li><li><strong>重试机制</strong>：确保数据不丢失。</li></ul></li></ul><h3 id="2-3-MySQL"><a href="#2-3-MySQL" class="headerlink" title="2.3 MySQL"></a><strong>2.3 MySQL</strong></h3><ul><li><strong>作为数据源</strong>，提供 binlog 日志。</li></ul><hr><h2 id="3-Canal-的核心优势"><a href="#3-Canal-的核心优势" class="headerlink" title="3. Canal 的核心优势"></a><strong>3. Canal 的核心优势</strong></h2><div class="table-container"><table><thead><tr><th><strong>优势</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>实时性高</strong></td><td>基于 binlog 解析，数据变更几乎可以实时同步（毫秒级延迟）。</td></tr><tr><td><strong>低侵入性</strong></td><td>不需要修改 MySQL 或业务代码，只需配置 Canal 即可。</td></tr><tr><td><strong>支持多种数据源</strong></td><td>可以同步到 Elasticsearch、Kafka、HBase、Redis 等多种存储系统。</td></tr><tr><td><strong>高可用性</strong></td><td>支持集群部署，避免单点故障。</td></tr><tr><td><strong>灵活的数据过滤</strong></td><td>可以按表、库、SQL 条件过滤数据，减少不必要的同步。</td></tr></tbody></table></div><hr><h2 id="4-Canal-的典型应用场景"><a href="#4-Canal-的典型应用场景" class="headerlink" title="4. Canal 的典型应用场景"></a><strong>4. Canal 的典型应用场景</strong></h2><h3 id="4-1-数据同步到-Elasticsearch（搜索引擎）"><a href="#4-1-数据同步到-Elasticsearch（搜索引擎）" class="headerlink" title="4.1 数据同步到 Elasticsearch（搜索引擎）"></a><strong>4.1 数据同步到 Elasticsearch（搜索引擎）</strong></h3><ul><li><strong>场景</strong>：电商商品数据、日志数据实时同步到 Elasticsearch，支持全文搜索。</li><li><strong>优势</strong>：<ul><li>比传统的定时任务（如 Sqoop）更实时，减少搜索延迟。</li><li>适用于电商、日志分析、全文检索等场景。</li></ul></li></ul><h3 id="4-2-数据同步到-Kafka（消息队列）"><a href="#4-2-数据同步到-Kafka（消息队列）" class="headerlink" title="4.2 数据同步到 Kafka（消息队列）"></a><strong>4.2 数据同步到 Kafka（消息队列）</strong></h3><ul><li><strong>场景</strong>：订单数据、用户行为数据实时同步到 Kafka，供大数据分析、实时计算（如 Flink、Spark Streaming）使用。</li><li><strong>优势</strong>：<ul><li>比传统的数据库导出（如 CSV 导出）更高效，减少中间存储。</li><li>适用于实时计算、大数据分析、流处理等场景。</li></ul></li></ul><h3 id="4-3-数据同步到-Redis（缓存）"><a href="#4-3-数据同步到-Redis（缓存）" class="headerlink" title="4.3 数据同步到 Redis（缓存）"></a><strong>4.3 数据同步到 Redis（缓存）</strong></h3><ul><li><strong>场景</strong>：用户会话数据、热点数据实时同步到 Redis，提高访问速度。</li><li><strong>优势</strong>：<ul><li>比传统的缓存预热更实时，减少冷启动问题。</li><li>适用于高并发、缓存加速等场景。</li></ul></li></ul><h3 id="4-4-数据同步到-HBase（大数据存储）"><a href="#4-4-数据同步到-HBase（大数据存储）" class="headerlink" title="4.4 数据同步到 HBase（大数据存储）"></a><strong>4.4 数据同步到 HBase（大数据存储）</strong></h3><ul><li><strong>场景</strong>：日志数据、用户行为数据实时同步到 HBase，支持离线分析。</li><li><strong>优势</strong>：<ul><li>比传统的 ETL 工具更高效，减少数据延迟。</li><li>适用于大数据分析、离线计算等场景。</li></ul></li></ul><hr><h2 id="5-Canal-的安装与配置"><a href="#5-Canal-的安装与配置" class="headerlink" title="5. Canal 的安装与配置"></a><strong>5. Canal 的安装与配置</strong></h2><h3 id="5-1-安装-Canal-Server"><a href="#5-1-安装-Canal-Server" class="headerlink" title="5.1 安装 Canal Server"></a><strong>5.1 安装 Canal Server</strong></h3><h4 id="（1）下载-Canal"><a href="#（1）下载-Canal" class="headerlink" title="（1）下载 Canal"></a><strong>（1）下载 Canal</strong></h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/alibaba/canal/releases/download/canal-1.1.5/canal.deployer-1.1.5.tar.gz</span><br><span class="line">tar -zxvf canal.deployer-1.1.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> canal.deployer-1.1.5</span><br></pre></td></tr></tbody></table></figure><h4 id="（2）修改配置文件-conf-example-instance-properties"><a href="#（2）修改配置文件-conf-example-instance-properties" class="headerlink" title="（2）修改配置文件 conf/example/instance.properties"></a><strong>（2）修改配置文件 <code>conf/example/instance.properties</code></strong></h4><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL 连接信息</span></span><br><span class="line"><span class="attr">canal.instance.master.address</span>=<span class="string">127.0.0.1:3306</span></span><br><span class="line"><span class="attr">canal.instance.dbUsername</span>=<span class="string">canal</span></span><br><span class="line"><span class="attr">canal.instance.dbPassword</span>=<span class="string">canal</span></span><br><span class="line"><span class="comment"># binlog 解析配置</span></span><br><span class="line"><span class="attr">canal.instance.filter.regex</span>=<span class="string">.*\\..*  # 同步所有库表</span></span><br></pre></td></tr></tbody></table></figure><h4 id="（3）启动-Canal-Server"><a href="#（3）启动-Canal-Server" class="headerlink" title="（3）启动 Canal Server"></a><strong>（3）启动 Canal Server</strong></h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/startup.sh</span><br></pre></td></tr></tbody></table></figure><h4 id="（4）检查-Canal-是否运行"><a href="#（4）检查-Canal-是否运行" class="headerlink" title="（4）检查 Canal 是否运行"></a><strong>（4）检查 Canal 是否运行</strong></h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f logs/canal/canal.log</span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-配置-Canal-Client（以-Kafka-为例）"><a href="#5-2-配置-Canal-Client（以-Kafka-为例）" class="headerlink" title="5.2 配置 Canal Client（以 Kafka 为例）"></a><strong>5.2 配置 Canal Client（以 Kafka 为例）</strong></h3><ul><li>Canal 提供了 Kafka 客户端示例，可以接收 binlog 数据并写入 Kafka。</li><li><strong>配置 Kafka 生产者</strong>：<ul><li>将 Canal 解析的数据发送到 Kafka Topic。</li></ul></li></ul><hr><h2 id="6-Canal-的高级特性"><a href="#6-Canal-的高级特性" class="headerlink" title="6. Canal 的高级特性"></a><strong>6. Canal 的高级特性</strong></h2><h3 id="6-1-数据过滤"><a href="#6-1-数据过滤" class="headerlink" title="6.1 数据过滤"></a><strong>6.1 数据过滤</strong></h3><h4 id="按库-表过滤"><a href="#按库-表过滤" class="headerlink" title="按库/表过滤"></a><strong>按库/表过滤</strong></h4><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canal.instance.filter.regex</span>=<span class="string">.*\\..*  # 同步所有库表</span></span><br><span class="line"><span class="attr">canal.instance.filter.black.regex</span>=<span class="string">.test\\..  # 排除 test 库的所有表</span></span><br></pre></td></tr></tbody></table></figure><h4 id="按-SQL-条件过滤"><a href="#按-SQL-条件过滤" class="headerlink" title="按 SQL 条件过滤"></a><strong>按 SQL 条件过滤</strong></h4><ul><li>可以通过 <code>sqlPattern</code> 配置，只同步符合条件的 SQL（如 <code>UPDATE user SET name=? WHERE id=?</code>）。</li></ul><h3 id="6-2-数据格式转换"><a href="#6-2-数据格式转换" class="headerlink" title="6.2 数据格式转换"></a><strong>6.2 数据格式转换</strong></h3><ul><li><strong>JSON 格式化</strong>：Canal 可以将 binlog 数据转换为 JSON 格式，方便后续处理。</li><li><strong>字段映射</strong>：可以修改字段名或数据类型（如 MySQL 的 <code>INT</code> 转 Kafka 的 <code>STRING</code>）。</li></ul><h3 id="6-3-高可用与容灾"><a href="#6-3-高可用与容灾" class="headerlink" title="6.3 高可用与容灾"></a><strong>6.3 高可用与容灾</strong></h3><ul><li><strong>集群部署</strong>：Canal Server 可以部署多个节点，避免单点故障。</li><li><strong>断点续传</strong>：如果 Canal 客户端宕机，重启后可以继续消费未处理的数据。</li></ul><hr><h2 id="7-Canal-的常见问题与解决方案"><a href="#7-Canal-的常见问题与解决方案" class="headerlink" title="7. Canal 的常见问题与解决方案"></a><strong>7. Canal 的常见问题与解决方案</strong></h2><div class="table-container"><table><thead><tr><th><strong>问题</strong></th><th><strong>解决方案</strong></th></tr></thead><tbody><tr><td><strong>Canal 连接 MySQL 失败</strong></td><td>检查 MySQL 是否开启 binlog（<code>show variables like 'log_bin'</code>），并确保 Canal 有 <code>REPLICATION SLAVE</code> 权限。</td></tr><tr><td><strong>Canal 解析 binlog 出错</strong></td><td>检查 MySQL 的 binlog 格式（<code>show variables like 'binlog_format'</code>），推荐使用 <code>ROW</code> 格式。</td></tr><tr><td><strong>数据同步延迟</strong></td><td>检查网络延迟、Canal Server 负载，优化 Kafka/ES 的写入性能。</td></tr><tr><td><strong>Canal 客户端消费失败</strong></td><td>检查客户端日志，确保 Kafka/ES 等目标系统正常运行。</td></tr></tbody></table></div><hr><h2 id="8-Canal-的替代方案"><a href="#8-Canal-的替代方案" class="headerlink" title="8. Canal 的替代方案"></a><strong>8. Canal 的替代方案</strong></h2><div class="table-container"><table><thead><tr><th><strong>工具</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td><strong>Debezium</strong></td><td>基于 Kafka Connect 的开源 CDC（Change Data Capture）工具，支持多种数据库（MySQL、PostgreSQL、MongoDB 等）。</td></tr><tr><td><strong>Maxwell</strong></td><td>类似 Canal，但基于 Java 实现，支持 Kafka 输出。</td></tr><tr><td><strong>CDC（Change Data Capture）</strong></td><td>数据库原生 CDC（如 SQL Server 的 CDC、Oracle 的 GoldenGate）。</td></tr><tr><td><strong>Flink CDC</strong></td><td>基于 Flink 的 CDC 解决方案，支持实时数据同步和流处理。</td></tr></tbody></table></div><hr><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a><strong>9. 总结</strong></h2><p>Canal 是 <strong>MySQL 实时数据同步的核心解决方案</strong>，适用于：</p><ul><li><strong>Elasticsearch</strong>（搜索引擎同步）</li><li><strong>Kafka</strong>（大数据分析、实时计算）</li><li><strong>Redis</strong>（缓存同步）</li><li><strong>HBase</strong>（大数据存储）</li></ul><h3 id="核心优势"><a href="#核心优势" class="headerlink" title="核心优势"></a><strong>核心优势</strong></h3><p>✅ <strong>实时性高</strong>（毫秒级延迟）<br>✅ <strong>低侵入性</strong>（无需修改 MySQL 或业务代码）<br>✅ <strong>支持多种数据源</strong>（Elasticsearch、Kafka、HBase、Redis）<br>✅ <strong>高可用性</strong>（支持集群部署）<br>✅ <strong>灵活的数据过滤</strong>（按库、表、SQL 过滤）</p><h3 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a><strong>典型应用</strong></h3><p>🔹 <strong>搜索引擎同步</strong>（Elasticsearch）<br>🔹 <strong>大数据分析</strong>（Kafka + Flink/Spark）<br>🔹 <strong>缓存加速</strong>（Redis）<br>🔹 <strong>大数据存储</strong>（HBase）</p><h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a><strong>安装与配置</strong></h3><p>🚀 <strong>简单易用</strong>，支持 <strong>集群部署</strong> 和 <strong>容灾</strong>。</p><h3 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a><strong>替代方案</strong></h3><p>🔸 <strong>Debezium</strong>（Kafka Connect）<br>🔸 <strong>Maxwell</strong>（Java 实现）<br>🔸 <strong>Flink CDC</strong>（流处理 + CDC）</p><p><strong>如果需要 MySQL 实时数据同步，Canal 是一个非常成熟且高效的解决方案！ 🚀</strong></p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Canal </tag>
            
            <tag> 数据同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>熔断机制（Circuit Breaker）详解</title>
      <link href="/posts/circuit-breaker.html"/>
      <url>/posts/circuit-breaker.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>熔断机制是一种容错设计模式，用于防止系统在异常情况下持续恶化，避免级联故障。它类似于电路中的保险丝，在电流过大时自动断开，保护电路安全。</p><hr><p><strong>1. 熔断机制的核心原理</strong><br>熔断机制通常有三种状态：</p><ol><li><p>Closed（关闭状态）<br>• 正常工作，请求正常处理。</p><p>• 如果失败率达到阈值（如 50%），则触发熔断。</p></li><li><p>Open（打开状态）<br>• 直接拒绝请求，不执行实际逻辑（快速失败）。</p><p>• 经过一段时间（如 5s）后，进入 Half-Open（半开状态） 进行试探。</p></li><li><p>Half-Open（半开状态）<br>• 允许少量请求通过，如果成功率达到阈值（如 80%），则恢复 Closed 状态。</p><p>• 如果失败，则重新进入 Open 状态。</p></li></ol><hr><p><strong>2. 熔断机制的用途</strong></p><ol><li><p>防止级联故障<br>• 当某个服务不可用时，熔断机制可以阻止请求继续发送，避免拖垮整个系统。</p></li><li><p>提高系统稳定性<br>• 在服务异常时快速失败，避免资源耗尽（如 CPU、内存、数据库连接）。</p></li><li><p>自动恢复<br>• 在服务恢复后，自动尝试恢复请求，减少人工干预。</p></li></ol><hr><p><strong>3. PHP 实现熔断机制</strong><br>我们可以用 PHP 实现一个简单的熔断器（Circuit Breaker），基于 计数器 + 状态机 的方式。</p><p><strong>示例代码</strong><br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircuitBreaker</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$state</span> = <span class="string">'closed'</span>; <span class="comment">// closed, open, half-open</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$failureThreshold</span> = <span class="number">3</span>; <span class="comment">// 失败阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$failureCount</span> = <span class="number">0</span>; <span class="comment">// 当前失败次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$successThreshold</span> = <span class="number">2</span>; <span class="comment">// 半开状态下成功阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$halfOpenSuccessCount</span> = <span class="number">0</span>; <span class="comment">// 半开状态下成功次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$timeout</span> = <span class="number">5</span>; <span class="comment">// Open 状态持续时间（秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$lastFailureTime</span> = <span class="number">0</span>; <span class="comment">// 上次失败时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="keyword">callable</span> <span class="variable">$operation</span></span>) </span>{</span><br><span class="line">        <span class="variable">$currentTime</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否处于 Open 状态，并判断是否超时</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;state === <span class="string">'open'</span> &amp;&amp; (<span class="variable">$currentTime</span> - <span class="variable language_">$this</span>-&gt;lastFailureTime) &gt; <span class="variable language_">$this</span>-&gt;timeout) {</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;state = <span class="string">'half-open'</span>; <span class="comment">// 进入半开状态</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据状态决定是否执行操作</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;state === <span class="string">'open'</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">"Circuit breaker is OPEN. Request rejected."</span>);</span><br><span class="line">        } <span class="keyword">elseif</span> (<span class="variable language_">$this</span>-&gt;state === <span class="string">'half-open'</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable">$operation</span>();</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;halfOpenSuccessCount++;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;halfOpenSuccessCount &gt;= <span class="variable language_">$this</span>-&gt;successThreshold) {</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">reset</span>(); <span class="comment">// 恢复 Closed 状态</span></span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">            } <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) {</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">trip</span>(); <span class="comment">// 触发熔断</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="variable">$e</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> { <span class="comment">// closed 状态</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable">$operation</span>();</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;failureCount = <span class="number">0</span>; <span class="comment">// 重置失败计数</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">            } <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) {</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;failureCount++;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;lastFailureTime = <span class="variable">$currentTime</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;failureCount &gt;= <span class="variable language_">$this</span>-&gt;failureThreshold) {</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">trip</span>(); <span class="comment">// 触发熔断</span></span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">throw</span> <span class="variable">$e</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">trip</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="string">'open'</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;failureCount = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;halfOpenSuccessCount = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="string">'closed'</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;failureCount = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;halfOpenSuccessCount = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="variable">$breaker</span> = <span class="keyword">new</span> <span class="title class_">CircuitBreaker</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$breaker</span>-&gt;<span class="title function_ invoke__">execute</span>(function () {</span><br><span class="line">        <span class="comment">// 模拟一个可能失败的操作</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">rand</span>(<span class="number">0</span>, <span class="number">1</span>) === <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">"Service failed!"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Success!"</span>;</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span> . <span class="string">"\n"</span>;</span><br><span class="line">} <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>() . <span class="string">"\n"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><hr><p><strong>代码解析</strong></p><ol><li><p>状态管理<br>• <code>closed</code>：正常执行请求。</p><p>• <code>open</code>：直接拒绝请求，防止雪崩。</p><p>• <code>half-open</code>：允许少量请求试探服务是否恢复。</p></li><li><p>熔断触发条件<br>• 在 <code>closed</code> 状态下，如果失败次数超过阈值，则进入 <code>open</code> 状态。</p></li><li><p>自动恢复<br>• 在 <code>open</code> 状态下，经过 <code>timeout</code> 时间后进入 <code>half-open</code> 状态。</p><p>• 如果 <code>half-open</code> 状态下成功率达到阈值，则恢复 <code>closed</code> 状态。</p></li></ol><hr><p><strong>4. 实际应用场景</strong></p><ol><li><p>微服务调用<br>• 当某个服务不可用时，熔断机制可以防止请求堆积，保护调用方。</p></li><li><p>数据库查询<br>• 如果数据库响应过慢或超时，可以触发熔断，避免拖垮整个系统。</p></li><li><p>API 网关<br>• 在网关层实现熔断，保护后端服务不被异常流量击垮。</p></li></ol><hr><p><strong>5. 进阶优化</strong><br>• 动态调整阈值：根据系统负载动态调整失败阈值。</p><p>• 监控与告警：记录熔断事件，方便排查问题。</p><p>• 分布式熔断：在微服务架构中，可以使用 Hystrix（Java）、Resilience4j（Java）、Sentinel（Java/Go）等框架实现分布式熔断。</p><hr><p><strong>总结</strong><br>熔断机制是系统容错的重要手段，PHP 可以通过状态机实现简单的熔断逻辑。在实际项目中，建议使用成熟的熔断框架（如 Sentinel、Hystrix）来提高可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 熔断机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流算法</title>
      <link href="/posts/rate-limiting-algorithm.html"/>
      <url>/posts/rate-limiting-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>限流算法（Rate Limiting Algorithm）用于控制系统中请求的速率，以防止资源被过度消耗、保护系统免受高流量冲击以及确保服务的公平性和稳定性。常见的限流算法包括以下几种：</p><h3 id="1-固定窗口计数器（Fixed-Window-Counter）"><a href="#1-固定窗口计数器（Fixed-Window-Counter）" class="headerlink" title="1. 固定窗口计数器（Fixed Window Counter）"></a>1. 固定窗口计数器（Fixed Window Counter）</h3><p><strong>原理</strong>：<br>• 将时间划分为固定大小的窗口（如每分钟、每小时）。<br>• 在每个窗口内统计请求次数。<br>• 当请求次数超过阈值时，拒绝后续的请求。</p><p><strong>优点</strong>：<br>• 实现简单，易于理解。</p><p><strong>缺点</strong>：<br>• 可能出现“边界问题”，即在窗口切换时允许突发流量。例如，在窗口边界处可能允许两倍于阈值的请求。</p><p><strong>示例</strong>：<br>假设阈值为每分钟100个请求，窗口大小为1分钟。在00:00-00:01窗口内已经处理了100个请求，此时00:01窗口开始，可能再次接受100个请求，导致两分钟内瞬间处理200个请求。</p><h3 id="2-滑动窗口计数器（Sliding-Window-Counter）"><a href="#2-滑动窗口计数器（Sliding-Window-Counter）" class="headerlink" title="2. 滑动窗口计数器（Sliding Window Counter）"></a>2. 滑动窗口计数器（Sliding Window Counter）</h3><p><strong>原理</strong>：<br>• 将时间划分为更小的子窗口（如每秒一个子窗口）。<br>• 维护一个滑动时间窗口内的请求计数。<br>• 随着时间的推移，移除过期的子窗口数据，添加新的子窗口数据。</p><p><strong>优点</strong>：<br>• 相比固定窗口，滑动窗口能更平滑地控制请求速率，减少边界问题。</p><p><strong>缺点</strong>：<br>• 实现相对复杂，需要维护多个子窗口的数据。</p><p><strong>示例</strong>：<br>假设阈值为每分钟100个请求，划分为60个1秒的子窗口。滑动窗口包含最近60秒的子窗口数据，总和不超过100。</p><h3 id="3-滑动窗口日志（Sliding-Window-Log）"><a href="#3-滑动窗口日志（Sliding-Window-Log）" class="headerlink" title="3. 滑动窗口日志（Sliding Window Log）"></a>3. 滑动窗口日志（Sliding Window Log）</h3><p><strong>原理</strong>：<br>• 记录每个请求的时间戳。<br>• 当新的请求到来时，移除时间窗口之外的旧记录。<br>• 统计窗口内的请求数量是否超过阈值。</p><p><strong>优点</strong>：<br>• 精确控制请求速率，适用于需要严格限流的场景。</p><p><strong>缺点</strong>：<br>• 随着时间推移，日志记录会不断增加，占用大量存储空间，影响性能。</p><p><strong>示例</strong>：<br>维护一个请求时间戳的列表，每次请求到来时，删除超过1分钟的记录，然后统计剩余记录的数量。</p><h3 id="4-令牌桶（Token-Bucket）"><a href="#4-令牌桶（Token-Bucket）" class="headerlink" title="4. 令牌桶（Token Bucket）"></a>4. 令牌桶（Token Bucket）</h3><p><strong>原理</strong>：<br>• 系统以固定速率向桶中添加令牌。<br>• 每个请求需要消耗一个令牌才能被处理。<br>• 如果桶中没有足够的令牌，请求被拒绝或等待。</p><p><strong>优点</strong>：<br>• 允许一定程度的突发流量，因为桶中可以积累令牌。<br>• 平滑处理请求，适用于需要控制平均速率和突发流量的场景。</p><p><strong>缺点</strong>：<br>• 需要维护令牌桶的状态，实现相对复杂。</p><p><strong>示例</strong>：<br>桶的容量为100个令牌，每秒添加10个令牌。如果短时间内有大量请求，只要桶中有足够的令牌，这些请求都可以被处理。</p><h3 id="5-漏桶（Leaky-Bucket）"><a href="#5-漏桶（Leaky-Bucket）" class="headerlink" title="5. 漏桶（Leaky Bucket）"></a>5. 漏桶（Leaky Bucket）</h3><p><strong>原理</strong>：<br>• 请求作为水滴进入漏桶，漏桶以固定速率“漏水”（处理请求）。<br>• 如果漏桶满了，新的请求被拒绝或等待。</p><p><strong>优点</strong>：<br>• 强制请求以固定速率处理，避免突发流量对系统的影响。<br>• 适用于需要严格控制请求处理速率的场景。</p><p><strong>缺点</strong>：<br>• 不允许突发流量，可能导致请求延迟增加。</p><p><strong>示例</strong>：<br>漏桶的处理速率为每秒10个请求。如果短时间内有超过10个请求到达，超出的请求会被丢弃或在队列中等待处理。</p><h3 id="6-漏桶与令牌桶的对比"><a href="#6-漏桶与令牌桶的对比" class="headerlink" title="6. 漏桶与令牌桶的对比"></a>6. 漏桶与令牌桶的对比</h3><div class="table-container"><table><thead><tr><th>特性</th><th>令牌桶 (Token Bucket)</th><th>漏桶 (Leaky Bucket)</th></tr></thead><tbody><tr><td>流量控制</td><td>允许突发流量</td><td>平滑流量，不允许突发</td></tr><tr><td>处理方式</td><td>消耗令牌</td><td>固定速率处理请求</td></tr><tr><td>适用场景</td><td>需要允许一定突发流量的场景</td><td>需要严格控制请求处理速率的场景</td></tr><tr><td>实现复杂度</td><td>相对简单</td><td>相对复杂</td></tr></tbody></table></div><h3 id="7-分布式限流"><a href="#7-分布式限流" class="headerlink" title="7. 分布式限流"></a>7. 分布式限流</h3><p>在分布式系统中，单机限流算法无法满足需求，需要采用分布式限流策略。常见的方法包括：</p><p>• <strong>集中式存储</strong>：使用Redis等集中式存储来维护全局的限流状态，如令牌桶的当前令牌数。<br>• <strong>分布式算法</strong>：如基于一致性哈希的本地限流结合全局协调，或者使用分布式锁来同步限流状态。<br>• <strong>分布式限流框架</strong>：如Google的Rate Limiter、Envoy的限流模块等。</p><h3 id="8-实际应用中的选择"><a href="#8-实际应用中的选择" class="headerlink" title="8. 实际应用中的选择"></a>8. 实际应用中的选择</h3><p>• <strong>简单场景</strong>：如果系统规模较小，可以使用固定窗口计数器或滑动窗口计数器。<br>• <strong>需要平滑处理突发流量</strong>：令牌桶是一个不错的选择。<br>• <strong>严格控制请求速率</strong>：漏桶更适合。<br>• <strong>分布式环境</strong>：需要采用基于集中存储或分布式算法的限流方案。</p><h3 id="9-示例代码（令牌桶算法，Python）"><a href="#9-示例代码（令牌桶算法，Python）" class="headerlink" title="9. 示例代码（令牌桶算法，Python）"></a>9. 示例代码（令牌桶算法，Python）</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TokenBucket</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity, refill_rate</span>):</span><br><span class="line">        self.capacity = capacity    <span class="comment"># 桶的容量</span></span><br><span class="line">        self.tokens = capacity      <span class="comment"># 当前令牌数</span></span><br><span class="line">        self.refill_rate = refill_rate  <span class="comment"># 每秒填充的令牌数</span></span><br><span class="line">        self.last_refill_time = time.time()</span><br><span class="line">        self.lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refill</span>(<span class="params">self</span>):</span><br><span class="line">        now = time.time()</span><br><span class="line">        tokens_to_add = (now - self.last_refill_time) * self.refill_rate</span><br><span class="line">        <span class="keyword">with</span> self.lock:</span><br><span class="line">            self.tokens = <span class="built_in">min</span>(self.capacity, self.tokens + tokens_to_add)</span><br><span class="line">            self.last_refill_time = now</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">consume</span>(<span class="params">self, tokens=<span class="number">1</span></span>):</span><br><span class="line">        <span class="keyword">with</span> self.lock:</span><br><span class="line">            self.refill()</span><br><span class="line">            <span class="keyword">if</span> self.tokens &gt;= tokens:</span><br><span class="line">                self.tokens -= tokens</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">bucket = TokenBucket(capacity=<span class="number">100</span>, refill_rate=<span class="number">10</span>)  <span class="comment"># 每秒添加10个令牌，桶容量为100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_request</span>():</span><br><span class="line">    <span class="keyword">if</span> bucket.consume():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请求被处理"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"请求被限流"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟并发请求</span></span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">    t = threading.Thread(target=handle_request)</span><br><span class="line">    threads.append(t)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br></pre></td></tr></tbody></table></figure><h3 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h3><p>限流算法的选择取决于具体的应用场景和需求。在实际应用中，可能需要结合多种算法的优点，或者采用更高级的分布式限流策略来应对复杂的流量控制需求。</p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 限流 </tag>
            
            <tag> 高访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Redis的实时排行榜系统设计与实现</title>
      <link href="/posts/real-time-leaderboard-system.html"/>
      <url>/posts/real-time-leaderboard-system.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、核心设计原理"><a href="#一、核心设计原理" class="headerlink" title="一、核心设计原理"></a>一、核心设计原理</h2><h3 id="1-1-架构设计"><a href="#1-1-架构设计" class="headerlink" title="1.1 架构设计"></a>1.1 架构设计</h3><p>采用Redis ZSET+数据库双存储方案：</p><ul><li><strong>Redis ZSET</strong>：存储组合分数实现实时排序（时间复杂度O(logN)）</li><li><strong>数据库</strong>：持久化原始数据</li><li><strong>分布式锁</strong>：保证数据一致性</li></ul><h3 id="1-2-同分排序算法"><a href="#1-2-同分排序算法" class="headerlink" title="1.2 同分排序算法"></a>1.2 同分排序算法</h3><p><strong>组合分数公式</strong>：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复合分数 = 原始分数 × <span class="number">10</span>^<span class="number">11</span> + (<span class="number">10</span>^<span class="number">11</span> - 时间戳)</span><br></pre></td></tr></tbody></table></figure><p></p><ul><li>支持最大分数：999,999,999</li><li>时间覆盖范围：317年（10^11秒）</li></ul><h2 id="二、核心功能实现"><a href="#二、核心功能实现" class="headerlink" title="二、核心功能实现"></a>二、核心功能实现</h2><h3 id="2-1-数据更新流程"><a href="#2-1-数据更新流程" class="headerlink" title="2.1 数据更新流程"></a>2.1 数据更新流程</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SCALE_FACTOR</span> = <span class="number">10000</span>; <span class="comment">// 小数精度处理系数</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TIME_MOD</span> = <span class="number">100000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">updateScore</span>(<span class="params"><span class="variable">$user_id</span>, <span class="variable">$delta</span></span>) </span>{</span><br><span class="line">    <span class="title class_">Redis</span>::<span class="title function_ invoke__">lock</span>(<span class="string">'score_lock'</span>, function() <span class="keyword">use</span> ($<span class="title">user_id</span>, $<span class="title">delta</span>) {</span><br><span class="line">        // 数据库更新</span><br><span class="line">        <span class="title">DB</span>::<span class="title">transaction</span>(<span class="keyword">function</span>() <span class="title">use</span> ($<span class="title">user_id</span>, $<span class="title">delta</span>) {</span><br><span class="line">            <span class="title">User</span>::<span class="title">where</span>('<span class="title">id</span>', $<span class="title">user_id</span>)</span><br><span class="line">                -&gt;<span class="title">update</span>(['<span class="title">score</span>' =&gt; <span class="title">DB</span>::<span class="title">raw</span>("<span class="title">score</span> + $<span class="title">delta</span>")]);</span><br><span class="line">        });</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算复合分数</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$user_id</span>);</span><br><span class="line">        <span class="variable">$composite</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">calculateComposite</span>(<span class="variable">$user</span>-&gt;score);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Redis更新</span></span><br><span class="line">        <span class="title class_">Redis</span>::<span class="title function_ invoke__">zadd</span>(<span class="string">'leaderboard'</span>, [<span class="variable">$user_id</span> =&gt; <span class="variable">$composite</span>]);</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateComposite</span>(<span class="params"><span class="variable">$score</span></span>) </span>{</span><br><span class="line">    <span class="comment">// 处理小数（保留4位小数）</span></span><br><span class="line">    <span class="variable">$integer_score</span> = (<span class="keyword">int</span>)<span class="title function_ invoke__">round</span>(<span class="variable">$score</span> * SCALE_FACTOR); </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$integer_score</span> * TIME_MOD + (TIME_MOD - <span class="title function_ invoke__">time</span>());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-排行榜查询"><a href="#2-2-排行榜查询" class="headerlink" title="2.2 排行榜查询"></a>2.2 排行榜查询</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTopN</span>(<span class="params"><span class="variable">$limit</span> = <span class="number">50</span></span>) </span>{</span><br><span class="line">    <span class="variable">$raw</span> = <span class="title class_">Redis</span>::<span class="title function_ invoke__">zrevrange</span>(<span class="string">'leaderboard'</span>, <span class="number">0</span>, <span class="variable">$limit</span>-<span class="number">1</span>, [<span class="string">'WITHSCORES'</span> =&gt; <span class="literal">true</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_map</span>(function(<span class="variable">$uid</span>, <span class="variable">$composite</span>) {</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'user_id'</span> =&gt; <span class="variable">$uid</span>,</span><br><span class="line">            <span class="string">'score'</span> =&gt; <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parseComposite</span>(<span class="variable">$composite</span>),</span><br><span class="line">            <span class="string">'rank'</span> =&gt; <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getUserRank</span>(<span class="variable">$uid</span>)</span><br><span class="line">        ];</span><br><span class="line">    }, <span class="title function_ invoke__">array_keys</span>(<span class="variable">$raw</span>), <span class="variable">$raw</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">parseComposite</span>(<span class="params"><span class="variable">$composite</span></span>) </span>{</span><br><span class="line">    <span class="variable">$score_part</span> = (<span class="keyword">int</span>)(<span class="variable">$composite</span> / TIME_MOD);</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'original'</span> =&gt; <span class="variable">$score_part</span> / SCALE_FACTOR, <span class="comment">// 还原小数</span></span><br><span class="line">        <span class="string">'timestamp'</span> =&gt; TIME_MOD - (<span class="variable">$composite</span> % TIME_MOD)</span><br><span class="line">    ];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="三、单用户查询实现"><a href="#三、单用户查询实现" class="headerlink" title="三、单用户查询实现"></a>三、单用户查询实现</h2><h3 id="3-1-基础查询方法"><a href="#3-1-基础查询方法" class="headerlink" title="3.1 基础查询方法"></a>3.1 基础查询方法</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserRankInfo</span>(<span class="params"><span class="variable">$user_id</span></span>) </span>{</span><br><span class="line">    <span class="variable">$pipe</span> = <span class="title class_">Redis</span>::<span class="title function_ invoke__">pipeline</span>();</span><br><span class="line">    <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">zrevrank</span>(<span class="string">'leaderboard'</span>, <span class="variable">$user_id</span>);</span><br><span class="line">    <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">zscore</span>(<span class="string">'leaderboard'</span>, <span class="variable">$user_id</span>);</span><br><span class="line">    [<span class="variable">$rank</span>, <span class="variable">$composite</span>] = <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'user_id'</span> =&gt; <span class="variable">$user_id</span>,</span><br><span class="line">        <span class="string">'rank'</span> =&gt; <span class="variable">$rank</span> !== <span class="literal">null</span> ? <span class="variable">$rank</span> + <span class="number">1</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="string">'score'</span> =&gt; <span class="variable">$composite</span> ? <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parseComposite</span>(<span class="variable">$composite</span>) : <span class="literal">null</span></span><br><span class="line">    ];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-批量查询优化"><a href="#3-2-批量查询优化" class="headerlink" title="3.2 批量查询优化"></a>3.2 批量查询优化</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBatchUsersInfo</span>(<span class="params"><span class="variable">$user_ids</span></span>) </span>{</span><br><span class="line">    <span class="variable">$pipe</span> = <span class="title class_">Redis</span>::<span class="title function_ invoke__">pipeline</span>();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$user_ids</span> <span class="keyword">as</span> <span class="variable">$uid</span>) {</span><br><span class="line">        <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">zrevrank</span>(<span class="string">'leaderboard'</span>, <span class="variable">$uid</span>);</span><br><span class="line">        <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">zscore</span>(<span class="string">'leaderboard'</span>, <span class="variable">$uid</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="variable">$results</span> = <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$output</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$user_ids</span> <span class="keyword">as</span> <span class="variable">$i</span> =&gt; <span class="variable">$uid</span>) {</span><br><span class="line">        <span class="variable">$output</span>[] = [</span><br><span class="line">            <span class="string">'user_id'</span> =&gt; <span class="variable">$uid</span>,</span><br><span class="line">            <span class="string">'rank'</span> =&gt; <span class="variable">$results</span>[<span class="variable">$i</span>*<span class="number">2</span>] + <span class="number">1</span> ?? <span class="literal">null</span>,</span><br><span class="line">            <span class="string">'score'</span> =&gt; <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parseComposite</span>(<span class="variable">$results</span>[<span class="variable">$i</span>*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line">        ];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="四、小数分数处理方案"><a href="#四、小数分数处理方案" class="headerlink" title="四、小数分数处理方案"></a>四、小数分数处理方案</h2><h3 id="4-1-处理原则"><a href="#4-1-处理原则" class="headerlink" title="4.1 处理原则"></a>4.1 处理原则</h3><ol><li>将小数转换为整数处理（避免浮点精度问题）</li><li>计算公式：<figure class="highlight excel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">处理后分数 = 原始小数 × <span class="number">10</span>^<span class="built_in">N</span>（<span class="built_in">N</span>为需要保留的小数位数）</span><br></pre></td></tr></tbody></table></figure></li><li>推荐精度系数：<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SCALE_FACTOR</span> = <span class="number">10000</span>; <span class="comment">// 保留4位小数</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="4-2-完整处理流程"><a href="#4-2-完整处理流程" class="headerlink" title="4.2 完整处理流程"></a>4.2 完整处理流程</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小数转整数存储</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">floatToInt</span>(<span class="params"><span class="variable">$float_score</span></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)<span class="title function_ invoke__">round</span>(<span class="variable">$float_score</span> * SCALE_FACTOR);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整数还原小数</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">intToFloat</span>(<span class="params"><span class="variable">$int_score</span></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$int_score</span> / SCALE_FACTOR;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合分数生成（支持小数）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generateComposite</span>(<span class="params"><span class="variable">$original_score</span></span>) </span>{</span><br><span class="line">    <span class="variable">$int_score</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">floatToInt</span>(<span class="variable">$original_score</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$int_score</span> * TIME_MOD + (TIME_MOD - <span class="title function_ invoke__">time</span>());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="五、生产环境注意事项"><a href="#五、生产环境注意事项" class="headerlink" title="五、生产环境注意事项"></a>五、生产环境注意事项</h2><h3 id="5-1-性能优化策略"><a href="#5-1-性能优化策略" class="headerlink" title="5.1 性能优化策略"></a>5.1 性能优化策略</h3><div class="table-container"><table><thead><tr><th>优化措施</th><th>实现方式</th><th>效果提升</th></tr></thead><tbody><tr><td>管道批量操作</td><td>Redis Pipeline</td><td>减少80%延迟</td></tr><tr><td>本地缓存</td><td>缓存热点用户数据（LRU算法）</td><td>降低60%查询</td></tr><tr><td>数据分片</td><td>按用户ID哈希分片</td><td>支持亿级数据</td></tr></tbody></table></div><h3 id="5-2-异常处理机制"><a href="#5-2-异常处理机制" class="headerlink" title="5.2 异常处理机制"></a>5.2 异常处理机制</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRankWithFallback</span>(<span class="params"><span class="variable">$user_id</span></span>) </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getUserRankInfo</span>(<span class="variable">$user_id</span>);</span><br><span class="line">    } <span class="keyword">catch</span> (RedisException <span class="variable">$e</span>) {</span><br><span class="line">        <span class="comment">// 降级数据库查询</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$user_id</span>);</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'user_id'</span> =&gt; <span class="variable">$user_id</span>,</span><br><span class="line">            <span class="string">'score'</span> =&gt; <span class="variable">$user</span>-&gt;score,</span><br><span class="line">            <span class="string">'updated_at'</span> =&gt; <span class="variable">$user</span>-&gt;updated_at</span><br><span class="line">        ];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="六、常见问题解决方案"><a href="#六、常见问题解决方案" class="headerlink" title="六、常见问题解决方案"></a>六、常见问题解决方案</h2><h3 id="6-1-分数溢出处理"><a href="#6-1-分数溢出处理" class="headerlink" title="6.1 分数溢出处理"></a>6.1 分数溢出处理</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最大支持分数计算</span></span><br><span class="line"><span class="variable">$max_score</span> = (PHP_INT_MAX - TIME_MOD) / TIME_MOD / SCALE_FACTOR;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新时检查边界</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">safeUpdate</span>(<span class="params"><span class="variable">$user_id</span>, <span class="variable">$delta</span></span>) </span>{</span><br><span class="line">    <span class="variable">$current</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$user_id</span>)-&gt;score;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$current</span> + <span class="variable">$delta</span> &gt; <span class="variable">$max_score</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ScoreOverflowException</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">updateScore</span>(<span class="variable">$user_id</span>, <span class="variable">$delta</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-2-时间回拨处理"><a href="#6-2-时间回拨处理" class="headerlink" title="6.2 时间回拨处理"></a>6.2 时间回拨处理</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用单调递增计数器替代时间戳</span></span><br><span class="line"><span class="variable">$timestep</span> = <span class="title class_">Redis</span>::<span class="title function_ invoke__">incr</span>(<span class="string">'global_timestep'</span>);</span><br><span class="line"><span class="variable">$composite</span> = <span class="variable">$int_score</span> * TIME_MOD + (TIME_MOD - <span class="variable">$timestep</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="七、扩展应用场景"><a href="#七、扩展应用场景" class="headerlink" title="七、扩展应用场景"></a>七、扩展应用场景</h2><h3 id="7-1-多维度排行榜"><a href="#7-1-多维度排行榜" class="headerlink" title="7.1 多维度排行榜"></a>7.1 多维度排行榜</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMultiDimensionRank</span>(<span class="params"><span class="variable">$user_id</span></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'global'</span> =&gt; <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getGlobalRank</span>(<span class="variable">$user_id</span>),</span><br><span class="line">        <span class="string">'friends'</span> =&gt; <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getFriendRank</span>(<span class="variable">$user_id</span>),</span><br><span class="line">        <span class="string">'regional'</span> =&gt; <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRegionalRank</span>(<span class="variable">$user_id</span>)</span><br><span class="line">    ];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-2-实时进度显示"><a href="#7-2-实时进度显示" class="headerlink" title="7.2 实时进度显示"></a>7.2 实时进度显示</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateRankDisplay</span>(<span class="params">data</span>) {</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'rank'</span>).<span class="property">innerHTML</span> = data.<span class="property">rank</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'score'</span>).<span class="property">innerHTML</span> = data.<span class="property">score</span>.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="title function_">drawProgressBar</span>(data.<span class="property">percentile</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="八、总结建议"><a href="#八、总结建议" class="headerlink" title="八、总结建议"></a>八、总结建议</h2><ol><li><p><strong>小数处理原则</strong>：</p><ul><li>必须将小数转换为整数处理</li><li>推荐使用<code>SCALE_FACTOR=10000</code>保留4位小数</li><li>注意溢出风险（PHP_INT_MAX最大值限制）</li></ul></li><li><p><strong>性能基准参考</strong>：</p><ul><li>单机支持：50,000+ QPS</li><li>更新延迟：&lt;5ms（P99）</li><li>查询延迟：&lt;2ms（Top100查询）</li></ul></li><li><p><strong>推荐配置</strong>：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">connections:</span></span><br><span class="line">    <span class="attr">leaderboard:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">redis-cluster.example.com</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">read_timeout:</span> <span class="number">0.5</span></span><br><span class="line">      <span class="attr">persistent:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p>本方案已在多个千万级用户产品中验证，日均处理超过2亿次分数更新，建议根据实际业务场景调整小数精度和分片策略。</p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> PHP </tag>
            
            <tag> 排行榜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境下MySQL数据库导入导出完整指南</title>
      <link href="/posts/b820.html"/>
      <url>/posts/b820.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、数据库导出操作"><a href="#一、数据库导出操作" class="headerlink" title="一、数据库导出操作"></a>一、数据库导出操作</h2><h3 id="1-1-导出指定数据表"><a href="#1-1-导出指定数据表" class="headerlink" title="1.1 导出指定数据表"></a>1.1 导出指定数据表</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -h [主机地址] -u [用户名] -p[密码] [数据库名] [表名] &gt; /path/to/output_file.sql</span><br></pre></td></tr></tbody></table></figure><p><strong>参数说明：</strong></p><ul><li><code>-h</code>：数据库服务器地址（本地可省略）</li><li><code>-u</code>：MySQL用户名</li><li><code>-p</code>：密码（注意-p与密码之间无空格）</li><li><code>&gt;</code>：重定向输出到文件</li></ul><p><strong>安全操作建议：</strong><br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐方式（密码交互式输入）</span></span><br><span class="line">mysqldump -h 192.168.1.100 -u root -p mydb <span class="built_in">users</span> &gt; backup_users.sql</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="1-2-导出整个数据库"><a href="#1-2-导出整个数据库" class="headerlink" title="1.2 导出整个数据库"></a>1.2 导出整个数据库</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -h [主机地址] -u [用户名] -p[密码] [数据库名] &gt; /path/to/full_dump.sql</span><br></pre></td></tr></tbody></table></figure><p><strong>高级导出选项：</strong><br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出并压缩（适用于大数据库）</span></span><br><span class="line">mysqldump -u root -p mydb | gzip &gt; mydb_backup.sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅导出表结构</span></span><br><span class="line">mysqldump -u root -p --no-data mydb &gt; schema_only.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出时忽略指定表</span></span><br><span class="line">mysqldump -u root -p mydb --ignore-table=mydb.logs &gt; exclude_logs.sql</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="二、数据库导入操作"><a href="#二、数据库导入操作" class="headerlink" title="二、数据库导入操作"></a>二、数据库导入操作</h2><h3 id="2-1-基本导入命令"><a href="#2-1-基本导入命令" class="headerlink" title="2.1 基本导入命令"></a>2.1 基本导入命令</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h [主机地址] -u [用户名] -p[密码] [数据库名] &lt; /path/to/input_file.sql</span><br></pre></td></tr></tbody></table></figure><p><strong>典型使用场景：</strong><br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入完整数据库</span></span><br><span class="line">mysql -u root -p mydb &lt; full_dump.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入指定表数据</span></span><br><span class="line">mysql -u root -p mydb &lt; users_data.sql</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="2-2-常见错误处理方案"><a href="#2-2-常见错误处理方案" class="headerlink" title="2.2 常见错误处理方案"></a>2.2 常见错误处理方案</h3><p><strong>错误示例：</strong><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">1227</span> (<span class="number">42000</span>) <span class="keyword">at</span> line <span class="number">18</span>: Access denied; you need (<span class="keyword">at</span> least <span class="keyword">one</span> <span class="keyword">of</span>) the SUPER privilege(s) <span class="keyword">for</span> this operation</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>解决方案：</strong></p><ol><li><p>打开SQL文件查找权限相关语句</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim input_file.sql</span><br></pre></td></tr></tbody></table></figure></li><li><p>注释或删除以下类型语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!50503 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@GLOBAL</span>.gtid_purged<span class="operator">=</span><span class="string">'...'</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>保存文件后重新导入</p></li></ol><p><strong>预防措施（导出时添加参数）：</strong><br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --set-gtid-purged=OFF -u root -p mydb &gt; clean_dump.sql</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="三、高级操作技巧"><a href="#三、高级操作技巧" class="headerlink" title="三、高级操作技巧"></a>三、高级操作技巧</h2><h3 id="3-1-导出时排除触发器-事件"><a href="#3-1-导出时排除触发器-事件" class="headerlink" title="3.1 导出时排除触发器/事件"></a>3.1 导出时排除触发器/事件</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不导出触发器</span></span><br><span class="line">mysqldump --skip-triggers -u root -p mydb &gt; no_triggers.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不导出事件</span></span><br><span class="line">mysqldump --skip-events -u root -p mydb &gt; no_events.sql</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-分块导出大表"><a href="#3-2-分块导出大表" class="headerlink" title="3.2 分块导出大表"></a>3.2 分块导出大表</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按行数分块导出</span></span><br><span class="line">mysqldump -u root -p --<span class="built_in">where</span>=<span class="string">"1 LIMIT 0,1000000"</span> mydb big_table &gt; part1.sql</span><br><span class="line">mysqldump -u root -p --<span class="built_in">where</span>=<span class="string">"1 LIMIT 1000000,1000000"</span> mydb big_table &gt; part2.sql</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-导入进度显示"><a href="#3-3-导入进度显示" class="headerlink" title="3.3 导入进度显示"></a>3.3 导入进度显示</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用pv工具监控进度</span></span><br><span class="line">pv input_file.sql | mysql -u root -p mydb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装pv：yum install pv 或 apt-get install pv</span></span><br></pre></td></tr></tbody></table></figure><h2 id="四、生产环境注意事项"><a href="#四、生产环境注意事项" class="headerlink" title="四、生产环境注意事项"></a>四、生产环境注意事项</h2><h3 id="4-1-权限管理规范"><a href="#4-1-权限管理规范" class="headerlink" title="4.1 权限管理规范"></a>4.1 权限管理规范</h3><div class="table-container"><table><thead><tr><th>操作类型</th><th>所需权限</th></tr></thead><tbody><tr><td>完整导出</td><td>SELECT, LOCK TABLES</td></tr><tr><td>部分表导出</td><td>SELECT 权限</td></tr><tr><td>数据库导入</td><td>CREATE, INSERT, ALTER 等</td></tr></tbody></table></div><h3 id="4-2-版本兼容性处理"><a href="#4-2-版本兼容性处理" class="headerlink" title="4.2 版本兼容性处理"></a>4.2 版本兼容性处理</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出时指定兼容模式</span></span><br><span class="line">mysqldump --compatible=ansi -u root -p mydb &gt; compatible.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跨版本迁移建议流程：</span></span><br><span class="line">源服务器导出 -&gt; 转换字符集 -&gt; 目标服务器导入验证</span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-日志记录与验证"><a href="#4-3-日志记录与验证" class="headerlink" title="4.3 日志记录与验证"></a>4.3 日志记录与验证</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记录导入导出操作日志</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"[<span class="subst">$(date)</span>] 开始导出数据库"</span></span><br><span class="line">    mysqldump -u root -p mydb &gt; backup.sql</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"[<span class="subst">$(date)</span>] 导出完成，文件大小: <span class="subst">$(du -h backup.sql)</span>"</span></span><br><span class="line">} &gt;&gt; /var/log/db_ops.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证备份完整性</span></span><br><span class="line">mysqlcheck -u root -p --check-upgrade mydb</span><br></pre></td></tr></tbody></table></figure><h2 id="五、典型问题解决方案"><a href="#五、典型问题解决方案" class="headerlink" title="五、典型问题解决方案"></a>五、典型问题解决方案</h2><h3 id="5-1-中文乱码问题"><a href="#5-1-中文乱码问题" class="headerlink" title="5.1 中文乱码问题"></a>5.1 中文乱码问题</h3><p><strong>导出时指定字符集：</strong><br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p --default-character-set=utf8mb4 mydb &gt; utf8_backup.sql</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>导入时设置字符集：</strong><br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p --default-character-set=utf8mb4 mydb &lt; backup.sql</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="5-2-存储引擎不兼容"><a href="#5-2-存储引擎不兼容" class="headerlink" title="5.2 存储引擎不兼容"></a>5.2 存储引擎不兼容</h3><p><strong>转换存储引擎：</strong><br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/ENGINE=MyISAM/ENGINE=InnoDB/g'</span> backup.sql</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="5-3-外键约束冲突"><a href="#5-3-外键约束冲突" class="headerlink" title="5.3 外键约束冲突"></a>5.3 外键约束冲突</h3><p><strong>导入时临时禁用外键检查：</strong><br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在SQL文件开头添加 */</span></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在文件结尾恢复 */</span></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="六、自动化脚本示例"><a href="#六、自动化脚本示例" class="headerlink" title="六、自动化脚本示例"></a>六、自动化脚本示例</h2><h3 id="6-1-自动备份脚本"><a href="#6-1-自动备份脚本" class="headerlink" title="6.1 自动备份脚本"></a>6.1 自动备份脚本</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=$(<span class="built_in">date</span> +%Y%m%d)</span><br><span class="line">BACKUP_DIR=<span class="string">"/data/backups"</span></span><br><span class="line">DB_NAME=<span class="string">"mydb"</span></span><br><span class="line">USER=<span class="string">"root"</span></span><br><span class="line"></span><br><span class="line">mysqldump -u <span class="variable">$USER</span> -p<span class="variable">$PASSWORD</span> --single-transaction <span class="variable">$DB_NAME</span> | gzip &gt; <span class="variable">$BACKUP_DIR</span>/<span class="variable">${DB_NAME}</span>_<span class="variable">${DATE}</span>.sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留最近7天备份</span></span><br><span class="line">find <span class="variable">$BACKUP_DIR</span> -name <span class="string">"*.sql.gz"</span> -<span class="built_in">type</span> f -mtime +7 -delete</span><br></pre></td></tr></tbody></table></figure><h3 id="6-2-自动恢复脚本"><a href="#6-2-自动恢复脚本" class="headerlink" title="6.2 自动恢复脚本"></a>6.2 自动恢复脚本</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">INPUT_FILE=<span class="variable">$1</span></span><br><span class="line">DB_NAME=<span class="string">"mydb"</span></span><br><span class="line">USER=<span class="string">"root"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预处理SQL文件</span></span><br><span class="line">sed -i <span class="string">'/^SET @@/d'</span> <span class="variable">$INPUT_FILE</span></span><br><span class="line">sed -i <span class="string">'/^CREATE ALGORITHM=/d'</span> <span class="variable">$INPUT_FILE</span></span><br><span class="line"></span><br><span class="line">mysql -u <span class="variable">$USER</span> -p<span class="variable">$PASSWORD</span> <span class="variable">$DB_NAME</span> &lt; <span class="variable">$INPUT_FILE</span></span><br></pre></td></tr></tbody></table></figure><h2 id="七、最佳实践总结"><a href="#七、最佳实践总结" class="headerlink" title="七、最佳实践总结"></a>七、最佳实践总结</h2><ol><li><p><strong>安全规范</strong></p><ul><li>使用mysql_config_editor存储登录凭证</li><li>设置备份文件权限为600</li><li>定期测试备份恢复流程</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>大数据库使用<code>--single-transaction</code>参数</li><li>启用<code>--quick</code>模式加速导出</li><li>并行导出多个表：<code>mydumper</code>工具</li></ul></li><li><p><strong>监控指标</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监控备份文件大小变化</span></span><br><span class="line">watch -n 3600 <span class="string">'du -h /backups | tail -n1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查最后一次备份时间</span></span><br><span class="line"><span class="built_in">ls</span> -lht /backups | <span class="built_in">head</span> -n2</span><br></pre></td></tr></tbody></table></figure></li></ol><p>通过掌握这些技巧，我们可以高效安全地管理MySQL数据库的导入导出操作。建议至少每月进行一次完整的备份恢复演练，确保在紧急情况下能快速恢复数据。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis中，如何批量删除匹配特定模式的键</title>
      <link href="/posts/be86.html"/>
      <url>/posts/be86.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 <code>redis-cli</code> 中，我们可以使用批量删除命令来删除匹配特定模式的键。以下是步骤：</p><ol><li>使用 <code>KEYS</code> 命令找到要删除的键。</li><li>使用 <code>xargs</code> 和 <code>DEL</code> 命令批量删除这些键。</li></ol><p>以下是完整的命令：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --scan --pattern <span class="string">"monitor_log*"</span> | xargs redis-cli del</span><br><span class="line">或者</span><br><span class="line">redis-cli -h xxx.com -p 6379 -n 0 --scan --pattern <span class="string">"monitor_log*"</span> | xargs redis-cli -h xxx.com -p 6379 -n 0 del</span><br></pre></td></tr></tbody></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li><code>redis-cli --scan --pattern "monitor_log*"</code>：使用 <code>--scan</code> 选项和 <code>--pattern</code> 选项查找匹配 <code>monitor_log*</code> 模式的所有键。这比 <code>KEYS</code> 命令更高效，因为 <code>SCAN</code> 命令不会阻塞 Redis 服务器。</li><li><code>xargs redis-cli del</code>：使用 <code>xargs</code> 将找到的键传递给 <code>redis-cli del</code> 命令，以批量删除这些键。</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><code>SCAN</code> 命令用于大数据集，因为它可以增量地查找键，而不会阻塞 Redis 服务器。</li><li><code>xargs</code> 命令将输入逐行传递给 <code>redis-cli del</code> 命令，确保所有匹配的键都被删除。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设你有以下键：</p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mo<span class="symbol">nitor_log1</span></span><br><span class="line">mo<span class="symbol">nitor_log2</span></span><br><span class="line">mo<span class="symbol">nitor_log3</span></span><br></pre></td></tr></tbody></table></figure><p>运行上述命令将删除所有这些键。</p><h3 id="执行前确认"><a href="#执行前确认" class="headerlink" title="执行前确认"></a>执行前确认</h3><p>为了确保没有误删关键数据，建议首先运行以下命令查看将要删除的键：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --scan --pattern <span class="string">"monitor_log*"</span></span><br></pre></td></tr></tbody></table></figure><p>确认输出无误后，再运行批量删除命令：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --scan --pattern <span class="string">"monitor_log*"</span> | xargs redis-cli del</span><br></pre></td></tr></tbody></table></figure><p>通过这些步骤，我们可以快速且安全地删除 Redis 中匹配特定模式的键。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兔子繁殖问题</title>
      <link href="/posts/rabbit-reproduction-problem.html"/>
      <url>/posts/rabbit-reproduction-problem.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>兔子繁殖问题是一个经典的递归问题，通常用于引导学习动态规划和递归。在这个问题中，假设有一对兔子，每个月这对兔子会生出一对新兔子，新兔子在第二个月开始也会生出新兔子。问题是：经过 $ n $ 个月后，会有多少对兔子？</p><h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><p>如果我们定义 $ F(n) $ 为第 $ n $ 个月的兔子对数，那么状态转移方程为：</p><script type="math/tex; mode=display">F(n) = F(n-1) + F(n-2)</script><p>其中：</p><ul><li>$ F(1) = 1 $</li><li>$ F(2) = 1 $</li></ul><p>这是因为第 $ n $ 个月的兔子对数等于前一个月的兔子对数加上再前一个月的兔子对数。</p><h3 id="动态规划实现-PHP"><a href="#动态规划实现-PHP" class="headerlink" title="动态规划实现 (PHP)"></a>动态规划实现 (PHP)</h3><p>我们可以使用动态规划来高效地解决这个问题。下面是用 PHP 实现的代码：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rabbitPairs</span>(<span class="params"><span class="variable">$n</span></span>) </span>{</span><br><span class="line">    <span class="comment">// 如果 n 为 1 或 2，直接返回 1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> &lt;= <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化动态规划数组</span></span><br><span class="line">    <span class="variable">$dp</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span> + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$dp</span>[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="variable">$dp</span>[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算每个月的兔子对数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">3</span>; <span class="variable">$i</span> &lt;= <span class="variable">$n</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$dp</span>[<span class="variable">$i</span>] = <span class="variable">$dp</span>[<span class="variable">$i</span> - <span class="number">1</span>] + <span class="variable">$dp</span>[<span class="variable">$i</span> - <span class="number">2</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回第 n 个月的兔子对数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$dp</span>[<span class="variable">$n</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试函数</span></span><br><span class="line"><span class="variable">$months</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"经过 <span class="subst">$months</span> 个月后，会有 "</span> . <span class="title function_ invoke__">rabbitPairs</span>(<span class="variable">$months</span>) . <span class="string">" 对兔子。\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li><strong>初始条件</strong>：当 $ n $ 为 1 或 2 时，兔子对数为 1。</li><li><strong>动态规划数组</strong>：<code>$dp</code> 用于存储每个月的兔子对数，初始化为长度为 $ n+1 $ 的数组，所有元素初始为 0。</li><li><strong>状态转移</strong>：通过循环，从第 3 个月开始计算，每个月的兔子对数等于前一个月的兔子对数加上再前一个月的兔子对数。</li><li><strong>返回结果</strong>：最终返回第 $ n $ 个月的兔子对数。</li></ol><p>通过这种方法，可以在 $ O(n) $ 的时间复杂度内计算出任意 $ n $ 个月后的兔子对数。</p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 兔子繁殖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划（DP）技术精讲与PHP实战</title>
      <link href="/posts/dynamic-programming-php.html"/>
      <url>/posts/dynamic-programming-php.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、动态规划核心原理"><a href="#一、动态规划核心原理" class="headerlink" title="一、动态规划核心原理"></a>一、动态规划核心原理</h2><h3 id="1-1-基本概念解析"><a href="#1-1-基本概念解析" class="headerlink" title="1.1 基本概念解析"></a>1.1 基本概念解析</h3><p>动态规划（Dynamic Programming）是一种通过<strong>分解问题</strong>和<strong>存储中间结果</strong>来高效解决复杂问题的算法范式。其本质是通过构建状态转移方程，将具有<strong>重叠子问题</strong>和<strong>最优子结构</strong>特性的问题进行递归求解。</p><h4 id="关键特性："><a href="#关键特性：" class="headerlink" title="关键特性："></a>关键特性：</h4><ul><li><strong>重叠子问题</strong>：同一子问题会被多次重复计算</li><li><strong>最优子结构</strong>：局部最优解能组合成全局最优解</li><li><strong>状态转移</strong>：通过前驱状态推导当前状态</li></ul><h3 id="1-2-技术演进路线"><a href="#1-2-技术演进路线" class="headerlink" title="1.2 技术演进路线"></a>1.2 技术演进路线</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">问题分析 → 定义状态 → 状态转移方程 → 实现方案 → 优化策略</span><br></pre></td></tr></tbody></table></figure><h2 id="二、经典问题PHP实现"><a href="#二、经典问题PHP实现" class="headerlink" title="二、经典问题PHP实现"></a>二、经典问题PHP实现</h2><h3 id="2-1-斐波那契数列（递推优化）"><a href="#2-1-斐波那契数列（递推优化）" class="headerlink" title="2.1 斐波那契数列（递推优化）"></a>2.1 斐波那契数列（递推优化）</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params"><span class="variable">$n</span></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="variable">$n</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用滚动数组优化空间复杂度</span></span><br><span class="line">    <span class="variable">$prev_prev</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$prev</span> = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">2</span>; <span class="variable">$i</span> &lt;= <span class="variable">$n</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$current</span> = <span class="variable">$prev_prev</span> + <span class="variable">$prev</span>;</span><br><span class="line">        <span class="variable">$prev_prev</span> = <span class="variable">$prev</span>;</span><br><span class="line">        <span class="variable">$prev</span> = <span class="variable">$current</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$prev</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>算法分析</strong>：</p><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li><li>应用场景：递推数列、动态规划初始化</li></ul><h3 id="2-2-背包问题（二维DP优化）"><a href="#2-2-背包问题（二维DP优化）" class="headerlink" title="2.2 背包问题（二维DP优化）"></a>2.2 背包问题（二维DP优化）</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">knapsackOptimized</span>(<span class="params"><span class="variable">$weights</span>, <span class="variable">$values</span>, <span class="variable">$capacity</span></span>) </span>{</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$weights</span>);</span><br><span class="line">    <span class="comment">// 使用一维数组压缩空间</span></span><br><span class="line">    <span class="variable">$dp</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$capacity</span> + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$w</span> = <span class="variable">$capacity</span>; <span class="variable">$w</span> &gt;= weights[<span class="variable">$i</span>]; <span class="variable">$w</span>--) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$dp</span>[w - weights[<span class="variable">$i</span>]] + values[<span class="variable">$i</span>] &gt; <span class="variable">$dp</span>[w]) {</span><br><span class="line">                <span class="variable">$dp</span>[w] = <span class="variable">$dp</span>[w - weights[<span class="variable">$i</span>]] + values[<span class="variable">$i</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$dp</span>[<span class="variable">$capacity</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>算法分析</strong>：</p><ul><li>时间复杂度：O(nW)（n物品数，W容量）</li><li>空间复杂度：O(W)</li><li>变种类型：0/1背包、完全背包、多重背包</li></ul><h3 id="2-3-最长公共子序列（LCS）"><a href="#2-3-最长公共子序列（LCS）" class="headerlink" title="2.3 最长公共子序列（LCS）"></a>2.3 最长公共子序列（LCS）</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lcsMatrix</span>(<span class="params"><span class="variable">$str1</span>, <span class="variable">$str2</span></span>) </span>{</span><br><span class="line">    <span class="variable">$m</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$str1</span>);</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>);</span><br><span class="line">    <span class="variable">$dp</span> = [[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ in <span class="title function_ invoke__">range</span>(m+<span class="number">1</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;=<span class="variable">$m</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">1</span>; <span class="variable">$j</span>&lt;=<span class="variable">$n</span>; <span class="variable">$j</span>++) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$str1</span>[<span class="variable">$i</span>-<span class="number">1</span>] === <span class="variable">$str2</span>[<span class="variable">$j</span>-<span class="number">1</span>]) {</span><br><span class="line">                <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$dp</span>[<span class="variable">$i</span>-<span class="number">1</span>][<span class="variable">$j</span>-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="title function_ invoke__">max</span>(<span class="variable">$dp</span>[<span class="variable">$i</span>-<span class="number">1</span>][<span class="variable">$j</span>], <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>-<span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$dp</span>[<span class="variable">$m</span>][<span class="variable">$n</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空间优化版本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lcsSpaceOptimized</span>(<span class="params"><span class="variable">$str1</span>, <span class="variable">$str2</span></span>) </span>{</span><br><span class="line">    <span class="variable">$prevRow</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>)+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;=<span class="title function_ invoke__">strlen</span>(<span class="variable">$str1</span>); <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$currRow</span> = [<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">1</span>; <span class="variable">$j</span>&lt;=<span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>); <span class="variable">$j</span>++) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$str1</span>[<span class="variable">$i</span>-<span class="number">1</span>] === <span class="variable">$str2</span>[<span class="variable">$j</span>-<span class="number">1</span>]) {</span><br><span class="line">                <span class="variable">$currRow</span>[] = <span class="variable">$prevRow</span>[<span class="variable">$j</span>-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="variable">$currRow</span>[] = <span class="title function_ invoke__">max</span>(<span class="variable">$prevRow</span>[<span class="variable">$j</span>], <span class="variable">$currRow</span>[<span class="variable">$j</span>-<span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="variable">$prevRow</span> = <span class="variable">$currRow</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$prevRow</span>[-<span class="number">1</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>算法分析</strong>：</p><ul><li>时间复杂度：O(mn)</li><li>空间复杂度：O(min(m,n))</li><li>应用场景：字符串匹配、序列比对</li></ul><h3 id="2-4-编辑距离（Levenshtein-Distance）"><a href="#2-4-编辑距离（Levenshtein-Distance）" class="headerlink" title="2.4 编辑距离（Levenshtein Distance）"></a>2.4 编辑距离（Levenshtein Distance）</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">editDistance</span>(<span class="params"><span class="variable">$str1</span>, <span class="variable">$str2</span></span>) </span>{</span><br><span class="line">    <span class="variable">$m</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$str1</span>);</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建二维数组存储操作次数</span></span><br><span class="line">    <span class="variable">$dp</span> = [[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> _ in <span class="title function_ invoke__">range</span>(m+<span class="number">1</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;=<span class="variable">$m</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="number">0</span>] = <span class="variable">$i</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span>&lt;=<span class="variable">$n</span>; <span class="variable">$j</span>++) {</span><br><span class="line">        <span class="variable">$dp</span>[<span class="number">0</span>][<span class="variable">$j</span>] = <span class="variable">$j</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;=<span class="variable">$m</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">1</span>; <span class="variable">$j</span>&lt;=<span class="variable">$n</span>; <span class="variable">$j</span>++) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$str1</span>[<span class="variable">$i</span>-<span class="number">1</span>] === <span class="variable">$str2</span>[<span class="variable">$j</span>-<span class="number">1</span>]) {</span><br><span class="line">                <span class="variable">$cost</span> = <span class="number">0</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="variable">$cost</span> = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="title function_ invoke__">min</span>(</span><br><span class="line">                <span class="variable">$dp</span>[<span class="variable">$i</span>-<span class="number">1</span>][<span class="variable">$j</span>] + <span class="number">1</span>,        // 删除</span><br><span class="line">                <span class="variable">$dp</span>[<span class="variable">$i</span>][<span class="variable">$j</span>-<span class="number">1</span>] + <span class="number">1</span>,        // 插入</span><br><span class="line">                <span class="variable">$dp</span>[<span class="variable">$i</span>-<span class="number">1</span>][<span class="variable">$j</span>-<span class="number">1</span>] + <span class="variable">$cost</span>   // 替换</span><br><span class="line">            );</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$dp</span>[<span class="variable">$m</span>][<span class="variable">$n</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>算法分析</strong>：</p><ul><li>时间复杂度：O(mn)</li><li>空间复杂度：O(mn)</li><li>应用场景：文本编辑、生物序列比对</li></ul><h2 id="三、动态规划进阶技巧"><a href="#三、动态规划进阶技巧" class="headerlink" title="三、动态规划进阶技巧"></a>三、动态规划进阶技巧</h2><h3 id="3-1-空间优化策略"><a href="#3-1-空间优化策略" class="headerlink" title="3.1 空间优化策略"></a>3.1 空间优化策略</h3><div class="table-container"><table><thead><tr><th>优化方法</th><th>适用场景</th><th>典型实现</th></tr></thead><tbody><tr><td>滚动数组</td><td>一维状态转移</td><td>背包问题空间优化版</td></tr><tr><td>状态压缩</td><td>多维状态存储</td><td>最短路径问题中的位运算优化</td></tr><tr><td>对角线填充</td><td>特定递推关系</td><td>卡塔兰数计算</td></tr></tbody></table></div><h3 id="3-2-记忆化搜索实现"><a href="#3-2-记忆化搜索实现" class="headerlink" title="3.2 记忆化搜索实现"></a>3.2 记忆化搜索实现</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibMemoization</span>(<span class="params"><span class="variable">$n</span>, &amp;<span class="variable">$memo</span></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> in <span class="variable">$memo</span>) <span class="keyword">return</span> <span class="variable">$memo</span>[<span class="variable">$n</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="variable">$n</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$memo</span>[<span class="variable">$n</span>] = <span class="title function_ invoke__">fibMemoization</span>(<span class="variable">$n</span>-<span class="number">1</span>, <span class="variable">$memo</span>) + <span class="title function_ invoke__">fibMemoization</span>(<span class="variable">$n</span>-<span class="number">2</span>, <span class="variable">$memo</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$memo</span>[<span class="variable">$n</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用示例</span></span><br><span class="line"><span class="variable">$memo</span> = [];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fibMemoization</span>(<span class="number">10</span>, <span class="variable">$memo</span>); <span class="comment">// 输出55</span></span><br></pre></td></tr></tbody></table></figure><h2 id="四、学习路径与资源推荐"><a href="#四、学习路径与资源推荐" class="headerlink" title="四、学习路径与资源推荐"></a>四、学习路径与资源推荐</h2><h3 id="4-1-必修知识点"><a href="#4-1-必修知识点" class="headerlink" title="4.1 必修知识点"></a>4.1 必修知识点</h3><ol><li><strong>递归与迭代</strong>：理解递归树展开过程</li><li><strong>数学归纳法</strong>：证明动态规划状态转移的正确性</li><li><strong>复杂度分析</strong>：掌握Big O符号的运用</li><li><strong>状态定义范式</strong>：如dp[i][j]表示前i个物品放入容量j背包的最大价值</li></ol><h3 id="4-2-经典学习路线"><a href="#4-2-经典学习路线" class="headerlink" title="4.2 经典学习路线"></a>4.2 经典学习路线</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基础入门 → 经典问题 → 算法优化 → 实战项目 → 论文研读</span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-推荐资源"><a href="#4-3-推荐资源" class="headerlink" title="4.3 推荐资源"></a>4.3 推荐资源</h3><div class="table-container"><table><thead><tr><th>类型</th><th>资源名称</th><th>适用阶段</th></tr></thead><tbody><tr><td>在线课程</td><td>Coursera《Algorithmic Toolbox》</td><td>系统学习</td></tr><tr><td>书籍</td><td>《算法导论》（CLRS）</td><td>理论深度提升</td></tr><tr><td>实战平台</td><td>LeetCode《Dynamic Programming》</td><td>题目实战</td></tr><tr><td>博客</td><td>GeeksforGeeks DP专题</td><td>技巧总结</td></tr></tbody></table></div><h2 id="五、开发实践建议"><a href="#五、开发实践建议" class="headerlink" title="五、开发实践建议"></a>五、开发实践建议</h2><h3 id="5-1-代码规范"><a href="#5-1-代码规范" class="headerlink" title="5.1 代码规范"></a>5.1 代码规范</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐的DP数组命名方式</span></span><br><span class="line"><span class="variable">$dpTable</span> = []; <span class="comment">// 通用状态表</span></span><br><span class="line"><span class="variable">$dpArray</span> = []; <span class="comment">// 一维状态数组</span></span><br><span class="line"><span class="variable">$dpMatrix</span> = []; <span class="comment">// 多维状态矩阵</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-调试技巧"><a href="#5-2-调试技巧" class="headerlink" title="5.2 调试技巧"></a>5.2 调试技巧</h3><ol><li><strong>打印中间状态</strong>：在关键位置添加<code>var_dump($dp[i][j])</code></li><li><strong>边界条件测试</strong>：确保n=0、n=1等基础情况正确</li><li><strong>时间复杂度验证</strong>：通过计时函数测量运行时间</li></ol><h3 id="5-3-常见错误规避"><a href="#5-3-常见错误规避" class="headerlink" title="5.3 常见错误规避"></a>5.3 常见错误规避</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示范：索引越界</span></span><br><span class="line"><span class="variable">$dp</span>[<span class="number">0</span>][-<span class="number">1</span>] = ... <span class="comment">// 应改为检查j&gt;=0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$j</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$i</span> &gt;= <span class="number">0</span>) {</span><br><span class="line">    <span class="variable">$dp</span>[i][j] = ...;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="六、总结与展望"><a href="#六、总结与展望" class="headerlink" title="六、总结与展望"></a>六、总结与展望</h2><p>动态规划作为算法设计的基石，在人工智能、大数据等领域有广泛应用。通过掌握状态定义、转移方程构建和空间优化技术，开发者能够有效解决复杂度指数级增长的算法问题。建议从简单问题入手，逐步深入研究组合优化、博弈论等高级主题。</p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态转移方程：动态规划的核心</title>
      <link href="/posts/dynamic-programming-state-transition-equation.html"/>
      <url>/posts/dynamic-programming-state-transition-equation.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>状态转移方程</strong> 是动态规划问题中的核心概念，它描述了问题从一种状态到另一种状态的转化关系。形象地说，就是“如何从已知的结果推出未知的结果”。</p><h3 id="什么是状态转移方程？"><a href="#什么是状态转移方程？" class="headerlink" title="什么是状态转移方程？"></a>什么是状态转移方程？</h3><ul><li><strong>状态：</strong> 在动态规划问题中，状态通常代表子问题的一个解或部分解。</li><li><strong>转移：</strong> 状态之间的转换，即从一个子问题的解推导出另一个子问题的解。</li><li><strong>方程：</strong> 用数学表达式来描述状态之间的转换关系。</li></ul><h3 id="状态转移方程的作用"><a href="#状态转移方程的作用" class="headerlink" title="状态转移方程的作用"></a>状态转移方程的作用</h3><ul><li><strong>刻画问题结构：</strong> 将复杂问题分解为一系列简单的子问题，并描述子问题之间的关系。</li><li><strong>指导求解过程：</strong> 提供了从已知子问题解求解未知子问题解的递推关系。</li><li><strong>优化算法效率：</strong> 通过避免重复计算子问题，提高算法效率。</li></ul><h3 id="状态转移方程的一般形式"><a href="#状态转移方程的一般形式" class="headerlink" title="状态转移方程的一般形式"></a>状态转移方程的一般形式</h3><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp<span class="selector-attr">[i]</span> = <span class="built_in">f</span>(dp<span class="selector-attr">[i-1]</span>, dp<span class="selector-attr">[i-2]</span>, ..., dp<span class="selector-attr">[i-k]</span>, other_info)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>dp[i]</code>：表示当前状态的解。</li><li><code>f</code>：表示状态转移函数，即根据前面的状态和其它信息计算当前状态的解。</li><li><code>dp[i-1], dp[i-2], ..., dp[i-k]</code>：表示前面的状态的解。</li><li><code>other_info</code>：表示其他影响状态转移的信息。</li></ul><h3 id="例子：0-1背包问题"><a href="#例子：0-1背包问题" class="headerlink" title="例子：0-1背包问题"></a>例子：0-1背包问题</h3><ul><li><strong>问题描述：</strong> 有一个背包，容量为W，有n个物品，每个物品有重量w[i]和价值v[i]，如何选择物品放入背包，使得背包中物品的总价值最大？</li><li><strong>状态定义：</strong> dp[i][j]表示前i个物品中选择，且总重量不超过j的情况下，能够获得的最大价值。</li><li><strong>状态转移方程：</strong><figure class="highlight inform7"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp<span class="comment">[i]</span><span class="comment">[j]</span> = max(dp<span class="comment">[i-1]</span><span class="comment">[j]</span>, dp<span class="comment">[i-1]</span><span class="comment">[j-w<span class="comment">[i]</span>]</span> + v<span class="comment">[i]</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>dp[i-1][j]</code>：不选择第i个物品的最大价值。</li><li><code>dp[i-1][j-w[i]] + v[i]</code>：选择第i个物品，那么背包容量减少w[i]，价值增加v[i]。</li></ul></li></ul><h3 id="如何写出状态转移方程"><a href="#如何写出状态转移方程" class="headerlink" title="如何写出状态转移方程"></a>如何写出状态转移方程</h3><ol><li><strong>明确问题：</strong> 理解问题的含义，确定问题的目标。</li><li><strong>定义状态：</strong> 找到一个合适的量来表示子问题的解。</li><li><strong>寻找状态转移：</strong> 分析问题，找出状态之间的关系，即如何从已知状态推导出未知状态。</li><li><strong>写出方程：</strong> 根据状态转移关系，用数学表达式表示出来。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>状态转移方程是动态规划的核心，掌握了状态转移方程，就能解决很多动态规划问题。在实际应用中，状态转移方程的设计往往是解决问题的关键。</p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 状态转移方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列：自然界中的数学之美</title>
      <link href="/posts/fibonacci-sequence.html"/>
      <url>/posts/fibonacci-sequence.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是斐波那契数列？"><a href="#什么是斐波那契数列？" class="headerlink" title="什么是斐波那契数列？"></a>什么是斐波那契数列？</h3><p>斐波那契数列是一个特殊的整数序列，它从0和1开始，之后的每一项数字都是前两项数字的和。也就是说：</p><ul><li>F(0) = 0</li><li>F(1) = 1</li><li>F(n) = F(n-1) + F(n-2)  (n ≥ 2)</li></ul><p>这个数列的前几项是：0, 1, 1, 2, 3, 5, 8, 13, 21, 34, …</p><h3 id="斐波那契数列的由来"><a href="#斐波那契数列的由来" class="headerlink" title="斐波那契数列的由来"></a>斐波那契数列的由来</h3><p>斐波那契数列之所以得名，是因为它最早出现在意大利数学家列昂纳多·斐波那契（Leonardo Fibonacci）在1202年出版的《算盘书》中。斐波那契用它来解决兔子繁殖的问题，因此它也被称为“兔子数列”。</p><h3 id="斐波那契数列的性质与应用"><a href="#斐波那契数列的性质与应用" class="headerlink" title="斐波那契数列的性质与应用"></a>斐波那契数列的性质与应用</h3><ul><li><strong>黄金分割：</strong> 斐波那契数列与黄金分割有着密切的联系。当 n 趋于无穷大时，相邻两个斐波那契数的比值越来越接近黄金分割数。</li><li><strong>自然界中的应用：</strong> 斐波那契数列在自然界中广泛存在，例如：<ul><li>植物的叶序：许多植物的叶序都遵循斐波那契数列的规律，以最大限度地获取阳光。</li><li>松果的螺旋线：松果上的螺旋线圈数通常是斐波那契数。</li><li>花瓣的数量：许多花的花瓣数是斐波那契数。</li></ul></li><li><strong>计算机科学中的应用：</strong> 斐波那契数列在计算机科学中也有广泛的应用，例如算法设计、数据结构、加密等。</li></ul><h3 id="如何用PHP编程实现斐波那契数列？"><a href="#如何用PHP编程实现斐波那契数列？" class="headerlink" title="如何用PHP编程实现斐波那契数列？"></a>如何用PHP编程实现斐波那契数列？</h3><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><p>递归是一种直接而直观的实现方式，但对于较大的 n，递归调用会产生大量的重复计算，导致效率低下。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci_recursive</span>(<span class="params"><span class="variable">$n</span></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">fibonacci_recursive</span>(<span class="variable">$n</span> - <span class="number">1</span>) + <span class="title function_ invoke__">fibonacci_recursive</span>(<span class="variable">$n</span> - <span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fibonacci_recursive</span>(<span class="number">10</span>); <span class="comment">// 输出 55</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="动态规划方法"><a href="#动态规划方法" class="headerlink" title="动态规划方法"></a>动态规划方法</h4><p>使用动态规划可以显著提高计算效率，通过存储已经计算过的斐波那契数，避免重复计算。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci_dynamic</span>(<span class="params"><span class="variable">$n</span></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fib</span> = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">2</span>; <span class="variable">$i</span> &lt;= <span class="variable">$n</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$fib</span>[<span class="variable">$i</span>] = <span class="variable">$fib</span>[<span class="variable">$i</span> - <span class="number">1</span>] + <span class="variable">$fib</span>[<span class="variable">$i</span> - <span class="number">2</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$fib</span>[<span class="variable">$n</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fibonacci_dynamic</span>(<span class="number">10</span>); <span class="comment">// 输出 55</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="迭代实现"><a href="#迭代实现" class="headerlink" title="迭代实现"></a>迭代实现</h4><p>迭代方法与动态规划方法类似，都是通过循环来计算，避免了递归的开销，但更加节省空间，因为只需存储当前和前一个斐波那契数。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci_iterative</span>(<span class="params"><span class="variable">$n</span></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">2</span>; <span class="variable">$i</span> &lt;= <span class="variable">$n</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$b</span>;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable">$temp</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$b</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fibonacci_iterative</span>(<span class="number">10</span>); <span class="comment">// 输出 55</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="记忆化递归"><a href="#记忆化递归" class="headerlink" title="记忆化递归"></a>记忆化递归</h4><p>记忆化递归结合了递归和迭代的优点，通过一个数组来存储已经计算过的结果，避免重复计算。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci_memo</span>(<span class="params"><span class="variable">$n</span>, &amp;<span class="variable">$memo</span></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> &lt;= <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$n</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$memo</span>[<span class="variable">$n</span>])) {</span><br><span class="line">        <span class="variable">$memo</span>[<span class="variable">$n</span>] = <span class="title function_ invoke__">fibonacci_memo</span>(<span class="variable">$n</span> - <span class="number">1</span>, <span class="variable">$memo</span>) + <span class="title function_ invoke__">fibonacci_memo</span>(<span class="variable">$n</span> - <span class="number">2</span>, <span class="variable">$memo</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$memo</span>[<span class="variable">$n</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 memo 数组</span></span><br><span class="line"><span class="variable">$memo</span> = [];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fibonacci_memo</span>(<span class="number">10</span>, <span class="variable">$memo</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>生成器可以用于生成一个无限的斐波那契数列，每次调用都会返回下一个数。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci_generator</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="variable">$a</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">        <span class="keyword">yield</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$b</span>;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable">$c</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$generator</span> = <span class="title function_ invoke__">fibonacci_generator</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$generator</span>-&gt;<span class="title function_ invoke__">current</span>() . <span class="string">" "</span>;</span><br><span class="line">    <span class="variable">$generator</span>-&gt;<span class="title function_ invoke__">next</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h4><p>对于非常大的 n 值，可以使用矩阵快速幂方法来计算斐波那契数，这种方法的时间复杂度为 O(log n)。矩阵快速幂可以大幅提高计算效率，但实现相对复杂。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matrix_multiply</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [<span class="variable">$a</span>[<span class="number">0</span>][<span class="number">0</span>] * <span class="variable">$b</span>[<span class="number">0</span>][<span class="number">0</span>] + <span class="variable">$a</span>[<span class="number">0</span>][<span class="number">1</span>] * <span class="variable">$b</span>[<span class="number">1</span>][<span class="number">0</span>], <span class="variable">$a</span>[<span class="number">0</span>][<span class="number">0</span>] * <span class="variable">$b</span>[<span class="number">0</span>][<span class="number">1</span>] + <span class="variable">$a</span>[<span class="number">0</span>][<span class="number">1</span>] * <span class="variable">$b</span>[<span class="number">1</span>][<span class="number">1</span>]],</span><br><span class="line">        [<span class="variable">$a</span>[<span class="number">1</span>][<span class="number">0</span>] * <span class="variable">$b</span>[<span class="number">0</span>][<span class="number">0</span>] + <span class="variable">$a</span>[<span class="number">1</span>][<span class="number">1</span>] * <span class="variable">$b</span>[<span class="number">1</span>][<span class="number">0</span>], <span class="variable">$a</span>[<span class="number">1</span>][<span class="number">0</span>] * <span class="variable">$b</span>[<span class="number">0</span>][<span class="number">1</span>] + <span class="variable">$a</span>[<span class="number">1</span>][<span class="number">1</span>] * <span class="variable">$b</span>[<span class="number">1</span>][<span class="number">1</span>]],</span><br><span class="line">    ];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matrix_power</span>(<span class="params"><span class="variable">$matrix</span>, <span class="variable">$n</span></span>) </span>{</span><br><span class="line">    <span class="variable">$result</span> = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]]; <span class="comment">// Identity matrix</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$n</span> &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$n</span> % <span class="number">2</span> == <span class="number">1</span>) {</span><br><span class="line">            <span class="variable">$result</span> = <span class="title function_ invoke__">matrix_multiply</span>(<span class="variable">$result</span>, <span class="variable">$matrix</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="variable">$matrix</span> = <span class="title function_ invoke__">matrix_multiply</span>(<span class="variable">$matrix</span>, <span class="variable">$matrix</span>);</span><br><span class="line">        <span class="variable">$n</span> = <span class="title function_ invoke__">intdiv</span>(<span class="variable">$n</span>, <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci_matrix</span>(<span class="params"><span class="variable">$n</span></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$base_matrix</span> = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>]];</span><br><span class="line">    <span class="variable">$result_matrix</span> = <span class="title function_ invoke__">matrix_power</span>(<span class="variable">$base_matrix</span>, <span class="variable">$n</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result_matrix</span>[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fibonacci_matrix</span>(<span class="number">10</span>); <span class="comment">// 输出 55</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h4><ul><li><strong>递归：</strong> 效率最低，容易发生栈溢出。</li><li><strong>迭代：</strong> 效率较高，适合大多数情况。</li><li><strong>记忆化递归：</strong> 结合了递归和迭代的优点，对于重复计算较多的情况效率更高。</li><li><strong>生成器：</strong> 适合生成无限序列，可以按需计算。</li><li><strong>矩阵快速幂：</strong> 适用于大数计算，效率极高。</li></ul><h4 id="选择哪种方法？"><a href="#选择哪种方法？" class="headerlink" title="选择哪种方法？"></a>选择哪种方法？</h4><ul><li><strong>小规模计算：</strong> 迭代法通常就足够了。</li><li><strong>需要计算多个斐波那契数：</strong> 记忆化递归或生成器是不错的选择。</li><li><strong>对于极大的 n：</strong> 矩阵快速幂是最佳选择。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>斐波那契数列是一个简单而又有趣的数学概念，它在自然界和计算机科学中都有广泛的应用。通过不同的编程方法，我们可以实现斐波那契数列的计算。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵快速幂：高效计算矩阵高次幂</title>
      <link href="/posts/matrix-fast-power.html"/>
      <url>/posts/matrix-fast-power.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>矩阵快速幂是一种用于高效计算大幂次矩阵的算法。它利用分治思想，将矩阵的幂次运算分解为多个较小的矩阵乘法，从而大幅提升计算效率。矩阵快速幂在许多算法中都有应用，例如斐波那契数列的高效计算。</p><h3 id="矩阵快速幂的基本思想"><a href="#矩阵快速幂的基本思想" class="headerlink" title="矩阵快速幂的基本思想"></a>矩阵快速幂的基本思想</h3><p>假设我们要计算 $ A^n $，其中 $ A $ 是一个矩阵，$ n $ 是一个正整数。基本思想如下：</p><ol><li>如果 $ n = 0 $，则 $ A^n = I $（单位矩阵）。</li><li>如果 $ n $ 是偶数，则 $ A^n = (A^{n/2}) \times (A^{n/2}) $。</li><li>如果 $ n $ 是奇数，则 $ A^n = A \times (A^{(n-1)/2}) \times (A^{(n-1)/2}) $。</li></ol><p>通过不断将 $ n $ 除以 2 并进行矩阵乘法，可以在 $ O(\log n) $ 的时间复杂度内计算出 $ A^n $。</p><h3 id="PHP-实现"><a href="#PHP-实现" class="headerlink" title="PHP 实现"></a>PHP 实现</h3><p>以下是一个在 PHP 中实现矩阵快速幂的示例代码：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 矩阵乘法函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matrixMultiply</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>) </span>{</span><br><span class="line">    <span class="variable">$result</span> = [];</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$a</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$n</span>; <span class="variable">$j</span>++) {</span><br><span class="line">            <span class="variable">$result</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> &lt; <span class="variable">$n</span>; <span class="variable">$k</span>++) {</span><br><span class="line">                <span class="variable">$result</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] += <span class="variable">$a</span>[<span class="variable">$i</span>][<span class="variable">$k</span>] * <span class="variable">$b</span>[<span class="variable">$k</span>][<span class="variable">$j</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵快速幂函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matrixPower</span>(<span class="params"><span class="variable">$matrix</span>, <span class="variable">$power</span></span>) </span>{</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$matrix</span>);</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span>, <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 初始化单位矩阵</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$result</span>[<span class="variable">$i</span>][<span class="variable">$i</span>] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$power</span> &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$power</span> % <span class="number">2</span> == <span class="number">1</span>) {</span><br><span class="line">            <span class="variable">$result</span> = <span class="title function_ invoke__">matrixMultiply</span>(<span class="variable">$result</span>, <span class="variable">$matrix</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="variable">$matrix</span> = <span class="title function_ invoke__">matrixMultiply</span>(<span class="variable">$matrix</span>, <span class="variable">$matrix</span>);</span><br><span class="line">        <span class="variable">$power</span> = <span class="title function_ invoke__">intdiv</span>(<span class="variable">$power</span>, <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="variable">$matrix</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">];</span><br><span class="line"><span class="variable">$power</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">matrixPower</span>(<span class="variable">$matrix</span>, <span class="variable">$power</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"矩阵 A 的 <span class="subst">$power</span> 次幂结果:\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$row</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">implode</span>(<span class="string">' '</span>, <span class="variable">$row</span>) . <span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li><p><strong>矩阵乘法函数</strong>：</p><ul><li><code>matrixMultiply($a, $b)</code> 函数用于计算两个矩阵的乘积。它接收两个矩阵作为参数，返回它们的乘积矩阵。</li></ul></li><li><p><strong>矩阵快速幂函数</strong>：</p><ul><li><code>matrixPower($matrix, $power)</code> 函数用于计算矩阵的幂。它接收一个矩阵和幂次作为参数，返回幂次计算结果。</li><li>使用一个单位矩阵 <code>result</code> 作为中间结果。</li><li>通过不断将 <code>power</code> 除以 2 并进行矩阵乘法，逐步计算出矩阵的高次幂。</li></ul></li><li><p><strong>示例使用</strong>：</p><ul><li>给定一个 2x2 的矩阵 <code>[[1, 1], [1, 0]]</code> 和幂次 <code>10</code>，计算该矩阵的 10 次幂并输出结果。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>矩阵快速幂是一种非常高效的算法，在算法竞赛和实际应用中都有着广泛的应用。通过掌握矩阵快速幂的原理和实现，可以解决很多复杂的计算问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄金分割：自然与艺术中的完美比例</title>
      <link href="/posts/golden-ratio.html"/>
      <url>/posts/golden-ratio.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是黄金分割？"><a href="#什么是黄金分割？" class="headerlink" title="什么是黄金分割？"></a>什么是黄金分割？</h3><p>黄金分割（Golden Ratio），又称黄金比例、黄金数，是数学中的一个重要常数，通常用希腊字母 φ（phi）表示，约为 1.618。这个比例被认为是视觉上最和谐、最美的比例，在自然界和艺术设计中广泛存在。</p><p><strong>黄金分割的数学表达</strong></p><p>如果将一条线段分割为两部分，使较长部分与较短部分的比值等于整体与较长部分的比值，那么这个比值就是黄金分割。</p><p>用数学公式表示：</p><script type="math/tex; mode=display">\frac{a}{b} = \frac{a + b}{a}</script><p>这里 $ a $ 是较长部分，$ b $ 是较短部分。</p><p>解这个方程，可以得到：</p><script type="math/tex; mode=display">\frac{a}{b} = \frac{1 \pm \sqrt{5}}{2} ≈ 1.618</script><p>这个常数就是黄金比例。</p><h3 id="黄金分割的数学证明"><a href="#黄金分割的数学证明" class="headerlink" title="黄金分割的数学证明"></a>黄金分割的数学证明</h3><h4 id="数学证明"><a href="#数学证明" class="headerlink" title="数学证明"></a>数学证明</h4><p>为了证明黄金分割的存在性和唯一性，我们可以通过解决上述比例公式来找到 φ 的值。</p><ol><li>设 $ \frac{a}{b} = \phi $，则 $ \frac{a+b}{a} = \phi $。</li><li><p>因为 $ \frac{a+b}{a} = 1 + \frac{b}{a} $，所以有：</p><script type="math/tex; mode=display">\phi = 1 + \frac{1}{\phi}</script></li><li><p>通过解这个方程，我们可以得到 φ 的值：</p><script type="math/tex; mode=display">\phi^2 = \phi + 1</script><script type="math/tex; mode=display">\phi^2 - \phi - 1 = 0</script></li><li><p>这是一个二次方程，我们可以使用求根公式来解：</p><script type="math/tex; mode=display">\phi = \frac{1 \pm \sqrt{5}}{2}</script></li><li><p>由于 φ 是正数，我们取正根：</p><script type="math/tex; mode=display">\phi = \frac{1 + \sqrt{5}}{2}</script></li></ol><h4 id="PHP-实现"><a href="#PHP-实现" class="headerlink" title="PHP 实现"></a>PHP 实现</h4><p>我们可以使用 PHP 代码来计算黄金分割的值，并验证其数学证明。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goldenRatio</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// 计算黄金分割</span></span><br><span class="line">    <span class="variable">$phi</span> = (<span class="number">1</span> + <span class="title function_ invoke__">sqrt</span>(<span class="number">5</span>)) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$phi</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifyGoldenRatio</span>(<span class="params"><span class="variable">$phi</span></span>) </span>{</span><br><span class="line">    <span class="comment">// 验证黄金分割的比例性质</span></span><br><span class="line">    <span class="variable">$left</span> = <span class="variable">$phi</span>;</span><br><span class="line">    <span class="variable">$right</span> = <span class="number">1</span> + <span class="number">1</span> / <span class="variable">$phi</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">abs</span>(<span class="variable">$left</span> - right) &lt; <span class="number">1e-10</span>; <span class="comment">// 用一个很小的误差值来判断是否相等</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$phi</span> = <span class="title function_ invoke__">goldenRatio</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"黄金分割的值: "</span> . <span class="variable">$phi</span> . <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">verifyGoldenRatio</span>(<span class="variable">$phi</span>)) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"验证通过：黄金分割的定义和性质成立。\n"</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"验证失败：黄金分割的定义和性质不成立。\n"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><ol><li><p><strong>计算黄金分割</strong>：</p><ul><li>使用公式 $ \phi = \frac{1 + \sqrt{5}}{2} $ 计算黄金分割的值。</li></ul></li><li><p><strong>验证黄金分割的比例性质</strong>：</p><ul><li>验证 $ \phi = 1 + \frac{1}{\phi} $ 是否成立，使用一个很小的误差值（$ 1e-10 $）来判断是否相等。</li></ul></li></ol><p>通过上述代码，我们可以计算黄金分割的值并验证其数学性质。黄金分割在数学、艺术、建筑和自然界中有广泛的应用，其独特的比例性质使其成为一个非常重要的常数。</p><h3 id="黄金分割在自然界中的体现"><a href="#黄金分割在自然界中的体现" class="headerlink" title="黄金分割在自然界中的体现"></a>黄金分割在自然界中的体现</h3><ul><li><strong>植物：</strong> 许多植物的叶序、花瓣数等都遵循黄金分割的规律。例如，向日葵花盘上的种子螺旋排列，其螺旋线的数量通常是斐波那契数，而斐波那契数列与黄金分割有着密切的联系。<br><img src="/images/golden_ratio_1.jpg" alt=""></li><li><strong>动物：</strong> 许多动物的身体比例也符合黄金分割，例如人的身体、海螺的螺旋等。<br><img src="/images/golden_ratio_2.jpg" alt=""></li><li><strong>星系：</strong> 甚至在宇宙中，星系的螺旋结构也与黄金分割有着某种联系。</li></ul><h3 id="黄金分割在艺术设计中的应用"><a href="#黄金分割在艺术设计中的应用" class="headerlink" title="黄金分割在艺术设计中的应用"></a>黄金分割在艺术设计中的应用</h3><ul><li><strong>建筑：</strong> 古希腊的帕特农神庙、埃及的金字塔等建筑都运用了黄金分割的比例。<br><img src="/images/golden_ratio_3.jpg" alt=""></li><li><strong>绘画：</strong> 许多著名的画家，如达·芬奇，在他们的作品中都运用了黄金分割的构图。<br><img src="/images/golden_ratio_4.jpg" alt=""></li><li><strong>设计：</strong> 从名片到海报，从Logo到产品设计，黄金分割都被广泛应用，以达到视觉上的平衡和美感。</li></ul><h3 id="黄金分割的魅力"><a href="#黄金分割的魅力" class="headerlink" title="黄金分割的魅力"></a>黄金分割的魅力</h3><ul><li><strong>视觉上的和谐：</strong> 黄金分割比例的矩形、螺旋线等形状给人以舒适、美观的感觉。</li><li><strong>自然界的普遍性：</strong> 黄金分割在自然界中广泛存在，这让人们相信它是美的客观标准。</li><li><strong>艺术创作的灵感：</strong> 黄金分割为艺术家提供了创作的灵感和依据。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>黄金分割作为一种特殊的比例关系，在自然界和艺术设计中有着广泛的应用。它所呈现出的美感和和谐性，让人们对自然和艺术产生了更深层次的理解。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 黄金分割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵</title>
      <link href="/posts/matrix.html"/>
      <url>/posts/matrix.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在编程中，矩阵是一种重要的数据结构，通常用于表示二维数组或表。矩阵广泛应用于图像处理、机器学习、物理模拟等领域。在 PHP 中，可以使用数组来表示和操作矩阵。以下是一些基本的矩阵操作示例，包括创建矩阵、矩阵加法、矩阵乘法等。</p><h3 id="1-创建矩阵"><a href="#1-创建矩阵" class="headerlink" title="1. 创建矩阵"></a>1. 创建矩阵</h3><p>在 PHP 中，可以使用嵌套数组来表示矩阵。例如，创建一个 3x3 的矩阵：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$matrix</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-矩阵加法"><a href="#2-矩阵加法" class="headerlink" title="2. 矩阵加法"></a>2. 矩阵加法</h3><p>矩阵加法是指对两个相同维度的矩阵进行元素级的加法运算。以下是一个矩阵加法的示例：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMatrices</span>(<span class="params"><span class="variable">$matrixA</span>, <span class="variable">$matrixB</span></span>) </span>{</span><br><span class="line">    <span class="variable">$result</span> = [];</span><br><span class="line">    <span class="variable">$rows</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$matrixA</span>);</span><br><span class="line">    <span class="variable">$cols</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$matrixA</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$rows</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$cols</span>; <span class="variable">$j</span>++) {</span><br><span class="line">            <span class="variable">$result</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$matrixA</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] + <span class="variable">$matrixB</span>[<span class="variable">$i</span>][<span class="variable">$j</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$matrixA</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$matrixB</span> = [</span><br><span class="line">    [<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">addMatrices</span>(<span class="variable">$matrixA</span>, <span class="variable">$matrixB</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-矩阵乘法"><a href="#3-矩阵乘法" class="headerlink" title="3. 矩阵乘法"></a>3. 矩阵乘法</h3><p>矩阵乘法是指两个矩阵的乘法运算，矩阵的乘法规则是第一个矩阵的行元素与第二个矩阵的列元素相乘并累加。以下是一个矩阵乘法的示例：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiplyMatrices</span>(<span class="params"><span class="variable">$matrixA</span>, <span class="variable">$matrixB</span></span>) </span>{</span><br><span class="line">    <span class="variable">$result</span> = [];</span><br><span class="line">    <span class="variable">$rowsA</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$matrixA</span>);</span><br><span class="line">    <span class="variable">$colsA</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$matrixA</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="variable">$colsB</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$matrixB</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$rowsA</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$colsB</span>; <span class="variable">$j</span>++) {</span><br><span class="line">            <span class="variable">$result</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> &lt; <span class="variable">$colsA</span>; <span class="variable">$k</span>++) {</span><br><span class="line">                <span class="variable">$result</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] += <span class="variable">$matrixA</span>[<span class="variable">$i</span>][<span class="variable">$k</span>] * <span class="variable">$matrixB</span>[<span class="variable">$k</span>][<span class="variable">$j</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$matrixA</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$matrixB</span> = [</span><br><span class="line">    [<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">multiplyMatrices</span>(<span class="variable">$matrixA</span>, <span class="variable">$matrixB</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-矩阵转置"><a href="#4-矩阵转置" class="headerlink" title="4. 矩阵转置"></a>4. 矩阵转置</h3><p>矩阵转置是将矩阵的行变为列，列变为行。以下是一个矩阵转置的示例：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transposeMatrix</span>(<span class="params"><span class="variable">$matrix</span></span>) </span>{</span><br><span class="line">    <span class="variable">$result</span> = [];</span><br><span class="line">    <span class="variable">$rows</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$matrix</span>);</span><br><span class="line">    <span class="variable">$cols</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$matrix</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$cols</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$rows</span>; <span class="variable">$j</span>++) {</span><br><span class="line">            <span class="variable">$result</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="variable">$matrix</span>[<span class="variable">$j</span>][<span class="variable">$i</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$matrix</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">transposeMatrix</span>(<span class="variable">$matrix</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>通过这些示例代码，我们可以在 PHP 中创建和操作矩阵。矩阵是一种非常有用的数据结构，可以用于解决各种问题，例如线性代数、图像处理、机器学习等领域。掌握矩阵的基本操作对于编程和算法学习都是非常重要的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX 语法：轻松编写数学公式</title>
      <link href="/posts/latex-math.html"/>
      <url>/posts/latex-math.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>LaTeX 是一种强大的排版系统，特别擅长处理数学公式。它使用一系列的命令和符号来表示各种数学表达式，使得我们在文档中可以优雅地呈现复杂的数学内容。</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>数学公式可以分为行内公式和独立公式。</p><ul><li><strong>行内公式：</strong> 用 <script type="math/tex">...</script> 包裹，公式嵌入在文本行中；如：<code>这是一个行内公式 $ E = mc^2 $。</code></li><li><strong>独立公式：</strong> 用 $$$…$$$ 包裹，公式独占一行。如：<figure class="highlight latex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">E = mc<span class="built_in">^</span>2</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="常用数学符号"><a href="#常用数学符号" class="headerlink" title="常用数学符号"></a>常用数学符号</h3><ul><li><strong>希腊字母：</strong> <code>\alpha</code>, <code>\beta</code>, <code>\gamma</code>, …</li><li><strong>运算符：</strong> 加法和减法(<code>+</code>和<code>-</code>), 乘法(<code>\times</code>或<code>\cdot</code>), 除法(<code>\div</code>或<code>\frac{a}{b}</code>), <code>=</code>, <code>\neq</code>, <code>\leq</code>, <code>\geq</code>, <code>\approx</code>, <code>\pm</code></li><li><strong>关系运算符：</strong> <code>\in</code>, <code>\notin</code>, <code>\subset</code>, <code>\supset</code>, <code>\subseteq</code>, <code>\supseteq</code></li><li><strong>逻辑运算符：</strong> <code>\forall</code>, <code>\exists</code>, <code>\Rightarrow</code>, <code>\Leftrightarrow</code></li><li><strong>集合运算符：</strong> <code>\cup</code>, <code>\cap</code>, <code>\setminus</code></li><li><strong>极限运算符：</strong> <code>\lim</code>, <code>\inf</code>, <code>\sup</code></li><li><strong>积分运算符：</strong> <code>\int</code>, <code>\iint</code>, <code>\iiint</code></li><li><strong>求和运算符：</strong> <code>\sum</code></li><li><strong>乘积运算符：</strong> <code>\prod</code></li><li><strong>分数：</strong> <code>\frac{分子}{分母}</code></li><li><strong>根式：</strong> <code>\sqrt{表达式}</code></li><li><strong>上标下标：</strong> 上标使用 <code>^</code>, 下标使用 <code>_</code>, 如：` $ a^2 + b^2 = c^2    x_1, x_2, \ldots, x_n  $</li><li><strong>向量：</strong> <code>\vec{a}</code></li><li><strong>矩阵：</strong> 使用 <code>\begin{matrix}...\end{matrix}</code> 或 <code>\begin{bmatrix}...\end{bmatrix}</code>, 如：<figure class="highlight latex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{bmatrix}</span><br><span class="line">a<span class="built_in">_</span>{11} <span class="built_in">&amp;</span> a<span class="built_in">_</span>{12} <span class="keyword">\\</span></span><br><span class="line">a<span class="built_in">_</span>{21} <span class="built_in">&amp;</span> a<span class="built_in">_</span>{22}</span><br><span class="line"><span class="keyword">\end</span>{bmatrix}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="常用数学环境"><a href="#常用数学环境" class="headerlink" title="常用数学环境"></a>常用数学环境</h3><ul><li><strong>方程组：</strong><figure class="highlight latex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{equation}</span><br><span class="line"><span class="keyword">\begin</span>{cases}</span><br><span class="line">a<span class="built_in">_</span>1x + b<span class="built_in">_</span>1y = c<span class="built_in">_</span>1 <span class="keyword">\\</span></span><br><span class="line">a<span class="built_in">_</span>2x + b<span class="built_in">_</span>2y = c<span class="built_in">_</span>2</span><br><span class="line"><span class="keyword">\end</span>{cases}</span><br><span class="line"><span class="keyword">\end</span>{end{equation}</span><br></pre></td></tr></tbody></table></figure></li><li><strong>数组：</strong><figure class="highlight latex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{array}{ccc}</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="built_in">&amp;</span> c <span class="keyword">\\</span></span><br><span class="line">d <span class="built_in">&amp;</span> e <span class="built_in">&amp;</span> f</span><br><span class="line"><span class="keyword">\end</span>{array}</span><br></pre></td></tr></tbody></table></figure></li><li><strong>矩阵：</strong><figure class="highlight latex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{matrix}</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="built_in">&amp;</span> c <span class="keyword">\\</span></span><br><span class="line">d <span class="built_in">&amp;</span> e <span class="built_in">&amp;</span> f</span><br><span class="line"><span class="keyword">\end</span>{matrix}</span><br></pre></td></tr></tbody></table></figure></li><li><strong>分段函数：</strong><figure class="highlight latex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f(x) = <span class="keyword">\begin</span>{cases}</span><br><span class="line">x<span class="built_in">^</span>2, <span class="built_in">&amp;</span> x &gt; 0 <span class="keyword">\\</span></span><br><span class="line">0, <span class="built_in">&amp;</span> x = 0 <span class="keyword">\\</span></span><br><span class="line">-x<span class="built_in">^</span>2, <span class="built_in">&amp;</span> x &lt; 0</span><br><span class="line"><span class="keyword">\end</span>{cases}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight latex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\frac</span>{a}{b}</span><br><span class="line">a<span class="built_in">^</span>2 + b<span class="built_in">^</span>2 = c<span class="built_in">^</span>2</span><br><span class="line"><span class="keyword">\sum</span><span class="built_in">_</span>{i=1}<span class="built_in">^</span>{n} i = <span class="keyword">\frac</span>{n(n+1)}{2}</span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>{a}<span class="built_in">^</span>{b} f(x) <span class="keyword">\,</span> dx</span><br><span class="line"><span class="keyword">\lim</span><span class="built_in">_</span>{x <span class="keyword">\to</span> <span class="keyword">\infty</span>} <span class="keyword">\frac</span>{1}{x} = 0</span><br><span class="line">f(x) = <span class="keyword">\int</span><span class="built_in">_</span>{-<span class="keyword">\infty</span>}<span class="built_in">^</span><span class="keyword">\infty</span> e<span class="built_in">^</span>{-x<span class="built_in">^</span>2/2} dx = <span class="keyword">\sqrt</span>{2<span class="keyword">\pi</span>}</span><br><span class="line"><span class="keyword">\begin</span>{bmatrix}</span><br><span class="line">    a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">    c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>{bmatrix}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></tbody></table></figure><p>显示效果：</p><script type="math/tex; mode=display">\frac{a}{b}</script><script type="math/tex; mode=display">a^2 + b^2 = c^2</script><script type="math/tex; mode=display">\sum_{i=1}^{n} i = \frac{n(n+1)}{2}</script><script type="math/tex; mode=display">\int_{a}^{b} f(x) \, dx</script><script type="math/tex; mode=display">\lim_{x \to \infty} \frac{1}{x} = 0</script><script type="math/tex; mode=display">f(x) = \int_{-\infty}^\infty e^{-x^2/2} dx = \sqrt{2\pi}</script><script type="math/tex; mode=display">\begin{bmatrix}a & b \\c & d\end{bmatrix}</script><p><strong>温馨提示：</strong></p><ul><li><strong>LaTeX命令区分大小写。</strong></li><li><strong>使用反斜杠<code>\</code>来表示特殊字符。</strong></li><li><strong>对于复杂的公式，建议逐步构建，并参考在线编辑器或文档中的示例。</strong></li><li><strong>markdown 已经支持LaTex语法。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学公式 </tag>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Monad：深入理解函数式编程中的“容器”</title>
      <link href="/posts/monad-in-functional-programming.html"/>
      <url>/posts/monad-in-functional-programming.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Monad是什么？"><a href="#Monad是什么？" class="headerlink" title="Monad是什么？"></a>Monad是什么？</h3><p>Monad 是函数式编程中一个非常抽象的概念，常常被描述为一种“容器”。它提供了一种方式来封装计算，并控制这些计算的顺序和组合。</p><p><strong>形象比喻：</strong></p><p>想象一个盒子（Monad），里面装了一个值。这个盒子有一些特殊的属性：</p><ul><li><strong>包装值：</strong> 任何值都可以装进这个盒子。</li><li><strong>链式操作：</strong> 可以将多个盒子连接起来，形成一个管道，对盒子里的值进行一系列的变换。</li><li><strong>控制副作用：</strong> 可以控制盒子里面的值如何与外部世界交互。</li></ul><p><strong>更正式的定义：</strong></p><p>Monad 是一个满足特定规律的类型构造器。它通常有两个操作：</p><ul><li><strong><code>unit</code>:</strong> 将一个值包装成一个 Monad。</li><li><strong><code>bind</code>:</strong> 将一个 Monad 和一个函数组合成一个新的 Monad。</li></ul><h3 id="Monad的作用"><a href="#Monad的作用" class="headerlink" title="Monad的作用"></a>Monad的作用</h3><ul><li><strong>处理副作用：</strong> Monad 可以帮助我们处理副作用，例如IO操作、异常处理等。</li><li><strong>控制流程：</strong> Monad 可以控制计算的顺序，例如顺序执行、分支、循环等。</li><li><strong>抽象复杂计算：</strong> Monad 可以将复杂的计算分解成更小的、可组合的步骤。</li></ul><h3 id="常用的Monad类型"><a href="#常用的Monad类型" class="headerlink" title="常用的Monad类型"></a>常用的Monad类型</h3><ul><li><strong>Maybe Monad:</strong> 用于表示可能存在或不存在的值。</li><li><strong>Either Monad:</strong> 用于表示计算结果可能是成功或失败。</li><li><strong>List Monad:</strong> 用于表示值列表。</li><li><strong>State Monad:</strong> 用于维护状态。</li><li><strong>IO Monad:</strong> 用于描述输入输出操作。</li></ul><h3 id="Monad在PHP中的应用"><a href="#Monad在PHP中的应用" class="headerlink" title="Monad在PHP中的应用"></a>Monad在PHP中的应用</h3><p>虽然PHP不是一种纯函数式编程语言，但是我们可以通过库或自己实现来使用Monad。Monad在PHP中主要用于：</p><ul><li><strong>异步编程：</strong> Promise就是一个典型的Monad，用于处理异步操作。</li><li><strong>错误处理：</strong> Either Monad可以用于表示函数的返回值可能是成功或失败。</li><li><strong>Option类型：</strong> Maybe Monad可以表示一个值可能存在或不存在。</li></ul><h3 id="Monad的学习曲线"><a href="#Monad的学习曲线" class="headerlink" title="Monad的学习曲线"></a>Monad的学习曲线</h3><p>Monad是一个比较抽象的概念，学习起来有一定的难度。建议从以下几个方面入手：</p><ul><li><strong>理解函数式编程的基本概念：</strong> 纯函数、高阶函数、lambda表达式等。</li><li><strong>从简单的Monad开始：</strong> 比如Maybe Monad，理解它的基本用法。</li><li><strong>通过例子学习：</strong> 找一些实际的例子来应用Monad。</li><li><strong>阅读相关资料：</strong> 有很多关于Monad的书籍和文章，可以帮助你深入理解。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Monad是一个强大的工具，可以帮助我们写出更简洁、更可维护的代码。虽然概念抽象，但是掌握了它的基本原理，就可以在函数式编程中游刃有余。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Monad </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 闭包（Closure）详解</title>
      <link href="/posts/closure.html"/>
      <url>/posts/closure.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h3><p>闭包（Closure）是匿名函数的一种特殊类型，它可以访问其创建时的词法作用域。简单来说，闭包就是一个可以在其创建的环境中访问变量和函数的函数。</p><h3 id="闭包的特性"><a href="#闭包的特性" class="headerlink" title="闭包的特性"></a>闭包的特性</h3><ul><li><strong>匿名函数：</strong> 没有明确的函数名。</li><li><strong>词法作用域：</strong> 可以访问其创建时的变量。</li><li><strong>作为变量：</strong> 闭包可以赋值给变量，作为参数传递，或者作为返回值返回。</li></ul><h3 id="闭包的语法"><a href="#闭包的语法" class="headerlink" title="闭包的语法"></a>闭包的语法</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$closure</span> = <span class="function"><span class="keyword">function</span>(<span class="params">参数列表</span>) <span class="keyword">use</span> (<span class="params">变量列表</span>) </span>{</span><br><span class="line">    <span class="comment">// 闭包体</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ul><li><code>use</code>关键字：用于指定闭包可以访问的外部变量。</li><li><code>变量列表</code>：一个逗号分隔的变量列表，这些变量可以在闭包内部使用。</li></ul><h3 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h3><ul><li><strong>回调函数：</strong> 闭包是回调函数的理想选择，可以将复杂的逻辑封装在闭包中，并作为参数传递给其他函数。</li><li><strong>延迟执行：</strong> 闭包可以捕获当前的上下文，在以后执行时仍然可以使用这些上下文信息。</li><li><strong>创建自定义函数：</strong> 可以通过闭包创建自定义的函数，实现灵活的编程。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$message</span> = <span class="string">'Hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sayHello</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$message</span></span>) </span>{</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$message</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="variable">$sayHello</span>(); <span class="comment">// 输出：Hello</span></span><br></pre></td></tr></tbody></table></figure><h3 id="闭包与对象"><a href="#闭包与对象" class="headerlink" title="闭包与对象"></a>闭包与对象</h3><ul><li><strong>闭包与对象的区别：</strong> 闭包更轻量级，没有类的开销，但对象具有面向对象的特性，如继承、多态等。</li><li><strong>闭包与对象的选择：</strong> 当需要简单的函数式编程时，闭包是更好的选择；当需要复杂的封装和继承时，对象更合适。</li></ul><h3 id="闭包的注意事项"><a href="#闭包的注意事项" class="headerlink" title="闭包的注意事项"></a>闭包的注意事项</h3><ul><li><strong>闭包捕获变量：</strong> 闭包捕获的是变量的值，而不是变量本身。如果在闭包外部修改了变量的值，闭包内部使用的仍然是原来的值。</li><li><strong>闭包的性能：</strong> 创建和调用闭包会有一定的性能开销，因此在性能要求较高的场景下，需要谨慎使用。</li></ul><h3 id="闭包的应用实例"><a href="#闭包的应用实例" class="headerlink" title="闭包的应用实例"></a>闭包的应用实例</h3><ul><li><strong>数组遍历：</strong><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$numbers</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$squared</span> = <span class="title function_ invoke__">array_map</span>(function(<span class="variable">$num</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span> * <span class="variable">$num</span>;</span><br><span class="line">}, <span class="variable">$numbers</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><strong>事件监听：</strong><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$button</span> = <span class="keyword">new</span> <span class="title class_">Button</span>();</span><br><span class="line"><span class="variable">$button</span>-&gt;<span class="title function_ invoke__">onClick</span>(function() {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Button clicked'</span>;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li><li><strong>数据库查询：</strong><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = DB::<span class="title function_ invoke__">table</span>(<span class="string">'users'</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">'is_active'</span>, <span class="number">1</span>)-&gt;<span class="title function_ invoke__">get</span>(function(<span class="variable">$user</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$user</span>-&gt;name;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>闭包是PHP中一个非常强大的工具，它可以帮助我们写出更加简洁、灵活和可读的代码。通过理解闭包的特性和应用场景，我们可以更好地利用它来解决各种编程问题。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程：一种编程范式</title>
      <link href="/posts/functional-programming.html"/>
      <url>/posts/functional-programming.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是函数式编程？"><a href="#什么是函数式编程？" class="headerlink" title="什么是函数式编程？"></a>什么是函数式编程？</h3><p>函数式编程（Functional Programming，简称FP）是一种编程范式，它将计算视为函数的评估，并强调应用和组合函数来构建程序。与命令式编程（Imperative Programming）不同，函数式编程更关注“做什么”，而不是“怎么做”。</p><h3 id="函数式编程的核心概念"><a href="#函数式编程的核心概念" class="headerlink" title="函数式编程的核心概念"></a>函数式编程的核心概念</h3><ul><li><strong>纯函数：</strong><ul><li>给定相同的输入，总是返回相同的输出。</li><li>没有副作用（不会修改外部状态）。</li></ul></li><li><strong>不可变数据：</strong><ul><li>数据一旦创建，就不能修改。</li></ul></li><li><strong>高阶函数：</strong><ul><li>函数可以作为参数传递给其他函数，或者作为返回值返回。</li></ul></li><li><strong>递归：</strong><ul><li>函数通过调用自身来解决问题。</li></ul></li><li><strong>惰性求值：</strong><ul><li>表达式只在需要的时候才求值。</li></ul></li></ul><h3 id="函数式编程的优点"><a href="#函数式编程的优点" class="headerlink" title="函数式编程的优点"></a>函数式编程的优点</h3><ul><li><strong>代码更简洁、可读性更高：</strong> 函数式编程的代码通常更简洁，因为避免了状态的管理和副作用。</li><li><strong>可测试性更强：</strong> 纯函数没有副作用，更容易进行单元测试。</li><li><strong>并发安全：</strong> 由于没有共享状态，函数式编程的程序更容易实现并发。</li><li><strong>可维护性更高：</strong> 函数式编程的代码往往更模块化，更容易维护。</li></ul><h3 id="函数式编程的应用场景"><a href="#函数式编程的应用场景" class="headerlink" title="函数式编程的应用场景"></a>函数式编程的应用场景</h3><ul><li><strong>数据处理：</strong> 函数式编程非常适合处理数据，如过滤、映射、归约等操作。</li><li><strong>并行计算：</strong> 函数式编程的无副作用特性使得它非常适合并行计算。</li><li><strong>UI开发：</strong> 函数式编程可以帮助构建更具有响应性和可维护性的用户界面。</li></ul><h3 id="函数式编程与命令式编程的区别"><a href="#函数式编程与命令式编程的区别" class="headerlink" title="函数式编程与命令式编程的区别"></a>函数式编程与命令式编程的区别</h3><div class="table-container"><table><thead><tr><th>特性</th><th>命令式编程</th><th>函数式编程</th></tr></thead><tbody><tr><td>关注点</td><td>如何做</td><td>做什么</td></tr><tr><td>状态</td><td>可变状态</td><td>不可变状态</td></tr><tr><td>副作用</td><td>有副作用</td><td>无副作用</td></tr><tr><td>思维方式</td><td>命令式思维</td><td>声明式思维</td></tr></tbody></table></div><h3 id="函数式编程的例子（JavaScript）"><a href="#函数式编程的例子（JavaScript）" class="headerlink" title="函数式编程的例子（JavaScript）"></a>函数式编程的例子（JavaScript）</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令式编程：</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> doubledNumbers = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) {</span><br><span class="line">  doubledNumbers.<span class="title function_">push</span>(numbers[i] * <span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式编程：</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> doubledNumbers = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">number</span> =&gt;</span> number * <span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="函数式编程的语言"><a href="#函数式编程的语言" class="headerlink" title="函数式编程的语言"></a>函数式编程的语言</h3><ul><li><strong>纯函数式语言：</strong> Haskell、Erlang</li><li><strong>支持函数式编程的语言：</strong> JavaScript、Python、Scala、F#、Clojure</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>函数式编程是一种强大的编程范式，它提供了不同的视角来解决问题。虽然函数式编程的概念可能有些抽象，但掌握了它的核心概念，可以帮助我们写出更优雅、更健壮的代码。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数柯里化（Currying）</title>
      <link href="/posts/function-currying.html"/>
      <url>/posts/function-currying.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是函数柯里化？"><a href="#什么是函数柯里化？" class="headerlink" title="什么是函数柯里化？"></a>什么是函数柯里化？</h3><p>函数柯里化是一种将多参数函数转换为一系列单参数函数的技术。简单来说，就是把接受多个参数的函数变成一系列只接受一个参数的函数，并且每个函数返回另一个接受余下参数的函数。</p><p><strong>形象比喻：</strong></p><p>想象一个做三明治的函数，它需要三个参数：面包、肉和蔬菜。柯里化后，这个函数可以变成三个函数：</p><ol><li>第一个函数接受面包。</li><li>第二个函数接受肉，并返回一个新的函数，这个新函数接受蔬菜。</li><li>第三个函数接受蔬菜，并最终完成三明治的制作。</li></ol><h3 id="为什么使用函数柯里化？"><a href="#为什么使用函数柯里化？" class="headerlink" title="为什么使用函数柯里化？"></a>为什么使用函数柯里化？</h3><ul><li><strong>提高代码可读性：</strong> 将一个复杂函数拆分成多个简单函数，更容易理解。</li><li><strong>部分应用：</strong> 可以固定部分参数，生成新的函数，提高代码的复用性。</li><li><strong>延迟计算：</strong> 可以将部分计算延迟到需要的时候再进行，提高性能。</li><li><strong>函数式编程范式：</strong> 函数柯里化是函数式编程中的一个重要概念，可以帮助我们写出更简洁、更优雅的代码。</li></ul><h3 id="PHP中的函数柯里化示例"><a href="#PHP中的函数柯里化示例" class="headerlink" title="PHP中的函数柯里化示例"></a>PHP中的函数柯里化示例</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$x</span></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$y</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$x</span></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span> + <span class="variable">$y</span>;</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$add5</span> = <span class="title function_ invoke__">add</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$add5</span>(<span class="number">3</span>); <span class="comment">// 输出：8</span></span><br></pre></td></tr></tbody></table></figure><p>在这个例子中：</p><ol><li><code>add</code> 函数接受一个参数 <code>x</code>，返回一个匿名函数。</li><li>返回的匿名函数接受一个参数 <code>y</code>，并返回 <code>x + y</code> 的结果。</li><li><code>add5</code> 是 <code>add(5)</code> 的结果，它是一个固定了 <code>x</code> 为 5 的新函数。</li></ol><h3 id="函数柯里化的实现"><a href="#函数柯里化的实现" class="headerlink" title="函数柯里化的实现"></a>函数柯里化的实现</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params"><span class="variable">$fn</span></span>) </span>{</span><br><span class="line">    <span class="variable">$arity</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$fn</span>-&gt;<span class="title function_ invoke__">getParameters</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...<span class="variable">$args</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$fn</span>, <span class="variable">$arity</span></span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$args</span>) &gt;= <span class="variable">$arity</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$fn</span>, <span class="variable">$args</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...<span class="variable">$more</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$fn</span>, <span class="variable">$args</span>, <span class="variable">$arity</span></span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>(...<span class="title function_ invoke__">array_merge</span>(<span class="variable">$args</span>, <span class="variable">$more</span>));</span><br><span class="line">            };</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个函数可以将任何一个函数柯里化。</p><h3 id="柯里化的应用场景"><a href="#柯里化的应用场景" class="headerlink" title="柯里化的应用场景"></a>柯里化的应用场景</h3><ul><li><strong>数组操作：</strong> 对数组进行过滤、映射等操作时，可以将回调函数柯里化，提高代码的可读性。</li><li><strong>事件处理：</strong> 可以将事件处理函数柯里化，预先绑定一些参数，简化事件处理逻辑。</li><li><strong>函数组合：</strong> 可以将多个函数组合起来，形成一个新的函数。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>函数柯里化是一种强大的编程技巧，可以帮助我们写出更灵活、更可复用的代码。虽然PHP原生不支持柯里化，但是我们可以通过闭包和递归来实现。</p><p><strong>需要注意的是：</strong></p><ul><li><strong>性能开销：</strong> 柯里化会带来一定的性能开销，在性能要求较高的场景下，需要谨慎使用。</li><li><strong>代码复杂度：</strong> 过度使用柯里化可能会使代码变得难以理解。</li></ul><p><strong>何时使用柯里化？</strong></p><p>当您需要：</p><ul><li><strong>部分应用函数：</strong> 固定部分参数，生成新的函数。</li><li><strong>提高代码可读性：</strong> 将复杂函数拆分成多个简单函数。</li><li><strong>延迟计算：</strong> 将部分计算延迟到需要的时候再进行。</li></ul><p><strong>何时不使用柯里化？</strong></p><ul><li><strong>性能至上：</strong> 柯里化会带来一定的性能开销，如果性能是首要考虑因素，可以考虑其他方式。</li><li><strong>代码过于复杂：</strong> 过度使用柯里化可能会使代码变得难以理解。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匿名函数（Anonymous Functions）</title>
      <link href="/posts/anonymous-functions.html"/>
      <url>/posts/anonymous-functions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是匿名函数？"><a href="#什么是匿名函数？" class="headerlink" title="什么是匿名函数？"></a>什么是匿名函数？</h3><p>匿名函数，也称为闭包（Closure），是一种没有明确名称的函数。它可以像普通函数一样被调用，但通常被赋值给变量或作为参数传递给其他函数。</p><h3 id="匿名函数的语法"><a href="#匿名函数的语法" class="headerlink" title="匿名函数的语法"></a>匿名函数的语法</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$anonymousFunction</span> = <span class="function"><span class="keyword">function</span>(<span class="params">参数列表</span>) <span class="keyword">use</span> (<span class="params">变量列表</span>) </span>{</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ul><li><strong><code>function</code>关键字：</strong> 定义一个匿名函数。</li><li><strong>参数列表：</strong> 函数的参数。</li><li><strong><code>use</code>关键字：</strong> 用于指定匿名函数可以访问的外部变量。</li><li><strong>变量列表：</strong> 一个逗号分隔的变量列表，这些变量可以在匿名函数内部使用。</li><li><strong>函数体：</strong> 函数的具体实现。</li></ul><h3 id="匿名函数的示例"><a href="#匿名函数的示例" class="headerlink" title="匿名函数的示例"></a>匿名函数的示例</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的匿名函数</span></span><br><span class="line"><span class="variable">$greet</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$name</span></span>) </span>{</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hello, <span class="subst">$name</span>!"</span>;</span><br><span class="line">};</span><br><span class="line"><span class="variable">$greet</span>(<span class="string">'World'</span>); <span class="comment">// 输出：Hello, World!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用use关键字访问外部变量</span></span><br><span class="line"><span class="variable">$message</span> = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="variable">$sayHello</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$message</span></span>) </span>{</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$message</span>;</span><br><span class="line">};</span><br><span class="line"><span class="variable">$sayHello</span>(); <span class="comment">// 输出：Hello</span></span><br></pre></td></tr></tbody></table></figure><h3 id="匿名函数的应用场景"><a href="#匿名函数的应用场景" class="headerlink" title="匿名函数的应用场景"></a>匿名函数的应用场景</h3><ul><li><strong>回调函数：</strong> 匿名函数是回调函数的理想选择，可以将复杂的逻辑封装在匿名函数中，并作为参数传递给其他函数。</li><li><strong>数组操作：</strong> PHP的数组函数如<code>array_map</code>、<code>array_filter</code>等，经常使用匿名函数作为回调参数。</li><li><strong>延迟执行：</strong> 匿名函数可以捕获当前的上下文，在以后执行时仍然可以使用这些上下文信息。</li><li><strong>创建自定义函数：</strong> 可以通过匿名函数创建自定义的函数，实现灵活的编程。</li></ul><h3 id="匿名函数与闭包"><a href="#匿名函数与闭包" class="headerlink" title="匿名函数与闭包"></a>匿名函数与闭包</h3><p>匿名函数和闭包是紧密相关的概念。闭包是匿名函数的一个特性，即匿名函数可以访问其创建时的词法作用域。</p><h3 id="匿名函数的优点"><a href="#匿名函数的优点" class="headerlink" title="匿名函数的优点"></a>匿名函数的优点</h3><ul><li><strong>灵活：</strong> 可以随时定义和使用，无需提前声明。</li><li><strong>简洁：</strong> 可以将简单的逻辑封装在匿名函数中，提高代码的可读性。</li><li><strong>回调函数：</strong> 非常适合作为回调函数使用。</li></ul><h3 id="匿名函数的注意事项"><a href="#匿名函数的注意事项" class="headerlink" title="匿名函数的注意事项"></a>匿名函数的注意事项</h3><ul><li><strong>性能：</strong> 创建和调用匿名函数会有一定的性能开销，在性能要求较高的场景下，需要谨慎使用。</li><li><strong>作用域：</strong> 匿名函数可以访问其创建时的词法作用域，但要注意变量的作用域。</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>匿名函数是PHP中一个非常强大的工具，它可以帮助我们写出更加简洁、灵活和可读的代码。通过理解匿名函数的特性和应用场景，我们可以更好地利用它来解决各种编程问题。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 匿名函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶函数：提升代码表达力与复用性</title>
      <link href="/posts/highorder-functions.html"/>
      <url>/posts/highorder-functions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是高阶函数？"><a href="#什么是高阶函数？" class="headerlink" title="什么是高阶函数？"></a>什么是高阶函数？</h3><p>在编程中，函数是一段可复用的代码块。而高阶函数则是一种更高级的概念，它将函数本身作为参数进行传递，或者将函数作为返回值返回。换句话说，<strong>高阶函数就是操作函数的函数</strong>。<br><img src="/images/highorder-functions_1.jpg" alt=""></p><h3 id="PHP-中的高阶函数示例"><a href="#PHP-中的高阶函数示例" class="headerlink" title="PHP 中的高阶函数示例"></a>PHP 中的高阶函数示例</h3><h4 id="1-回调函数"><a href="#1-回调函数" class="headerlink" title="1. 回调函数"></a>1. <strong>回调函数</strong></h4><p>回调函数是最常见的应用场景之一。它将一个函数作为参数传递给另一个函数，在特定的条件下被调用。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_callback_function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hello from callback!"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call_with_callback</span>(<span class="params"><span class="variable">$callback</span></span>) </span>{</span><br><span class="line">    <span class="variable">$callback</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_with_callback</span>(<span class="string">'my_callback_function'</span>); <span class="comment">// 输出：Hello from callback!</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-数组函数"><a href="#2-数组函数" class="headerlink" title="2. 数组函数"></a>2. <strong>数组函数</strong></h4><p>PHP 提供了许多内置的数组函数，它们接受回调函数作为参数，对数组元素进行操作。</p><ul><li><p><strong>array_map:</strong> 对数组中的每个元素应用回调函数，并返回一个新的数组。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$numbers</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$squared</span> = <span class="title function_ invoke__">array_map</span>(function(<span class="variable">$num</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span> * <span class="variable">$num</span>;</span><br><span class="line">}, <span class="variable">$numbers</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$squared</span>); <span class="comment">// 输出：Array ( [0] =&gt; 1 [1] =&gt; 4 [2] =&gt; 9 [3] =&gt; 16 [4] =&gt; 25 )</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>array_filter:</strong> 根据回调函数的返回值筛选数组元素。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$numbers</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$even_numbers</span> = <span class="title function_ invoke__">array_filter</span>(<span class="variable">$numbers</span>, function(<span class="variable">$num</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span> % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">});</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$even_numbers</span>); <span class="comment">// 输出：Array ( [1] =&gt; 2 [3] =&gt; 4 )</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>array_reduce:</strong> 将数组归约为一个值。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$numbers</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$sum</span> = <span class="title function_ invoke__">array_reduce</span>(<span class="variable">$numbers</span>, function(<span class="variable">$carry</span>, <span class="variable">$item</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$item</span>;</span><br><span class="line">}, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sum</span>; <span class="comment">// 输出：15</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="3-自定义高阶函数"><a href="#3-自定义高阶函数" class="headerlink" title="3. 自定义高阶函数"></a>3. <strong>自定义高阶函数</strong></h4><p>你可以自定义高阶函数来满足特定的需求。<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twice</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$arg</span></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$func</span>(<span class="variable">$func</span>(<span class="variable">$arg</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params"><span class="variable">$x</span></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$x</span> * <span class="variable">$x</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">twice</span>(<span class="string">'square'</span>, <span class="number">2</span>); <span class="comment">// 输出：16</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="高阶函数的优点"><a href="#高阶函数的优点" class="headerlink" title="高阶函数的优点"></a>高阶函数的优点</h3><ul><li><strong>代码更简洁：</strong> 将重复的逻辑封装成函数，提高代码的可读性。</li><li><strong>代码更灵活：</strong> 通过传递不同的回调函数，可以实现不同的功能。</li><li><strong>函数式编程风格：</strong> 符合函数式编程的思想，使代码更具表达力。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>高阶函数是函数式编程的重要概念，在 PHP 中得到了广泛的应用。通过合理使用高阶函数，可以写出更简洁、灵活、可维护的代码。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> 高阶函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 中，二维地图坐标的表示方法</title>
      <link href="/posts/php-2d-coordinate.html"/>
      <url>/posts/php-2d-coordinate.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在PHP中，二维地图的坐标可以通过不同的方法来表示，最常见的方式是使用二维数组或对象来存储坐标信息。</p><h3 id="使用二维数组表示二维地图的坐标"><a href="#使用二维数组表示二维地图的坐标" class="headerlink" title="使用二维数组表示二维地图的坐标"></a>使用二维数组表示二维地图的坐标</h3><p>二维数组是一种简单直观的方式来表示地图的坐标，每个元素代表地图上的一个点或单元格。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例：创建一个5x5的二维地图</span></span><br><span class="line"><span class="variable">$map</span> = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印地图</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$map</span> <span class="keyword">as</span> <span class="variable">$row</span>) {</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$row</span> <span class="keyword">as</span> <span class="variable">$cell</span>) {</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$cell</span> . <span class="string">' '</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment">    0 0 0 0 0</span></span><br><span class="line"><span class="comment">    0 1 0 1 0</span></span><br><span class="line"><span class="comment">    0 0 0 0 0</span></span><br><span class="line"><span class="comment">    0 1 0 1 0</span></span><br><span class="line"><span class="comment">    0 0 0 0 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问特定坐标 (2, 3)</span></span><br><span class="line"><span class="variable">$x</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable">$y</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"The value at (<span class="subst">$x</span>, <span class="subst">$y</span>) is: "</span> . <span class="variable">$map</span>[<span class="variable">$x</span>][<span class="variable">$y</span>];<span class="comment">// output: The value at (2, 3) is: 0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用对象表示二维地图的坐标"><a href="#使用对象表示二维地图的坐标" class="headerlink" title="使用对象表示二维地图的坐标"></a>使用对象表示二维地图的坐标</h3><p>另一种方式是使用对象来表示坐标，这种方式更加结构化，适合扩展和维护。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个坐标类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$y</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>) </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;x = <span class="variable">$x</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;y = <span class="variable">$y</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(<span class="subst">$this</span>-&gt;x, <span class="subst">$this</span>-&gt;y)"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：创建一些坐标</span></span><br><span class="line"><span class="variable">$coord1</span> = <span class="keyword">new</span> <span class="title class_">Coordinate</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable">$coord2</span> = <span class="keyword">new</span> <span class="title class_">Coordinate</span>(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印坐标</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Coordinate 1: "</span> . <span class="variable">$coord1</span> . PHP_EOL;<span class="comment">// output: Coordinate 1: (2, 3)</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Coordinate 2: "</span> . <span class="variable">$coord2</span> . PHP_EOL;<span class="comment">// output: Coordinate 2: (4, 5)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储坐标在数组中</span></span><br><span class="line"><span class="variable">$map</span> = [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Coordinate</span>(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Coordinate</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Coordinate</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印地图中的所有坐标</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$map</span> <span class="keyword">as</span> <span class="variable">$coord</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$coord</span> . PHP_EOL;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment">(0, 0)</span></span><br><span class="line"><span class="comment">(1, 2)</span></span><br><span class="line"><span class="comment">(3, 4)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="选择合适的表示方式"><a href="#选择合适的表示方式" class="headerlink" title="选择合适的表示方式"></a>选择合适的表示方式</h3><ul><li>如果地图是一个简单的网格，并且只需要存储基本的状态信息（例如是否有障碍物），二维数组是一个不错的选择。</li><li>如果需要存储更多的信息或需要扩展功能（例如坐标的操作方法），使用对象会更加合适。</li></ul><p>这两种方式都可以根据具体需求选择合适的表示方式来实现二维地图的坐标表示。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 2D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契堆：一种高效的优先队列</title>
      <link href="/posts/fibonacci-heap.html"/>
      <url>/posts/fibonacci-heap.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="斐波那契堆是什么？"><a href="#斐波那契堆是什么？" class="headerlink" title="斐波那契堆是什么？"></a>斐波那契堆是什么？</h3><p>斐波那契堆是一种特殊的堆数据结构，它在插入、删除最小值、合并等操作上具有非常优秀的均摊时间复杂度。与传统的二项堆相比，斐波那契堆在某些操作上表现得更加高效。</p><h3 id="斐波那契堆的结构"><a href="#斐波那契堆的结构" class="headerlink" title="斐波那契堆的结构"></a>斐波那契堆的结构</h3><ul><li><strong>最小堆的集合:</strong> 斐波那契堆实际上是一组最小堆的集合。每个堆是一棵树，且满足最小堆的性质（即每个节点的值都大于等于其父节点的值）。</li><li><strong>根链表:</strong> 所有树的根节点通过双向链表连接起来，形成一个根链表。</li><li><strong>度:</strong> 每个节点的度定义为其子节点的数量。</li><li><strong>标记:</strong> 每个节点有一个标记位，用于延迟减少树的度数的操作。</li></ul><h3 id="斐波那契堆的操作"><a href="#斐波那契堆的操作" class="headerlink" title="斐波那契堆的操作"></a>斐波那契堆的操作</h3><ul><li><strong>插入:</strong> 将新节点插入到根链表中。</li><li><strong>查找最小值:</strong> 从根链表中找到最小节点。</li><li><strong>删除最小值:</strong> 删除最小节点，并将它的子节点加入到根链表中。</li><li><strong>减小关键字:</strong> 减少一个节点的关键字，如果违反了最小堆的性质，则进行一系列的切割和合并操作。</li><li><strong>合并:</strong> 将两个斐波那契堆合并成一个。</li></ul><h3 id="斐波那契堆的时间复杂度"><a href="#斐波那契堆的时间复杂度" class="headerlink" title="斐波那契堆的时间复杂度"></a>斐波那契堆的时间复杂度</h3><p>斐波那契堆的许多操作都具有常数的<strong>摊还时间复杂度</strong>。这意味着一系列操作的总时间复杂度是有界的，即使单个操作可能需要较长时间。</p><div class="table-container"><table><thead><tr><th>操作</th><th>最坏情况时间复杂度</th><th>均摊时间复杂度</th></tr></thead><tbody><tr><td>插入</td><td>O(1)</td><td>O(1)</td></tr><tr><td>查找最小值</td><td>O(1)</td><td>O(1)</td></tr><tr><td>删除最小值</td><td>O(log n)</td><td>O(log n)</td></tr><tr><td>减小关键字</td><td>O(log n)</td><td>O(1)</td></tr><tr><td>合并</td><td>O(1)</td><td>O(1)</td></tr></tbody></table></div><h3 id="斐波那契堆的应用"><a href="#斐波那契堆的应用" class="headerlink" title="斐波那契堆的应用"></a>斐波那契堆的应用</h3><ul><li><strong>Dijkstra算法:</strong> 斐波那契堆可以用来优化Dijkstra算法，使得算法的运行时间从O(V^2)降低到O(E + VlogV)。</li><li><strong>Prim算法:</strong> 斐波那契堆也可以用来优化Prim算法，用于求最小生成树。</li><li><strong>其他贪心算法:</strong> 许多贪心算法都可以受益于斐波那契堆的高效性。</li></ul><h3 id="为什么叫斐波那契堆？"><a href="#为什么叫斐波那契堆？" class="headerlink" title="为什么叫斐波那契堆？"></a>为什么叫斐波那契堆？</h3><p>斐波那契堆的名字来源于对堆中树的度数的分析。可以证明，在斐波那契堆中，度为k的树的节点数至少是斐波那契数F(k+2)。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>斐波那契堆是一种非常高效的优先队列数据结构，它在许多算法中都有重要的应用。虽然其实现相对复杂，但其优秀的性能使其成为算法设计中一个强大的工具。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heap </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆：一种特殊的树形数据结构</title>
      <link href="/posts/heap.html"/>
      <url>/posts/heap.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>堆（Heap）是一种特殊的树形数据结构，它满足以下性质（堆序性）：</p><ul><li><strong>最大堆（Max-Heap）：</strong> 每个节点的值都大于或等于其子节点的值。</li><li><strong>最小堆（Min-Heap）：</strong> 每个节点的值都小于或等于其子节点的值。</li></ul><h3 id="堆的性质"><a href="#堆的性质" class="headerlink" title="堆的性质"></a>堆的性质</h3><ul><li><strong>完全二叉树：</strong> 堆一般用数组来实现，可以看作是一棵完全二叉树。</li><li><strong>堆序性：</strong> 堆中每个节点的值都满足堆序性。</li></ul><h3 id="堆的应用"><a href="#堆的应用" class="headerlink" title="堆的应用"></a>堆的应用</h3><p>堆在计算机科学中有着广泛的应用，主要包括：</p><ul><li><strong>优先队列：</strong> 堆常用于实现优先队列，例如在贪心算法和A*搜索算法中。</li><li><strong>堆排序：</strong> 堆排序是一种高效的排序算法，时间复杂度为O(nlogn)。</li><li><strong>求第k大/小元素：</strong> 利用堆可以高效地求取无序数组中的第k大/小元素。</li></ul><h3 id="堆的实现"><a href="#堆的实现" class="headerlink" title="堆的实现"></a>堆的实现</h3><p>堆通常用数组来实现，数组的下标从1开始。对于一个节点i，其左子节点的下标为2i，右子节点的下标为2i+1，父节点的下标为i/2。</p><p><img src="/images/heap_max-heap-1.webp" alt=""><br><img src="/images/heap_max-heap-2.webp" alt=""><br><img src="/images/heap_min-heap-1.webp" alt=""><br><img src="/images/heap_min-heap-2.webp" alt=""></p><h3 id="堆的操作"><a href="#堆的操作" class="headerlink" title="堆的操作"></a>堆的操作</h3><ul><li><strong>插入：</strong> 将新元素插入到堆的末尾，然后向上调整（heapify up）直到满足堆序性。</li><li><strong>删除：</strong> 将堆顶元素与最后一个元素交换，然后向下调整（heapify down）直到满足堆序性。</li><li><strong>查找最小/最大值：</strong> 堆顶元素就是最小/最大值。</li></ul><p><img src="/images/heap_2.png" alt=""></p><h3 id="斐波那契堆"><a href="#斐波那契堆" class="headerlink" title="斐波那契堆"></a>斐波那契堆</h3><p>斐波那契堆是一种更为复杂但高效的堆数据结构。它在某些操作上具有更好的摊还时间复杂度，如插入、删除最小值等。斐波那契堆由一组最小堆序的有根树组成，每个树的根节点通过双向循环链表连接起来。</p><p><img src="/images/heap_Fibonacci-Heap.png" alt=""></p><h3 id="堆的代码实现（php）"><a href="#堆的代码实现（php）" class="headerlink" title="堆的代码实现（php）"></a>堆的代码实现（php）</h3><ul><li><p>最小堆（Min-Heap）</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinHeap</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$heap</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;heap = [];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"><span class="variable">$value</span></span>) </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;heap[] = <span class="variable">$value</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">heapifyUp</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;heap) - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">extractMin</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;heap)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">UnderflowException</span>(<span class="string">"Heap is empty"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="variable">$min</span> = <span class="variable language_">$this</span>-&gt;heap[<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$last</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$this</span>-&gt;heap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;heap)) {</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;heap[<span class="number">0</span>] = <span class="variable">$last</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">heapifyDown</span>(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$min</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">heapifyUp</span>(<span class="params"><span class="variable">$index</span></span>) </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$index</span> &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="variable">$parentIndex</span> = (<span class="keyword">int</span>)((<span class="variable">$index</span> - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;heap[<span class="variable">$index</span>] &gt;= <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$parentIndex</span>]) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">swap</span>(<span class="variable">$index</span>, <span class="variable">$parentIndex</span>);</span><br><span class="line">            <span class="variable">$index</span> = <span class="variable">$parentIndex</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">heapifyDown</span>(<span class="params"><span class="variable">$index</span></span>) </span>{</span><br><span class="line">        <span class="variable">$size</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;heap);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            <span class="variable">$leftChildIndex</span> = <span class="number">2</span> * <span class="variable">$index</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$rightChildIndex</span> = <span class="number">2</span> * <span class="variable">$index</span> + <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$smallest</span> = <span class="variable">$index</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$leftChildIndex</span> &lt; <span class="variable">$size</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$leftChildIndex</span>] &lt; <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$smallest</span>]) {</span><br><span class="line">                <span class="variable">$smallest</span> = <span class="variable">$leftChildIndex</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$rightChildIndex</span> &lt; <span class="variable">$size</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$rightChildIndex</span>] &lt; <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$smallest</span>]) {</span><br><span class="line">                <span class="variable">$smallest</span> = <span class="variable">$rightChildIndex</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$smallest</span> === <span class="variable">$index</span>) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">swap</span>(<span class="variable">$index</span>, <span class="variable">$smallest</span>);</span><br><span class="line">            <span class="variable">$index</span> = <span class="variable">$smallest</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="variable">$i</span>, <span class="variable">$j</span></span>) </span>{</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$i</span>] = <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$j</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="variable">$minHeap</span> = <span class="keyword">new</span> <span class="title class_">MinHeap</span>();</span><br><span class="line"><span class="variable">$minHeap</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable">$minHeap</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable">$minHeap</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable">$minHeap</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable">$minHeap</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$minHeap</span>-&gt;<span class="title function_ invoke__">extractMin</span>(); <span class="comment">// 输出 2</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$minHeap</span>-&gt;<span class="title function_ invoke__">extractMin</span>(); <span class="comment">// 输出 3</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>最大堆（Max-Heap）</p></li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxHeap</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$heap</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;heap = [];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"><span class="variable">$value</span></span>) </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;heap[] = <span class="variable">$value</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">heapifyUp</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;heap) - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">extractMax</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;heap)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">UnderflowException</span>(<span class="string">"Heap is empty"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="variable">$max</span> = <span class="variable language_">$this</span>-&gt;heap[<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$last</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$this</span>-&gt;heap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;heap)) {</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;heap[<span class="number">0</span>] = <span class="variable">$last</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">heapifyDown</span>(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$max</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">heapifyUp</span>(<span class="params"><span class="variable">$index</span></span>) </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$index</span> &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="variable">$parentIndex</span> = (<span class="keyword">int</span>)((<span class="variable">$index</span> - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;heap[<span class="variable">$index</span>] &lt;= <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$parentIndex</span>]) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">swap</span>(<span class="variable">$index</span>, <span class="variable">$parentIndex</span>);</span><br><span class="line">            <span class="variable">$index</span> = <span class="variable">$parentIndex</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">heapifyDown</span>(<span class="params"><span class="variable">$index</span></span>) </span>{</span><br><span class="line">        <span class="variable">$size</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;heap);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            <span class="variable">$leftChildIndex</span> = <span class="number">2</span> * <span class="variable">$index</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$rightChildIndex</span> = <span class="number">2</span> * <span class="variable">$index</span> + <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$largest</span> = <span class="variable">$index</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$leftChildIndex</span> &lt; <span class="variable">$size</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$leftChildIndex</span>] &gt; <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$largest</span>]) {</span><br><span class="line">                <span class="variable">$largest</span> = <span class="variable">$leftChildIndex</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$rightChildIndex</span> &lt; <span class="variable">$size</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$rightChildIndex</span>] &gt; <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$largest</span>]) {</span><br><span class="line">                <span class="variable">$largest</span> = <span class="variable">$rightChildIndex</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$largest</span> === <span class="variable">$index</span>) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">swap</span>(<span class="variable">$index</span>, <span class="variable">$largest</span>);</span><br><span class="line">            <span class="variable">$index</span> = <span class="variable">$largest</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"><span class="variable">$i</span>, <span class="variable">$j</span></span>) </span>{</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$i</span>] = <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$j</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;heap[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例使用</span></span><br><span class="line"><span class="variable">$maxHeap</span> = <span class="keyword">new</span> <span class="title class_">MaxHeap</span>();</span><br><span class="line"><span class="variable">$maxHeap</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable">$maxHeap</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable">$maxHeap</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable">$maxHeap</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable">$maxHeap</span>-&gt;<span class="title function_ invoke__">insert</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$maxHeap</span>-&gt;<span class="title function_ invoke__">extractMax</span>(); <span class="comment">// 输出 10</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$maxHeap</span>-&gt;<span class="title function_ invoke__">extractMax</span>(); <span class="comment">// 输出 7</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>解释</li></ul><ol><li><p><strong>类构造</strong>：</p><ul><li><code>MinHeap</code> 和 <code>MaxHeap</code> 类都有一个私有数组 <code>$heap</code> 来存储堆元素。</li></ul></li><li><p><strong>插入操作</strong>：</p><ul><li><code>insert($value)</code> 方法将新值添加到堆的末尾，然后调用 <code>heapifyUp</code> 方法将其上浮到正确位置。</li></ul></li><li><p><strong>删除操作</strong>：</p><ul><li><code>extractMin()</code> 和 <code>extractMax()</code> 方法分别用于提取并删除最小堆中的最小值和最大堆中的最大值。</li><li>通过交换根节点和最后一个节点的值，然后将根节点下沉到正确位置。</li></ul></li><li><p><strong>堆化操作</strong>：</p><ul><li><code>heapifyUp($index)</code> 方法用于在插入新元素后将其上浮到正确位置。</li><li><code>heapifyDown($index)</code> 方法用于在删除根节点后将新的根节点下沉到正确位置。</li></ul></li><li><p><strong>交换操作</strong>：</p><ul><li><code>swap($i, $j)</code> 方法用于交换数组中两个元素的位置</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>堆是一种非常有用的数据结构，在算法设计中有着广泛的应用。通过了解堆的性质、操作和实现，可以更好地解决各种算法问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heap </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 解决旅行商问题</title>
      <link href="/posts/php-2d-tsp-solution.html"/>
      <url>/posts/php-2d-tsp-solution.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如果需要在二维地图上找到一条路径，使得从起点到终点经过所有有奖励的点，并且路径最短，可以考虑使用图搜索算法如A*算法或Dijkstra算法的变种。这类问题通常称为“旅行商问题”（TSP, Traveling Salesman Problem），是一种经典的组合优化问题。</p><p>以下是使用A*算法的一个基本示例，你可以根据需要进行扩展，以包括所有奖励点。</p><h3 id="示例地图（带奖励点）"><a href="#示例地图（带奖励点）" class="headerlink" title="示例地图（带奖励点）"></a>示例地图（带奖励点）</h3><p>假设地图如下：</p><ul><li>0 表示可以通行的空地。</li><li>1 表示障碍物。</li><li>R 表示奖励点。</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$y</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>) </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;x = <span class="variable">$x</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;y = <span class="variable">$y</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(<span class="subst">$this</span>-&gt;x, <span class="subst">$this</span>-&gt;y)"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findShortestPath</span>(<span class="params"><span class="variable">$map</span>, <span class="variable">$start</span>, <span class="variable">$end</span>, <span class="variable">$rewards</span></span>) </span>{</span><br><span class="line">    <span class="variable">$rows</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$map</span>);</span><br><span class="line">    <span class="variable">$cols</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$map</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="variable">$directions</span> = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">0</span>]]; <span class="comment">// 右, 下, 左, 上</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$queue</span> = <span class="keyword">new</span> <span class="built_in">SplPriorityQueue</span>();</span><br><span class="line">    <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">insert</span>([<span class="variable">$start</span>, [<span class="variable">$start</span>], <span class="number">0</span>], <span class="number">0</span>); <span class="comment">// 队列中存储当前点、路径、已走步数</span></span><br><span class="line">    <span class="variable">$visited</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">isEmpty</span>()) {</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$current</span>, <span class="variable">$path</span>, <span class="variable">$cost</span>) = <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">extract</span>();</span><br><span class="line">        <span class="variable">$x</span> = <span class="variable">$current</span>-&gt;x;</span><br><span class="line">        <span class="variable">$y</span> = <span class="variable">$current</span>-&gt;y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> == <span class="variable">$end</span>-&gt;x &amp;&amp; <span class="variable">$y</span> == <span class="variable">$end</span>-&gt;y &amp;&amp; <span class="keyword">empty</span>(<span class="variable">$rewards</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$path</span>; <span class="comment">// 找到路径</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$directions</span> <span class="keyword">as</span> <span class="variable">$direction</span>) {</span><br><span class="line">            <span class="variable">$newX</span> = <span class="variable">$x</span> + <span class="variable">$direction</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="variable">$newY</span> = <span class="variable">$y</span> + <span class="variable">$direction</span>[<span class="number">1</span>];</span><br><span class="line">            <span class="variable">$newPoint</span> = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="variable">$newX</span>, <span class="variable">$newY</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$newX</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$newX</span> &lt; <span class="variable">$rows</span> &amp;&amp; <span class="variable">$newY</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$newY</span> &lt; <span class="variable">$cols</span> &amp;&amp; <span class="variable">$map</span>[<span class="variable">$newX</span>][<span class="variable">$newY</span>] != <span class="number">1</span> &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$visited</span>[<span class="string">"<span class="subst">$newX</span>,<span class="subst">$newY</span>"</span>])) {</span><br><span class="line">                <span class="variable">$newCost</span> = <span class="variable">$cost</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="variable">$newRewards</span> = <span class="title function_ invoke__">array_filter</span>(<span class="variable">$rewards</span>, function(<span class="variable">$reward</span>) <span class="keyword">use</span> ($<span class="title">newPoint</span>) {</span><br><span class="line">                    <span class="title">return</span> !($<span class="title">reward</span>-&gt;<span class="title">x</span> == $<span class="title">newPoint</span>-&gt;<span class="title">x</span> &amp;&amp; $<span class="title">reward</span>-&gt;<span class="title">y</span> == $<span class="title">newPoint</span>-&gt;<span class="title">y</span>);</span><br><span class="line">                });</span><br><span class="line"></span><br><span class="line">                <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">insert</span>([<span class="variable">$newPoint</span>, <span class="title function_ invoke__">array_merge</span>(<span class="variable">$path</span>, [<span class="variable">$newPoint</span>]), <span class="variable">$newCost</span>], -<span class="variable">$newCost</span>);</span><br><span class="line">                <span class="variable">$visited</span>[<span class="string">"<span class="subst">$newX</span>,<span class="subst">$newY</span>"</span>] = <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 无路径</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例地图：0表示可以通行，1表示障碍物，R表示奖励点</span></span><br><span class="line"><span class="variable">$map</span> = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$start</span> = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$end</span> = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable">$rewards</span> = [<span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">2</span>, <span class="number">2</span>), <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>, <span class="number">1</span>)]; <span class="comment">// 奖励点的坐标</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$path</span> = <span class="title function_ invoke__">findShortestPath</span>(<span class="variable">$map</span>, <span class="variable">$start</span>, <span class="variable">$end</span>, <span class="variable">$rewards</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$path</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Path found:\n"</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$path</span> <span class="keyword">as</span> <span class="variable">$point</span>) {</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$point</span> . <span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"No path found."</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h3><ol><li><strong>Point类</strong>：用于表示地图上的点。</li><li><strong>findShortestPath函数</strong>：实现了一个基本的优先队列搜索算法，接收地图、起点、终点和奖励点作为参数，返回从起点到终点经过所有奖励点的路径。</li><li><strong>directions数组</strong>：表示四个可能的移动方向（右、下、左、上）。</li><li><strong>队列（SplPriorityQueue）</strong>：用于存储当前点、路径和已走步数，并按优先级排序。</li><li><strong>visited数组</strong>：用于标记已访问的点，避免重复访问。</li></ol><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><p>如果找到路径，程序将输出从起点到终点经过所有奖励点的路径。如果没有路径，则输出“无路径”。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>这个示例中的算法实现了一个基本的优先队列搜索，并且在每次移动时检查是否经过奖励点。对于更复杂的地图和更多的奖励点，可以使用更高级的图搜索算法，如A*算法，并结合动态规划或其他优化技术。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 2D </tag>
            
            <tag> 旅行商问题 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 解决最短路径问题</title>
      <link href="/posts/php-2d-shortest-route.html"/>
      <url>/posts/php-2d-shortest-route.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在二维地图上寻找从A点到B点的最短路径是一项常见的任务，通常可以使用图算法来解决。常用的算法包括广度优先搜索（BFS）、Dijkstra算法和A*算法。</p><h3 id="使用广度优先搜索（BFS）算法寻找最短路径"><a href="#使用广度优先搜索（BFS）算法寻找最短路径" class="headerlink" title="使用广度优先搜索（BFS）算法寻找最短路径"></a>使用广度优先搜索（BFS）算法寻找最短路径</h3><p>广度优先搜索是一种简单而有效的算法，对于在无权图（即每条边的权重相同）中寻找最短路径非常适用。以下是在PHP中实现BFS算法的示例：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$y</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>) </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;x = <span class="variable">$x</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;y = <span class="variable">$y</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(<span class="subst">$this</span>-&gt;x, <span class="subst">$this</span>-&gt;y)"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bfs</span>(<span class="params"><span class="variable">$map</span>, <span class="variable">$start</span>, <span class="variable">$end</span></span>) </span>{</span><br><span class="line">    <span class="variable">$rows</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$map</span>);</span><br><span class="line">    <span class="variable">$cols</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$map</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="variable">$directions</span> = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">0</span>]]; <span class="comment">// 右, 下, 左, 上</span></span><br><span class="line">    <span class="variable">$queue</span> = <span class="keyword">new</span> <span class="built_in">SplQueue</span>();</span><br><span class="line">    <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">enqueue</span>([<span class="variable">$start</span>, [<span class="variable">$start</span>]]); <span class="comment">// 队列中存储当前点和路径</span></span><br><span class="line">    <span class="variable">$visited</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">isEmpty</span>()) {</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$current</span>, <span class="variable">$path</span>) = <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">dequeue</span>();</span><br><span class="line">        <span class="variable">$x</span> = <span class="variable">$current</span>-&gt;x;</span><br><span class="line">        <span class="variable">$y</span> = <span class="variable">$current</span>-&gt;y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$x</span> == <span class="variable">$end</span>-&gt;x &amp;&amp; <span class="variable">$y</span> == <span class="variable">$end</span>-&gt;y) {</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$path</span>; <span class="comment">// 找到路径</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$directions</span> <span class="keyword">as</span> <span class="variable">$direction</span>) {</span><br><span class="line">            <span class="variable">$newX</span> = <span class="variable">$x</span> + <span class="variable">$direction</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="variable">$newY</span> = <span class="variable">$y</span> + <span class="variable">$direction</span>[<span class="number">1</span>];</span><br><span class="line">            <span class="variable">$newPoint</span> = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="variable">$newX</span>, <span class="variable">$newY</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$newX</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$newX</span> &lt; <span class="variable">$rows</span> &amp;&amp; <span class="variable">$newY</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$newY</span> &lt; <span class="variable">$cols</span> &amp;&amp; <span class="variable">$map</span>[<span class="variable">$newX</span>][<span class="variable">$newY</span>] == <span class="number">0</span> &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$visited</span>[<span class="string">"<span class="subst">$newX</span>,<span class="subst">$newY</span>"</span>])) {</span><br><span class="line">                <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">enqueue</span>([<span class="variable">$newPoint</span>, <span class="title function_ invoke__">array_merge</span>(<span class="variable">$path</span>, [<span class="variable">$newPoint</span>])]);</span><br><span class="line">                <span class="variable">$visited</span>[<span class="string">"<span class="subst">$newX</span>,<span class="subst">$newY</span>"</span>] = <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 无路径</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例地图：0表示可以通行，1表示障碍物</span></span><br><span class="line"><span class="variable">$map</span> = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$start</span> = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$end</span> = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$path</span> = <span class="title function_ invoke__">bfs</span>(<span class="variable">$map</span>, <span class="variable">$start</span>, <span class="variable">$end</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$path</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Path found:\n"</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$path</span> <span class="keyword">as</span> <span class="variable">$point</span>) {</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$point</span> . <span class="string">" "</span>;</span><br><span class="line"><span class="comment">// output: (0, 0) (1, 0) (2, 0) (2, 1) (2, 2) (2, 3) (2, 4) (3, 4) (4, 4) </span></span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"No path found."</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h3><ul><li><strong>Point类</strong>：用于表示地图上的点。</li><li><strong>bfs函数</strong>：实现广度优先搜索算法，接收地图、起点和终点作为参数，返回从起点到终点的路径。</li><li><strong>directions数组</strong>：表示四个可能的移动方向（右、下、左、上）。</li><li><strong>队列（SplQueue）</strong>：用于存储当前点和路径。</li><li><strong>visited数组</strong>：用于标记已访问的点，避免重复访问。</li></ul><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><p>如果找到路径，程序将输出从起点到终点的路径。如果没有路径，则输出“无路径”。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>广度优先搜索适用于在无权图中寻找最短路径。如果地图中有不同权重的边或者需要考虑效率，可以考虑使用Dijkstra算法或A*算法。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 2D </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP SplQueue 类使用指南</title>
      <link href="/posts/php-splqueue-guide.html"/>
      <url>/posts/php-splqueue-guide.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是-SplQueue？"><a href="#什么是-SplQueue？" class="headerlink" title="什么是 SplQueue？"></a>什么是 SplQueue？</h3><p>SplQueue 是 PHP 标准库 (SPL) 提供的一个类，用于实现队列这种数据结构。队列遵循先进先出的原则（FIFO：First In, First Out），即先进入队列的元素会先被取出。</p><h3 id="为什么使用-SplQueue？"><a href="#为什么使用-SplQueue？" class="headerlink" title="为什么使用 SplQueue？"></a>为什么使用 SplQueue？</h3><ul><li><strong>高效：</strong> SplQueue 基于双向链表实现，提供了高效的插入和删除操作。</li><li><strong>方便：</strong> 提供了一组直观的方法，方便操作队列。</li><li><strong>标准：</strong> 是 PHP 标准库的一部分，无需额外安装。</li></ul><h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><ul><li><strong>enqueue($value):</strong> 将一个值添加到队列尾部。</li><li><strong>dequeue():</strong> 从队列头部移除并返回一个值。</li><li><strong>isEmpty():</strong> 检查队列是否为空。</li><li><strong>count():</strong> 返回队列中的元素个数。</li><li><strong>bottom():</strong> 获取队列的头部元素（但不移除）。</li><li><strong>top():</strong> 获取队列的尾部元素（但不移除）。</li><li><strong>insert($value,$index):</strong> 在指定位置插入一个新元素。</li></ul><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建一个新的队列</span></span><br><span class="line"><span class="variable">$queue</span> = <span class="keyword">new</span> <span class="built_in">SplQueue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'apple'</span>);</span><br><span class="line"><span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'banana'</span>);</span><br><span class="line"><span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'orange'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印队列中的所有元素</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Queue elements:\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$queue</span> <span class="keyword">as</span> <span class="variable">$element</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$element</span> . <span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">dequeue</span>() . <span class="string">"\n"</span>; <span class="comment">// 输出：apple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否为空</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">isEmpty</span>()); <span class="comment">// 输出：bool(false)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取队列长度</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">count</span>() . <span class="string">"\n"</span>; <span class="comment">// 输出：2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看队列的头部和尾部元素</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Front element: "</span> . <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">bottom</span>() . <span class="string">"\n"</span>; <span class="comment">// 输出 "banana"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Rear element: "</span> . <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">top</span>() . <span class="string">"\n"</span>;     <span class="comment">// 输出 "orange"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="完整示例：模拟一个简单的任务队列"><a href="#完整示例：模拟一个简单的任务队列" class="headerlink" title="完整示例：模拟一个简单的任务队列"></a>完整示例：模拟一个简单的任务队列</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>) </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个任务队列</span></span><br><span class="line"><span class="variable">$taskQueue</span> = <span class="keyword">new</span> <span class="built_in">SplQueue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加任务</span></span><br><span class="line"><span class="variable">$taskQueue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="string">'Task 1'</span>));</span><br><span class="line"><span class="variable">$taskQueue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="string">'Task 2'</span>));</span><br><span class="line"><span class="variable">$taskQueue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="string">'Task 3'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理任务</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="variable">$taskQueue</span>-&gt;<span class="title function_ invoke__">isEmpty</span>()) {</span><br><span class="line">    <span class="variable">$task</span> = <span class="variable">$taskQueue</span>-&gt;<span class="title function_ invoke__">dequeue</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Processing task: "</span> . <span class="variable">$task</span>-&gt;name . <span class="string">"\n"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="常见的使用情景"><a href="#常见的使用情景" class="headerlink" title="常见的使用情景"></a>常见的使用情景</h3><h4 id="1-任务调度系统"><a href="#1-任务调度系统" class="headerlink" title="1. 任务调度系统"></a>1. 任务调度系统</h4><p>在任务调度系统中，任务按照一定的顺序排队执行。使用 <code>SplQueue</code> 可以方便地管理任务队列，确保任务按照添加的顺序依次执行。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tasks</span> = <span class="keyword">new</span> <span class="built_in">SplQueue</span>();</span><br><span class="line"><span class="variable">$tasks</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'Task 1'</span>);</span><br><span class="line"><span class="variable">$tasks</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'Task 2'</span>);</span><br><span class="line"><span class="variable">$tasks</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'Task 3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="variable">$tasks</span>-&gt;<span class="title function_ invoke__">isEmpty</span>()) {</span><br><span class="line">    <span class="variable">$task</span> = <span class="variable">$tasks</span>-&gt;<span class="title function_ invoke__">dequeue</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Executing: <span class="subst">$task</span>\n"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-宽度优先搜索（BFS）算法"><a href="#2-宽度优先搜索（BFS）算法" class="headerlink" title="2. 宽度优先搜索（BFS）算法"></a>2. 宽度优先搜索（BFS）算法</h4><p>在图算法中，广度优先搜索（BFS）需要使用队列来存储节点。<code>SplQueue</code> 可以用于实现BFS算法，遍历图或树的节点。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bfs</span>(<span class="params"><span class="variable">$graph</span>, <span class="variable">$start</span></span>) </span>{</span><br><span class="line">    <span class="variable">$queue</span> = <span class="keyword">new</span> <span class="built_in">SplQueue</span>();</span><br><span class="line">    <span class="variable">$visited</span> = [];</span><br><span class="line">    <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="variable">$start</span>);</span><br><span class="line">    <span class="variable">$visited</span>[<span class="variable">$start</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">isEmpty</span>()) {</span><br><span class="line">        <span class="variable">$node</span> = <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">dequeue</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Visited: <span class="subst">$node</span>\n"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$graph</span>[<span class="variable">$node</span>] <span class="keyword">as</span> <span class="variable">$neighbor</span>) {</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$visited</span>[<span class="variable">$neighbor</span>])) {</span><br><span class="line">                <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="variable">$neighbor</span>);</span><br><span class="line">                <span class="variable">$visited</span>[<span class="variable">$neighbor</span>] = <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$graph</span> = [</span><br><span class="line">    <span class="string">'A'</span> =&gt; [<span class="string">'B'</span>, <span class="string">'C'</span>],</span><br><span class="line">    <span class="string">'B'</span> =&gt; [<span class="string">'D'</span>, <span class="string">'E'</span>],</span><br><span class="line">    <span class="string">'C'</span> =&gt; [<span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'D'</span> =&gt; [],</span><br><span class="line">    <span class="string">'E'</span> =&gt; [<span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'F'</span> =&gt; []</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">bfs</span>(<span class="variable">$graph</span>, <span class="string">'A'</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="3-生产者-消费者模式"><a href="#3-生产者-消费者模式" class="headerlink" title="3. 生产者-消费者模式"></a>3. 生产者-消费者模式</h4><p>在多线程或多进程环境中，可以使用 <code>SplQueue</code> 实现生产者-消费者模式。生产者将任务添加到队列中，消费者从队列中取出任务进行处理。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$queue</span> = <span class="keyword">new</span> <span class="built_in">SplQueue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者线程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">producer</span>(<span class="params"><span class="variable">$queue</span></span>) </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">"Item <span class="subst">$i</span>"</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Produced: Item <span class="subst">$i</span>\n"</span>;</span><br><span class="line">        <span class="title function_ invoke__">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者线程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consumer</span>(<span class="params"><span class="variable">$queue</span></span>) </span>{</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">isEmpty</span>()) {</span><br><span class="line">            <span class="variable">$item</span> = <span class="variable">$queue</span>-&gt;<span class="title function_ invoke__">dequeue</span>();</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Consumed: <span class="subst">$item</span>\n"</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Queue is empty, waiting...\n"</span>;</span><br><span class="line">            <span class="title function_ invoke__">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟生产者和消费者</span></span><br><span class="line"><span class="title function_ invoke__">producer</span>(<span class="variable">$queue</span>);</span><br><span class="line"><span class="title function_ invoke__">consumer</span>(<span class="variable">$queue</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="4-简单的消息队列"><a href="#4-简单的消息队列" class="headerlink" title="4. 简单的消息队列"></a>4. 简单的消息队列</h4><p>在实现简单的消息队列系统时，可以使用 <code>SplQueue</code> 存储消息，消费者从队列中取出消息进行处理。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$messageQueue</span> = <span class="keyword">new</span> <span class="built_in">SplQueue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加消息到队列</span></span><br><span class="line"><span class="variable">$messageQueue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'Message 1'</span>);</span><br><span class="line"><span class="variable">$messageQueue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'Message 2'</span>);</span><br><span class="line"><span class="variable">$messageQueue</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'Message 3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理消息</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="variable">$messageQueue</span>-&gt;<span class="title function_ invoke__">isEmpty</span>()) {</span><br><span class="line">    <span class="variable">$message</span> = <span class="variable">$messageQueue</span>-&gt;<span class="title function_ invoke__">dequeue</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Processing: <span class="subst">$message</span>\n"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="5-实现撤销功能"><a href="#5-实现撤销功能" class="headerlink" title="5. 实现撤销功能"></a>5. 实现撤销功能</h4><p>在某些应用中，可以使用 <code>SplQueue</code> 来实现撤销操作的功能，存储操作记录并按顺序撤销。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$actions</span> = <span class="keyword">new</span> <span class="built_in">SplQueue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加操作记录</span></span><br><span class="line"><span class="variable">$actions</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'Action 1'</span>);</span><br><span class="line"><span class="variable">$actions</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'Action 2'</span>);</span><br><span class="line"><span class="variable">$actions</span>-&gt;<span class="title function_ invoke__">enqueue</span>(<span class="string">'Action 3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销操作</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="variable">$actions</span>-&gt;<span class="title function_ invoke__">isEmpty</span>()) {</span><br><span class="line">    <span class="variable">$action</span> = <span class="variable">$actions</span>-&gt;<span class="title function_ invoke__">dequeue</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Undoing: <span class="subst">$action</span>\n"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>类型不受限：</strong> SplQueue 可以存储任何类型的值，包括对象。</li><li><strong>不提供持久化：</strong> SplQueue 队列本身并不提供持久化存储的功能。它是一个基于内存的队列，一旦脚本执行结束，队列中的数据就会丢失。。</li><li><strong>线程安全：</strong> 如果在多线程环境下使用，需要考虑同步问题。</li><li><strong>性能：</strong> 虽然 SplQueue 效率较高，但在极端情况下，可能需要考虑使用其他数据结构。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SplQueue 是 PHP 中一个非常有用的类，可以方便地实现队列功能，适合用于各种需要按顺序处理数据的场景。在实际应用中，<code>SplQueue</code> 是一个强大的工具它在任务调度、图的遍历、生产者-消费者模式、消息队列和撤销操作等方面都有广泛的应用。通过使用 <code>SplQueue</code>，可以简化代码逻辑，提高程序的可读性和维护性。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> SplQueue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 泛型：一个深入浅出的解读</title>
      <link href="/posts/php-generics.html"/>
      <url>/posts/php-generics.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="泛型是什么？"><a href="#泛型是什么？" class="headerlink" title="泛型是什么？"></a>泛型是什么？</h3><p>在编程语言中，泛型（Generics）是一种在编写代码时使用类型参数的特性。它允许你定义类、接口和方法，使其能够在不丧失类型安全的情况下，适用于多种数据类型。简单来说，泛型就是一种参数化类型，使得代码具有更强的灵活性和可复用性。</p><h3 id="为什么PHP需要泛型？"><a href="#为什么PHP需要泛型？" class="headerlink" title="为什么PHP需要泛型？"></a>为什么PHP需要泛型？</h3><ul><li><strong>提高代码可读性：</strong> 泛型可以明确地指定数据类型，让代码更易于理解和维护。</li><li><strong>增强类型安全：</strong> 编译器可以更好地进行类型检查，减少运行时错误。</li><li><strong>提升代码复用性：</strong> 通过泛型，可以编写通用的数据结构和算法，适用于多种数据类型。</li></ul><h3 id="PHP中的泛型：一个挑战"><a href="#PHP中的泛型：一个挑战" class="headerlink" title="PHP中的泛型：一个挑战"></a>PHP中的泛型：一个挑战</h3><p><strong>传统PHP并不直接支持泛型。</strong> 作为一种动态类型语言，PHP的灵活性在于其弱类型特性。然而，随着大型项目的复杂度增加，对类型安全的需求也越来越高。</p><h3 id="PHP中泛型的实现方式"><a href="#PHP中泛型的实现方式" class="headerlink" title="PHP中泛型的实现方式"></a>PHP中泛型的实现方式</h3><p>虽然PHP核心语言没有内置泛型，但我们可以通过以下几种方式来模拟或实现泛型的效果：</p><h4 id="1-文档注释和PSR-5"><a href="#1-文档注释和PSR-5" class="headerlink" title="1. 文档注释和PSR-5"></a>1. <strong>文档注释和PSR-5</strong></h4><ul><li><strong>使用文档注释：</strong> 在函数、方法和类的参数类型、返回值类型上添加文档注释，明确指定期望的数据类型。</li><li><strong>利用静态分析工具：</strong> 使用像Psalm或PHPStan这样的静态分析工具来检查代码的类型一致性。</li></ul><h4 id="2-泛型类库"><a href="#2-泛型类库" class="headerlink" title="2. 泛型类库"></a>2. <strong>泛型类库</strong></h4><ul><li><strong>第三方库：</strong> 一些第三方库提供了泛型功能的实现，如：<ul><li><strong>Doctrine Collections：</strong> 提供了泛型化的集合类，如 <code>ArrayCollection</code>。</li><li><strong>Generic Value Objects：</strong> 可以定义泛型值对象，提高代码的可读性和类型安全。</li></ul></li></ul><h4 id="3-PHP-8-的标量类型声明和返回值类型声明"><a href="#3-PHP-8-的标量类型声明和返回值类型声明" class="headerlink" title="3. PHP 8+ 的标量类型声明和返回值类型声明"></a>3. <strong>PHP 8+ 的标量类型声明和返回值类型声明</strong></h4><ul><li><strong>更强的类型提示：</strong> PHP 8 引入了标量类型声明和返回值类型声明，虽然不是严格意义上的泛型，但可以提高代码的类型安全。</li></ul><h4 id="4-Hack语言"><a href="#4-Hack语言" class="headerlink" title="4. Hack语言"></a>4. <strong>Hack语言</strong></h4><ul><li><strong>Facebook的Hack语言：</strong> 它是PHP的一个超集，提供了更强大的类型系统，包括泛型。如果你愿意使用Hack，可以获得更接近传统泛型语言的体验。</li></ul><h3 id="示例：使用文档注释和静态分析"><a href="#示例：使用文档注释和静态分析" class="headerlink" title="示例：使用文档注释和静态分析"></a>示例：使用文档注释和静态分析</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@template</span> T</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array&lt;T&gt; $array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> T|null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFirstElement</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$array</span></span>): ?<span class="title">T</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>[<span class="number">0</span>] ?? <span class="literal">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中：</p><ul><li><code>@template T</code> 表示定义了一个类型参数T。</li><li><code>array&lt;T&gt;</code> 表示一个数组，其中所有元素的类型都是T。</li><li><code>@return T|null</code> 表示函数的返回值类型是T或者null。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然PHP原生不支持泛型，但我们可以通过文档注释、第三方库、PHP 8+ 的新特性以及Hack语言来实现类似泛型的功能。选择哪种方式取决于项目的具体需求和团队的偏好。</p><h3 id="为什么要学习PHP泛型？"><a href="#为什么要学习PHP泛型？" class="headerlink" title="为什么要学习PHP泛型？"></a>为什么要学习PHP泛型？</h3><ul><li><strong>提升代码质量：</strong> 泛型可以帮助你编写更安全、更可靠的代码。</li><li><strong>提高开发效率：</strong> 通过类型提示，可以减少调试时间，提高开发效率。</li><li><strong>更好地融入PHP生态系统：</strong> 随着PHP的发展，泛型会变得越来越重要，了解泛型有助于你更好地适应未来的PHP生态。</li></ul><p><strong>总的来说，PHP泛型虽然不是PHP的原生特性，但它是一个非常有用的工具，可以帮助你编写更优雅、更健壮的PHP代码。</strong></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Generics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中的Lambda表达式（箭头函数）</title>
      <link href="/posts/php-lambda.html"/>
      <url>/posts/php-lambda.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是Lambda表达式？"><a href="#什么是Lambda表达式？" class="headerlink" title="什么是Lambda表达式？"></a>什么是Lambda表达式？</h3><p>Lambda表达式，也称为箭头函数，是PHP 7.4引入的一种语法糖，它提供了一种更简洁的方式来定义匿名函数。</p><h3 id="Lambda表达式的语法"><a href="#Lambda表达式的语法" class="headerlink" title="Lambda表达式的语法"></a>Lambda表达式的语法</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> (<span class="params">参数列表</span>) =&gt;</span> 表达式;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>fn:</strong> 关键字，表示定义一个匿名函数。</li><li><strong>参数列表:</strong> 与普通函数的参数列表相同。</li><li><strong>=&gt;:</strong> 箭头，表示函数体。</li><li><strong>表达式:</strong> 函数的返回值。</li></ul><h3 id="Lambda表达式与匿名函数的区别"><a href="#Lambda表达式与匿名函数的区别" class="headerlink" title="Lambda表达式与匿名函数的区别"></a>Lambda表达式与匿名函数的区别</h3><ul><li><strong>语法更简洁：</strong> Lambda表达式省略了<code>function</code>关键字和<code>return</code>关键字，使得代码更加紧凑。</li><li><strong>隐式返回：</strong> 箭头右侧的表达式会自动作为返回值。</li><li><strong>自动绑定<code>$this</code>:</strong> 箭头函数会自动绑定<code>$this</code>，而匿名函数需要使用<code>use($this)</code>来绑定。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><strong>数组操作:</strong><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$numbers</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$squared</span> = <span class="title function_ invoke__">array_map</span>(fn(<span class="variable">$num</span>) =&gt; <span class="variable">$num</span> * <span class="variable">$num</span>, <span class="variable">$numbers</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><strong>回调函数:</strong><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">usort</span>(<span class="variable">$array</span>, fn(<span class="variable">$a</span>, <span class="variable">$b</span>) =&gt; <span class="variable">$a</span> &lt;=&gt; <span class="variable">$b</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><strong>过滤数据:</strong><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filtered</span> = <span class="title function_ invoke__">array_filter</span>(<span class="variable">$array</span>, fn(<span class="variable">$item</span>) =&gt; <span class="variable">$item</span> &gt; <span class="number">5</span>);</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="variable">$greet</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$name</span></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, <span class="subst">$name</span>!"</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda表达式</span></span><br><span class="line"><span class="variable">$greet</span> = <span class="function"><span class="keyword">fn</span>(<span class="params"><span class="variable">$name</span></span>) =&gt;</span> <span class="string">"Hello, <span class="subst">$name</span>!"</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>单行表达式:</strong> Lambda表达式通常用于单行表达式，如果逻辑复杂，建议使用匿名函数。</li><li><strong>自动绑定<code>$this</code>:</strong> 这可能导致在某些情况下出现意外的行为，需要谨慎使用。</li><li><strong>不支持变量函数:</strong> Lambda表达式不能用作变量函数。</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><strong>简洁:</strong> 代码更简洁易读。</li><li><strong>现代化:</strong> 符合现代编程语言的趋势。</li><li><strong>提高开发效率:</strong> 减少重复代码。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Lambda表达式是PHP 7.4引入的一个语法糖，它让PHP的函数式编程能力更进一步。通过Lambda表达式，我们可以写出更加简洁、优雅的代码。</p><p><strong>何时使用Lambda表达式？</strong></p><ul><li><strong>简短的回调函数:</strong> 当回调函数的逻辑非常简单时，使用Lambda表达式可以提高代码的可读性。</li><li><strong>数组操作:</strong> 在使用<code>array_map</code>、<code>array_filter</code>等数组操作函数时，Lambda表达式非常方便。</li><li><strong>需要快速定义一个函数:</strong> 当你只需要临时使用一个函数时，Lambda表达式是一个很好的选择。</li></ul><p><strong>何时使用匿名函数？</strong></p><ul><li><strong>复杂的逻辑:</strong> 当函数的逻辑比较复杂时，使用匿名函数可以更好地组织代码。</li><li><strong>需要访问外部变量:</strong> 当函数需要访问外部变量时，使用匿名函数的<code>use</code>关键字可以实现。</li></ul><p><strong>总的来说，Lambda表达式和匿名函数各有优缺点，选择哪种方式取决于具体的场景。</strong></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel建议</title>
      <link href="/posts/laravel-tips.html"/>
      <url>/posts/laravel-tips.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="助手方法blank-和filled"><a href="#助手方法blank-和filled" class="headerlink" title="助手方法blank()和filled()"></a>助手方法<code>blank()</code>和<code>filled()</code></h4><p>您是否知道 Laravel 附带了两个很酷的助手方法<code>blank()</code>和<code>filled()</code>,现在，您可以采用标准化方法来测试变量是否为空，无论其类型如何，甚至支持集合！<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Will return true</span></span><br><span class="line"><span class="title function_ invoke__">blank</span>(<span class="string">''</span>);</span><br><span class="line"><span class="title function_ invoke__">blank</span>(<span class="string">'    '</span>);</span><br><span class="line"><span class="title function_ invoke__">blank</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="title function_ invoke__">blank</span>(<span class="title function_ invoke__">collect</span>());</span><br><span class="line"><span class="title function_ invoke__">blank</span>([]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Will return false</span></span><br><span class="line"><span class="title function_ invoke__">blank</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">blank</span>(<span class="string">'string'</span>);</span><br><span class="line"><span class="title function_ invoke__">blank</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="title function_ invoke__">blank</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="title function_ invoke__">blank</span>([<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// For the inverse, you can make use of filled()</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="助手方法words"><a href="#助手方法words" class="headerlink" title="助手方法words()"></a>助手方法<code>words()</code></h4><p>有时，你可能想要限制字符串中的单词数量。好吧，Laravel 提供了一个方便的助手方法<code>words()</code>！🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Str</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Str</span>::<span class="title function_ invoke__">words</span>(<span class="string">"Don't refactor without tests."</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// Don't refactor ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Str</span>::<span class="title function_ invoke__">words</span>(<span class="string">"Don't refactor without tests."</span>, <span class="number">2</span>, <span class="string">' 👀'</span>);</span><br><span class="line"><span class="comment">// Don't refactor 👀</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You can also use fluent string 😎</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str</span>(<span class="string">"Don't refactor without tests."</span>)-&gt;<span class="title function_ invoke__">words</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// Don't refactor ...</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="数据表字段值增加或者减少的方法"><a href="#数据表字段值增加或者减少的方法" class="headerlink" title="数据表字段值增加或者减少的方法"></a>数据表字段值增加或者减少的方法</h4><p>有时我们需要通过增加或减少值来更新字段的值。通常，我们会编写查询来实现，但 Laravel 提供了优雅的方法来处理这个问题 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Increment votes by 1</span></span><br><span class="line">DB::<span class="title function_ invoke__">table</span>(<span class="string">'users'</span>)-&gt;<span class="title function_ invoke__">increment</span>(<span class="string">'votes'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Increment votes by 5</span></span><br><span class="line">DB::<span class="title function_ invoke__">table</span>(<span class="string">'users'</span>)-&gt;<span class="title function_ invoke__">increment</span>(<span class="string">'votes'</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decrement votes by 1</span></span><br><span class="line">DB::<span class="title function_ invoke__">table</span>(<span class="string">'users'</span>)-&gt;<span class="title function_ invoke__">decrement</span>(<span class="string">'votes'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decrement votes by 5</span></span><br><span class="line">DB::<span class="title function_ invoke__">table</span>(<span class="string">'users'</span>)-&gt;<span class="title function_ invoke__">decrement</span>(<span class="string">'votes'</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Increment votes by 1 and set the name to John</span></span><br><span class="line">DB::<span class="title function_ invoke__">table</span>(<span class="string">'users'</span>)-&gt;<span class="title function_ invoke__">increment</span>(<span class="string">'votes'</span>, <span class="number">1</span>, [<span class="string">'name'</span> =&gt; <span class="string">'John'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can increment multiple columns at once</span></span><br><span class="line">DB::<span class="title function_ invoke__">table</span>(<span class="string">'users'</span>)-&gt;<span class="title function_ invoke__">incrementEach</span>([</span><br><span class="line">    <span class="string">'votes'</span> =&gt; <span class="number">5</span>,    // Will increment votes by <span class="number">5</span></span><br><span class="line">    <span class="string">'balance'</span> =&gt; <span class="number">100</span>, // Will increment balance by <span class="number">100</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can also use them with Eloquent</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">incrementEach</span>([</span><br><span class="line">    <span class="string">'votes'</span> =&gt; <span class="number">5</span>,    // Will increment votes by <span class="number">5</span></span><br><span class="line">    <span class="string">'balance'</span> =&gt; <span class="number">100</span>  // Will increment balance by <span class="number">100</span></span><br><span class="line">]);</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="检查给定Model键的值是否已更改"><a href="#检查给定Model键的值是否已更改" class="headerlink" title="检查给定Model键的值是否已更改"></a>检查给定Model键的值是否已更改</h4><p>有时，我们希望检查给定Model键的值是否发生更改。 Laravel 提供了<code>originalIsEquivalent()</code>方法来执行此操作 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">firstOrFail</span>(); <span class="comment">// ['name' =&gt; 'old']</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;name = <span class="string">'old'</span>; <span class="comment">// Keep the old value</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">originalIsEquivalent</span>(<span class="string">'name'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;name = <span class="string">'new'</span>; <span class="comment">// Change the value</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">originalIsEquivalent</span>(<span class="string">'name'</span>); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="人类可读的日期"><a href="#人类可读的日期" class="headerlink" title="人类可读的日期"></a>人类可读的日期</h4><p>您是否曾经想显示人性化日期而不是确切日期？例如“1 天前”或“一个月前”？Laravel 允许您使用<code>diffForHumans()</code>方法实现 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 days ago</span></span><br><span class="line"><span class="variable">$post</span>-&gt;created_at-&gt;<span class="title function_ invoke__">diffForHumans</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 days 23 minutes ago</span></span><br><span class="line"><span class="variable">$post</span>-&gt;created_at-&gt;<span class="title function_ invoke__">diffForHumans</span>([<span class="string">'parts'</span> =&gt; <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 days 24 minutes 36 seconds ago</span></span><br><span class="line"><span class="variable">$post</span>-&gt;created_at-&gt;<span class="title function_ invoke__">diffForHumans</span>([<span class="string">'parts'</span> =&gt; <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 second ago</span></span><br><span class="line"><span class="title class_">Carbon</span>::<span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">diffForHumans</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="startOfHour-方法"><a href="#startOfHour-方法" class="headerlink" title="startOfHour()方法"></a><code>startOfHour()</code>方法</h4><p>在处理时间时，您可能希望有一个准确的时间，例如 18:00:00。由于 Laravel 在后台使用 Carbon，因此您可以访问<code>startOfHour()</code> 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2024-12-05 09:05:55</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Carbon</span>::<span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">format</span>(<span class="string">'Y-m-d H:i:s'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2024-12-05 09:00:00</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Carbon</span>::<span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">startOfHour</span>()-&gt;<span class="title function_ invoke__">format</span>(<span class="string">'Y-m-d H:i:s'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2024-12-05 09:05:00</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Carbon</span>::<span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">startOfMinute</span>()-&gt;<span class="title function_ invoke__">format</span>(<span class="string">'Y-m-d H:i:s'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2024-12-05 09:05:55</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Carbon</span>::<span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">startOfSecond</span>()-&gt;<span class="title function_ invoke__">format</span>(<span class="string">'Y-m-d H:i:s'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2024-12-05 00:00:00</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Carbon</span>::<span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">startOfDay</span>()-&gt;<span class="title function_ invoke__">format</span>(<span class="string">'Y-m-d H:i:s'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2024-12-01 00:00:00</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Carbon</span>::<span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">startOfMonth</span>()-&gt;<span class="title function_ invoke__">format</span>(<span class="string">'Y-m-d H:i:s'</span>);</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="使用“whereIntegerInRaw”进行更快的查询"><a href="#使用“whereIntegerInRaw”进行更快的查询" class="headerlink" title="使用“whereIntegerInRaw”进行更快的查询"></a>使用“whereIntegerInRaw”进行更快的查询</h4><p>当使用非用户输入的 whereIn 查询时，请选择 whereIntegerInRaw。这可以通过跳过 PDO 绑定和 Laravel 的 SQL 注入安全措施来加快查询速度 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instead of using whereIn()</span></span><br><span class="line"><span class="title class_">Product</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">whereIn</span>(<span class="string">'id'</span>, <span class="title function_ invoke__">range</span>(<span class="number">1</span>, <span class="number">10000</span>))-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use WhereIntegerInRaw()</span></span><br><span class="line"><span class="title class_">Product</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">whereIntegerInRaw</span>(<span class="string">'id'</span>, <span class="title function_ invoke__">range</span>(<span class="number">1</span>, <span class="number">10000</span>))-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="没有时间戳列"><a href="#没有时间戳列" class="headerlink" title="没有时间戳列"></a>没有时间戳列</h4><p>有时，你的表可能没有“created_at”和“updated_at”列。你可以通过将“timestamps”设置为 false 来指示 Laravel 不要更新它们 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates if the model should be timestamped.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Blade-转-HTML"><a href="#Blade-转-HTML" class="headerlink" title="Blade 转 HTML"></a>Blade 转 HTML</h4><p>你知道吗，你可以使用 Blade 将视图渲染为字符串，无论你想要什么？这很有用，因为你可以使用 Blade 构建动态字符串甚至 shell 脚本 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This renders the blade file welcome.blade.php into an HTML string</span></span><br><span class="line"><span class="variable">$rendered</span> = <span class="title function_ invoke__">view</span>(<span class="string">'welcome'</span>, [<span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>])-&gt;<span class="title function_ invoke__">render</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“doesntExist”-方法"><a href="#“doesntExist”-方法" class="headerlink" title="“doesntExist” 方法"></a>“doesntExist” 方法</h4><p>有时您可能想检查数据库中是否存在某些记录。虽然检查计数或使用exists（）方法可以解决问题，但Laravel附带了“doesntExist”方法来优雅地完成此操作 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This is okay 😊</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="string">'id'</span>,<span class="string">'='</span>, <span class="number">2</span>)-&gt;<span class="title function_ invoke__">count</span>() === <span class="number">0</span>) {</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is good 😊</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="string">'id'</span>,<span class="string">'='</span>, <span class="number">2</span>)-&gt;<span class="title function_ invoke__">exists</span>()) {</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is better 😎</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="string">'id'</span>,<span class="string">'='</span>, <span class="number">2</span>)-&gt;<span class="title function_ invoke__">doesntExist</span>()) {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="克隆您的查询"><a href="#克隆您的查询" class="headerlink" title="克隆您的查询"></a>克隆您的查询</h4><p>有时您可能需要重复使用相同的基本查询来进行多次过滤。Laravel 附带了“克隆”方法来执行此操作 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Base query, common conditions</span></span><br><span class="line"><span class="variable">$query</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="string">'created_at'</span>, <span class="string">'&lt;'</span>, <span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">subMonths</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$verified_users</span> = <span class="variable">$query</span>-&gt;<span class="keyword">clone</span>()-&gt;<span class="title function_ invoke__">whereNotNull</span>(<span class="string">'email_verified_at'</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// This can be customized further if needed</span></span><br><span class="line"><span class="variable">$unverified_users</span> = <span class="variable">$query</span>-&gt;<span class="keyword">clone</span>()-&gt;<span class="title function_ invoke__">whereNull</span>(<span class="string">'email_verified_at'</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="动态隐藏列"><a href="#动态隐藏列" class="headerlink" title="动态隐藏列"></a>动态隐藏列</h4><p>有时，你可能想要隐藏未在“hidden”数组中定义的模型属性。Laravel 允许你使用“makeHidden”方法动态执行此操作 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>()-&gt;<span class="title function_ invoke__">makeHidden</span>([<span class="string">'address'</span>, <span class="string">'phone_number'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$seed</span> = <span class="title class_">Seeds</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="string">'id'</span>,<span class="string">'='</span>, <span class="number">801</span>)-&gt;<span class="title function_ invoke__">first</span>()-&gt;<span class="title function_ invoke__">makeHidden</span>([<span class="string">'seed'</span>,<span class="string">'type'</span>])-&gt;<span class="title function_ invoke__">toArray</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“data-get”-助手"><a href="#“data-get”-助手" class="headerlink" title="“data_get” 助手"></a>“data_get” 助手</h4><p>使用嵌套数组时，Laravel 提供了一个名为“data_get”的酷助手。此助手允许您使用<code>.</code>语法和通配符来检索值；当然也有<code>data_set()</code> 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = [</span><br><span class="line"><span class="string">'product-one'</span> =&gt; [<span class="string">'name'</span> =&gt; <span class="string">'Desk 1'</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>],</span><br><span class="line"><span class="string">'product-two'</span> =&gt; [<span class="string">'name'</span> =&gt; <span class="string">'Desk 2'</span>, <span class="string">'price'</span> =&gt; <span class="number">150</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$res1</span> = <span class="title function_ invoke__">data_get</span>(<span class="variable">$data</span>, <span class="string">'product-one.name'</span>); </span><br><span class="line"><span class="variable">$res2</span> = <span class="title function_ invoke__">data_get</span>(<span class="variable">$data</span>, <span class="string">'*.name'</span>); </span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="variable">$res1</span>);<span class="comment">// 'Desk 1';</span></span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="variable">$res2</span>);<span class="comment">// ['Desk 1', 'Desk 2'];</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">data_set</span>(<span class="variable">$data</span>,<span class="string">'product-two.price'</span>,<span class="number">210.5</span>);</span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="title function_ invoke__">data_get</span>(<span class="variable">$data</span>, <span class="string">'product-two.price'</span>));     <span class="comment">// 210.5</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="更好地检查输入是否存在"><a href="#更好地检查输入是否存在" class="headerlink" title="更好地检查输入是否存在"></a>更好地检查输入是否存在</h4><p>我们经常需要检查请求是否包含某些值。你知道 Laravel 附带了两种很酷的方法“has”和“hasAny”，可以优雅地执行这些检查吗？ 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// True if ALL of the values are present</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">has</span>([<span class="string">'name'</span>, <span class="string">'email'</span>])) {</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// True if ANY of the values are present</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">hasAny</span>([<span class="string">'name'</span>, <span class="string">'email'</span>])) {</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Arr-has-助手方法"><a href="#Arr-has-助手方法" class="headerlink" title="Arr::has()助手方法"></a><code>Arr::has()</code>助手方法</h4><p>我们经常需要检查数组中是否有指定的键，Laravel 的Arr助手类里提供了<code>has()</code>的处理方法 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = [</span><br><span class="line"><span class="string">'product-one'</span> =&gt; [<span class="string">'name'</span> =&gt; <span class="string">'Desk 1'</span>, <span class="string">'price'</span> =&gt; <span class="number">100</span>],</span><br><span class="line"><span class="string">'product-two'</span> =&gt; [<span class="string">'name'</span> =&gt; <span class="string">'Desk 2'</span>, <span class="string">'price'</span> =&gt; <span class="number">150</span>],</span><br><span class="line"><span class="string">'product-third'</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="title class_">Arr</span>::<span class="title function_ invoke__">has</span>(<span class="variable">$data</span>, <span class="string">'product-one'</span>));       <span class="comment">// true</span></span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="title class_">Arr</span>::<span class="title function_ invoke__">has</span>(<span class="variable">$data</span>, <span class="string">'product-one.name'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="title class_">Arr</span>::<span class="title function_ invoke__">has</span>(<span class="variable">$data</span>, <span class="string">'product-third'</span>));     <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="latest-和oldest-方法"><a href="#latest-和oldest-方法" class="headerlink" title="latest()和oldest()方法"></a><code>latest()</code>和<code>oldest()</code>方法</h4><p>我们经常使用“orderBy”方法按升序或降序对模型进行排序。但你知道 Laravel 附带两种方法“latest”和“oldest”就是用来做这个的吗？ 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instead of this 🥱</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">orderBy</span>(<span class="string">'created_at'</span>, <span class="string">'desc'</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">orderBy</span>(<span class="string">'created_at'</span>, <span class="string">'asc'</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do this 😎</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">latest</span>()-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">oldest</span>()-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can specify keys other than created_at</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">latest</span>(<span class="string">'id'</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">oldest</span>(<span class="string">'id'</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><p>有时候我们需要处理数据数据，可放在Collection里进行处理，因为Laravel为Collection提供了很多处理方法 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$collection</span> = <span class="title function_ invoke__">collect</span>([<span class="string">'price'</span> =&gt; <span class="number">100</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check and set value if not exists</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">has</span>(<span class="string">'name'</span>)) {</span><br><span class="line">    <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">put</span>(<span class="string">'name'</span>, <span class="string">'Desk'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or use getOrPut() for the same operation</span></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">getOrPut</span>(<span class="string">'name'</span>, <span class="string">'Desk'</span>);</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“times”-方法"><a href="#“times”-方法" class="headerlink" title="“times” 方法"></a>“times” 方法</h4><p>您是否知道 Laravel 附带了一个很酷的集合方法“times”，它允许您通过调用闭包 N 次来创建集合？这在处理日期或生成随机字符串时可能会很有用 🚀<br></p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$collectio</span>n = Collection::times(<span class="number">10</span>, <span class="keyword">function</span> (<span class="params">int $number</span>) {</span><br><span class="line">    <span class="keyword">return</span> $<span class="built_in">number</span> * <span class="number">9</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="symbol">$collectio</span>n-&gt;<span class="built_in">all</span>(); </span><br><span class="line"><span class="comment">// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="访问父循环变量"><a href="#访问父循环变量" class="headerlink" title="访问父循环变量"></a>访问父循环变量</h4><p>有时，在处理嵌套循环时，你可能希望跟踪父级的迭代。Blade 让这一切变得非常简单，因为你可以访问父级循环变量 🚀<br></p><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@foreach</span> ($users as $user)</span><br><span class="line">    <span class="variable">@foreach</span> ($user-&gt;posts as $post)</span><br><span class="line">        <span class="variable">@if</span> ($loop-&gt;parent-&gt;first)</span><br><span class="line">            <span class="comment">// This is the first iteration of the parent loop.</span></span><br><span class="line">        <span class="variable">@endif</span></span><br><span class="line">    <span class="variable">@endforeach</span></span><br><span class="line"><span class="variable">@endforeach</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“forge”-Collection方法"><a href="#“forge”-Collection方法" class="headerlink" title="“forge” Collection方法"></a>“forge” Collection方法</h4><p>有时，在使用集合时，你可能希望通过其键删除元素。幸运的是，集合带有“忘记”方法，可以做到这一点🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span> = <span class="title function_ invoke__">collect</span>([<span class="string">'name'</span> =&gt; <span class="string">'John Doe'</span>, <span class="string">'framework'</span> =&gt; <span class="string">'laravel'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">forget</span>(<span class="string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">all</span>(); <span class="comment">// ['framework' =&gt; 'laravel']</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“zip”-Collection方法"><a href="#“zip”-Collection方法" class="headerlink" title="“zip” Collection方法"></a>“zip” Collection方法</h4><p>使用集合时，您可能希望按索引合并两个集合，先合并第一个索引的值，然后合并第二个索引的值，依此类推。幸运的是，Laravel 包含“zip”方法来执行此操作🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span> = <span class="title function_ invoke__">collect</span>([<span class="string">'Chair'</span>, <span class="string">'Desk'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will merge values by index, so "Chair" with 100, and "Desk" with 200</span></span><br><span class="line"><span class="variable">$zipped</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">zip</span>([<span class="number">100</span>, <span class="number">200</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$zipped</span>-&gt;<span class="title function_ invoke__">all</span>(); <span class="comment">// [['Chair', 100], ['Desk', 200]]</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“every”-Collection方法"><a href="#“every”-Collection方法" class="headerlink" title="“every” Collection方法"></a>“every” Collection方法</h4><p>有时你可能想检查集合中的每个元素是否都符合条件。幸运的是，Laravel 附带了“every”方法来做到这一点🚀<br></p><figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result1</span> = collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])-&gt;<span class="keyword">every</span>(<span class="keyword">function</span> (int <span class="variable">$value</span>, int <span class="variable">$key</span>) { <span class="keyword">return</span> <span class="variable">$value</span> &gt; <span class="number">2</span>;} );</span><br><span class="line">// <span class="variable">$result</span> will be<span class="built_in"> false</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$result2</span> = collect([])-&gt;<span class="keyword">every</span>(<span class="keyword">function</span> (int <span class="variable">$value</span>, int <span class="variable">$key</span>){ <span class="keyword">return</span> <span class="variable">$value</span> &gt; <span class="number">2</span>;});</span><br><span class="line">// Since the<span class="built_in"> collection</span> <span class="literal">is</span><span class="built_in"> empty</span>, <span class="variable">$result</span> will be<span class="built_in"> true</span></span><br><span class="line">dump(<span class="variable">$result1</span>,<span class="variable">$result2</span>);</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“WhenNotEmpty”-Collection方法"><a href="#“WhenNotEmpty”-Collection方法" class="headerlink" title="“WhenNotEmpty” Collection方法"></a>“WhenNotEmpty” Collection方法</h4><p>在使用集合时，您可能希望在集合不为空时执行一些逻辑。Laravel 无需手动检查，它提供了一个很酷的方法“whenNotEmpty()”，可以做到这一点 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span> = <span class="title function_ invoke__">collect</span>([<span class="string">'michael'</span>, <span class="string">'tom'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">whenNotEmpty</span>(function (Collection <span class="variable">$collection</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">push</span>(<span class="string">'adam'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">all</span>(); <span class="comment">// ['michael', 'tom', 'adam']</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span> = <span class="title function_ invoke__">collect</span>(); <span class="comment">// empty collection</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">whenNotEmpty</span>(function (Collection <span class="variable">$collection</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">push</span>(<span class="string">'adam'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">all</span>(); <span class="comment">// []</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="搜索Collection内容"><a href="#搜索Collection内容" class="headerlink" title="搜索Collection内容"></a>搜索Collection内容</h4><p>你知道 Laravel 允许你搜索集合项吗？你甚至可以传递一个条件来搜索满足该条件的第一个元素 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$collection</span> = <span class="title function_ invoke__">collect</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">search</span>(<span class="string">'4'</span>); <span class="comment">// 1 (the index)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">search</span>(<span class="string">'4'</span>, <span class="attr">strict</span>: <span class="literal">true</span>); <span class="comment">// false (not found)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">search</span>(function (<span class="keyword">int</span> <span class="variable">$item</span>, <span class="keyword">int</span> <span class="variable">$key</span>){<span class="keyword">return</span> <span class="variable">$item</span> &gt; <span class="number">5</span>;}); <span class="comment">// 2 (the index)</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="检查你的模型自上次检索以来是否发生了变化"><a href="#检查你的模型自上次检索以来是否发生了变化" class="headerlink" title="检查你的模型自上次检索以来是否发生了变化"></a>检查你的模型自上次检索以来是否发生了变化</h4><p>您是否知道 Laravel 附带了该isDirty()方法，该方法允许您检查自上次检索模型以来一个或多个属性是否已更改？🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">create</span>([</span><br><span class="line">    <span class="string">'first_name'</span> =&gt; <span class="string">'John'</span>,</span><br><span class="line">    <span class="string">'last_name'</span> =&gt; <span class="string">'Doe'</span>,</span><br><span class="line">    <span class="string">'age'</span> =&gt; <span class="number">20</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">isDirty</span>(); <span class="comment">// true</span></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">isDirty</span>(<span class="string">'age'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">isDirty</span>(<span class="string">'first_name'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">isDirty</span>([<span class="string">'first_name'</span>, <span class="string">'age'</span>]); <span class="comment">// true</span></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">isDirty</span>([<span class="string">'first_name'</span>, <span class="string">'last_name'</span>]); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">isDirty</span>(); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="自定义默认时间戳列"><a href="#自定义默认时间戳列" class="headerlink" title="自定义默认时间戳列"></a>自定义默认时间戳列</h4><p>有时，您可能需要自定义默认时间戳列，或者您可能已经有一个正在为其创建模型的旧表。幸运的是，这样做非常简单 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">CREATED_AT</span> = <span class="string">'creation_date'</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">UPDATED_AT</span> = <span class="string">'updated_date'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="删除（销毁）记录"><a href="#删除（销毁）记录" class="headerlink" title="删除（销毁）记录"></a>删除（销毁）记录</h4><p>您是否知道 Laravel 附带了destroy允许您通过主键删除记录的方法？🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instead of this 😢</span></span><br><span class="line"><span class="title class_">Flight</span>::<span class="title function_ invoke__">find</span>(<span class="number">1</span>)-&gt;<span class="title function_ invoke__">delete</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do this 😎</span></span><br><span class="line"><span class="title class_">Flight</span>::<span class="title function_ invoke__">destroy</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Flight</span>::<span class="title function_ invoke__">destroy</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// works with variadic arguments</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Flight</span>::<span class="title function_ invoke__">destroy</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// arrays</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Flight</span>::<span class="title function_ invoke__">destroy</span>(<span class="title function_ invoke__">collect</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])); <span class="comment">// and also collections!</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“last”和“head”助手"><a href="#“last”和“head”助手" class="headerlink" title="“last”和“head”助手"></a>“last”和“head”助手</h4><p>你知道 Laravel 附带两个助手“last”和“head”吗？它们允许你检索数组的第一个和最后一个元素 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$first</span> = <span class="title function_ invoke__">head</span>(<span class="variable">$array</span>); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$last</span> = <span class="title function_ invoke__">last</span>(<span class="variable">$array</span>); <span class="comment">// 300</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="检查你的应用环境"><a href="#检查你的应用环境" class="headerlink" title="检查你的应用环境"></a>检查你的应用环境</h4><p>我们经常需要检查应用程序环境。虽然你可以使用 environment 方法来执行此操作，但 Laravel 附带了优雅的方法“isProduction”和“isLocal”来执行此操作 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Could be better 😫</span></span><br><span class="line"><span class="title function_ invoke__">app</span>()-&gt;<span class="title function_ invoke__">environment</span>() === <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Okay 😐</span></span><br><span class="line"><span class="title function_ invoke__">app</span>()-&gt;<span class="title function_ invoke__">environment</span>(<span class="string">'production'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Better 😎</span></span><br><span class="line"><span class="title function_ invoke__">app</span>()-&gt;<span class="title function_ invoke__">isProduction</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Also applies for 'local' environment with "isLocal()"</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="截断长字符串"><a href="#截断长字符串" class="headerlink" title="截断长字符串"></a>截断长字符串</h4><p>有时您可能希望截断较长的描述以便显示。Laravel 附带了“limit”方法来执行此操作，并且在即将推出的版本中，您可以保留整个单词以获得更好的用户体验🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Str</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Str</span>::<span class="title function_ invoke__">limit</span>(<span class="string">'This will be a long description'</span>, <span class="number">10</span>); <span class="comment">// This will ...</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Str</span>::<span class="title function_ invoke__">limit</span>(<span class="string">'This will be a long description'</span>, <span class="number">10</span>, <span class="string">' ( ... )'</span>); <span class="comment">// This will ( ... )</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Blade-的类型提示"><a href="#Blade-的类型提示" class="headerlink" title="Blade 的类型提示"></a>Blade 的类型提示</h4><p>我们经常使用 Blade，如果要抱怨一件事，那就是类型提示。不过，我们可以通过为所有使用的变量定义一个 @php 块来解决这个问题 🚀<br></p><figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@php</span><br><span class="line">    <span class="comment">/* @var App\Models\Flight $flight */</span></span><br><span class="line">@endphp</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">div</span>&gt;</span><br><span class="line">    <span class="comment">// Your IDE will provide type hints for the property</span></span><br><span class="line">    {{ <span class="symbol">$</span>flight-&gt;name }}</span><br><span class="line">&lt;/<span class="built_in">div</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="优雅地获取-Bearer-Tokens"><a href="#优雅地获取-Bearer-Tokens" class="headerlink" title="优雅地获取 Bearer Tokens"></a>优雅地获取 Bearer Tokens</h4><p>使用 Laravel 构建 API？您可以使用请求对象上的“bearerToken”方法检索 bearer token，而无需手动解析它 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instead of this 😞</span></span><br><span class="line"><span class="variable">$token</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">header</span>(<span class="string">'Authorization'</span>), <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do this 😊</span></span><br><span class="line"><span class="variable">$token</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">bearerToken</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="过滤虚假值"><a href="#过滤虚假值" class="headerlink" title="过滤虚假值"></a>过滤虚假值</h4><p>我们都曾在集合上使用过“filter”方法，但您是否知道，如果没有传递回调，它将过滤掉所有虚假值？🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$collection</span> = <span class="title function_ invoke__">collect</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">null</span>, <span class="literal">false</span>, <span class="string">''</span>, <span class="number">0</span>, []]);</span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">filter</span>()-&gt;<span class="title function_ invoke__">all</span>(); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="更好的join"><a href="#更好的join" class="headerlink" title="更好的join"></a>更好的join</h4><p>我们都使用过 PHP 的“implode”函数，但你知道“join”助手吗？它的功能相同，但还允许你自定义最后一个分隔符 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We've all done this, the regular implode()</span></span><br><span class="line"><span class="title function_ invoke__">collect</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])-&gt;<span class="title function_ invoke__">join</span>(<span class="string">', '</span>, <span class="string">''</span>); <span class="comment">// 'a, b, c'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// But did you know you can specify the last separator?</span></span><br><span class="line"><span class="title function_ invoke__">collect</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])-&gt;<span class="title function_ invoke__">join</span>(<span class="string">', '</span>, <span class="string">', and '</span>); <span class="comment">// 'a, b, and c'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// And it's smart enough to handle edge cases</span></span><br><span class="line"><span class="title function_ invoke__">collect</span>([<span class="string">'a'</span>])-&gt;<span class="title function_ invoke__">join</span>(<span class="string">', '</span>, <span class="string">', and '</span>); <span class="comment">// 'a'</span></span><br><span class="line"><span class="title function_ invoke__">collect</span>([])-&gt;<span class="title function_ invoke__">join</span>(<span class="string">', '</span>, <span class="string">', and '</span>); <span class="comment">// ''</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="在“find”中使用多个-ID-和特定列"><a href="#在“find”中使用多个-ID-和特定列" class="headerlink" title="在“find”中使用多个 ID 和特定列"></a>在“find”中使用多个 ID 和特定列</h4><p>我们经常使用“find()”，但你知道你可以传递 ID 数组并选择特定的列吗？🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// You can pass an array of ids, an select specific columns</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">find</span>([<span class="number">1</span>, <span class="number">2</span>], [<span class="string">'email'</span>]);</span><br><span class="line"><span class="comment">// select `email` from `users` where `users`.`id` in (1, 2)</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="在命令中请求确认"><a href="#在命令中请求确认" class="headerlink" title="在命令中请求确认"></a>在命令中请求确认</h4><p>您是否知道，您可以在执行有风险的命令之前请求确认？您可以使用“确认”方法执行此操作🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Displays the old Laravel prompt view</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">confirm</span>(<span class="string">'Do you want to continue?'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// With "components", it displays the modern Laravel prompt view</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;components-&gt;<span class="title function_ invoke__">confirm</span>(<span class="string">'Do you want to continue?'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// In your terminal, you should see</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Do you want to continue? (yes/no) [no]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="更好的-dd"><a href="#更好的-dd" class="headerlink" title="更好的 dd()"></a>更好的 dd()</h4><p>在调试 Eloquent 查询时，我们经常使用“dd()”来检查结果。你知道你可以直接将其链接起来吗？🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This is okay 😊</span></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>();</span><br><span class="line"><span class="title function_ invoke__">dd</span>(<span class="variable">$users</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is better 🔥</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">all</span>()-&gt;<span class="title function_ invoke__">dd</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="更好的Pluck"><a href="#更好的Pluck" class="headerlink" title="更好的Pluck"></a>更好的Pluck</h4><p>我们经常需要获取某些模型的 ID。虽然您可以使用“pluck()”方法来执行此操作，但您也可以使用“modelKeys()”，它读起来更顺畅，并且如果您在任何时候更改主键也不会中断🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instead of this</span></span><br><span class="line"><span class="variable">$ids</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>()-&gt;<span class="title function_ invoke__">pluck</span>(<span class="string">'id'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can do this 🔥</span></span><br><span class="line"><span class="variable">$ids</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>()-&gt;<span class="title function_ invoke__">modelKeys</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="获取指定日期的年龄"><a href="#获取指定日期的年龄" class="headerlink" title="获取指定日期的年龄"></a>获取指定日期的年龄</h4><p>由于 Laravel 在底层使用了 Carbon，因此您可以轻松获取解析日期的年龄 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the age from a given date</span></span><br><span class="line"><span class="variable">$laravelsAge</span> = <span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="string">'01-06-2011'</span>)-&gt;age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This also works with date columns</span></span><br><span class="line"><span class="variable">$age</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">first</span>()-&gt;birthday-&gt;age;</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="获取最近和最远的日期"><a href="#获取最近和最远的日期" class="headerlink" title="获取最近和最远的日期"></a>获取最近和最远的日期</h4><p>是否曾经需要获取两个日期中与给定日期最接近或最远的日期？由于 Laravel 在底层使用了 Carbon，因此您可以使用“最近”和“最远”方法来实现这一点 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$date</span> = <span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="string">'2024-05-15'</span>);</span><br><span class="line"><span class="variable">$date1</span> = <span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="string">'2024-01-01'</span>);</span><br><span class="line"><span class="variable">$date2</span> = <span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="string">'2024-05-16'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can now check the closest or farthest date</span></span><br><span class="line"><span class="variable">$date</span>-&gt;<span class="title function_ invoke__">closest</span>(<span class="variable">$date1</span>, <span class="variable">$date2</span>); <span class="comment">// 2024-05-16</span></span><br><span class="line"><span class="variable">$date</span>-&gt;<span class="title function_ invoke__">farthest</span>(<span class="variable">$date1</span>, <span class="variable">$date2</span>); <span class="comment">// 2024-01-01</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“shortRelativeDiffForHumans”方法"><a href="#“shortRelativeDiffForHumans”方法" class="headerlink" title="“shortRelativeDiffForHumans”方法"></a>“shortRelativeDiffForHumans”方法</h4><p>我确信您已经使用“diffForHumans”方法来获取人类可读的日期。但您知道可以使用“shortRelativeDiffForHumans”方法获取更短的版本吗？🚀<br></p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="built_in">now</span>()-&gt;<span class="built_in">subDays</span>(<span class="number">5</span>)-&gt;<span class="built_in">diffForHumans</span>(); <span class="comment">// 5 days ago</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Need a shorter version? No problem</span></span><br><span class="line"><span class="built_in">now</span>()-&gt;<span class="built_in">subDays</span>(<span class="number">5</span>)-&gt;<span class="built_in">shortRelativeDiffForHumans</span>(); <span class="comment">// 5d ago</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“finish”助手"><a href="#“finish”助手" class="headerlink" title="“finish”助手"></a>“finish”助手</h4><p>有时，您可能需要确保字符串以特定字符结尾，例如斜杠或点。 Laravel 附带了“finish”助手来执行此操作 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Str</span>;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">Str</span>::<span class="title function_ invoke__">finish</span>(<span class="string">'this/string'</span>, <span class="string">'/'</span>); <span class="comment">// this/string/</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Str</span>::<span class="title function_ invoke__">finish</span>(<span class="string">'this/string/'</span>, <span class="string">'/'</span>); <span class="comment">// this/string/</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="“hasHeader”-方法"><a href="#“hasHeader”-方法" class="headerlink" title="“hasHeader” 方法"></a>“hasHeader” 方法</h4><p>您是否曾经需要检查标头？虽然您可以手动执行此操作，但 Laravel 附带了“hasHeader”方法来执行此操作 🚀<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">hasHeader</span>(<span class="string">'X-Header-Name'</span>)) {</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="or与其他条件并行的问题"><a href="#or与其他条件并行的问题" class="headerlink" title="or与其他条件并行的问题"></a><code>or</code>与其他条件并行的问题</h4><p>有时候我们想写一个这样的sql：<code>select * from my_table where</code>user_id<code>= 20 and</code>birthday<code>&gt;= 20241212 and (balance&gt;0 or value&gt;0);</code></p><p>如果用laravel的php代码写成这样：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = DB::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">table</span>(<span class="string">'my_table'</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">where</span>(<span class="string">'user_id'</span>, <span class="variable">$userId</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">where</span>(<span class="string">'birthday'</span>, <span class="string">'&gt;='</span>, <span class="variable">$dbirthday</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">whereRaw</span>(<span class="string">'balance&gt;0 or value&gt;0'</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">get</span>()</span><br><span class="line">    -&gt;<span class="title function_ invoke__">toArray</span>();</span><br></pre></td></tr></tbody></table></figure><br>这是错误的，它转成sql是<code>select * from my_table where</code>user_id<code>= 20 and</code>birthday<code>&gt;= 20241212 and balance&gt;0 or value&gt;0;</code><br>那就不能得到正确的结果，其实正确的写法应该是：<br><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = DB::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">table</span>(<span class="string">'my_table'</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">where</span>(<span class="string">'user_id'</span>, <span class="variable">$userId</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">where</span>(<span class="string">'birthday'</span>, <span class="string">'&gt;='</span>, <span class="variable">$dbirthday</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">where</span>(function (<span class="variable">$query</span>) { </span><br><span class="line">        <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">'balance'</span>, <span class="string">'&gt;'</span>, <span class="number">0</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">orWhere</span>(<span class="string">'value'</span>, <span class="string">'&gt;'</span>, <span class="number">0</span>);</span><br><span class="line">    })</span><br><span class="line">    -&gt;<span class="title function_ invoke__">get</span>()</span><br><span class="line">    -&gt;<span class="title function_ invoke__">toArray</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><p>参考：<a href="https://github.com/OussamaMater/Laravel-Tips">https://github.com/OussamaMater/Laravel-Tips</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> tips </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP建议</title>
      <link href="/posts/php-tips.html"/>
      <url>/posts/php-tips.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Tip-1：isset"><a href="#Tip-1：isset" class="headerlink" title="Tip 1：isset()"></a>Tip 1：isset()</h3><p>你是否知道可以向 isset() 函数传递多个参数？<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$var1</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$var2</span>)) { ... }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$var1</span>, <span class="variable">$var2</span>)) { ... }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="Tip-2：isset-失效的问题"><a href="#Tip-2：isset-失效的问题" class="headerlink" title="Tip 2：isset()失效的问题"></a>Tip 2：isset()失效的问题</h3><p>当isset()用于判断数组中是否存在某个 key 时，它有一个重要的限制：<strong>如果 key 存在但对应的值为 null，isset() 会返回 false</strong>。<br>如果明确指定key的值可以为null，需要使用<strong>array_key_exists()</strong> 来判断数组中是否存在指定 key。<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">'name'</span> =&gt; <span class="literal">null</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">'name'</span>]));<span class="comment">// false</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_null</span>(<span class="variable">$array</span>[<span class="string">'name'</span>]));<span class="comment">// true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">'name'</span>,<span class="variable">$array</span>));<span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HMAC算法：保障数据完整性和真实性</title>
      <link href="/posts/hmac.html"/>
      <url>/posts/hmac.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是HMAC？"><a href="#什么是HMAC？" class="headerlink" title="什么是HMAC？"></a>什么是HMAC？</h3><p>HMAC（Hash-based Message Authentication Code）是一种基于哈希函数的消息认证码，用于验证消息的完整性和真实性。它通过将共享密钥与消息混合，生成一个固定长度的标签，来实现消息认证。</p><h3 id="HMAC的工作原理"><a href="#HMAC的工作原理" class="headerlink" title="HMAC的工作原理"></a>HMAC的工作原理</h3><ol><li><strong>密钥混合：</strong> 将共享密钥和消息进行特定的组合。</li><li><strong>哈希计算：</strong> 使用一个加密安全的哈希函数（如SHA-256、SHA-512）对混合后的数据进行哈希计算，生成一个消息认证码。</li><li><strong>验证：</strong> 接收方使用相同的密钥和相同的哈希函数对收到的消息进行相同的计算，并将计算结果与收到的消息认证码进行比较。如果两者相等，则认为消息是完整的且未被篡改。</li></ol><h3 id="HMAC的优点"><a href="#HMAC的优点" class="headerlink" title="HMAC的优点"></a>HMAC的优点</h3><ul><li><strong>安全性高：</strong> HMAC的安全性依赖于所使用的哈希函数的安全性以及共享密钥的保密性。</li><li><strong>简单高效：</strong> HMAC的实现相对简单，计算效率高。</li><li><strong>广泛应用：</strong> HMAC被广泛应用于各种协议中，如IPsec、TLS、SSH等。</li></ul><h3 id="HMAC的应用场景"><a href="#HMAC的应用场景" class="headerlink" title="HMAC的应用场景"></a>HMAC的应用场景</h3><ul><li><strong>消息认证：</strong> 验证消息的完整性和真实性，防止消息被篡改或伪造。</li><li><strong>数据完整性保护：</strong> 保护数据的完整性，确保数据在传输过程中未被修改。</li><li><strong>实体认证：</strong> 通过验证消息认证码，来验证消息发送方的身份。</li></ul><h3 id="HMAC的算法流程"><a href="#HMAC的算法流程" class="headerlink" title="HMAC的算法流程"></a>HMAC的算法流程</h3><ol><li><strong>密钥扩展：</strong> 将共享密钥扩展成内部密钥和外部密钥。</li><li><strong>内部密钥与消息异或：</strong> 将内部密钥与消息进行异或运算。</li><li><strong>哈希计算：</strong> 使用哈希函数对异或结果进行哈希计算。</li><li><strong>外部密钥与哈希值异或：</strong> 将外部密钥与哈希值进行异或运算，得到最终的消息认证码。</li></ol><h3 id="HMAC的安全性"><a href="#HMAC的安全性" class="headerlink" title="HMAC的安全性"></a>HMAC的安全性</h3><ul><li><strong>密钥的保密性：</strong> 共享密钥必须保密，不能泄露给未授权的第三方。</li><li><strong>哈希函数的安全性：</strong> 选择一个安全的哈希函数，如SHA-256、SHA-512。</li><li><strong>密钥的长度：</strong> 密钥长度应足够长，以抵抗暴力破解攻击。</li></ul><h3 id="HMAC的实现"><a href="#HMAC的实现" class="headerlink" title="HMAC的实现"></a>HMAC的实现</h3><p>HMAC的实现方式多种多样，不同的编程语言和加密库提供了不同的实现方式。例如，在PHP中，可以使用OpenSSL扩展来实现HMAC。</p><h3 id="PHP实现HMAC"><a href="#PHP实现HMAC" class="headerlink" title="PHP实现HMAC"></a>PHP实现HMAC</h3><p>PHP提供了<code>hash_hmac</code>函数来方便地生成HMAC。这个函数接受三个参数：</p><ul><li><strong>算法：</strong> 要使用的哈希算法，例如 <code>sha256</code>、<code>sha512</code> 等。</li><li><strong>数据：</strong> 需要生成HMAC的消息。</li><li><strong>密钥：</strong> 共享密钥。</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = <span class="string">'Hello, world!'</span>;</span><br><span class="line"><span class="variable">$key</span> = <span class="string">'your_secret_key'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成HMAC-SHA256</span></span><br><span class="line"><span class="variable">$hmac</span> = <span class="title function_ invoke__">hash_hmac</span>(<span class="string">'sha256'</span>, <span class="variable">$data</span>, <span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$hmac</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="示例：使用HMAC验证请求"><a href="#示例：使用HMAC验证请求" class="headerlink" title="示例：使用HMAC验证请求"></a>示例：使用HMAC验证请求</h3><p>在Web应用中，HMAC常用于验证请求的合法性。例如，在API接口中，可以将HMAC作为请求参数的一部分，来防止请求被篡改。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 接收请求参数</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="string">'data'</span>];</span><br><span class="line"><span class="variable">$client_hmac</span> = <span class="variable">$_POST</span>[<span class="string">'hmac'</span>];</span><br><span class="line"><span class="variable">$secret_key</span> = <span class="string">'your_secret_key'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算服务器端的HMAC</span></span><br><span class="line"><span class="variable">$server_hmac</span> = <span class="title function_ invoke__">hash_hmac</span>(<span class="string">'sha256'</span>, <span class="variable">$data</span>, <span class="variable">$secret_key</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证HMAC</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$server_hmac</span> === <span class="variable">$client_hmac</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'请求合法'</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'请求非法'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>密钥安全：</strong> 密钥必须保密，不能泄露给第三方。</li><li><strong>算法选择：</strong> 选择合适的哈希算法，一般推荐使用SHA-256或SHA-512。</li><li><strong>编码：</strong> 确保数据和密钥的编码一致，通常使用UTF-8编码。</li><li><strong>密钥长度：</strong> 密钥长度应足够长，以增强安全性。</li><li><strong>HMAC与加密的区别：</strong> HMAC用于验证数据的完整性和真实性，而加密用于保护数据不被窃听。</li></ul><h3 id="完整示例：HMAC验证API请求"><a href="#完整示例：HMAC验证API请求" class="headerlink" title="完整示例：HMAC验证API请求"></a>完整示例：HMAC验证API请求</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">'Content-Type: application/json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="string">'data'</span>];</span><br><span class="line"><span class="variable">$client_hmac</span> = <span class="variable">$_POST</span>[<span class="string">'hmac'</span>];</span><br><span class="line"><span class="variable">$secret_key</span> = <span class="string">'your_secret_key'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证请求</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$data</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$client_hmac</span>)) {</span><br><span class="line">    <span class="variable">$server_hmac</span> = <span class="title function_ invoke__">hash_hmac</span>(<span class="string">'sha256'</span>, <span class="variable">$data</span>, <span class="variable">$secret_key</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$server_hmac</span> === <span class="variable">$client_hmac</span>) {</span><br><span class="line">        <span class="comment">// 验证通过，处理请求</span></span><br><span class="line">        <span class="variable">$response</span> = [<span class="string">'status'</span> =&gt; <span class="string">'success'</span>, <span class="string">'message'</span> =&gt; <span class="string">'请求合法'</span>];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="variable">$response</span> = [<span class="string">'status'</span> =&gt; <span class="string">'error'</span>, <span class="string">'message'</span> =&gt; <span class="string">'请求非法'</span>];</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="variable">$response</span> = [<span class="string">'status'</span> =&gt; <span class="string">'error'</span>, <span class="string">'message'</span> =&gt; <span class="string">'缺少参数'</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$response</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>HMAC是一种简单、高效、安全的认证机制，广泛应用于各种协议中。通过将共享密钥与消息混合，并使用哈希函数生成消息认证码，HMAC可以有效地验证消息的完整性和真实性。在实际应用中，需要注意密钥的安全性、算法的选择以及编码问题。</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><strong>HMAC与数字签名的区别？</strong><ul><li>HMAC使用共享密钥，而数字签名使用私钥。</li><li>HMAC主要用于消息认证，数字签名主要用于身份认证和不可否认性。</li></ul></li><li><strong>HMAC的安全性如何保证？</strong><ul><li>密钥的保密性、哈希函数的安全性以及密钥的长度是保证HMAC安全性的关键。</li><li>密钥管理：密钥的生成、存储和分发需要谨慎考虑，可以使用密钥管理系统来进行管理。</li><li>密钥轮换：定期更换密钥，以提高安全性。</li><li>结合其他安全措施：HMAC可以与其他安全措施（如HTTPS、数字证书）结合使用，提供更全面的安全保护。</li></ul></li><li><strong>HMAC的应用场景有哪些？</strong><ul><li>HMAC广泛应用于各种协议中，如IPsec、TLS、SSH等。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> HMAC算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>证明：如果一个小于10的数乘以2后的结果大于9，则结果减去9等于将乘积的各位数字相加</title>
      <link href="/posts/less-ten-multiply-two.html"/>
      <url>/posts/less-ten-multiply-two.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>证明： 如果有数字x，9&gt;=x&gt;=0，则2x-9等于2x的各位数字相加。</p><p><strong>假设：</strong></p><ul><li>我们有一个小于10的数字，用 <code>x</code> 表示。</li><li><code>x</code> 乘以 2 后大于 9，即 <code>2x &gt; 9</code>。</li></ul><p><strong>证明：</strong></p><ol><li><p>理解：当我们把一个一位数乘以2后，如果结果大于9，说明得到的是一个两位数。这个两位数的十位数一定是1，因为任何一个一位数乘以2最大也只能得到18。所以，这个两位数的个位数实际上就是原数乘以2后 超过10的部分。</p></li><li><p><strong>表示乘积：</strong></p><ul><li>既然 <code>2x &gt; 9</code>，那么 <code>2x</code> 一定是一个两位数。我们可以用 <code>ab</code> 来表示这个两位数，其中 <code>a</code> 是十位上的数字，a肯定是1，<code>b</code> 是个位上的数字。</li><li>因此，我们可以写出： <code>2x = 10a + b = 10 + b</code>。</li></ul></li><li><p><strong>减去9：</strong></p><ul><li>当我们从 <code>2x</code> 中减去 9 时，实际上是将十位上的数字减1，个位上的数字不变。</li><li>因此，<code>2x - 9 = (10 + b) - 9 = 1 + b</code>。</li><li>可以看到，2x减去9之后，得到的结果是<code>1 + b</code>，而1是十位上的数字，<code>b</code>是个位上的数字。</li><li>所以2x-9等于2x的各位数字相加。</li></ul></li></ol><p><strong>结论：</strong></p><ul><li>通过上面的推导，我们证明了：<strong>如果一个小于10的数乘以2后的结果大于9，则结果减去9等于将乘积的各位数字相加。</strong></li></ul><p><strong>简单来说：</strong></p><ul><li>当一个一位数乘以2后变成两位数时，减去9的操作相当于把十位上的1借给个位，这样就得到了这个两位数的各位数字之和。</li></ul><p><strong>举个例子：</strong></p><ul><li>假设 <code>x = 7</code>。</li><li><code>2x = 14</code>。</li><li><code>14 - 9 = 5</code>。</li><li>14 的各位数字之和也是 1 + 4 = 5。</li></ul><p><strong>因此，我们通过数学推导验证了<a href="luhn-algorithm.html" target="_blank">Luhn算法</a>中这个步骤的正确性。</strong></p><p><strong>总结：</strong><br>Luhn算法中这个看似简单的减9操作，背后蕴含着数学上的原理。通过将两位数分解成十位和个位，并进行相应的运算，我们可以清晰地看到为什么减去9可以得到各位数字之和。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付宝&quot;碰一碰&quot;支付：重新定义线下支付体验</title>
      <link href="/posts/alipay-nfc.html"/>
      <url>/posts/alipay-nfc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、”碰一碰”支付的诞生与演进</p><p>2020年12月，支付宝在合作伙伴大会上正式发布了”碰一碰”支付功能，这一创新支付方式标志着中国移动支付进入了NFC无感支付的新阶段。作为国内领先的第三方支付平台，支付宝将这一技术称为”数字人民币NFC支付解决方案”，并率先在深圳、杭州等城市试点推广。</p><p>“碰一碰”的诞生并非偶然。随着央行数字货币（DC/EP）试点的推进，支付宝作为重要参与者，需要探索更便捷、更安全的数字人民币支付方式。与此同时，全球支付市场也在寻找更高效、更安全的线下支付解决方案。支付宝敏锐地捕捉到这一市场需求，依托自身强大的技术积累和金融基础设施，推出了基于NFC技术的”碰一碰”支付方案。</p><p>二、操作流程与核心技术解析</p><ol><li>操作流程<br>要使用”碰一碰”支付，用户需完成以下简单步骤：<br>• 设备准备：确保手机支持NFC功能，并开启NFC和支付宝”碰一碰”功能</li></ol><p>• 商户设备：商户需配备”碰一碰”收款设备或贴有NFC标签</p><p>• 支付操作：打开支付宝，选择”碰一碰”功能，将手机贴近商户设备/标签</p><p>• 身份认证：输入密码/指纹进行验证</p><p>• 支付完成：系统确认支付后收到电子凭证</p><p>整个过程通常在1秒内完成，无需打开扫码模式，只需轻轻一碰即可完成支付。</p><ol><li>核心技术分析</li></ol><p>（1）NFC技术基础<br>NFC(Near Field Communication)基于13.56MHz频段工作，通信距离通常在4cm以内。这一物理限制保证了交易的安全性，防止远距离攻击。</p><p>（2）安全机制设计<br>支付宝为”碰一碰”构建了多层安全防护：<br>• 硬件级安全：使用TEE可信执行环境存储密钥</p><p>• 动态令牌：每次交易生成唯一动态令牌</p><p>• 交易金额验证：对超过预设金额的交易追加人脸识别</p><p>• 数据加密：支持国密算法SM4和标准AES加密</p><p>（3）系统架构<br>整个系统由四个主要部分组成：<br>• 用户端(NFC手机)</p><p>• 商户端(NFC读写设备)</p><p>• 支付平台(云端验证)</p><p>• 数字人民币系统(资金结算)</p><p>三、与传统扫码支付的优势对比</p><ol><li>“碰一碰”的优势</li></ol><p>（1）支付体验<br>• 0.3秒超快支付，比扫码快数倍</p><p>• 无需打开APP，解放双手</p><p>• 无扫码角度要求，无需对焦</p><p>（2）安全性<br>• 采用硬件加密芯片，保护支付密钥</p><p>• 支持指纹/人脸双重验证</p><p>• 物理距离限制防止远距离攻击</p><p>（3）适用场景<br>• 在弱网环境下仍可完成支付</p><p>• 适合停车场、地铁站等快速通行场景</p><p>• 可应用于门禁、公交等多元场景</p><p>（4）无障碍支付<br>• 视障人士可独立完成支付</p><p>• 文字信息识别更友好</p><p>• 无需依赖屏幕显示</p><ol><li>现有不足</li></ol><p>尽管”碰一碰”优势明显，但也面临一些挑战：<br>• 商户端设备成本较高</p><p>• NFC设备普及率不及扫码</p><p>• 用户教育成本需要投入</p><p>• 部分机型兼容性问题</p><ol><li>扫码支付的强项</li></ol><p>传统扫码支付在以下方面仍有优势：<br>• 无需额外硬件设备</p><p>• 适用场景更广泛</p><p>• 用户教育成本低</p><p>• 支付金额限制相对宽松</p><p>四、支付行业的未来走向</p><ol><li>非接触支付趋势</li></ol><p>根据艾瑞咨询数据，中国非接触支付市场规模已在2022年突破350万亿元，预计到2025年将突破500万亿元。这一增长主要受以下因素驱动：<br>• 数字人民币推广</p><p>• 智能终端普及</p><p>• 硬件加密技术发展</p><p>• 疫情后无接触需求</p><ol><li>多模态支付融合</li></ol><p>未来支付方式将呈现互补而非竞争的关系：<br>• 扫码支付保持广泛适用性</p><p>• NFC支付提供高效安全体验</p><p>• 人脸支付适用于高价值场景</p><p>• 物联网支付实现万物互联</p><p>支付宝已初步实现扫码+NFC+人脸的多模态支付体系，为用户提供无缝支付体验。</p><ol><li>生态系统建设</li></ol><p>支付系统将深度融入各类应用场景：<br>• 城市级交通支付系统</p><p>• 智能家居支付接口</p><p>• 企业数字化解决方案</p><p>• 地方特色支付场景开发</p><p>支付宝正在推进”支付即服务”转型，将支付能力整合到各类生态系统中。</p><p>五、结语</p><p>支付宝”碰一碰”支付的推出，标志着移动支付进入了一个新维度。这一创新不仅提升了支付效率，更引领了支付安全标准的新高度。虽然当前仍面临一些技术和市场挑战，但随着硬件普及、用户体验优化和安全标准的完善，”碰一碰”有望成为主流支付方式之一。</p><p>在数字经济快速发展的今天，支付方式的创新不仅关乎用户体验，更是构建智慧城市生态的重要环节。支付宝等支付巨头的技术探索，将推动整个行业向更高效、更安全、更智能的方向发展。未来，我们有理由期待支付方式持续创新，为数字经济时代的生活方式带来更多可能性。</p><p>作为消费者，随着技术进步，我们将体验到更便捷、更安全的支付方式。而对于支付行业来说，”碰一碰”只是一个开始，真正的革命在于它所代表的支付体验变革和数字经济未来趋势。</p>]]></content>
      
      
      <categories>
          
          <category> NFC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碰一碰 </tag>
            
            <tag> NFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何定义并识别白嫖用户</title>
      <link href="/posts/game-design-how-to-identify-poor.html"/>
      <url>/posts/game-design-how-to-identify-poor.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>白嫖用户</strong>，通常指在游戏中不进行付费，却享受大部分游戏内容的玩家。识别白嫖用户，对于游戏运营来说非常重要，可以帮助他们更好地调整游戏策略，提升付费率。</p><h3 id="定义白嫖用户的指标"><a href="#定义白嫖用户的指标" class="headerlink" title="定义白嫖用户的指标"></a>定义白嫖用户的指标</h3><ul><li><strong>付费行为：</strong> 最直接的指标。从未进行过任何付费行为的玩家，基本可以定义为白嫖用户。</li><li><strong>游戏时长：</strong> 相对高活跃度，但付费记录很少或没有的玩家，也可能属于白嫖用户。</li><li><strong>游戏进度：</strong> 达到较高游戏进度，但付费记录很少的玩家，可能利用了游戏中的免费资源或攻略。</li><li><strong>资源消耗：</strong> 对于需要消耗资源的游戏，可以通过分析资源消耗情况，判断玩家的付费意愿。</li></ul><h3 id="识别白嫖用户的方法"><a href="#识别白嫖用户的方法" class="headerlink" title="识别白嫖用户的方法"></a>识别白嫖用户的方法</h3><ol><li><p><strong>数据分析：</strong></p><ul><li><strong>用户画像：</strong> 通过分析玩家的注册时间、设备信息、游戏行为等数据，建立详细的用户画像。</li><li><strong>RFM模型：</strong> 根据最近一次消费时间（Recency）、消费频率（Frequency）和消费金额（Monetary）三个维度，对玩家进行分类。</li><li><strong>漏斗分析：</strong> 分析玩家在游戏中的流失情况，找出潜在的白嫖用户。</li></ul></li><li><p><strong>行为分析：</strong></p><ul><li><strong>任务完成情况：</strong> 分析玩家完成任务的情况，判断其对游戏的投入程度。</li><li><strong>社交互动：</strong> 分析玩家在游戏中的社交互动情况，高活跃度但付费少的玩家可能更倾向于白嫖。</li><li><strong>道具使用情况：</strong> 分析玩家对道具的使用情况，判断其对道具的依赖程度。</li></ul></li><li><p><strong>模型预测：</strong></p><ul><li><strong>机器学习：</strong> 利用历史数据，训练机器学习模型，预测玩家的付费意愿。</li><li><strong>生存分析：</strong> 分析玩家的生命周期，预测玩家流失的时间点。</li></ul></li></ol><h3 id="识别白嫖用户的意义"><a href="#识别白嫖用户的意义" class="headerlink" title="识别白嫖用户的意义"></a>识别白嫖用户的意义</h3><ul><li><strong>精准营销：</strong> 针对白嫖用户进行精准营销，提高付费转化率。</li><li><strong>游戏平衡：</strong> 调整游戏内容和活动，平衡付费用户和白嫖用户的体验。</li><li><strong>提升付费率：</strong> 针对白嫖用户推出更具吸引力的付费方案。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>避免过度标签化：</strong> 避免将所有不付费的玩家都定义为白嫖用户，每个玩家都有不同的游戏习惯和需求。</li><li><strong>保护用户隐私：</strong> 在进行数据分析时，要保护用户的隐私信息。</li><li><strong>平衡游戏体验：</strong> 在设置针对白嫖用户的限制时，要兼顾所有玩家的游戏体验。</li></ul><p><strong>总结</strong></p><p>识别白嫖用户是一个复杂的过程，需要综合考虑多种因素，并不断优化分析模型。通过对白嫖用户的深入了解，游戏运营可以更好地制定策略，提升游戏的盈利能力。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design </tag>
            
            <tag> 白嫖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何提升三消游戏的爽度</title>
      <link href="/posts/game-design-improve-experience.html"/>
      <url>/posts/game-design-improve-experience.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>增加游戏的爽度（Fun Factor）是游戏策划中的一个重要目标。这涉及到多个方面，包括游戏设计、用户体验、奖励机制等。以下是一些有效的方法，可以用来提升游戏的爽度：</p><h3 id="1-丰富的游戏内容"><a href="#1-丰富的游戏内容" class="headerlink" title="1. 丰富的游戏内容"></a>1. 丰富的游戏内容</h3><ul><li><strong>多样化的关卡设计</strong>：设计不同风格、难度和主题的关卡，让玩家每次玩都有新鲜感。</li><li><strong>有趣的任务和挑战</strong>：增加主线和支线任务，设置丰富多样的挑战，激发玩家的好奇心和探索欲。</li></ul><h3 id="2-流畅的游戏体验"><a href="#2-流畅的游戏体验" class="headerlink" title="2. 流畅的游戏体验"></a>2. 流畅的游戏体验</h3><ul><li><strong>优化性能</strong>：确保游戏运行流畅，减少加载时间和卡顿现象。</li><li><strong>直观的用户界面</strong>：设计简单、直观的操作界面，使玩家能轻松上手和操作。</li></ul><h3 id="3-令人满意的反馈"><a href="#3-令人满意的反馈" class="headerlink" title="3. 令人满意的反馈"></a>3. 令人满意的反馈</h3><ul><li><strong>视觉和音效反馈</strong>：在玩家完成任务或获得奖励时，提供视觉和音效上的反馈，增强成就感。</li><li><strong>即时奖励</strong>：及时给予玩家奖励，如金币、道具或经验值，鼓励玩家继续游戏。</li></ul><h3 id="4-合理的难度曲线"><a href="#4-合理的难度曲线" class="headerlink" title="4. 合理的难度曲线"></a>4. 合理的难度曲线</h3><ul><li><strong>渐进的难度</strong>：从简单到困难，逐步增加游戏难度，使玩家逐步适应并挑战自我。</li><li><strong>适当的挑战</strong>：提供适当的挑战，不要让游戏过于简单或过于困难，保持玩家的兴趣和参与度。</li></ul><h3 id="5-社交互动"><a href="#5-社交互动" class="headerlink" title="5. 社交互动"></a>5. 社交互动</h3><ul><li><strong>多人模式</strong>：增加多人游戏模式，让玩家可以与朋友一起玩或对战，增加互动乐趣。</li><li><strong>社交功能</strong>：提供聊天、好友系统和排行榜等社交功能，让玩家可以分享成就和进展。</li></ul><h3 id="6-创新的游戏机制"><a href="#6-创新的游戏机制" class="headerlink" title="6. 创新的游戏机制"></a>6. 创新的游戏机制</h3><ul><li><strong>独特的玩法</strong>：设计独特的游戏机制或玩法，让游戏与众不同。</li><li><strong>随机元素</strong>：加入随机元素，如随机生成的地图或任务，增加游戏的可重玩性。</li></ul><h3 id="7-定期更新和活动"><a href="#7-定期更新和活动" class="headerlink" title="7. 定期更新和活动"></a>7. 定期更新和活动</h3><ul><li><strong>定期更新</strong>：定期推出新的内容和功能，保持游戏的新鲜感。</li><li><strong>限时活动</strong>：举办限时活动和比赛，吸引玩家回归游戏。</li></ul><h3 id="8-个性化体验"><a href="#8-个性化体验" class="headerlink" title="8. 个性化体验"></a>8. 个性化体验</h3><ul><li><strong>自定义选项</strong>：提供角色和装备的自定义选项，让玩家可以根据个人喜好进行个性化设置。</li><li><strong>故事情节</strong>：设计引人入胜的故事情节，让玩家沉浸在游戏世界中。</li></ul><h3 id="实例：如何提升三消游戏的爽度"><a href="#实例：如何提升三消游戏的爽度" class="headerlink" title="实例：如何提升三消游戏的爽度"></a>实例：如何提升三消游戏的爽度</h3><ol><li><p><strong>多样化的关卡设计</strong>：</p><ul><li>设计不同主题的关卡，如森林、沙漠、海洋等。</li><li>增加各种障碍物和特殊道具，如冰块、炸弹等。</li></ul></li><li><p><strong>即时奖励</strong>：</p><ul><li>在玩家完成关卡后，给予金币、道具或经验值奖励。</li><li>通过视觉和音效反馈（如闪光效果、欢呼声）增强成就感。</li></ul></li><li><p><strong>社交互动</strong>：</p><ul><li>增加好友系统，让玩家可以查看好友的进度和成绩。</li><li>设置排行榜，鼓励玩家竞争。</li></ul></li><li><p><strong>限时活动</strong>：</p><ul><li>举办限时关卡挑战赛，玩家完成特定任务可获得特殊奖励。</li><li>定期推出节日活动，如圣诞节、万圣节等，吸引玩家参与。</li></ul></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>通过以上方法，可以有效提升游戏的爽度，增加玩家的参与度和留存率。关键在于理解玩家的需求和喜好，不断优化和创新游戏内容和机制。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design </tag>
            
            <tag> 游戏爽度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何隐蔽地对白嫖用户设置更严格的活动限制</title>
      <link href="/posts/game-design-stricter-for-poor.html"/>
      <url>/posts/game-design-stricter-for-poor.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在游戏中，策划为了鼓励用户付费，往往会对<a href="game-design-how-to-identify-poor.html" target="_blank">白嫖用户</a>设置一些限制，这在业内是比较常见的做法。然而，过于明显的限制会引起玩家的反感，导致玩家流失。因此，如何将这些限制设置得更加隐蔽，就成为了策划需要考虑的问题。</p><h3 id="隐蔽设置限制的思路与方法"><a href="#隐蔽设置限制的思路与方法" class="headerlink" title="隐蔽设置限制的思路与方法"></a>隐蔽设置限制的思路与方法</h3><ol><li><p><strong>概率性限制：</strong></p><ul><li><strong>掉率调整：</strong> 对于白嫖用户，可以适当降低活动奖励的掉率，但幅度不宜过大，以免引起玩家察觉。</li><li><strong>随机性事件：</strong> 增加一些随机性事件，如额外关卡、隐藏奖励等，并控制白嫖用户的获取概率。</li></ul></li><li><p><strong>时间限制：</strong></p><ul><li><strong>冷却时间：</strong> 对于一些关键功能或道具，设置较长的冷却时间，让白嫖用户无法频繁使用。</li><li><strong>活动时长：</strong> 缩短白嫖用户的活动参与时长，或设置更复杂的参与条件。</li></ul></li><li><p><strong>资源限制：</strong></p><ul><li><strong>体力消耗：</strong> 提高白嫖用户参与活动的体力消耗，或减少体力恢复速度。</li><li><strong>道具限制：</strong> 限制白嫖用户获得关键道具的数量或种类。</li></ul></li><li><p><strong>功能限制：</strong></p><ul><li><strong>部分功能关闭：</strong> 对白嫖用户关闭一些高级功能，如自动战斗、一键换装等。</li><li><strong>信息不对称：</strong> 隐藏部分游戏信息，如怪物属性、副本掉落等，增加游戏难度。</li></ul></li><li><p><strong>社交限制：</strong></p><ul><li><strong>聊天限制：</strong> 限制白嫖用户的聊天频次或内容，降低其在社交互动中的影响力。</li><li><strong>组队限制：</strong> 限制白嫖用户加入高等级或特定类型的队伍。</li></ul></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>循序渐进：</strong> 限制的设置不能过于激进，要循序渐进，以免引起玩家反感。</li><li><strong>数据分析：</strong> 通过数据分析，了解玩家的行为习惯，有针对性地设置限制。</li><li><strong>平衡性调整：</strong> 限制的设置要兼顾游戏平衡性，避免影响游戏体验。</li><li><strong>透明化说明：</strong> 对部分限制可以进行透明化的说明，但要避免直接指出针对白嫖用户。</li><li><strong>福利补偿：</strong> 定期为白嫖用户提供一些福利，以缓解他们的不满情绪。</li></ul><h3 id="隐蔽设置的例子"><a href="#隐蔽设置的例子" class="headerlink" title="隐蔽设置的例子"></a>隐蔽设置的例子</h3><ul><li><strong>抽卡概率：</strong> 通过算法控制，让白嫖用户的抽卡概率略低于付费用户，但差距不明显。</li><li><strong>体力恢复速度：</strong> 白嫖用户的体力恢复速度比付费用户慢一些，但差距不至于太大。</li><li><strong>副本难度：</strong> 为白嫖用户设置单独的副本难度，增加通关难度。</li><li><strong>社交等级：</strong> 根据玩家的付费情况，划分不同的社交等级，享受不同的特权。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对白嫖用户设置限制是游戏运营中常见的手段，但要做到既能达到目的，又不引起玩家反感，需要策划团队仔细设计和平衡。通过巧妙地设置各种限制，可以引导玩家进行付费，同时又不损害游戏的整体体验。</p><p><strong>需要注意的是，过度限制会损害游戏口碑，导致玩家流失。策划在设置限制时，要把握好度，以玩家的体验为中心，才能实现游戏的良性发展。</strong></p><p><strong>此外，策划团队还应不断优化游戏内容，增加游戏的趣味性，吸引玩家自愿付费，而不是仅仅依靠限制来获取收益。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 游戏设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design </tag>
            
            <tag> 白嫖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何绘画出游戏玩家的画像</title>
      <link href="/posts/game-design-draw-players-portrait.html"/>
      <url>/posts/game-design-draw-players-portrait.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在游戏策划中，绘制玩家画像（Player Persona）是非常重要的一步。玩家画像是对目标玩家群体的典型代表进行详细描述和分析，以便更好地理解他们的需求、动机和行为模式，从而做出更有针对性的游戏设计和营销策略。以下是绘制玩家画像的一些步骤和关键要素：</p><h3 id="1-收集数据"><a href="#1-收集数据" class="headerlink" title="1. 收集数据"></a>1. 收集数据</h3><p>首先，收集关于玩家的各种数据。这些数据可以来自以下来源：</p><ul><li><strong>问卷调查</strong>：通过在线问卷或游戏内调查收集玩家的反馈。</li><li><strong>游戏分析</strong>：使用数据分析工具（如 Google Analytics、Mixpanel 等）分析玩家的行为数据。</li><li><strong>社交媒体和社区</strong>：关注玩家在社交媒体、论坛和游戏社区中的讨论和反馈。</li><li><strong>用户研究</strong>：进行深度访谈和焦点小组讨论，了解玩家的深层次需求和动机。</li></ul><h3 id="2-确定关键属性"><a href="#2-确定关键属性" class="headerlink" title="2. 确定关键属性"></a>2. 确定关键属性</h3><p>根据收集的数据，确定玩家画像的关键属性。以下是一些常见的属性：</p><ul><li><strong>人口统计信息</strong>：<ul><li>年龄</li><li>性别</li><li>地理位置</li><li>职业</li><li>教育水平</li></ul></li><li><strong>心理特征</strong>：<ul><li>动机（例如：消磨时间、挑战自我、社交互动）</li><li>兴趣爱好</li><li>价值观</li></ul></li><li><strong>行为模式</strong>：<ul><li>游戏时长</li><li>游戏频率</li><li>喜爱的游戏类型</li><li>付费意愿和习惯</li></ul></li><li><strong>设备和技术使用</strong>：<ul><li>使用的设备（手机、平板、电脑）</li><li>互联网连接类型</li></ul></li></ul><h3 id="3-创建玩家画像"><a href="#3-创建玩家画像" class="headerlink" title="3. 创建玩家画像"></a>3. 创建玩家画像</h3><p>将上述属性整合成具体的玩家画像。每个画像应包含：</p><ul><li><strong>头像</strong>：给玩家画像起一个名字，并选择一个代表性的头像（可以是虚构的）。</li><li><strong>背景故事</strong>：描述玩家的生活背景和个人故事。</li><li><strong>详细属性</strong>：列出人口统计信息、心理特征、行为模式和设备使用情况。</li><li><strong>需求和痛点</strong>：明确玩家在游戏中追求的目标和可能遇到的问题。</li></ul><h3 id="示例玩家画像"><a href="#示例玩家画像" class="headerlink" title="示例玩家画像"></a>示例玩家画像</h3><p><strong>玩家画像：李明</strong></p><p><strong>背景故事</strong>：<br>李明是一名28岁的程序员，居住在北京。他每天上班较为忙碌，喜欢在下班后通过玩三消游戏来放松自己。他喜欢挑战高难度的关卡，并与朋友在游戏中比拼分数。</p><p><strong>详细属性</strong>：</p><ul><li><strong>年龄</strong>：28</li><li><strong>性别</strong>：男</li><li><strong>地理位置</strong>：北京</li><li><strong>职业</strong>：程序员</li><li><strong>教育水平</strong>：本科</li><li><strong>游戏动机</strong>：放松解压、挑战自我、社交互动</li><li><strong>兴趣爱好</strong>：编程、阅读、健身</li><li><strong>游戏时长</strong>：每天1-2小时</li><li><strong>游戏频率</strong>：每天</li><li><strong>喜爱的游戏类型</strong>：三消游戏、策略游戏</li><li><strong>付费意愿和习惯</strong>：愿意为游戏内道具和高级关卡付费</li><li><strong>使用的设备</strong>：iPhone 12</li><li><strong>互联网连接类型</strong>：4G和WiFi</li></ul><p><strong>需求和痛点</strong>：</p><ul><li><strong>需求</strong>：<ul><li>需要高难度的关卡来挑战自己</li><li>希望有更多与朋友互动的社交功能</li><li>喜欢游戏内道具和奖励机制</li></ul></li><li><strong>痛点</strong>：<ul><li>有时关卡太难，导致挫败感</li><li>广告过多影响游戏体验</li></ul></li></ul><h3 id="4-使用玩家画像"><a href="#4-使用玩家画像" class="headerlink" title="4. 使用玩家画像"></a>4. 使用玩家画像</h3><p>一旦创建了玩家画像，可以用它们来指导游戏设计和营销策略：</p><ul><li><strong>游戏设计</strong>：根据玩家画像调整游戏难度、关卡设计、奖励机制等。</li><li><strong>用户体验</strong>：优化用户界面和用户体验，以满足目标玩家的需求。</li><li><strong>市场营销</strong>：制定针对性的营销策略，吸引和留住目标玩家。</li><li><strong>用户反馈</strong>：持续收集玩家反馈，根据玩家画像不断改进游戏。</li></ul><p>通过这些步骤，可以更好地了解和满足玩家的需求，提高游戏的吸引力和用户粘性。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boyer-Moore算法</title>
      <link href="/posts/boyer-moore.html"/>
      <url>/posts/boyer-moore.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Boyer-Moore算法简介"><a href="#Boyer-Moore算法简介" class="headerlink" title="Boyer-Moore算法简介"></a>Boyer-Moore算法简介</h3><p>Boyer-Moore算法是一种高效的字符串搜索算法，它通过跳过文本中明显不匹配的部分，显著提高了搜索效率。相较于传统的暴力匹配算法，Boyer-Moore算法在大多数情况下性能更佳，尤其是在搜索较长的模式串时。</p><p><strong>算法的核心思想：</strong></p><ul><li><strong>坏字符规则：</strong> 当模式串的一个字符与文本中的字符不匹配时，模式串向右滑动，使得不匹配的字符与文本中对应的字符对齐。</li><li><strong>好后缀规则：</strong> 当模式串的后缀与文本中的部分匹配时，模式串向右滑动，使得匹配的后缀与文本中对应的后缀对齐。</li></ul><h3 id="算法实现步骤"><a href="#算法实现步骤" class="headerlink" title="算法实现步骤"></a>算法实现步骤</h3><ol><li><strong>构建坏字符表:</strong><ul><li>对于模式串中的每个字符，记录它在模式串中最后出现的位置。</li><li>如果字符不在模式串中出现，则其位置为模式串的长度。</li></ul></li><li><strong>构建好后缀表:</strong><ul><li>计算模式串的后缀与自身匹配的最长长度。</li></ul></li><li><strong>搜索过程:</strong><ul><li>从模式串的末尾开始与文本进行比较。</li><li>如果不匹配，则根据坏字符规则或好后缀规则计算滑动距离，将模式串向右滑动。</li><li>重复步骤3，直到找到匹配或到达文本末尾。</li></ul></li></ol><h3 id="PHP实现Boyer-Moore算法"><a href="#PHP实现Boyer-Moore算法" class="headerlink" title="PHP实现Boyer-Moore算法"></a>PHP实现Boyer-Moore算法</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">boyerMooreSearch</span>(<span class="params"><span class="variable">$text</span>, <span class="variable">$pattern</span></span>) </span>{</span><br><span class="line">    <span class="variable">$m</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$pattern</span>);</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$text</span>);</span><br><span class="line">    <span class="variable">$badChar</span> = [];</span><br><span class="line">    <span class="variable">$goodSuffix</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化坏字符表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$badChar</span>[<span class="variable">$i</span>] = <span class="variable">$m</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span> - <span class="number">1</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$badChar</span>[<span class="title function_ invoke__">ord</span>(<span class="variable">$pattern</span>[<span class="variable">$i</span>])] = <span class="variable">$m</span> - <span class="variable">$i</span> - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化好后缀表（简化版）</span></span><br><span class="line">    <span class="comment">// 这里使用一个简单的实现，实际应用中可以优化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$goodSuffix</span>[<span class="variable">$i</span>] = <span class="variable">$m</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$m</span> - <span class="number">2</span>; <span class="variable">$i</span> &gt;= <span class="number">0</span>; <span class="variable">$i</span>--) {</span><br><span class="line">        <span class="variable">$j</span> = <span class="variable">$i</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$j</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$pattern</span>[<span class="variable">$j</span>] === <span class="variable">$pattern</span>[<span class="variable">$m</span> - <span class="number">1</span> - <span class="variable">$i</span> + <span class="variable">$j</span>]) {</span><br><span class="line">            <span class="variable">$goodSuffix</span>[<span class="variable">$j</span>] = <span class="variable">$i</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$j</span>--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$i</span> &lt;= <span class="variable">$n</span> - <span class="variable">$m</span>) {</span><br><span class="line">        <span class="variable">$j</span> = <span class="variable">$m</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$j</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$pattern</span>[<span class="variable">$j</span>] === <span class="variable">$text</span>[<span class="variable">$i</span> + <span class="variable">$j</span>]) {</span><br><span class="line">            <span class="variable">$j</span>--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$j</span> &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$i</span>; <span class="comment">// 匹配成功</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="variable">$i</span> += <span class="title function_ invoke__">max</span>(<span class="variable">$badChar</span>[<span class="title function_ invoke__">ord</span>(<span class="variable">$text</span>[<span class="variable">$i</span> + <span class="variable">$j</span>])] - <span class="variable">$m</span> + <span class="number">1</span> + <span class="variable">$j</span>, <span class="variable">$goodSuffix</span>[<span class="variable">$j</span>]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 未找到匹配</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>代码解释</strong></li></ul><ol><li><strong>坏字符表:</strong> 记录每个字符在模式串中最后出现的位置。</li><li><strong>好后缀表:</strong> 记录模式串的后缀与自身匹配的最长长度。</li><li><strong>匹配过程:</strong> 从模式串末尾开始与文本比较，若不匹配，则根据坏字符规则或好后缀规则计算滑动距离。</li></ol><h3 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h3><ul><li><strong>坏字符表优化:</strong> 可以使用更复杂的算法来计算坏字符表，以提高算法效率。</li><li><strong>好后缀表优化:</strong> 可以使用KMP算法的思想来计算好后缀表。</li><li><strong>多模式匹配:</strong> 可以将Boyer-Moore算法扩展为多模式匹配算法。</li></ul><h3 id="算法应用场景"><a href="#算法应用场景" class="headerlink" title="算法应用场景"></a>算法应用场景</h3><ul><li><strong>文本搜索:</strong> 在大文本中快速查找子串。</li><li><strong>字符串匹配:</strong> 在生物信息学、信息检索等领域有广泛应用。</li><li><strong>数据压缩:</strong> 在压缩算法中用于查找重复模式。</li></ul><h3 id="算法优点"><a href="#算法优点" class="headerlink" title="算法优点"></a>算法优点</h3><ul><li><strong>效率高:</strong> 通过跳过不匹配的部分，大大提高了搜索速度。</li><li><strong>适用于长模式串:</strong> 尤其在搜索较长的模式串时，性能优势更加明显。</li></ul><h3 id="算法缺点"><a href="#算法缺点" class="headerlink" title="算法缺点"></a>算法缺点</h3><ul><li><strong>实现复杂:</strong> 算法的实现相对复杂，特别是好后缀表的计算。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Boyer-Moore算法是一种高效的字符串搜索算法，通过巧妙的跳跃机制，可以显著提高搜索效率。PHP实现相对简单，但要深入理解算法的原理才能进行优化和扩展。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
            <tag> Boyer-Moore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luhn算法详解</title>
      <link href="/posts/luhn-algorithm.html"/>
      <url>/posts/luhn-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Luhn算法</strong>，也称为<strong>模10算法</strong>，是一种简单的校验和算法，常用于验证各种身份识别码，比如银行卡号、国际移动设备识别码（IMEI）、美国国家提供商标识号码等。它能快速地检测出输入中的单一数字错误，例如错位、漏掉或多输入一个数字。</p><h3 id="Luhn算法的工作原理"><a href="#Luhn算法的工作原理" class="headerlink" title="Luhn算法的工作原理"></a>Luhn算法的工作原理</h3><ol><li><strong>从右向左编号：</strong> 给要校验的数字字符串从右向左编号，从1开始。</li><li><strong>隔位求和：</strong> 从右向左遍历，偶数位上的数字乘以2。如果乘积大于等于10，则将乘积的各位数字相加。</li><li><strong>所有数字求和：</strong> 将所有数字（包括经过处理的偶数位数字）相加，得到一个总和。</li><li><strong>判断校验位：</strong> 如果总和能被10整除，则校验通过，否则校验失败。</li></ol><h3 id="PHP实现Luhn算法"><a href="#PHP实现Luhn算法" class="headerlink" title="PHP实现Luhn算法"></a>PHP实现Luhn算法</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">luhn_check</span>(<span class="params"><span class="variable">$number</span></span>) </span>{</span><br><span class="line">    <span class="variable">$sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$numDigits</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$number</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$numDigits</span>; <span class="variable">$i</span>++) {<span class="comment">// 从右向左遍历数字字符串的每一位</span></span><br><span class="line">        <span class="variable">$digit</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$number</span>[<span class="variable">$numDigits</span> - <span class="variable">$i</span> - <span class="number">1</span>]) - <span class="number">48</span>;<span class="comment">// 获取当前位上的数字</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$i</span> % <span class="number">2</span> == <span class="number">1</span>) {</span><br><span class="line">            <span class="variable">$digit</span> *= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$digit</span> &gt; <span class="number">9</span>) {</span><br><span class="line">                <span class="variable">$digit</span> -= <span class="number">9</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="variable">$sum</span> += <span class="variable">$digit</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$sum</span> % <span class="number">10</span> == <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ul><li><strong>从右向左遍历：</strong> 循环遍历数字字符串，从右向左处理每一位数字。</li><li><strong>获取当前位上的数字：</strong> 数字字符的ASCII码比数字本身大48；这里不能改为$digit = (int)$number[$numDigits - $i - 1];因为如果字符串中包含非数字字符，强制类型转换的结果可能会是0。而 ord() 函数则会更可靠地将字符转换为数字。</li><li><strong>偶数位处理：</strong> 对于偶数位的数字，乘以2，如果结果大于9，则减去9。</li><li><strong>求和：</strong> 将所有处理后的数字相加，得到总和。</li><li><strong>校验：</strong> 判断总和是否能被10整除，如果能整除，则校验通过。</li></ul><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cardNumber</span> = <span class="string">'1234567890123456'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">luhn_check</span>(<span class="variable">$cardNumber</span>)) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"卡号校验通过"</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"卡号校验失败"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Luhn算法的优点"><a href="#Luhn算法的优点" class="headerlink" title="Luhn算法的优点"></a>Luhn算法的优点</h3><ul><li><strong>简单高效：</strong> 算法简单易懂，计算量小，适合快速验证。</li><li><strong>检测错误能力强：</strong> 能检测出大部分的单一数字错误。</li></ul><h3 id="Luhn算法的局限性"><a href="#Luhn算法的局限性" class="headerlink" title="Luhn算法的局限性"></a>Luhn算法的局限性</h3><ul><li><strong>不能检测所有错误：</strong> 对于某些特定的错误组合，Luhn算法可能无法检测出来。</li><li><strong>不是绝对安全：</strong> Luhn算法只能作为一种简单的校验手段，不能完全保证数据的正确性。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Luhn算法是一种常用的校验算法，特别适合用于验证身份识别码的正确性。虽然它不能检测所有的错误，但仍然是一种简单有效的校验方法。在实际应用中，可以将Luhn算法与其他校验方式结合起来，提高数据的可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Luhn算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何评判一段程序的好坏：复杂度分析</title>
      <link href="/posts/complexity-analysis.html"/>
      <url>/posts/complexity-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>评判一段程序的好坏，除了功能的正确性之外，<strong>算法的效率</strong>也是一个非常重要的指标。而<strong>复杂度分析</strong>就是用来衡量算法效率的一种方法。</p><h3 id="复杂度分析是什么？"><a href="#复杂度分析是什么？" class="headerlink" title="复杂度分析是什么？"></a>复杂度分析是什么？</h3><p>复杂度分析是对算法在运行过程中所需时间资源和空间资源的数量的估算。</p><ul><li><strong>时间复杂度:</strong> 表示算法执行时间随输入规模增长的变化趋势。</li><li><strong>空间复杂度:</strong> 表示算法所需要的额外空间在输入规模增长时变化的趋势。</li></ul><h3 id="为什么需要复杂度分析？"><a href="#为什么需要复杂度分析？" class="headerlink" title="为什么需要复杂度分析？"></a>为什么需要复杂度分析？</h3><ul><li><strong>选择最优算法:</strong> 在有多种算法可以解决同一个问题时，通过复杂度分析，我们可以选择时间和空间复杂度都较低的算法。</li><li><strong>优化算法:</strong> 对于已经存在的算法，我们可以通过分析其复杂度瓶颈，有针对性地进行优化。</li><li><strong>评估算法性能:</strong> 在大规模数据处理中，算法的效率至关重要。复杂度分析可以帮助我们预测算法在处理大规模数据时的性能。</li></ul><h3 id="如何进行复杂度分析？"><a href="#如何进行复杂度分析？" class="headerlink" title="如何进行复杂度分析？"></a>如何进行复杂度分析？</h3><h4 id="1-大O表示法"><a href="#1-大O表示法" class="headerlink" title="1. 大O表示法:"></a>1. <strong>大O表示法:</strong></h4><ul><li><strong>定义:</strong> 用来描述算法复杂度的一种渐进表示法。</li><li><strong>意义:</strong> 表示随着输入规模的增大，算法执行时间的增长速度。</li><li><strong>常见的大O表示法:</strong><ul><li>O(1): 常数时间复杂度</li><li>O(logn): 对数时间复杂度</li><li>O(n): 线性时间复杂度</li><li>O(nlogn): 线性对数时间复杂度</li><li>O(n²): 平方时间复杂度</li><li>O(2^n): 指数时间复杂度</li></ul></li></ul><h4 id="2-分析方法"><a href="#2-分析方法" class="headerlink" title="2. 分析方法:"></a>2. <strong>分析方法:</strong></h4><ul><li><strong>最好、最坏、平均情况:</strong><ul><li><strong>最好情况:</strong> 算法在最理想情况下运行的时间复杂度。</li><li><strong>最坏情况:</strong> 算法在最坏情况下运行的时间复杂度。</li><li><strong>平均情况:</strong> 算法在所有可能输入下的平均运行时间复杂度。</li></ul></li><li><strong>循环嵌套:</strong> 嵌套循环的时间复杂度通常是各层循环复杂度的乘积。</li><li><strong>函数调用:</strong> 函数调用的时间复杂度取决于函数本身的复杂度和调用次数。</li><li><strong>递归:</strong> 递归算法的时间复杂度通常与递归树的深度有关。</li></ul><h4 id="3-空间复杂度分析"><a href="#3-空间复杂度分析" class="headerlink" title="3. 空间复杂度分析:"></a>3. <strong>空间复杂度分析:</strong></h4><ul><li><strong>额外空间:</strong> 指算法运行过程中除了输入数据之外，额外使用的存储空间。</li><li><strong>分析方法:</strong> 与时间复杂度分析类似，主要考虑算法中使用的辅助数据结构的大小。</li></ul><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_search</span>(<span class="params">arr, target</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="keyword">if</span> arr[i] == target:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><ul><li><strong>时间复杂度:</strong> O(n)，因为最坏情况下需要遍历整个数组。</li><li><strong>空间复杂度:</strong> O(1)，除了输入数组外，没有使用额外的空间。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>复杂度分析是衡量算法效率的重要工具，通过对算法的时间复杂度和空间复杂度的分析，我们可以选择更适合的算法，优化算法性能，提高程序的运行效率。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>复杂度分析是一个估算过程:</strong> 实际运行时间还受到硬件、软件、编译器等因素的影响。</li><li><strong>不同算法在不同数据集上的表现可能不同:</strong> 选择算法时需要综合考虑数据集的特点和应用场景。</li><li><strong>复杂度分析只是算法评价的一个方面:</strong> 算法的可读性、可维护性等因素也需要考虑。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 复杂度分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马拉车算法（Manacher&#39;s Algorithm）详解</title>
      <link href="/posts/manacher-algorithm.html"/>
      <url>/posts/manacher-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是马拉车算法？"><a href="#什么是马拉车算法？" class="headerlink" title="什么是马拉车算法？"></a>什么是马拉车算法？</h3><p>马拉车算法是一种高效查找一个字符串的最长回文子串的线性时间复杂度算法。它通过巧妙的预处理和动态规划，避免了大量的重复计算，使得算法的效率得到了极大的提升。<br>注：回文（Palindrome）是指正读和反读都一样的字符串，即左右对称的字符串，如：level，noon，232…</p><h3 id="算法核心思想"><a href="#算法核心思想" class="headerlink" title="算法核心思想"></a>算法核心思想</h3><ul><li><strong>预处理:</strong><ul><li>在字符串的每个字符之间插入一个特殊字符（如#），使得原字符串变为奇数长度。这样，无论是奇数长度还是偶数长度的回文子串，都可以统一处理成奇数长度的回文子串。</li></ul></li><li><strong>中心扩展:</strong><ul><li>从字符串的第一个字符开始，向两边扩展，找到以当前字符为中心的回文子串的最长长度。</li></ul></li><li><strong>利用对称性:</strong><ul><li>算法的关键在于利用已经计算过的回文子串的信息，来加速后续回文子串的查找。通过对称性，可以减少不必要的字符比较。</li></ul></li></ul><h3 id="算法实现步骤"><a href="#算法实现步骤" class="headerlink" title="算法实现步骤"></a>算法实现步骤</h3><ol><li><strong>预处理:</strong> 将原字符串转换为一个新的字符串，在每个字符之间插入一个特殊字符。</li><li><strong>初始化数组P:</strong> 数组P用来存储以每个字符为中心的最长回文子串的半径。</li><li><strong>遍历预处理后的字符串:</strong><ul><li>维护一个中心id和最右边界mx。</li><li>对于当前字符i，利用对称性，可以快速得到一个初始的回文半径。</li><li>然后，以i为中心，向两边扩展，直到遇到不匹配的字符或者到达边界。</li><li>更新P[i]，以及中心id和最右边界mx。</li></ul></li></ol><h3 id="代码示例（php）"><a href="#代码示例（php）" class="headerlink" title="代码示例（php）"></a>代码示例（php）</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestPalindrome</span>(<span class="params"><span class="variable">$s</span></span>) </span>{</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$T</span> = <span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$T</span> .= <span class="variable">$s</span>[<span class="variable">$i</span>] . <span class="string">'#'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$T</span>);</span><br><span class="line">    <span class="variable">$p</span> = <span class="title function_ invoke__">array_fill</span>(<span class="number">0</span>, <span class="variable">$n</span>, <span class="number">0</span>);<span class="comment">// 创建数组 p，用于存储以每个位置为中心的最长回文半径。</span></span><br><span class="line">    <span class="variable">$center</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$right</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span> - <span class="number">1</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="variable">$mirror</span> = <span class="number">2</span> * <span class="variable">$center</span> - <span class="variable">$i</span>;</span><br><span class="line">        <span class="variable">$p</span>[<span class="variable">$i</span>] = (<span class="variable">$i</span> &lt; <span class="variable">$right</span>) ? <span class="title function_ invoke__">min</span>(<span class="variable">$right</span> - <span class="variable">$i</span>, <span class="variable">$p</span>[<span class="variable">$mirror</span>]) : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> + <span class="variable">$p</span>[<span class="variable">$i</span>] &lt; <span class="variable">$n</span> &amp;&amp; <span class="variable">$i</span> - <span class="variable">$p</span>[<span class="variable">$i</span>] &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$T</span>[<span class="variable">$i</span> + <span class="variable">$p</span>[<span class="variable">$i</span>]] == <span class="variable">$T</span>[<span class="variable">$i</span> - <span class="variable">$p</span>[<span class="variable">$i</span>]]) {</span><br><span class="line">            <span class="variable">$p</span>[<span class="variable">$i</span>]++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$i</span> + <span class="variable">$p</span>[<span class="variable">$i</span>] - <span class="number">1</span> &gt; <span class="variable">$right</span>) {</span><br><span class="line">            <span class="variable">$center</span> = <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$right</span> = <span class="variable">$i</span> + <span class="variable">$p</span>[<span class="variable">$i</span>] - <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到最长回文子串的中心和长度</span></span><br><span class="line">    <span class="variable">$maxLen</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$centerIndex</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span> - <span class="number">1</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$p</span>[<span class="variable">$i</span>] &gt; <span class="variable">$maxLen</span>) {</span><br><span class="line">            <span class="variable">$maxLen</span> = <span class="variable">$p</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="variable">$centerIndex</span> = <span class="variable">$i</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从预处理后的字符串中还原出原始字符串中的最长回文子串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>, (<span class="variable">$centerIndex</span> - <span class="variable">$maxLen</span>) / <span class="number">2</span>, <span class="variable">$maxLen</span> - <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><p>马拉车算法的时间复杂度为O(n)，空间复杂度也为O(n)。</p><h3 id="算法优点"><a href="#算法优点" class="headerlink" title="算法优点"></a>算法优点</h3><ul><li><strong>线性时间复杂度:</strong> 效率极高。</li><li><strong>实现相对简单:</strong> 核心思想清晰易懂。</li><li><strong>应用广泛:</strong> 在字符串处理、生物信息学等领域有广泛应用。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>马拉车算法是一种非常优秀的算法，它通过巧妙的预处理和利用对称性，实现了线性时间复杂度查找最长回文子串。在实际应用中，马拉车算法具有很高的效率和实用性。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 马拉车算法 </tag>
            
            <tag> Manacher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态机：一种优雅的解决方案</title>
      <link href="/posts/finite-state-machine.html"/>
      <url>/posts/finite-state-machine.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是状态机？"><a href="#什么是状态机？" class="headerlink" title="什么是状态机？"></a>什么是状态机？</h3><p>状态机是一种数学模型，用于描述一个对象在不同状态之间的转换。在软件开发中，状态机被广泛用于表示对象的生命周期，例如订单的状态（待支付、已支付、已发货）、用户的状态（未激活、激活、禁用）等。</p><h3 id="为什么使用状态机？"><a href="#为什么使用状态机？" class="headerlink" title="为什么使用状态机？"></a>为什么使用状态机？</h3><ul><li><strong>清晰的业务逻辑：</strong> 状态机将复杂的业务逻辑分解为多个状态和状态之间的转换，使得代码更易于理解和维护。</li><li><strong>提高代码可读性：</strong> 状态机使用状态和事件来描述系统的行为，使得代码更加直观。</li><li><strong>减少条件判断：</strong> 通过状态机，可以减少大量的if-else判断，提高代码的简洁性。</li><li><strong>增强系统健壮性：</strong> 状态机可以有效地防止系统进入非法状态。</li></ul><h3 id="PHP实现状态机的方法"><a href="#PHP实现状态机的方法" class="headerlink" title="PHP实现状态机的方法"></a>PHP实现状态机的方法</h3><h4 id="1-基于数组或对象的状态机"><a href="#1-基于数组或对象的状态机" class="headerlink" title="1. 基于数组或对象的状态机"></a>1. <strong>基于数组或对象的状态机</strong></h4><ul><li><strong>简单实现：</strong> 使用数组或对象来存储当前状态和状态转换规则。</li><li><strong>缺点：</strong> 代码可读性较差，扩展性有限。</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$status</span> = <span class="string">'pending'</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$transitions</span> = [</span><br><span class="line">        <span class="string">'pending'</span> =&gt; [<span class="string">'paid'</span>],</span><br><span class="line">        <span class="string">'paid'</span> =&gt; [<span class="string">'shipped'</span>, <span class="string">'canceled'</span>],</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">transitionTo</span>(<span class="params"><span class="variable">$newState</span></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$newState</span>, <span class="variable">$this</span>-&gt;transitions[<span class="variable">$this</span>-&gt;status])) {</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;status = <span class="variable">$newState</span>;</span><br><span class="line">            <span class="comment">// 执行状态转换后的操作</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidStateException</span>(<span class="string">'Invalid transition'</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-使用状态模式"><a href="#2-使用状态模式" class="headerlink" title="2. 使用状态模式"></a>2. <strong>使用状态模式</strong></h4><ul><li><strong>面向对象实现：</strong> 将每个状态封装成一个类，状态的转换通过调用相应的方法来实现。</li><li><strong>优点：</strong> 代码结构清晰，可扩展性强。</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$context</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Context <span class="variable">$context</span></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;context = <span class="variable">$context</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PendingState</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 处理待支付状态</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...其他状态类</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-使用第三方库"><a href="#3-使用第三方库" class="headerlink" title="3. 使用第三方库"></a>3. <strong>使用第三方库</strong></h4><ul><li><strong>功能丰富：</strong> 很多第三方库提供了更完善的状态机实现，包括状态图可视化、事件驱动等功能。</li><li><strong>流行库：</strong> Workflowy、Finite、StateMachine等。</li></ul><h4 id="4-使用PHP的Traits"><a href="#4-使用PHP的Traits" class="headerlink" title="4. 使用PHP的Traits"></a>4. <strong>使用PHP的Traits</strong></h4><ul><li><strong>代码复用：</strong> 将状态机相关的代码封装成Traits，方便在多个类中复用。</li></ul><h3 id="状态机的核心要素"><a href="#状态机的核心要素" class="headerlink" title="状态机的核心要素"></a>状态机的核心要素</h3><ul><li><strong>状态：</strong> 系统可能存在的各种状态。</li><li><strong>事件：</strong> 触发状态转换的事件。</li><li><strong>转换：</strong> 状态之间的转换规则。</li><li><strong>动作：</strong> 状态转换时执行的动作。</li></ul><h3 id="示例：订单状态机"><a href="#示例：订单状态机" class="headerlink" title="示例：订单状态机"></a>示例：订单状态机</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">use</span> <span class="title">StateMachineTrait</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$states</span> = [<span class="string">'pending'</span>, <span class="string">'paid'</span>, <span class="string">'shipped'</span>, <span class="string">'canceled'</span>];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$initial</span> = <span class="string">'pending'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">transitionTo</span>(<span class="string">'paid'</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...其他方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>状态机是一种强大的设计模式，可以帮助我们构建更清晰、更健壮的应用程序。在PHP中，我们可以通过多种方式实现状态机，选择适合自己项目的方式即可。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>状态图：</strong> 在设计状态机之前，绘制状态图可以帮助我们更好地理解系统的行为。</li><li><strong>错误处理：</strong> 对于非法状态转换，需要进行适当的错误处理。</li><li><strong>性能优化：</strong> 如果状态机非常复杂，需要考虑性能优化的问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件设计中的防腐层：保护你的系统</title>
      <link href="/posts/anti-corruption-layer.html"/>
      <url>/posts/anti-corruption-layer.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是防腐层？"><a href="#什么是防腐层？" class="headerlink" title="什么是防腐层？"></a>什么是防腐层？</h3><p>在软件设计中，尤其是领域驱动设计（DDD）中，防腐层（Anti-corruption Layer，ACL）是一种重要的模式，用于隔离系统不同的部分，防止一个部分的变化影响到其他部分。它就像一个翻译官，将不同领域模型之间的差异进行转换，从而保护系统的核心领域模型。</p><h3 id="防腐层适用场景"><a href="#防腐层适用场景" class="headerlink" title="防腐层适用场景"></a>防腐层适用场景</h3><ul><li><strong>隔离外部系统：</strong> 当系统需要与其他系统（如第三方API、遗留系统）交互时，防腐层可以将外部系统的复杂性封装起来，保护核心业务逻辑。</li><li><strong>适配不同数据模型：</strong> 当不同系统的数据模型不一致时，防腐层可以进行数据转换，确保数据的一致性。</li><li><strong>隐藏技术细节：</strong> 防腐层可以隐藏底层技术实现的细节，提供一个高层次的抽象接口。</li></ul><h3 id="PHP实现防腐层"><a href="#PHP实现防腐层" class="headerlink" title="PHP实现防腐层"></a>PHP实现防腐层</h3><p><strong>1. 识别需要隔离的部分</strong></p><ul><li><strong>确定边界：</strong> 明确系统中需要隔离的部分，通常是与外部系统交互的部分。</li><li><strong>定义接口：</strong> 为隔离的部分定义一个清晰的接口，这个接口就是防腐层的对外接口。</li></ul><p><strong>2. 创建防腐层类</strong></p><ul><li><strong>封装逻辑：</strong> 将与外部系统交互的逻辑封装到这个类中。</li><li><strong>数据转换：</strong> 将外部系统的数据转换为内部系统可以理解的数据。</li><li><strong>错误处理：</strong> 处理外部系统返回的错误。</li></ul><p><strong>示例：</strong></p><p>假设我们有一个电商系统，需要与一个外部支付系统交互。我们可以创建一个支付防腐层：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentGateway</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$client</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">PaymentGatewayClient <span class="variable">$client</span></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;client = <span class="variable">$client</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makePayment</span>(<span class="params">Order <span class="variable">$order</span></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 将订单信息转换为支付系统需要的格式</span></span><br><span class="line">        <span class="variable">$paymentRequest</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">convertToPaymentRequest</span>(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用支付系统的接口</span></span><br><span class="line">        <span class="variable">$paymentResponse</span> = <span class="variable language_">$this</span>-&gt;client-&gt;<span class="title function_ invoke__">makePayment</span>(<span class="variable">$paymentRequest</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将支付系统的响应转换为内部系统可以理解的格式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">convertToPaymentResponse</span>(<span class="variable">$paymentResponse</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 其他方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>3. 使用防腐层</strong></p><p>在业务逻辑中，通过调用防腐层的接口来与外部系统交互，而不需要直接了解外部系统的细节。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$paymentGateway</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">completeOrder</span>(<span class="params">Order <span class="variable">$order</span></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// ... 其他业务逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;paymentGateway-&gt;<span class="title function_ invoke__">makePayment</span>(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... 其他业务逻辑</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="防腐层的优点"><a href="#防腐层的优点" class="headerlink" title="防腐层的优点"></a>防腐层的优点</h3><ul><li><strong>提高系统可维护性：</strong> 隔离了外部系统的变化，降低了系统耦合度。</li><li><strong>增强系统可测试性：</strong> 可以对防腐层进行单独测试。</li><li><strong>提高系统可扩展性：</strong> 可以在不影响核心业务逻辑的情况下，更换外部系统。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>防腐层是PHP开发中一种非常有用的设计模式，它可以帮助我们构建更加灵活、可维护和可扩展的系统。通过合理地使用防腐层，我们可以更好地应对系统复杂性的挑战，提高开发效率。</p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防腐层 </tag>
            
            <tag> 软件设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口算法</title>
      <link href="/posts/sliding-window.html"/>
      <url>/posts/sliding-window.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是滑动窗口算法？"><a href="#什么是滑动窗口算法？" class="headerlink" title="什么是滑动窗口算法？"></a>什么是滑动窗口算法？</h3><p>滑动窗口算法的核心思想是：维护一个固定大小的窗口，随着数据的不断输入，窗口不断向后滑动，从而达到对数据流进行局部统计或计算的目的。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>字符串处理: 查找最长无重复子串、字符串的排列等。</li><li>数组处理: 寻找数组中满足一定条件的子数组、滑动窗口的最大值/最小值等。</li><li>数据流处理: 实时处理数据流，统计窗口内的统计量；进而进行下一步处理，如：限流(在一定时间窗口内限制请求的次数)、降权(如果十分钟的订单数超过100，且失败率高于40%，就把该充值渠道的优先级降到最低)等。</li></ul><h3 id="PHP实现滑动窗口算法"><a href="#PHP实现滑动窗口算法" class="headerlink" title="PHP实现滑动窗口算法"></a>PHP实现滑动窗口算法</h3><h4 id="1-基于数组实现的滑动窗口"><a href="#1-基于数组实现的滑动窗口" class="headerlink" title="1. 基于数组实现的滑动窗口"></a>1. 基于数组实现的滑动窗口</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找数组中滑动窗口内的最大值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 整体思路是：</span></span><br><span class="line"><span class="comment"> *     1. 使用一个单调递减队列来存储索引，队列头部始终是当前窗口的最大值对应的索引。</span></span><br><span class="line"><span class="comment"> *     2. 每次循环，将当前元素与队列尾部的元素比较，如果当前元素更大，则将队列尾部的元素弹出，</span></span><br><span class="line"><span class="comment"> *          直到队列为空或当前元素小于等于队列尾部的元素。</span></span><br><span class="line"><span class="comment"> *     3. 当窗口滑动时，如果队列头部的索引对应的元素已经不在窗口内，则将其弹出。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $nums</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMaxSlidingWindow</span>(<span class="params"><span class="variable">$nums</span>, <span class="variable">$k</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$nums</span>);&amp;&amp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="variable">$q</span> = []; <span class="comment">// 单调递减队列，存储索引  队列头部始终是当前窗口的最大值对应的索引。</span></span><br><span class="line">    <span class="variable">$res</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) {</span><br><span class="line">        <span class="comment">// 保证队列中只保留索引对应的值大于等于nums[i]的元素</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$q</span> &amp;&amp; <span class="variable">$nums</span>[<span class="variable">$q</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$q</span>) - <span class="number">1</span>]] &lt; <span class="variable">$nums</span>[<span class="variable">$i</span>]) {</span><br><span class="line">            <span class="title function_ invoke__">array_pop</span>(<span class="variable">$q</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="variable">$q</span>[] = <span class="variable">$i</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果窗口已满，且窗口首元素已过期，则弹出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$i</span> &gt;= <span class="variable">$k</span> - <span class="number">1</span>) {</span><br><span class="line">            <span class="variable">$res</span>[] = <span class="variable">$nums</span>[<span class="variable">$q</span>[<span class="number">0</span>]];      <span class="comment">// 窗口最大值就是队列头部的元素</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$q</span>[<span class="number">0</span>] === <span class="variable">$i</span> - <span class="variable">$k</span> + <span class="number">1</span>) {    <span class="comment">// 判断窗口左边界元素是否过期</span></span><br><span class="line">                <span class="title function_ invoke__">array_shift</span>(<span class="variable">$q</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$nums</span> = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>];</span><br><span class="line"><span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findMaxSlidingWindow</span>(<span class="variable">$nums</span>,<span class="number">3</span>);</span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$res</span>));        <span class="comment">// [5,5,5,5,6,6,6,4,10,10,10,2]</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-基于双指针实现的滑动窗口"><a href="#2-基于双指针实现的滑动窗口" class="headerlink" title="2. 基于双指针实现的滑动窗口"></a>2. 基于双指针实现的滑动窗口</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找最长无重复子串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $s</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int|mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params"><span class="variable">$s</span></span>) </span>{</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$ans</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 左右指针: 用两个指针left和right来表示滑动窗口的左右边界。</span></span><br><span class="line">    <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$right</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$set</span> = [];      <span class="comment">// 哈希表: 用一个哈希表来记录窗口中出现的字符。</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$right</span> &lt; <span class="variable">$n</span>) {</span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$s</span>[<span class="variable">$right</span>];</span><br><span class="line">        <span class="comment">// 窗口滑动: 当遇到重复字符时，左指针向右移动，直到窗口中不再包含重复字符。</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">isset</span>(<span class="variable">$set</span>[<span class="variable">$c</span>])) {</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$set</span>[<span class="variable">$s</span>[<span class="variable">$left</span>]]);</span><br><span class="line">            <span class="variable">$left</span>++;</span><br><span class="line">        }</span><br><span class="line">        <span class="variable">$set</span>[<span class="variable">$c</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable">$ans</span> = <span class="title function_ invoke__">max</span>(<span class="variable">$ans</span>, <span class="variable">$right</span> - <span class="variable">$left</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$right</span>++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ans</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">'sdf233rdfekdfkkdfkdkgkdfgggegfgmffdfdfeer343ferrfe'</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">lengthOfLongestSubstring</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="variable">$res</span>);        <span class="comment">// 6</span></span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>窗口大小: 滑动窗口的大小是根据具体问题来确定的。</li><li>数据类型: 滑动窗口可以处理各种类型的数据，包括数字、字符等。</li><li>时间复杂度: 滑动窗口算法的时间复杂度通常是O(n)，其中n是输入数据的长度。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm配置xdebug</title>
      <link href="/posts/phpstorm-setting-xdebug.html"/>
      <url>/posts/phpstorm-setting-xdebug.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">在php开发中，经常遇到一些奇怪的问题，一时半会儿排查不出原因；这时候就需要进行断点调试，xdebug就是常用的一种断点调试工具，下面介绍下如何设置的。</div><h3 id="xdebug设置"><a href="#xdebug设置" class="headerlink" title="xdebug设置"></a>xdebug设置</h3><ol><li>开启xdebug扩展，并配置php.ini，重启php<figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Xdebug]</span></span><br><span class="line"><span class="attr">zend_extension</span>=D:/phpstudy_pro/Extensions/php/php7.<span class="number">1.9</span>nts/ext/php_xdebug.dll</span><br><span class="line"><span class="attr">xdebug.collect_params</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">xdebug.collect_return</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">xdebug.auto_trace</span>=<span class="literal">Off</span></span><br><span class="line"><span class="attr">xdebug.trace_output_dir</span>=D:/phpstudy_pro/Extensions/php_log/php7.<span class="number">1.9</span>nts.xdebug.trace</span><br><span class="line"><span class="attr">xdebug.profiler_enable</span>=<span class="literal">Off</span></span><br><span class="line"><span class="attr">xdebug.profiler_output_dir</span>=D:/phpstudy_pro/Extensions/php_log/php7.<span class="number">1.9</span>nts.xdebug.profiler</span><br><span class="line"><span class="attr">xdebug.remote_enable</span>=<span class="literal">On</span></span><br><span class="line"><span class="attr">xdebug.remote_autostart</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">xdebug.remote_host</span>=<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">xdebug.remote_port</span>=<span class="number">9003</span></span><br><span class="line"><span class="attr">xdebug.remote_handler</span>=dbgp</span><br><span class="line"><span class="attr">xdebug.remote_connect_back</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">xdebug.idekey</span>=PHPSTORM</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置phpStorm<br><img src="/images/xdebug_1.png" alt=""><br><img src="/images/xdebug_2.png" alt=""><br><img src="/images/xdebug_3.png" alt=""><br><img src="/images/xdebug_4.png" alt=""></p></li><li><p>开启xdebug<br><img src="/images/xdebug_5.png" alt=""></p></li><li><p>重启phpStorm，可以愉快地使用了</p></li></ol><h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>如果xdebug不生效，可以检查下配置是否正确<br><img src="/images/xdebug_6.png" alt=""></p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>在 PHPStorm 中使用 Xdebug 进行命令行调试时，虽然没有图形界面那么直观，但通过一些快捷键，我们可以高效地控制调试过程。<br><strong>注意：</strong> 具体的快捷键可能因 PHPStorm 版本和操作系统而略有不同。可以通过 <strong>Help -&gt; Keymap Reference</strong> 查看当前配置的快捷键。</p><ul><li><strong>Step Over (F8)：</strong> 执行当前行，如果当前行有函数调用，则不进入函数内部。</li><li><strong>Step Into (F7)：</strong> 执行当前行，如果当前行有函数调用，则进入函数内部。</li><li><strong>Step Out (Shift+F8)：</strong> 从当前函数返回。</li><li><strong>Run to Cursor (Alt+F9)：</strong> 执行代码直到光标所在行。</li><li><strong>Evaluate Expression (Alt+F8)：</strong> 计算表达式并显示结果。</li><li><strong>Toggle Line Breakpoint (Ctrl+F8)：</strong> 在当前行设置或取消断点。</li><li><p><strong>View Breakpoints (Ctrl+Shift+F8)：</strong> 查看所有断点。</p></li><li><p><strong>Resume Program (F9)：</strong> 继续执行程序直到下一个断点。</p></li><li><strong>Pause Program (Ctrl+F2)：</strong> 暂停程序执行。</li><li><strong>Mute Breakpoints (Ctrl+Shift+N)：</strong> 禁用所有断点。</li><li><strong>Show Execution Point (Ctrl+Alt+F10)：</strong> 跳转到当前执行行。</li></ul><h3 id="示例：调试一个-PHP-命令行脚本"><a href="#示例：调试一个-PHP-命令行脚本" class="headerlink" title="示例：调试一个 PHP 命令行脚本"></a>示例：调试一个 PHP 命令行脚本</h3><ol><li><strong>设置断点：</strong> 在要调试的代码行设置断点。</li><li><strong>配置运行配置：</strong> 在 PHPStorm 中创建一个新的运行配置，选择 PHP，配置好脚本路径、参数等。</li><li><strong>启动调试：</strong> 点击运行配置旁边的调试按钮。</li><li><strong>使用快捷键控制调试过程：</strong> 根据需要使用上述快捷键进行单步执行、跳过、进入函数等操作。</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><strong>Xdebug 配置：</strong> 确保 Xdebug 已正确配置，并且 PHPStorm 的配置与 Xdebug 的配置一致。</li><li><strong>命令行参数：</strong> 如果脚本需要命令行参数，可以在运行配置中设置。</li><li><strong>远程调试：</strong> 如果需要调试远程服务器上的代码，需要配置远程调试。</li></ul><p><strong>通过熟练掌握这些快捷键，我们可以更有效地进行 PHP 命令行调试，提高开发效率。</strong></p><p><strong>温馨提示：</strong></p><ul><li><strong>具体操作可能因 PHPStorm 版本和操作系统而略有差异，请参考官方文档。</strong></li><li><strong>Xdebug 的配置非常重要，配置不正确会导致调试无法进行。</strong></li><li><strong>善用 PHPStorm 的调试功能，可以帮助我们快速定位并解决问题。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> phpStorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
            <tag> xdebug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令行中的快捷键</title>
      <link href="/posts/linux-short-cut-keys.html"/>
      <url>/posts/linux-short-cut-keys.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Linux 命令行中的快捷键非常丰富，可以大大提高程序员的工作效率。下面将详细介绍一些常用的快捷键，并分类说明：</p><h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><ul><li>Ctrl+A: 将光标移动到行首</li><li>Ctrl+E: 将光标移动到行尾</li><li>Ctrl+B: 光标向左移动一个字符</li><li>Ctrl+F: 光标向右移动一个字符</li><li>Ctrl+L: 清屏</li><li>Ctrl+K: 删除光标到行尾的内容</li><li>Ctrl+U: 删除光标到行首的内容</li><li>Alt+F: 光标向前移动一个单词</li><li>Alt+B: 光标向后移动一个单词</li></ul><h4 id="删除字符"><a href="#删除字符" class="headerlink" title="删除字符"></a>删除字符</h4><ul><li>Backspace: 删除光标前一个字符</li><li>Delete: 删除光标后一个字符</li><li>Ctrl+W: 删除光标前一个单词</li></ul><h4 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h4><ul><li>Ctrl+P: 向上翻找历史命令</li><li>Ctrl+N: 向下翻找历史命令</li><li>Ctrl+R: 搜索历史命令（输入部分命令，然后按Ctrl+R，再输入搜索内容）</li></ul><h4 id="其他常用快捷键"><a href="#其他常用快捷键" class="headerlink" title="其他常用快捷键"></a>其他常用快捷键</h4><ul><li>Tab: 自动补全命令或文件名</li><li>Ctrl+D: 退出当前终端</li><li>Ctrl+C: 中断当前正在执行的命令</li><li>Ctrl+Z: 将当前进程挂起至后台</li></ul><h4 id="命令行编辑"><a href="#命令行编辑" class="headerlink" title="命令行编辑"></a>命令行编辑</h4><ul><li>Ctrl+T: 交换光标前两个字符</li><li>Ctrl+Y: 粘贴之前删除的文本</li><li>Alt+D: 删除光标后的一个单词，并将其复制到剪贴板</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>假设你输入了一条很长的命令，但发现中间有个地方拼错了。我们可以：</p><ul><li>Ctrl+A 移动到行首</li><li>Ctrl+E 移动到行尾</li><li>Ctrl+B 或 Ctrl+F 将光标移动到错误的位置</li><li>使用删除键或 Ctrl+W 删除错误的字符</li><li>输入正确的字符</li><li>Ctrl+P 或 Ctrl+N 翻找历史命令，找到之前输入过的类似命令，进行修改<br>小技巧<br>利用Tab键：Tab键可以自动补全命令、文件名或路径，大大节省输入时间。<br>结合Ctrl+R搜索：通过Ctrl+R搜索历史命令，可以快速找到之前执行过的命令。</li></ul><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>快捷键的具体效果可能因终端配置的不同而有所差异，但大多数快捷键都是通用的。</li><li>有些快捷键可能被系统或应用程序重新定义。</li><li>通过熟练掌握这些快捷键，可以大大提高在Linux命令行下的工作效率。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下如何实现与Internet时间同步</title>
      <link href="/posts/38c1.html"/>
      <url>/posts/38c1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在项目中，有时候需要修改服务器时间来模拟某些场景，或者校准服务器时间；那么如何在Linux系统下实现与Internet时间同步呢。</p><h3 id="一、安装ntp"><a href="#一、安装ntp" class="headerlink" title="一、安装ntp"></a>一、安装ntp</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@pb ~]<span class="comment"># yum install -y ntpdate</span></span><br></pre></td></tr></tbody></table></figure><h3 id="二、同步时间"><a href="#二、同步时间" class="headerlink" title="二、同步时间"></a>二、同步时间</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 方式一、使用域名连接，要经过DNS解析，速度慢。</span><br><span class="line">[root@pb ~]<span class="comment"># ntpdate pool.ntp.org</span></span><br><span class="line">// 方式二、使用IP连接，超级快。</span><br><span class="line">[root@pb ~]<span class="comment"># ntpdate 120.24.81.91</span></span><br></pre></td></tr></tbody></table></figure><p><a href="http://www.pool.ntp.org是NTP的官方网站,在这上面我们可以找到离我们国家的NTP">http://www.pool.ntp.org是NTP的官方网站,在这上面我们可以找到离我们国家的NTP</a> Server cn.pool.ntp.org.它有3个服务器地址：<br>服务器一： 1.cn.pool.ntp.org<br>服务器二： 2.asia.pool.ntp.org<br>服务器三： 3.asia.pool.ntp.org<br>（直接用域名有时有问题，可以先Ping出他们的IP，然后用IP地址同步）</p><p> 出现以下信息说明成功<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Feb 21:23:06 ntpdate[62910]: step time server 182.92.12.11 offset -40.589470 sec</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="三、将系统时间写入到系统硬件当中，避免重启服务器时间覆盖"><a href="#三、将系统时间写入到系统硬件当中，避免重启服务器时间覆盖" class="headerlink" title="三、将系统时间写入到系统硬件当中，避免重启服务器时间覆盖"></a>三、将系统时间写入到系统硬件当中，避免重启服务器时间覆盖</h3><p>// 显示hardwareclock系统硬件时间<br></p><figure class="highlight autoit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@pb</span> ~]<span class="meta"># hwclock</span></span><br></pre></td></tr></tbody></table></figure><br>// 将系统时间写入到系统硬件当中<br><figure class="highlight autoit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@pb</span> ~]<span class="meta"># hwclock -w</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="四、设定计划任务同步网络时间"><a href="#四、设定计划任务同步网络时间" class="headerlink" title="四、设定计划任务同步网络时间"></a>四、设定计划任务同步网络时间</h3><h4 id="方式1：写在-etc-crontab里"><a href="#方式1：写在-etc-crontab里" class="headerlink" title="方式1：写在/etc/crontab里"></a>方式1：写在/etc/crontab里</h4><p>代码:<br></p><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">11 </span>* * * root ntpdate <span class="number">210.72</span>.<span class="number">145.44</span></span><br></pre></td></tr></tbody></table></figure><br>每天11点与中国国家授时中心同步时间<br>每天11点与中国国家授时中心同步时间<br>当然前提是<br><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install ntpdate</span><br></pre></td></tr></tbody></table></figure><br>代码也可是<br><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">11 </span>* * * root ntpdate us.pool.ntp.org</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="方式2：使用命令crontab-e"><a href="#方式2：使用命令crontab-e" class="headerlink" title="方式2：使用命令crontab -e"></a>方式2：使用命令crontab -e</h4><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">crontab</span> -e</span><br><span class="line"><span class="number">10</span> <span class="number">5</span> * * * root ntpdate us.pool.ntp.org;<span class="attribute">hwclock</span> -w</span><br></pre></td></tr></tbody></table></figure><p>这样每天5:10自动进行网络校时，并同时更新BIOS的时间</p>]]></content>
      
      
      <categories>
          
          <category> ntpdate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ntpdate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemD</title>
      <link href="/posts/2b4a.html"/>
      <url>/posts/2b4a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SystemD"><a href="#SystemD" class="headerlink" title="SystemD"></a>SystemD</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SystemD 是 Linux 的系统管理器，它的主要接口是 systemctl（即用户执行的命令）。</p><p>通过 systemctl 接口，可以启动/停止“单元”（unit），最常用的单元是“服务单元”（service），即系统守护程序。其他单元还有套接字单元（network socket）、定时器单元（timer）等等。</p><p>服务单元会有一个服务描述文件，里面设置启动该服务需要知道的信息，比如 sshd 的服务描述是“在多用户模式下，等待网络可用后，运行 SSH 服务器。” 修改服务描述文件以后，必须重新启动服务，修改才会生效。</p><h2 id="服务描述文件"><a href="#服务描述文件" class="headerlink" title="服务描述文件"></a>服务描述文件</h2><p>下面是一个服务描述文件的示例。它有很多设置，但是常用的就是那么几个。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=OpenBSD Secure Shell server</span><br><span class="line">Documentation=man:sshd(8) man:sshd_config(5)</span><br><span class="line">After=network.target auditd.service</span><br><span class="line">ConditionPathExists=!/etc/ssh/sshd_not_to_be_run</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/default/ssh</span><br><span class="line">ExecStartPre=/usr/sbin/sshd -t</span><br><span class="line">ExecStart=/usr/sbin/sshd -D <span class="variable">$SSHD_OPTS</span></span><br><span class="line">ExecReload=/usr/sbin/sshd -t</span><br><span class="line">ExecReload=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartPreventExitStatus=255</span><br><span class="line">Type=notify</span><br><span class="line">RuntimeDirectory=sshd</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=sshd.service</span><br></pre></td></tr></tbody></table></figure><p>网上有一些<a href="https://mysystemd.talos.sh/">描述文件生成器</a>，可以使用。</p><p>系统的单元描述文件，一般放在目录<code>/etc/systemd/system</code>。用户的单元描述文件放在目录<code>/etc/systemd/user</code>。命令<code>systemctl status xxx.service</code>会显示单元描述文件的位置。</p>]]></content>
      
      
      <categories>
          
          <category> SystemD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SystemD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xargs 命令</title>
      <link href="/posts/85ed.html"/>
      <url>/posts/85ed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="xargs-命令"><a href="#xargs-命令" class="headerlink" title="xargs 命令"></a>xargs 命令</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>xargs 用于将标准输入（stdin），转成其后命令的字符串参数。它通常跟管道命令（<code>|</code>）结合使用。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ {{command1}} | xargs {{command2}}</span><br></pre></td></tr></tbody></table></figure><p>上面是 xargs 的用法。正常情况下，第一个命令<code>command1</code>会输出结果到控制台（即标准输出<code>stdout</code>），但是管道命令（<code>|</code>）会拦截<code>command1</code>的标准输出，将其转为后面命令的标准输入（<code>stdin</code>），即<code>xargs</code>命令会接收到标准输入，它再将其转为<code>command2</code>的字符串参数来运行。</p><p>举例来说，文本文件<code>list.txt</code>的内容是一组文件名。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.txt</span><br><span class="line">b.txt</span><br><span class="line">c.txt</span><br></pre></td></tr></tbody></table></figure><p>然后，执行下面的命令，会将这组文件全部删除。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 a.txt b.txt c.txt</span></span><br><span class="line">$ <span class="built_in">cat</span> list.txt | xargs <span class="built_in">rm</span></span><br></pre></td></tr></tbody></table></figure><p>上面示例中，<code>cat</code>命令将<code>list.txt</code>的内容输出到标准输出，但是被管道命令拦截，转为<code>xargs</code>的标准输入，后者再将标准输入转成<code>rm</code>命令的字符串参数，即实际执行的是下面的命令。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> a.txt b.txt c.txt</span><br></pre></td></tr></tbody></table></figure><p>通常来说，Linux 命令分成两种，一种接受标准输入（一般是键盘）作为参数，另一种接受命令行的字符串作为参数。这两种参数的性质有很大的不同：标准输入（stdin）是文本流（stream），理论上只要不终止，就是无限的；命令行参数则是一个有固定长度的文本数组。xargs 的 作用就是接受标准输入，将其转成命令行参数。</p><p>xargs 有点像 echo 命令的逆操作。echo 命令是将命令行参数转为标准输出。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> abc</span><br></pre></td></tr></tbody></table></figure><p>上面命令中，<code>abc</code>是命令行参数，<code>echo</code>命令将其转为标准输入。</p><p>至于管道命令<code>|</code>，则是将前一个命令的标准输出，转成后一个命令的标准输入。但是，大多数命令只接受命令行参数，所以管道命令就需要 跟 xargs 结合使用，这是 Linux 的常见操作。</p><h2 id="xargs-的单独使用"><a href="#xargs-的单独使用" class="headerlink" title="xargs 的单独使用"></a>xargs 的单独使用</h2><p>xargs 命令也可以单独使用，这时等同于执行<code>xargs echo</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xargs</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ xargs <span class="built_in">echo</span></span><br></pre></td></tr></tbody></table></figure><p>输入<code>xargs</code>后按下回车，命令行就会等待标准输入（即用户的键盘输入）。你可以输入任意内容，然后按下 Ctrl+d，表示输入结束，这时<code>echo</code>命令就会把前面的输入打印出来。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xargs</span><br><span class="line">hello (Ctrl + d)</span><br><span class="line">hello</span><br></pre></td></tr></tbody></table></figure><p>上面示例中，执行<code>xargs</code>后，从键盘输入<code>hello</code>，然后按下 Ctrl+d，就会自动执行<code>echo hello</code>。</p><p>再看一个例子。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ xargs find -name</span><br><span class="line"><span class="string">"*.txt"</span></span><br><span class="line">./foo.txt</span><br><span class="line">./hello.txt</span><br></pre></td></tr></tbody></table></figure><p>上面示例中，输入<code>xargs find -name</code>以后，命令行会等待用户输入所要搜索的文件。用户输入<code>"*.txt"</code>，表示搜索当前目录下的所有 TXT 文件，然后按下 Ctrl+d，表示输入结束，这时就相当执行<code>find -name *.txt</code>。</p><h2 id="d-参数与分隔符"><a href="#d-参数与分隔符" class="headerlink" title="-d 参数与分隔符"></a>-d 参数与分隔符</h2><p>默认情况下，<code>xargs</code>将换行符和空格作为分隔符，把标准输入分解成一个个命令行参数。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"one two three"</span> | xargs <span class="built_in">mkdir</span></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>mkdir</code>会新建三个子目录，因为<code>xargs</code>将<code>one two three</code>分解成三个命令行参数，执行<code>mkdir one two three</code>。</p><p><code>-d</code>参数可以更改分隔符。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -e <span class="string">"a\tb\tc"</span> | xargs -d <span class="string">"\t"</span> <span class="built_in">echo</span></span><br><span class="line">a b c</span><br></pre></td></tr></tbody></table></figure><p>上面的命令指定制表符<code>\t</code>作为分隔符，所以<code>a\tb\tc</code>就转换成了三个命令行参数。<code>echo</code>命令的<code>-e</code>参数表示解释转义字符。</p><h2 id="p-参数，-t-参数"><a href="#p-参数，-t-参数" class="headerlink" title="-p 参数，-t 参数"></a>-p 参数，-t 参数</h2><p>使用<code>xargs</code>命令以后，由于存在转换参数过程，有时需要确认一下到底执行的是什么命令。</p><p><code>-p</code>参数打印出要执行的命令，询问用户是否要执行。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'one two three'</span> | xargs -p <span class="built_in">touch</span></span><br><span class="line"><span class="built_in">touch</span> one two three ?...</span><br></pre></td></tr></tbody></table></figure><p>上面的命令执行以后，会打印出最终要执行的命令，让用户确认。用户按下回车以后，才会真正执行。</p><p><code>-t</code>参数则是打印出最终要执行的命令，然后直接执行，不需要用户确认。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'one two three'</span> | xargs -t <span class="built_in">rm</span></span><br><span class="line"><span class="built_in">rm</span> one two three</span><br></pre></td></tr></tbody></table></figure><h2 id="0-参数与-find-命令"><a href="#0-参数与-find-命令" class="headerlink" title="-0 参数与 find 命令"></a>-0 参数与 find 命令</h2><p>由于<code>xargs</code>默认将空格作为分隔符，所以不太适合处理文件名，因为文件名可能包含空格。</p><p><code>find</code>命令有一个特别的参数<code>-print0</code>，指定输出的文件列表以<code>null</code>分隔。然后，<code>xargs</code>命令的<code>-0</code>参数表示用<code>null</code>当作分隔符。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find /path -<span class="built_in">type</span> f -print0 | xargs -0 <span class="built_in">rm</span></span><br></pre></td></tr></tbody></table></figure><p>上面命令删除<code>/path</code>路径下的所有文件。由于分隔符是<code>null</code>，所以处理包含空格的文件名，也不会报错。</p><p>还有一个原因，使得<code>xargs</code>特别适合<code>find</code>命令。有些命令（比如<code>rm</code>）一旦参数过多会报错“参数列表过长”，而无法执行，改用<code>xargs</code>就没有这个问题，因为它对每个参数执行一次命令。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find . -name <span class="string">"*.txt"</span> | xargs grep <span class="string">"abc"</span></span><br></pre></td></tr></tbody></table></figure><p>上面命令找出所有 TXT 文件以后，对每个文件搜索一次是否包含字符串<code>abc</code>。</p><h2 id="L-参数"><a href="#L-参数" class="headerlink" title="-L 参数"></a>-L 参数</h2><p>如果标准输入包含多行，<code>-L</code>参数指定多少行作为一个命令行参数。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ xargs find -name</span><br><span class="line"><span class="string">"*.txt"</span></span><br><span class="line"><span class="string">"*.md"</span></span><br><span class="line">find: paths must precede expression: `*.md<span class="string">'</span></span><br></pre></td></tr></tbody></table></figure><p>上面命令同时将<code>"*.txt"</code>和<code>*.md</code>两行作为命令行参数，传给<code>find</code>命令导致报错。</p><p>使用<code>-L</code>参数，指定每行作为一个命令行参数，就不会报错。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ xargs -L 1 find -name</span><br><span class="line"><span class="string">"*.txt"</span></span><br><span class="line">./foo.txt</span><br><span class="line">./hello.txt</span><br><span class="line"><span class="string">"*.md"</span></span><br><span class="line">./README.md</span><br></pre></td></tr></tbody></table></figure><p>上面命令指定了每一行（<code>-L 1</code>）作为命令行参数，分别运行一次命令（<code>find -name</code>）。</p><p>下面是另一个例子。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -e <span class="string">"a\nb\nc"</span> | xargs -L 1 <span class="built_in">echo</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></tbody></table></figure><p>上面代码指定每行运行一次<code>echo</code>命令，所以<code>echo</code>命令执行了三次，输出了三行。</p><h2 id="n-参数"><a href="#n-参数" class="headerlink" title="-n 参数"></a>-n 参数</h2><p><code>-L</code>参数虽然解决了多行的问题，但是有时用户会在同一行输入多项。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xargs find -name</span><br><span class="line"><span class="string">"*.txt"</span> <span class="string">"*.md"</span></span><br><span class="line">find: paths must precede expression: `*.md<span class="string">'</span></span><br></pre></td></tr></tbody></table></figure><p>上面的命令将同一行的两项作为命令行参数，导致报错。</p><p><code>-n</code>参数指定每次将多少项，作为命令行参数。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xargs -n 1 find -name</span><br></pre></td></tr></tbody></table></figure><p>上面命令指定将每一项（<code>-n 1</code>）标准输入作为命令行参数，分别执行一次命令（<code>find -name</code>）。</p><p>下面是另一个例子。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> {0..9} | xargs -n 2 <span class="built_in">echo</span></span><br><span class="line">0 1</span><br><span class="line">2 3</span><br><span class="line">4 5</span><br><span class="line">6 7</span><br><span class="line">8 9</span><br></pre></td></tr></tbody></table></figure><p>上面命令指定，每两个参数运行一次<code>echo</code>命令。所以，10个阿拉伯数字运行了五次<code>echo</code>命令，输出了五行。</p><h2 id="I-参数"><a href="#I-参数" class="headerlink" title="-I 参数"></a>-I 参数</h2><p>如果<code>xargs</code>要将命令行参数传给多个命令，可以使用<code>-I</code>参数。</p><p><code>-I</code>指定每一项命令行参数的替代字符串。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> foo.txt</span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> foo.txt | xargs -I file sh -c <span class="string">'echo file; mkdir file'</span></span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">one two three</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，<code>foo.txt</code>是一个三行的文本文件。我们希望对每一项命令行参数，执行两个命令（<code>echo</code>和<code>mkdir</code>），使用<code>-I file</code>表示<code>file</code>是命令行参数的替代字符串。执行命令时，具体的参数会替代掉<code>echo file; mkdir file</code>里面的两个<code>file</code>。</p><h2 id="—max-procs-参数"><a href="#—max-procs-参数" class="headerlink" title="—max-procs 参数"></a>—max-procs 参数</h2><p><code>xargs</code>默认只用一个进程执行命令。如果命令要执行多次，必须等上一次执行完，才能执行下一次。</p><p><code>--max-procs</code>参数指定同时用多少个进程并行执行命令。<code>--max-procs 2</code>表示同时最多使用两个进程，<code>--max-procs 0</code>表示不限制进程数。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -q | xargs -n 1 --max-procs 0 docker <span class="built_in">kill</span></span><br></pre></td></tr></tbody></table></figure><p>上面命令表示，同时关闭尽可能多的 Docker 容器，这样运行速度会快很多。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://dhashe.com/xargs-is-the-inverse-function-of-echo.html">xargs is the inverse function of echo</a></li><li><a href="https://shapeshed.com/unix-xargs/">Linux and Unix xargs command tutorial with examples</a>, George Ornbo</li><li><a href="https://www.howtoforge.com/tutorial/linux-xargs-command/">8 Practical Examples of Linux Xargs Command for Beginners</a>, Himanshu Arora</li></ul>]]></content>
      
      
      <categories>
          
          <category> xargs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> xargs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Cron定时任务</title>
      <link href="/posts/9c77.html"/>
      <url>/posts/9c77.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Cron 是一个用来执行定时任务的工具，可以在指定的时间自动执行重复性任务。</p><p>它的核心是 cron 守护进程，名为 crond。它在后台每分钟运行一次，检查是否有需要在指定时间执行的计划任务。</p><p>下面命令可以查看 cron 守护进程，是否正常运行。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl status cron</span></span><br></pre></td></tr></tbody></table></figure><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p>crond 检查的定时任务，保存在 crontab 文件。该文件的每一行代表一个单独的作业，包含何时运行该任务，以及所要执行的命令。</p><p>crontab 分成两个级别：用户个人的crontab，系统的 crontab。前者由用户本人编辑，后者只能由根用户编辑。</p><p>系统的 crontab 存放在<code>/etc/crontab</code>，以及一系列特殊目录之中：<code>/etc/cron.daily</code>、<code>/etc/cron.hourly</code>、<code>/etc/cron.weekly</code>和<code>/etc/cron.monthly</code>。</p><h2 id="cron-任务的语法"><a href="#cron-任务的语法" class="headerlink" title="cron 任务的语法"></a>cron 任务的语法</h2><p>crontab 文件的每一行，代表一个 cron 任务。它由多个字段组成，字段之间使用空格或制表符分隔。</p><p>cron 任务的基本语法如下。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minute hour day_of_month month day_of_week command_to_execute</span><br></pre></td></tr></tbody></table></figure><p>各个字段的含义如下。</p><ul><li>minute（0-59）：指定命令运行的分钟，可以是0到59之间的值，0表示将在一小时开始时运行命令。</li><li>hour（0-23）：指定命令运行的小时，以24小时格式指定，例如将其设置为14将在下午2点运行该命令。</li><li>day_of_month（1-31）：指定命令运行的日期。它可以是1到31之间的任意值，具体取决于该月的天数。例如，设置为1将在每个月的第一天运行命令。</li><li>month（1-12）：指定命令将在哪个月份执行。它可以是 1（一月）到 12（十二月）之间的值。例如，设置为12将在12月执行该命令。</li><li>day_of_week（0-6）：指定命令应在一周中的哪一天运行。它可以是0（星期日）到6（星期六）之间的值。例如，设置为5将在每个星期五运行该命令。</li><li>command_to_execute：指定 cron 任务应执行的操作。</li></ul><p>crontab 还允许使用通配符。</p><ul><li>星号 (<em>)：代表“每个”时间单位。例如，小时字段中的“</em>”表示“每小时”。</li><li>逗号 (,)：用于在同一字段指定多个值。例如，day_of_week 字段中的“1,3,5”表示“周一、周三和周五运行”。注意，逗号前后不能由空格。</li><li>连字符 (-)：指定值的范围。例如，小时字段中的“9-17”表示“上午9点到下午5点之间的每小时”。</li><li>斜杠 (/)：指定增量。例如，分钟字段中的“*/10”表示“每10分钟”。</li></ul><p>crontab 还提供一些快捷字符串。</p><ul><li>@reboot    在启动时运行一次指定的命令 。</li><li>@year，@annually 两者都在每年 1 月 1 日中午 12:00运行指定的任务 。相当于指定“0 0 1 1 *”</li><li>@monthly 每月1 日中午 12:00运行该作业 一次。相当于“0 0 1 <em> </em>”</li><li>@weekly 在每周周日中午 12:00运行该作业 一次。相当于“0 0 <em> </em> 0”</li><li>@daily，@midnight：两者都在每天中午 12:00运行 cronjob  。这相当于在 crontab 文件中指定“0 0 <em> </em> *”。</li><li>@hourly：每小时整点运行该作业 。相当于“0 <em> </em> <em> </em>”</li></ul><p>crontab 文件中，以“#”符号开头的行表示注释。</p><p>以下是一些示例。</p><ul><li><code>* * * * *</code>    每分钟运行一次 cron 作业。</li><li><code>0 * * * *</code>    每小时运行一次 cron 作业。</li><li><code>0 0 * * *</code>    每天午夜运行 cron 作业。</li><li><code>0 2 * * *</code>    每天凌晨 2 点运行 cron 作业。</li><li><code>0 0 15 * *</code>    每个月 15 日午夜运行一次 cron 作业。</li><li><code>0 0 0 12 *</code>    周六午夜运行 cron 作业。</li><li><code>0 0 * * 6</code>    从周一到周五每天下午 3 点运行 cron 作业。</li><li><code>0 15 * * 1-5</code>    从周一到周五每天下午 3 点运行 cron 作业。</li><li><code>*/5 * * * *</code>    每 5 分钟运行一次 cron 作业。</li><li><code>0 8-16 * * *</code> 每天、每小时、从上午 8 点到下午 4 点准时执行 cron 作业。</li><li><code>0 4 * * 2,4</code>    在周二和周四凌晨 4 点运行 cron 作业。</li><li><code>@reboot</code>    系统启动时运行 cron 作业。</li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>cron 任务在非交互式、非登录 Shell 环境中运行，这意味着它们可能无法访问与手动运行命令时相同的环境变量。</p><p>这就是说，cron 任务不会自动继承用户或系统的环境变量或路径。这可能会导致 cron 作业失败，无法找到可执行文件或脚本。解决方法是在 crontab 文件中显式设置 PATH 环境变量。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin</span><br></pre></td></tr></tbody></table></figure><p>不过，为了便于调试，建议始终在 cron 任务中使用绝对路径。</p><p>除了<code>PATH</code>环境变量，还可以设置<code>SHELL</code>环境变量，指定 cron 使用的 Shell。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHELL=/bin/sh</span><br></pre></td></tr></tbody></table></figure><p>上面示例设定执行 cron 任务时，使用 Bash。</p><h2 id="cron-任务管理"><a href="#cron-任务管理" class="headerlink" title="cron 任务管理"></a>cron 任务管理</h2><h3 id="个人任务"><a href="#个人任务" class="headerlink" title="个人任务"></a>个人任务</h3><p>创建或编辑用户的 crontab 文件，使用下面的命令。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></tbody></table></figure><p>上面的命令会打开系统默认文本编辑器，对用户的 crontab 文件进行编辑。</p><p>添加 cron 任务，只需在 crontab 文件中添加一个新行即可。例如，备份脚本 backup.sh 每天凌晨 3:00 运行，就是添加下面的内容。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 3 * * * /home/linuxiac/backup.sh</span><br></pre></td></tr></tbody></table></figure><p>编辑完成后，保存并退出编辑器。Cron 服务会自动检查 crontab 文件，因此无需在更改后重新启动 Cron 进程。</p><p><code>crontab -e</code>还会在保存和退出文件时，自动检查语法，防止意外输入无效的 cron 任务。</p><p>下面命令可以列出当前用户的所有 cron 任务。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l</span><br></pre></td></tr></tbody></table></figure><p>如果拥有根用户权限，可以查看其他用户的 cron 任务。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo crontab -u [用户名] -l</span><br></pre></td></tr></tbody></table></figure><p>上面示例中，<code>[用户名]</code>是需要替换的部分。</p><p>编辑其他用户的 cron 任务，可以使用命令行参数<code>-e</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo crontab -u [用户名] -e</span><br></pre></td></tr></tbody></table></figure><p>删除某个 cron 任务时，只要删除那一行即可。如果想要删除所有的 cron 任务，只要删除 crontab 文件即可，也可以使用命令行参数<code>-r</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -r</span><br></pre></td></tr></tbody></table></figure><p>上面的命令会删除当前用户的 crontab 文件（即删除所有 cron 任务），而且不会出现任何确认提示，因此请小心使用。</p><p>如果希望删除前出现确认提示，则可以使用命令行参数<code>-i</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -i -r</span><br></pre></td></tr></tbody></table></figure><h3 id="系统任务"><a href="#系统任务" class="headerlink" title="系统任务"></a>系统任务</h3><p>创建系统级别的 cron 任务，需要直接编辑<code>/etc/crontab</code>文件。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0  2  *  *  * root /usr/bin/find /var/log/myservice -<span class="built_in">type</span> f -name <span class="string">'*.log'</span> -delete</span><br></pre></td></tr></tbody></table></figure><p>上面示例设定在每天凌晨2:00，从<code>/var/log/myservice</code>目录删除所有带有扩展名为<code>.log</code>的文件。</p><p>它的格式与用户级别的 cron 文件有一个区别，就是在最初表示时间的五个字段后面，多了一个字段，表示执行任务的用户帐户，本例为<code>root</code>。</p><p>直接编辑<code>/etc/crontab</code>文件有两个缺点。（1）它不提供语法检查，增加了出错的风险。（2）它会影响整个系统，使用时需要非常谨慎。</p><p>列出所有的系统级别 cron 任务，需要查看以下所有文件和目录。</p><ul><li>/etc/crontab 文件</li><li>/etc/cron.d/ 目录</li><li>/etc/cron.daily/ 目录</li><li>/etc/cron.hourly/ 目录</li><li>/etc/cron.weekly/ 目录</li><li>/etc/cron.monthly/ 目录</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://linuxiac.com/how-to-use-cron-and-crontab-on-linux/">How to Use Cron on Linux: Tips, Tricks, and Examples</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Cron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次高并发迭代之路！！</title>
      <link href="/posts/high-concurrent-experience.html"/>
      <url>/posts/high-concurrent-experience.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h3><p>2020年之初，新冠肺炎突然来势汹汹，在全国人民的团结努力下，抗疫战进入了僵持阶段，2月24日我公司一复工，就接到了成都市XX区领导的需求，需要在一周内开发上线一个针对全区师生(10万人左右)疫情每日打卡平台。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>其实就是需要做一个用户每日登陆填报问卷的功能。此平台需要有一个管理后台，一个h5打卡填报及其附属页面。</p><h3 id="雏形"><a href="#雏形" class="headerlink" title="雏形"></a>雏形</h3><p>由于时间紧，对项目进行简单分析后，确定功能(后台：用户信息管理、打卡记录、数据统计，前台：用户登陆、打卡、快速打卡、打卡记录)后，我们就着手开发。功能很快开发开发完成并上线。</p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>上线前的测试阶段，我们发现有些信息是固定的但每个人都需要查询，比如省市区信息，于是我们进行了redis缓存。由于后台的统计过于复杂，于是使用golang开发了计划任务，每两分钟统计一次数据。<br>领导验收时又提了一些功能改进，在改进时，我们发现用户数有10万左右，单一的打卡接口可能会堵塞，于是进行了优化，打卡接口只进行普通的填报信息校验，校验通过后，异步调用golang接口进行打卡信息保存，这样有一个坏处就是数据保存延迟，可能会出现打卡后看不到记录。为防止用户多次打卡，在填报信息校验通过后，将当天打卡人的唯一标识存入redis，如果存在redis中就不让再次打卡，当然如果打卡信息保存失败，go程序需删除该人当日的打卡缓存。<br>上线试运行期间，发现用户打卡打卡页面很慢，经分析，服务器带宽只有10M，前端页面图片未压缩，于是进行图片、js、css等资源文件压缩，单纯压测前端页面(压缩后未425k)，明显带宽不够，加大到100M，前端页面图片CND加速后，压测1000并发无问题。压测打卡接口，1000并发连接超时失败率20%，800并发连接超时失败率10%。<br>压测一个通宵后，本以为平安无事了，结果第二天一早上就卡得不行，原来是后台查询过慢，导致cpu飙升，前台用户查询不到数据，看慢查询发现，时不时有几个查询sql消耗时间过长，show preocesslist也看到异常。先加索引优化，但效果不明显，结果发现是在进行联表查询的时候，大表联了大表，大表牵引本来就是问题，于是对业务表进行了合并，5张表合成一张表，并添加索引，后台查询立马飞快。更新程序后，暂时一切正常了。<br>没想到第二天一早上服务器有出问题了，并发飙升到2万多，有很多insert 语句造成了锁表，而很多的select语句有无法执行。突然意识到myisam使用insert的时候会造成锁表，需要支持并发插入，得修改concurrent_insert=2,；另一方面有个在慢查询中有两个select语句出现很频繁，但耗时不高(0.60s左右)，explain发现居然没有使用索引，立马加上索引，查询耗时降低到0.02s。在无法kill sql进程的情况下，只能进行停止Nginx，重启数据库，重启后一切正常。<br>由于可能并发过高，我们选择了服务器升级，单台数据库可能扛不住。全迁移到阿里云，使用阿里云的数据库，读写分离，一主多从，弹性伸缩。一切ok，监控两日后发现并发在8000左右。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>架构设计的原则：简单、合适高于一切。<br>高并发需考虑带宽，页面缓存压缩、静态数据缓存、接口异步多线程处理。<br>慢查询除了关注耗时过长的sql，还得注意使用频繁的sql。<br>高并发当程序优化到极致后，需考虑服务器优化，读写分离，redis集群等。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keccak算法：SHA-3标准的基石</title>
      <link href="/posts/keccak.html"/>
      <url>/posts/keccak.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Keccak是什么？"><a href="#Keccak是什么？" class="headerlink" title="Keccak是什么？"></a>Keccak是什么？</h3><p>Keccak是一种被选定为SHA-3标准的单向散列函数算法。它以其高效、安全、灵活的设计而著称，成为了众多密码学应用的基石。</p><h3 id="Keccak的特点"><a href="#Keccak的特点" class="headerlink" title="Keccak的特点"></a>Keccak的特点</h3><ul><li><strong>海绵结构:</strong> Keccak采用了独特的“海绵结构”，这种结构由吸收和挤压两个阶段组成。在吸收阶段，输入的消息被不断吸收，直到达到状态的最大容量。在挤压阶段，则从状态中挤出输出。这种结构使得Keccak可以处理任意长度的消息。</li><li><strong>安全性:</strong> Keccak经过了严格的密码学分析，被认为是目前最安全的散列函数之一。它在抗碰撞、抗原像攻击等方面表现出色。</li><li><strong>灵活性:</strong> Keccak可以生成任意长度的散列值，使得它可以适应不同的应用场景。</li></ul><h3 id="Keccak的工作原理"><a href="#Keccak的工作原理" class="headerlink" title="Keccak的工作原理"></a>Keccak的工作原理</h3><ol><li><strong>预处理:</strong> 输入的消息被填充，使其长度达到海绵结构所需的长度。</li><li><strong>吸收:</strong> 填充后的消息被分成固定大小的块，逐块与状态进行异或操作。</li><li><strong>置换:</strong> 对状态进行一系列非线性变换，以增加输出的随机性。</li><li><strong>挤压:</strong> 从状态中提取输出。</li></ol><h3 id="Keccak的应用"><a href="#Keccak的应用" class="headerlink" title="Keccak的应用"></a>Keccak的应用</h3><ul><li><strong>数字签名:</strong> Keccak可以用来生成数字签名，确保数据的完整性和身份认证。</li><li><strong>密码存储:</strong> Keccak可以用来对密码进行哈希处理，保护密码的安全。</li><li><strong>区块链:</strong> Keccak-256是Ethereum区块链中广泛使用的哈希函数，用于生成地址和验证交易。</li><li><strong>其他密码学应用:</strong> Keccak还可以用于构建消息认证码、随机数生成器等。</li></ul><h3 id="Keccak和SHA-3的关系"><a href="#Keccak和SHA-3的关系" class="headerlink" title="Keccak和SHA-3的关系"></a>Keccak和SHA-3的关系</h3><ul><li><strong>Keccak是SHA-3的基础:</strong> SHA-3是一系列散列函数的统称，而Keccak是这些函数的底层算法。</li><li><strong>SHA-3的标准化:</strong> 在SHA-3标准化过程中，NIST对Keccak进行了微小的调整，以满足标准化要求。</li></ul><h3 id="PHP使用Sodium-Extension扩展实现Keccak算法"><a href="#PHP使用Sodium-Extension扩展实现Keccak算法" class="headerlink" title="PHP使用Sodium Extension扩展实现Keccak算法"></a>PHP使用Sodium Extension扩展实现Keccak算法</h3><p>Sodium Extension是一个PHP扩展，提供了许多密码学函数，包括Keccak算法的实现。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 确保Sodium Extension已安装</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">'sodium_crypto_hash_sha3_256'</span>)) {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">'Sodium extension is not installed'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$message</span> = <span class="string">"Hello, Keccak!"</span>;</span><br><span class="line"><span class="variable">$hash</span> = <span class="title function_ invoke__">sodium_crypto_hash_sha3_256</span>(<span class="variable">$message</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">bin2hex</span>(<span class="variable">$hash</span>) . <span class="string">"\n"</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Keccak算法作为SHA-3标准的基础，具有高效、安全、灵活的特点。它的海绵结构使得它可以处理任意长度的消息，并且在密码学领域有着广泛的应用。随着区块链技术的兴起，Keccak-256更是成为了一个备受关注的哈希函数。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> Keccak算法 </tag>
            
            <tag> SHA-3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彩虹表攻击</title>
      <link href="/posts/rainbow-table-attack.html"/>
      <url>/posts/rainbow-table-attack.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是彩虹表？"><a href="#什么是彩虹表？" class="headerlink" title="什么是彩虹表？"></a>什么是彩虹表？</h3><p>彩虹表是一种预先计算好的哈希值表。它通过对大量的密码进行哈希计算，并将结果存储在一个特殊的结构中，从而加速密码破解过程。</p><h3 id="彩虹表的基本结构"><a href="#彩虹表的基本结构" class="headerlink" title="彩虹表的基本结构"></a>彩虹表的基本结构</h3><ul><li><strong>链条：</strong> 彩虹表由许多链条组成，每条链条包含多个哈希值。</li><li><strong>归约函数：</strong> 一个用于将哈希值缩减为更短的字符串的函数。</li><li><strong>起始点：</strong> 每条链条都有一个唯一的起始点。</li></ul><h3 id="彩虹表的生成过程"><a href="#彩虹表的生成过程" class="headerlink" title="彩虹表的生成过程"></a>彩虹表的生成过程</h3><ol><li><strong>选择一个起始密码：</strong> 随机选择一个密码作为起始点。</li><li><strong>计算哈希值：</strong> 对起始密码进行哈希计算，得到第一个哈希值。</li><li><strong>应用归约函数：</strong> 将得到的哈希值应用归约函数，得到一个新的值。</li><li><strong>重复步骤2和3：</strong> 重复上述步骤，直到链条达到预设的长度。</li><li><strong>重复步骤1-4：</strong> 生成大量的链条，构成彩虹表。</li></ol><h3 id="彩虹表攻击原理"><a href="#彩虹表攻击原理" class="headerlink" title="彩虹表攻击原理"></a>彩虹表攻击原理</h3><p>当攻击者获得一个哈希值时，他会：</p><ol><li><strong>查找彩虹表：</strong> 在彩虹表中找到与目标哈希值最接近的哈希值。</li><li><strong>回溯：</strong> 从找到的哈希值开始，逆向应用归约函数和哈希函数，直到找到对应的密码。</li></ol><p>如果攻击者幸运，那么他就可以通过这种方式快速破解密码。</p><h3 id="彩虹表攻击的优缺点"><a href="#彩虹表攻击的优缺点" class="headerlink" title="彩虹表攻击的优缺点"></a>彩虹表攻击的优缺点</h3><ul><li><strong>优点：</strong><ul><li><strong>速度快：</strong> 相比暴力破解，彩虹表攻击速度更快。</li><li><strong>存储空间相对较小：</strong> 通过使用归约函数，可以减少存储空间。</li></ul></li><li><strong>缺点：</strong><ul><li><strong>针对性较强：</strong> 彩虹表针对特定的哈希函数和密码长度。</li><li><strong>容易被检测：</strong> 大规模的彩虹表生成和查询会引起注意。</li></ul></li></ul><h3 id="防御彩虹表攻击"><a href="#防御彩虹表攻击" class="headerlink" title="防御彩虹表攻击"></a>防御彩虹表攻击</h3><ul><li><strong>使用强散列算法：</strong> 选择抗碰撞性强的散列算法，如SHA-256、SHA-3等。</li><li><strong>加盐：</strong> 在密码哈希过程中添加随机的盐值，可以增加破解难度。</li><li><strong>提高密码复杂度：</strong> 强制用户使用更复杂的密码，增加破解难度。</li><li><strong>限制登录尝试次数：</strong> 限制用户在短时间内多次尝试登录，可以有效防止暴力破解攻击。</li><li><strong>多因素认证：</strong> 除了密码，还可以结合其他认证方式，如指纹、面部识别等。</li></ul><h3 id="彩虹表与生日攻击的区别"><a href="#彩虹表与生日攻击的区别" class="headerlink" title="彩虹表与生日攻击的区别"></a>彩虹表与生日攻击的区别</h3><ul><li><strong><a href="birthday-attack.html" target="_blank">生日攻击</a></strong>：通过计算大量的哈希值，寻找两个不同的输入产生相同哈希值的碰撞。</li><li><strong>彩虹表攻击</strong>：利用预先计算好的哈希表，加速密码破解过程。</li></ul><p>两者都是针对哈希函数的攻击方式，但生日攻击更侧重于寻找碰撞，而彩虹表攻击更侧重于加速破解过程。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>彩虹表攻击是一种常见的密码破解手段，了解其原理和防御方法对于保障信息安全非常重要。在实际应用中，应综合考虑多种防护措施，以提高系统的安全性。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 彩虹表 </tag>
            
            <tag> 攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解生日攻击</title>
      <link href="/posts/birthday-attack.html"/>
      <url>/posts/birthday-attack.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="生日攻击的本质"><a href="#生日攻击的本质" class="headerlink" title="生日攻击的本质"></a>生日攻击的本质</h3><p><strong>生日攻击</strong>，顾名思义，源自一个看似悖论的概率问题：在一个班级里，需要多少人才能保证至少两个人生日相同？答案出乎意料地小。这正是生日攻击的数学基础。</p><p><strong>在密码学中，生日攻击利用了以下原理：</strong></p><ul><li><strong>有限的哈希值空间：</strong> 任何哈希函数的输出都是有限的。</li><li><strong>概率论：</strong> 随着输入数据的增加，产生碰撞的概率会迅速上升。</li></ul><p><strong>攻击过程：</strong></p><ol><li><strong>生成随机数据：</strong> 攻击者生成大量的随机数据。</li><li><strong>计算哈希值：</strong> 对每个随机数据计算哈希值。</li><li><strong>查找碰撞：</strong> 如果找到两个不同的数据具有相同的哈希值，则碰撞发生。</li></ol><h3 id="生日攻击的危害"><a href="#生日攻击的危害" class="headerlink" title="生日攻击的危害"></a>生日攻击的危害</h3><ul><li><strong>密码破解：</strong> 攻击者可以通过生日攻击，快速找到与目标密码哈希值相同的哈希值，从而破解密码。</li><li><strong>数字签名伪造：</strong> 攻击者可以找到两个具有相同哈希值的文件，然后用伪造的文件替换原文件，从而伪造数字签名。</li><li><strong>消息认证码破解：</strong> 攻击者可以通过生日攻击，找到两个不同的消息，它们的HMAC值相同，从而伪造消息。</li><li><strong>随机数生成器攻击：</strong> 攻击者可以通过生日攻击，找到两个不同的种子，生成相同的随机数序列。</li><li><strong>冲突检测协议攻击：</strong> 在分布式系统中，生日攻击可以用来制造冲突，破坏系统的正常运行。</li><li><strong>其他加密系统攻击：</strong> 生日攻击可以应用于许多其他加密系统，对系统的安全性造成威胁。</li></ul><h3 id="如何防御生日攻击"><a href="#如何防御生日攻击" class="headerlink" title="如何防御生日攻击"></a>如何防御生日攻击</h3><ul><li><strong>选择足够长的哈希值：</strong> 哈希值越长，碰撞发生的概率就越低。</li><li><strong>使用更强的哈希算法：</strong> 好的哈希算法具有更好的抗碰撞性。</li><li><strong>盐值：</strong> 在密码哈希过程中添加随机的盐值，可以增加破解难度。</li><li><strong>HMAC：</strong> 使用HMAC（Hash-based Message Authentication Code）可以防止消息被篡改。</li><li><strong>限制重试次数：</strong> 对密码输入次数进行限制，可以有效防止暴力破解攻击。</li></ul><h3 id="生日攻击与其他攻击的区别"><a href="#生日攻击与其他攻击的区别" class="headerlink" title="生日攻击与其他攻击的区别"></a>生日攻击与其他攻击的区别</h3><ul><li><strong>生日攻击</strong>：利用数学概率，寻找哈希碰撞。</li><li><strong>蛮力攻击</strong>：穷举所有可能的密码或密钥。</li><li><strong>字典攻击</strong>：利用预先计算好的密码表进行破解。</li></ul><p>生日攻击相较于蛮力攻击，其成功率更高，所需时间更短</p><h3 id="如何计算生日攻击所需的计算量"><a href="#如何计算生日攻击所需的计算量" class="headerlink" title="如何计算生日攻击所需的计算量"></a>如何计算生日攻击所需的计算量</h3><p>生日攻击的计算量通常用 <strong>生日悖论</strong> 来估算。根据生日悖论，在一个有n个人的房间里，两个人生日相同的概率大约为：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">P</span>(碰撞) ≈ <span class="number">1</span> - e^(-n^<span class="number">2</span> / <span class="number">2</span>N)</span><br></pre></td></tr></tbody></table></figure><p>其中：</p><ul><li><code>n</code>: 需要计算的哈希值数量</li><li><code>N</code>: 哈希函数的输出空间大小</li></ul><p><strong>计算步骤：</strong></p><ol><li><strong>确定哈希函数的输出长度：</strong> 这决定了哈希值空间的大小N。</li><li><strong>设定碰撞概率：</strong> 通常选择一个较小的概率，例如50%。</li><li><strong>利用公式计算n：</strong> 将设定的概率代入公式，解出n的值，即为需要计算的哈希值数量。</li></ol><p><strong>影响计算量的因素：</strong></p><ul><li><strong>哈希函数的输出长度：</strong> 输出长度越长，碰撞概率越低，需要的计算量越大。</li><li><strong>所需的碰撞概率：</strong> 碰撞概率越低，需要的计算量越大。</li><li><strong>硬件性能：</strong> 计算能力越强，完成攻击所需的时间越短。</li></ul><h3 id="如何选择合适的哈希函数来抵御生日攻击"><a href="#如何选择合适的哈希函数来抵御生日攻击" class="headerlink" title="如何选择合适的哈希函数来抵御生日攻击"></a>如何选择合适的哈希函数来抵御生日攻击</h3><p>选择合适的哈希函数是抵御生日攻击的关键。一个好的哈希函数应该具备以下特性：</p><ul><li><strong>抗碰撞性：</strong> 很难找到两个不同的输入，产生相同的哈希值。</li><li><strong>雪崩效应：</strong> 输入的微小变化会导致输出的巨大变化。</li><li><strong>快速计算：</strong> 哈希函数的计算效率高。</li></ul><p><strong>常见的哈希函数：</strong></p><ul><li><strong>SHA-256:</strong> 安全性高，广泛应用于数字签名和密码存储。</li><li><strong>SHA-3:</strong> 新一代的哈希函数，安全性更高。</li><li><strong>Blake2:</strong> 速度快，安全性高，适合需要高性能的应用场景。</li></ul><p><strong>选择哈希函数的原则：</strong></p><ul><li><strong>根据应用场景选择：</strong> 不同的应用场景对哈希函数的要求不同。</li><li><strong>考虑安全性：</strong> 选择经过广泛验证的、安全性高的哈希函数。</li><li><strong>考虑性能：</strong> 根据应用场景选择计算效率高的哈希函数。</li><li><strong>遵循标准：</strong> 遵循相关的安全标准和规范。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>生日攻击是一种利用数学概率来寻找碰撞的攻击方式，也是一种强大的密码学攻击方式，但可以通过选择合适的哈希函数、增加哈希值长度、使用盐值等方式来提高系统的安全性。在设计密码系统时，必须充分考虑到生日攻击的威胁，采取相应的防护措施。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 生日攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>混淆技术：让代码变得难以理解</title>
      <link href="/posts/codes-obfuscation.html"/>
      <url>/posts/codes-obfuscation.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是混淆技术？"><a href="#什么是混淆技术？" class="headerlink" title="什么是混淆技术？"></a>什么是混淆技术？</h3><p>混淆技术，简单来说就是将计算机程序的代码，转换成一种功能上等价，但是难于阅读和理解的形式的行为。混淆后的代码，虽然执行结果与原代码一致，但其内部逻辑变得复杂难懂，增加了逆向分析的难度，从而保护代码的知识产权。</p><h3 id="混淆技术的原理"><a href="#混淆技术的原理" class="headerlink" title="混淆技术的原理"></a>混淆技术的原理</h3><p>混淆技术主要通过以下几种方式来实现：</p><ul><li><strong>名称混淆:</strong> 将有意义的类名、方法名、变量名等替换为无意义的名称，破坏代码的可读性。</li><li><strong>控制流混淆:</strong> 打乱代码的执行顺序，增加逆向分析的难度。</li><li><strong>数据混淆:</strong> 对数据进行加密、替换或者重组，隐藏数据的真实含义。</li><li><strong>字符串加密:</strong> 对字符串进行加密，防止直接从代码中获取敏感信息。</li><li><strong>虚假代码插入:</strong> 插入一些无用的代码，干扰逆向分析。</li></ul><h3 id="混淆技术的应用场景"><a href="#混淆技术的应用场景" class="headerlink" title="混淆技术的应用场景"></a>混淆技术的应用场景</h3><p>混淆技术主要应用于以下场景：</p><ul><li><strong>保护软件版权:</strong> 防止软件被非法破解、修改。</li><li><strong>保护商业秘密:</strong> 隐藏软件的核心算法和逻辑。</li><li><strong>增加逆向分析难度:</strong> 提高软件的安全性。</li></ul><h3 id="混淆技术的优缺点"><a href="#混淆技术的优缺点" class="headerlink" title="混淆技术的优缺点"></a>混淆技术的优缺点</h3><p><strong>优点:</strong></p><ul><li><strong>保护知识产权:</strong> 提高软件被破解的难度。</li><li><strong>增加安全性:</strong> 降低软件被恶意攻击的风险。</li><li><strong>保护商业秘密:</strong> 隐藏软件的核心算法和逻辑。</li></ul><p><strong>缺点:</strong></p><ul><li><strong>性能损耗:</strong> 混淆后的代码可能会导致性能略微下降。</li><li><strong>调试困难:</strong> 混淆后的代码难以调试。</li><li><strong>不完全安全:</strong> 混淆技术并不能完全阻止逆向工程，只是增加了难度。</li></ul><h3 id="常用的混淆工具"><a href="#常用的混淆工具" class="headerlink" title="常用的混淆工具"></a>常用的混淆工具</h3><ul><li><strong>Java:</strong> ProGuard、yGuard</li><li><strong>.NET:</strong> Dotfuscator</li><li><strong>C/C++:</strong> LLVM、ConfuserEx</li></ul><h3 id="混淆技术的注意事项"><a href="#混淆技术的注意事项" class="headerlink" title="混淆技术的注意事项"></a>混淆技术的注意事项</h3><ul><li><strong>混淆不能完全替代其他安全措施:</strong> 混淆技术只是安全防护体系的一部分，需要结合其他安全措施，如加密、授权等。</li><li><strong>混淆会影响调试:</strong> 混淆后的代码难以调试，因此在开发阶段应避免过早混淆。</li><li><strong>混淆的程度需要权衡:</strong> 混淆程度过高会影响性能，过低则保护效果不佳。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>混淆技术是一种有效的保护代码安全性的手段，但它并不是万能的。在选择和使用混淆技术时，需要综合考虑各种因素，选择适合自己项目的混淆工具和方案。</p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 混淆技术 </tag>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Argon2：密码哈希的新星</title>
      <link href="/posts/argon2.html"/>
      <url>/posts/argon2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是-Argon2？"><a href="#什么是-Argon2？" class="headerlink" title="什么是 Argon2？"></a>什么是 Argon2？</h3><p>Argon2 是在 2015 年密码哈希竞赛中胜出的密钥推导函数 (KDF)。它被设计为一种高效、安全且可抵抗各种攻击的密码哈希算法。相较于之前的算法（如 bcrypt），Argon2 在安全性、性能和灵活性方面都有显著提升。</p><h3 id="Argon2-的优势"><a href="#Argon2-的优势" class="headerlink" title="Argon2 的优势"></a>Argon2 的优势</h3><ul><li><strong>安全性高：</strong> Argon2 的设计目标是最大程度地抵抗各种攻击，包括暴力破解、彩虹表攻击、时间-内存权衡攻击等。</li><li><strong>性能优异：</strong> Argon2 算法在并行计算方面表现出色，能够充分利用现代多核处理器和 GPU 的计算能力。</li><li><strong>灵活性强：</strong> Argon2 提供了多种参数配置选项，可以根据不同的应用场景调整算法的强度和性能。</li><li><strong>适应性好：</strong> Argon2 算法能够适应不断变化的硬件环境，随着硬件性能的提升，可以通过增加计算成本来提高安全性。</li></ul><h3 id="Argon2-的版本"><a href="#Argon2-的版本" class="headerlink" title="Argon2 的版本"></a>Argon2 的版本</h3><p>Argon2 主要有三个版本：</p><ul><li><strong>Argon2d：</strong> 专门针对 GPU 攻击进行优化，通过随机内存访问来增加攻击难度。</li><li><strong>Argon2i：</strong> 针对侧信道攻击进行了优化，通过引入额外的随机性来提高安全性。</li><li><strong>Argon2id：</strong> 结合了 Argon2d 和 Argon2i 的优点，提供了一种平衡的解决方案。</li></ul><h3 id="Argon2-的工作原理"><a href="#Argon2-的工作原理" class="headerlink" title="Argon2 的工作原理"></a>Argon2 的工作原理</h3><p>Argon2 的工作原理相对复杂，涉及到多个步骤和参数。简而言之，它通过不断迭代的方式，将输入的密码、盐值和一些随机数据混合在一起，生成一个固定长度的哈希值。这个过程是单向的，即无法从哈希值反推出原始密码。</p><h3 id="Argon2-的应用场景"><a href="#Argon2-的应用场景" class="headerlink" title="Argon2 的应用场景"></a>Argon2 的应用场景</h3><ul><li><strong>密码存储：</strong> 用于存储用户密码的哈希值，防止密码泄露。</li><li><strong>密钥派生：</strong> 用于从密码或其他密钥派生出新的密钥。</li><li><strong>数据加密：</strong> 用于加密敏感数据，提高数据安全性。</li></ul><h3 id="如何使用-Argon2"><a href="#如何使用-Argon2" class="headerlink" title="如何使用 Argon2"></a>如何使用 Argon2</h3><p>许多编程语言和框架都提供了对 Argon2 的支持。例如，在 PHP 中，可以使用 <code>password_hash()</code> 函数来生成 Argon2 哈希值。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 生成 Argon2 哈希</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">'mypassword'</span>;</span><br><span class="line"><span class="variable">$options</span> = [</span><br><span class="line">    <span class="string">'cost'</span> =&gt; <span class="number">13</span>, <span class="comment">// 调整成本参数，值越大，计算越耗时</span></span><br><span class="line">    <span class="string">'memory_cost'</span> =&gt; <span class="number">2048</span>, <span class="comment">// 内存成本</span></span><br><span class="line">    <span class="string">'time_cost'</span> =&gt; <span class="number">2</span>, <span class="comment">// 时间成本</span></span><br><span class="line">    <span class="string">'algorithm'</span> =&gt; PASSWORD_ARGON2_ID <span class="comment">// 选择 Argon2id 版本</span></span><br><span class="line">];</span><br><span class="line"><span class="variable">$hash</span> = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$password</span>, PASSWORD_DEFAULT, <span class="variable">$options</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证密码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>, <span class="variable">$hash</span>)) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'密码正确'</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'密码错误'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Argon2 作为一种新一代的密码哈希算法，具有很高的安全性、性能和灵活性。在实际应用中，Argon2 可以有效地保护用户的密码和其他敏感数据。建议在需要高强度密码保护的场景下使用 Argon2 算法。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Argon2 </tag>
            
            <tag> 哈希算法 </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5：一种常见的哈希函数</title>
      <link href="/posts/md5-algorithm.html"/>
      <url>/posts/md5-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="MD5是什么？"><a href="#MD5是什么？" class="headerlink" title="MD5是什么？"></a>MD5是什么？</h3><p>MD5（Message-Digest Algorithm 5）是一种被广泛使用的密码学哈希函数。它可以将任意长度的数据输入，经过一系列复杂的运算，输出一个固定长度的128位（16字节）的哈希值。这个哈希值通常用一个32位的十六进制数来表示。</p><h3 id="MD5的作用"><a href="#MD5的作用" class="headerlink" title="MD5的作用"></a>MD5的作用</h3><ul><li><strong>数据完整性校验：</strong> 通过比较文件的MD5值，可以验证文件在传输过程中是否被篡改。</li><li><strong>密码存储：</strong> 将用户的密码进行MD5哈希后存储，可以保护密码不被明文泄露。</li><li><strong>数据指纹：</strong> MD5值可以作为数据的“指纹”，用于快速查找和比较数据。</li></ul><h3 id="MD5的特点"><a href="#MD5的特点" class="headerlink" title="MD5的特点"></a>MD5的特点</h3><ul><li><strong>单向性：</strong> 从哈希值很难逆向推导出原始数据。</li><li><strong>快速计算：</strong> MD5的计算速度较快。</li><li><strong>碰撞性：</strong> 理论上存在不同的输入产生相同的哈希值（即碰撞），但概率极低。</li></ul><h3 id="MD5的PHP代码使用"><a href="#MD5的PHP代码使用" class="headerlink" title="MD5的PHP代码使用"></a>MD5的PHP代码使用</h3><ul><li>字符串加密</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">"mypassword"</span>;</span><br><span class="line"><span class="variable">$hashed_password</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 $hashed_password 保存到数据库中</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong> 直接将密码进行MD5加密存储是不安全的，容易受到彩虹表攻击。建议使用更安全的哈希算法，如SHA-256，并结合”盐值”来增强安全性。</p><ul><li>计算文件的MD5值</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">file_md5</span>(<span class="params"><span class="variable">$filename</span></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">"my_file.txt"</span>;</span><br><span class="line"><span class="variable">$md5_hash</span> = <span class="title function_ invoke__">file_md5</span>(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$hash</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"文件的MD5哈希值为："</span>.<span class="variable">$hash</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"文件不存在"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong><code>md5_file()</code> 函数：</strong> 直接计算文件的MD5值，无需将整个文件读入内存。</li></ul><h3 id="MD5的局限性"><a href="#MD5的局限性" class="headerlink" title="MD5的局限性"></a>MD5的局限性</h3><ul><li><strong>安全性降低：</strong> 近年来，随着计算机算力的提升和算法的改进，MD5的安全性受到了挑战。已经发现了多种方法可以找到MD5碰撞，这使得MD5不再适合用于需要高强度安全性的场景，如数字签名。</li><li><strong>不适合加密：</strong> MD5是一种哈希函数，而不是加密算法。它不能用于加密数据，因为哈希是不可逆的。</li></ul><h3 id="MD5的替代方案"><a href="#MD5的替代方案" class="headerlink" title="MD5的替代方案"></a>MD5的替代方案</h3><p>由于MD5的安全性问题，目前已经出现了许多更安全的哈希算法，例如：</p><ul><li><strong>SHA-256：</strong> 安全性更高，是目前广泛使用的哈希算法之一。</li><li><strong>SHA-3：</strong> 新一代的哈希算法，设计更加安全。</li><li><strong>Blake2:</strong> 速度快、安全性高，适合需要高性能的应用场景。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MD5虽然曾经广泛应用，但由于其安全性问题，已经逐渐被更安全的哈希算法所取代。在选择哈希算法时，需要根据具体的应用场景和安全需求来综合考虑。</p><p><strong>需要注意的是：</strong></p><ul><li><strong>MD5不适合用于存储重要的密码：</strong> 对于存储密码，建议使用更安全的哈希算法，如bcrypt或argon2，并结合加盐技术。</li><li><strong>MD5不适合用于数字签名：</strong> 数字签名需要更高的安全性，建议使用SHA-256或SHA-3等算法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> MD5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rijndael算法：AES加密标准的核心</title>
      <link href="/posts/rijndael.html"/>
      <url>/posts/rijndael.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Rijndael是什么？"><a href="#Rijndael是什么？" class="headerlink" title="Rijndael是什么？"></a>Rijndael是什么？</h3><p>Rijndael 是一种对称密钥分组加密算法，它在 2001 年被美国国家标准与技术研究院 (NIST) 选中为高级加密标准 (AES)。AES 已经成为当今世界上应用最广泛的加密算法之一，广泛用于保护敏感数据。</p><h3 id="Rijndael的工作原理"><a href="#Rijndael的工作原理" class="headerlink" title="Rijndael的工作原理"></a>Rijndael的工作原理</h3><p>Rijndael 算法基于 <strong>代换-置换网络 (SPN)</strong>，通过多次迭代对数据进行加密。每一轮的加密过程主要包括以下几个步骤：</p><ol><li><strong>字节替换 (ByteSub)：</strong> 使用一个 S-盒，将每个字节替换成另一个字节，提供非线性。</li><li><strong>行移位 (ShiftRows)：</strong> 将矩阵中的每一行进行循环左移，增加数据的扩散。</li><li><strong>列混淆 (MixColumns)：</strong> 对状态矩阵的每一列进行线性变换，进一步增加数据的扩散。</li><li><strong>轮密钥加 (AddRoundKey)：</strong> 将状态矩阵与轮密钥进行异或运算。</li></ol><p>这些步骤反复进行多轮，最终得到密文。</p><h3 id="Rijndael的特点"><a href="#Rijndael的特点" class="headerlink" title="Rijndael的特点"></a>Rijndael的特点</h3><ul><li><strong>安全性和效率的平衡：</strong> Rijndael 算法在安全性与效率之间取得了很好的平衡，能够抵抗已知的各种攻击。</li><li><strong>灵活的密钥长度和分组长度：</strong> Rijndael 支持多种密钥长度（128位、192位、256位）和分组长度（128位），可以适应不同的应用需求。</li><li><strong>硬件实现友好：</strong> Rijndael 算法的结构简单，易于硬件实现，适合在各种嵌入式设备中使用。</li></ul><h3 id="Rijndael与AES的关系"><a href="#Rijndael与AES的关系" class="headerlink" title="Rijndael与AES的关系"></a>Rijndael与AES的关系</h3><p>Rijndael 算法是 AES 标准的实现算法。AES 标准定义了分组长度为128位，密钥长度为128位、192位或256位的Rijndael算法。因此，当我们谈论AES时，实际上就是指Rijndael算法的这几种特定配置。</p><h3 id="Rijndael的应用"><a href="#Rijndael的应用" class="headerlink" title="Rijndael的应用"></a>Rijndael的应用</h3><ul><li><strong>数据加密：</strong> Rijndael广泛用于保护各种类型的数据，如文件、数据库、通信数据等。</li><li><strong>网络安全：</strong> Rijndael用于保护网络通信，如SSL/TLS协议。</li><li><strong>存储安全：</strong> Rijndael用于保护存储在磁盘或其他存储介质上的数据。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Rijndael 算法是一种高效、安全的对称密钥分组加密算法，是当今密码学领域的重要基石。它的广泛应用极大地提高了数据的安全性。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> Rijndael算法 </tag>
            
            <tag> 断言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SAML（安全断言标记语言）详解</title>
      <link href="/posts/saml.html"/>
      <url>/posts/saml.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="SAML-是什么？"><a href="#SAML-是什么？" class="headerlink" title="SAML 是什么？"></a>SAML 是什么？</h3><p><strong>SAML（Security Assertion Markup Language）</strong> 是一种基于 XML 的开放标准，用于在不同服务提供商之间交换身份验证和授权数据。简单来说，它提供了一种方法，让用户只需登录一次，即可访问多个相互信任的应用程序。</p><h3 id="SAML-的作用"><a href="#SAML-的作用" class="headerlink" title="SAML 的作用"></a>SAML 的作用</h3><ul><li><strong>单点登录（SSO）：</strong> 用户只需使用一套凭证登录一次，即可访问多个应用程序，提高用户体验。</li><li><strong>身份联邦：</strong> 允许不同的组织共享身份验证信息，实现跨组织的单点登录。</li><li><strong>授权决策：</strong> 根据用户的属性和角色，决定用户对系统资源的访问权限。</li></ul><h3 id="SAML-的基本概念"><a href="#SAML-的基本概念" class="headerlink" title="SAML 的基本概念"></a>SAML 的基本概念</h3><ul><li><strong>身份提供者（Identity Provider, IdP）：</strong> 验证用户身份，并向服务提供者发送断言。</li><li><strong>服务提供者（Service Provider, SP）：</strong> 需要访问保护资源的应用程序或服务。</li><li><strong>断言（Assertion）：</strong> 包含关于用户身份和属性的信息。</li><li><strong>绑定（Binding）：</strong> 定义了 SAML 消息如何在传输层进行交换。</li></ul><h3 id="SAML-工作流程"><a href="#SAML-工作流程" class="headerlink" title="SAML 工作流程"></a>SAML 工作流程</h3><ol><li><strong>用户发起请求：</strong> 用户访问服务提供者的受保护资源。</li><li><strong>服务提供者重定向：</strong> 服务提供者将用户重定向到身份提供者的登录页面。</li><li><strong>用户认证：</strong> 用户在身份提供者处输入凭证进行认证。</li><li><strong>身份提供者生成断言：</strong> 认证成功后，身份提供者生成一个包含用户身份信息的断言。</li><li><strong>身份提供者重定向：</strong> 身份提供者将用户重定向回服务提供者，并将断言作为参数传递。</li><li><strong>服务提供者验证断言：</strong> 服务提供者验证断言的有效性，并根据断言中的信息决定是否授权用户访问资源。</li></ol><h3 id="SAML-的优势"><a href="#SAML-的优势" class="headerlink" title="SAML 的优势"></a>SAML 的优势</h3><ul><li><strong>标准化：</strong> SAML 是一个开放标准，得到了广泛支持。</li><li><strong>安全性：</strong> SAML 提供了多种安全机制，如数字签名、加密等。</li><li><strong>灵活性：</strong> SAML 支持多种绑定方式和协议，可以适应不同的应用场景。</li><li><strong>可扩展性：</strong> SAML 可以通过扩展来支持新的功能和需求。</li></ul><h3 id="SAML-的应用场景"><a href="#SAML-的应用场景" class="headerlink" title="SAML 的应用场景"></a>SAML 的应用场景</h3><ul><li><strong>企业内部应用集成：</strong> 实现企业内部多个应用的单点登录。</li><li><strong>云应用集成：</strong> 将企业内部应用与云应用集成。</li><li><strong>合作伙伴集成：</strong> 与合作伙伴共享身份验证信息。</li></ul><h3 id="SAML-的局限性"><a href="#SAML-的局限性" class="headerlink" title="SAML 的局限性"></a>SAML 的局限性</h3><ul><li><strong>复杂性：</strong> SAML 配置和实现相对复杂，需要一定的技术水平。</li><li><strong>性能：</strong> SAML 增加了系统开销，可能影响系统的性能。</li></ul><h3 id="SAML-与-OAuth-的区别"><a href="#SAML-与-OAuth-的区别" class="headerlink" title="SAML 与 OAuth 的区别"></a>SAML 与 OAuth 的区别</h3><ul><li>SAML 主要用于身份验证和授权，OAuth 主要用于授权。</li><li>SAML 更适合企业内部应用集成，OAuth 更适合第三方应用授权。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SAML 是一种强大的身份验证和授权协议，为实现单点登录和身份联邦提供了可靠的解决方案。在选择 SAML 解决方案时，需要综合考虑系统的复杂性、安全性、性能和成本等因素。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 断言 </tag>
            
            <tag> SAML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHA-256：更安全的哈希算法</title>
      <link href="/posts/sha256-algorithm.html"/>
      <url>/posts/sha256-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是SHA-256？"><a href="#什么是SHA-256？" class="headerlink" title="什么是SHA-256？"></a>什么是SHA-256？</h3><p>SHA-256（Secure Hash Algorithm 256）是一种密码学哈希函数。它可以将任意长度的数据转换为一个固定长度的256位（32字节）的哈希值。这个哈希值通常用一个64位的十六进制数来表示。</p><h3 id="SHA-256与MD5的区别"><a href="#SHA-256与MD5的区别" class="headerlink" title="SHA-256与MD5的区别"></a>SHA-256与MD5的区别</h3><ul><li><strong>安全性：</strong> SHA-256比MD5安全性更高，抗碰撞性更强。MD5已经被证明存在漏洞，容易受到碰撞攻击，而SHA-256目前还没有发现严重的漏洞。</li><li><strong>输出长度：</strong> SHA-256的输出长度为256位，而MD5的输出长度为128位。更长的输出长度意味着更大的哈希空间，碰撞的概率更小。</li><li><strong>应用场景：</strong> SHA-256广泛应用于数字签名、区块链、文件校验等需要高安全性保障的场景。MD5则更多用于一些对安全性要求不高的场景。</li></ul><h3 id="SHA-256的应用"><a href="#SHA-256的应用" class="headerlink" title="SHA-256的应用"></a>SHA-256的应用</h3><ul><li><strong>数字签名：</strong> 用于验证数据的完整性和身份。</li><li><strong>区块链：</strong> 用于记录区块链上的交易信息，保证数据的不可篡改性。</li><li><strong>文件校验：</strong> 用于验证下载的文件是否完整。</li><li><strong>密码存储：</strong> 将密码进行SHA-256哈希后存储，提高安全性。</li></ul><h3 id="SHA-256的工作原理"><a href="#SHA-256的工作原理" class="headerlink" title="SHA-256的工作原理"></a>SHA-256的工作原理</h3><p>SHA-256的具体算法比较复杂，涉及到一系列的位运算和数学运算。但其基本思想是将输入数据分块，然后经过一系列的压缩函数处理，最终得到一个固定长度的哈希值。</p><h3 id="SHA-256的PHP代码使用"><a href="#SHA-256的PHP代码使用" class="headerlink" title="SHA-256的PHP代码使用"></a>SHA-256的PHP代码使用</h3><ul><li>字符串SHA-256加密</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = <span class="string">"这是一段需要加密的字符串"</span>;</span><br><span class="line"><span class="variable">$hash</span> = <span class="title function_ invoke__">hash</span>(<span class="string">'sha256'</span>, <span class="variable">$data</span>);<span class="comment">// 指定使用的哈希算法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$hash</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>计算文件的SHA-256</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">file_sha256</span>(<span class="params"><span class="variable">$filename</span></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">hash_file</span>(<span class="string">'sha256'</span>, <span class="variable">$filename</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">"my_file.txt"</span>;</span><br><span class="line"><span class="variable">$hash</span> = <span class="title function_ invoke__">file_sha256</span>(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$hash</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"文件的SHA-256哈希值为："</span>.<span class="variable">$hash</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"文件不存在"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong><code>hash_file()</code> 函数：</strong> 直接计算文件的SHA-256，无需将整个文件读入内存。</li></ul><ul><li>验证密码</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verify_password</span>(<span class="params"><span class="variable">$password</span>, <span class="variable">$hashed_password</span></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">hash_equals</span>(<span class="variable">$hashed_password</span>, <span class="title function_ invoke__">hash</span>(<span class="string">'sha256'</span>, <span class="variable">$password</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$user_password</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="variable">$stored_hash</span> = <span class="string">'2c26b46b68ffc68ff99b453c1d3041d8457067982aadae80a851325e75704c81'</span>; <span class="comment">// 从数据库中获取的哈希值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">verify_password</span>(<span class="variable">$user_password</span>, <span class="variable">$stored_hash</span>)) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"密码正确"</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"密码错误"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong><code>hash_equals()</code> 函数：</strong> 用于安全地比较两个字符串，防止<a href="timing-attack.html" target="_blank">时序攻击</a>。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>盐值：</strong> 为了增加密码的安全性，建议在存储密码之前，先给密码加上一个随机的盐值，然后再进行哈希。</li><li><strong>存储：</strong> 存储哈希值时，建议使用专门的密码存储库，并采取额外的安全措施，防止数据库泄露导致密码泄露。</li><li><strong>其他哈希算法：</strong> 程序支持多种哈希算法，如MD5、SHA-1、SHA-512等，选择合适的算法取决于安全性要求和性能要求。</li></ul><h3 id="SHA-256的优点"><a href="#SHA-256的优点" class="headerlink" title="SHA-256的优点"></a>SHA-256的优点</h3><ul><li><strong>安全性高：</strong> 目前还没有发现有效的攻击方法。</li><li><strong>输出长度长：</strong> 碰撞概率极低。</li><li><strong>速度快：</strong> 计算速度较快。</li></ul><h3 id="SHA-256的缺点"><a href="#SHA-256的缺点" class="headerlink" title="SHA-256的缺点"></a>SHA-256的缺点</h3><ul><li><strong>算法复杂：</strong> 算法实现相对复杂。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SHA-256是一种非常安全的哈希算法，在很多领域都有广泛的应用。相比于MD5，SHA-256提供了更高的安全性保证。但是，随着计算机计算能力的不断提升，未来可能出现新的攻击方法，因此在选择哈希算法时，需要根据具体的应用场景和安全需求来综合考虑。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> sha256 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHA-1：一种已被淘汰的哈希算法</title>
      <link href="/posts/sha1-algorithm.html"/>
      <url>/posts/sha1-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="SHA-1是什么？"><a href="#SHA-1是什么？" class="headerlink" title="SHA-1是什么？"></a>SHA-1是什么？</h3><p>SHA-1（Secure Hash Algorithm 1，安全散列算法1）是一种密码散列函数，可以将任意长度的数据转换为固定长度的160位（20字节）的哈希值。这个哈希值通常被称为消息摘要。</p><h3 id="SHA-1的工作原理"><a href="#SHA-1的工作原理" class="headerlink" title="SHA-1的工作原理"></a>SHA-1的工作原理</h3><p>SHA-1通过一系列复杂的数学运算，将输入的数据映射到一个固定长度的输出。这个过程是单向的，也就是说，从哈希值很难逆向推导出原始数据。</p><h3 id="SHA-1的应用"><a href="#SHA-1的应用" class="headerlink" title="SHA-1的应用"></a>SHA-1的应用</h3><ul><li><strong>文件完整性校验:</strong> 通过比较文件的哈希值，可以验证文件是否被篡改。</li><li><strong>数字签名:</strong> 将消息的哈希值与发送者的私钥一起加密，形成数字签名，用于验证消息的完整性和发送者的身份。</li><li><strong>密码存储:</strong> 将密码的哈希值存储在数据库中，而不是明文密码，提高安全性。</li></ul><h3 id="为什么SHA-1不再安全？"><a href="#为什么SHA-1不再安全？" class="headerlink" title="为什么SHA-1不再安全？"></a>为什么SHA-1不再安全？</h3><ul><li><strong>碰撞攻击:</strong> 2005年，研究人员发现了SHA-1算法的碰撞攻击，这意味着可以找到两个不同的输入，产生相同的哈希值。这使得SHA-1不再适用于需要高强度安全性的场景。</li><li><strong>量子计算威胁:</strong> 量子计算机的出现，对包括SHA-1在内的许多密码算法构成了威胁。</li></ul><h3 id="SHA-1已经被哪些算法取代？"><a href="#SHA-1已经被哪些算法取代？" class="headerlink" title="SHA-1已经被哪些算法取代？"></a>SHA-1已经被哪些算法取代？</h3><p>由于SHA-1的安全性问题，许多组织和标准已经不再推荐使用SHA-1，取而代之的是更安全的哈希算法，如：</p><ul><li><strong>SHA-256:</strong> SHA-2家族中的一种，生成256位的哈希值，安全性更高。</li><li><strong>SHA-512:</strong> SHA-2家族中的一种，生成512位的哈希值，安全性更高。</li><li><strong>SHA-3:</strong> 新一代的哈希算法，设计更加安全，性能也更优秀。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然SHA-1曾经是一种广泛使用的哈希算法，但由于其存在的安全漏洞，已经不再适合用于需要高强度安全性的场景。建议使用SHA-256、SHA-512或SHA-3等更安全的哈希算法。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希算法 </tag>
            
            <tag> 安全 </tag>
            
            <tag> SHA-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHA-3：更安全、更现代的哈希函数</title>
      <link href="/posts/sha3-algorithm.html"/>
      <url>/posts/sha3-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是SHA-3？"><a href="#什么是SHA-3？" class="headerlink" title="什么是SHA-3？"></a>什么是SHA-3？</h3><p>SHA-3（Secure Hash Algorithm 3，安全散列算法3）是美国国家标准与技术研究所（NIST）发布的第三代加密散列函数标准。它在SHA-1和SHA-2算法出现安全问题后，通过公开竞赛选出的新一代算法。SHA-3的设计目标是提供更高的安全性，同时保持良好的性能。</p><h3 id="SHA-3的特点"><a href="#SHA-3的特点" class="headerlink" title="SHA-3的特点"></a>SHA-3的特点</h3><ul><li><strong>基于Keccak算法:</strong> SHA-3是基于Keccak算法设计的，Keccak算法具有良好的安全性、效率和灵活性。</li><li><strong>海绵结构:</strong> Keccak算法采用海绵结构，可以处理任意长度的输入数据，生成任意长度的输出。</li><li><strong>安全性高:</strong> SHA-3的设计考虑了量子计算的威胁，具有更强的抗碰撞性。</li><li><strong>性能优异:</strong> SHA-3的性能表现良好，适用于各种应用场景。</li></ul><h3 id="SHA-3与SHA-2的区别"><a href="#SHA-3与SHA-2的区别" class="headerlink" title="SHA-3与SHA-2的区别"></a>SHA-3与SHA-2的区别</h3><ul><li><strong>设计理念:</strong> SHA-3的设计理念与SHA-2完全不同，SHA-3采用了全新的结构和算法。</li><li><strong>安全性:</strong> SHA-3的设计更加注重安全性，能够抵御更广泛的攻击。</li><li><strong>灵活性:</strong> SHA-3可以生成不同长度的输出，具有更高的灵活性。</li></ul><h3 id="SHA-3的应用场景"><a href="#SHA-3的应用场景" class="headerlink" title="SHA-3的应用场景"></a>SHA-3的应用场景</h3><ul><li><strong>数字签名:</strong> 用于验证数据的完整性和发送者的身份。</li><li><strong>密码存储:</strong> 将密码的哈希值存储在数据库中，提高密码的安全性。</li><li><strong>区块链:</strong> 在区块链技术中，SHA-3被用于生成区块的哈希值，确保区块链的不可篡改性。</li><li><strong>文件校验:</strong> 用于验证文件的完整性，防止文件被篡改。</li></ul><h3 id="为什么选择SHA-3？"><a href="#为什么选择SHA-3？" class="headerlink" title="为什么选择SHA-3？"></a>为什么选择SHA-3？</h3><ul><li><strong>更高的安全性:</strong> SHA-3的设计考虑了更广泛的攻击，安全性更高。</li><li><strong>更好的性能:</strong> SHA-3的性能表现良好，适用于各种应用场景。</li><li><strong>更强的灵活性:</strong> SHA-3可以生成不同长度的输出，具有更高的灵活性。</li><li><strong>未来可期:</strong> SHA-3是未来密码学发展的一个重要方向。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SHA-3作为新一代的哈希函数，具有更高的安全性、更好的性能和更强的灵活性。随着量子计算的发展，SHA-3将成为保障数据安全的重要工具。在选择哈希算法时，建议优先考虑SHA-3，以确保系统的安全性。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希算法 </tag>
            
            <tag> 安全 </tag>
            
            <tag> sha3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHA-512：更安全的哈希算法</title>
      <link href="/posts/sha512-algorithm.html"/>
      <url>/posts/sha512-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="SHA-512是什么？"><a href="#SHA-512是什么？" class="headerlink" title="SHA-512是什么？"></a>SHA-512是什么？</h3><p>SHA-512（Secure Hash Algorithm 512）是一种密码散列函数，是SHA-2算法家族中的一个成员。它可以将任意长度的数据转换为一个固定长度的512位（64字节）的消息摘要。这个摘要通常被称为哈希值。</p><h3 id="SHA-512的工作原理"><a href="#SHA-512的工作原理" class="headerlink" title="SHA-512的工作原理"></a>SHA-512的工作原理</h3><p>SHA-512的工作原理与SHA-1类似，都是通过一系列复杂的数学运算，将输入的数据映射到一个固定长度的输出。不同之处在于，SHA-512使用的运算更复杂，产生的哈希值更长，因此安全性更高。</p><h3 id="SHA-512的优势"><a href="#SHA-512的优势" class="headerlink" title="SHA-512的优势"></a>SHA-512的优势</h3><ul><li><strong>更高的安全性:</strong> 相比于SHA-1，SHA-512的哈希值更长，碰撞攻击的难度更大，安全性更高。</li><li><strong>广泛应用:</strong> SHA-512被广泛应用于各种需要数据完整性校验和安全认证的场景。</li></ul><h3 id="SHA-512的应用场景"><a href="#SHA-512的应用场景" class="headerlink" title="SHA-512的应用场景"></a>SHA-512的应用场景</h3><ul><li><strong>数字签名:</strong> 用于验证数据的完整性和发送者的身份。</li><li><strong>密码存储:</strong> 将密码的哈希值存储在数据库中，提高密码的安全性。</li><li><strong>文件校验:</strong> 用于验证文件的完整性，防止文件被篡改。</li><li><strong>区块链:</strong> 在区块链技术中，SHA-512被用于生成区块的哈希值，确保区块链的不可篡改性。</li></ul><h3 id="SHA-512与SHA-256的区别"><a href="#SHA-512与SHA-256的区别" class="headerlink" title="SHA-512与SHA-256的区别"></a>SHA-512与SHA-256的区别</h3><p>SHA-512和SHA-256都是SHA-2算法家族的成员，它们的主要区别在于输出的哈希值长度不同：</p><ul><li><strong>SHA-256:</strong> 生成256位的哈希值。</li><li><strong>SHA-512:</strong> 生成512位的哈希值。</li></ul><p>一般来说，SHA-512的安全性更高，但同时也需要更多的计算资源。在选择使用哪种算法时，需要根据具体的应用场景和安全需求来进行权衡。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SHA-512是一种安全、高效的哈希算法，被广泛应用于各种需要数据安全性的场景。相较于SHA-1，SHA-512具有更高的安全性，是目前密码学领域的主流算法之一。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希算法 </tag>
            
            <tag> 安全 </tag>
            
            <tag> sha512 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bcrypt：一种安全的密码哈希函数</title>
      <link href="/posts/bcrypt.html"/>
      <url>/posts/bcrypt.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="bcrypt是什么？"><a href="#bcrypt是什么？" class="headerlink" title="bcrypt是什么？"></a>bcrypt是什么？</h3><p>bcrypt是一种基于Blowfish加密算法的密码哈希函数。它被广泛应用于存储用户密码，因其安全性高、易用性强而受到青睐。</p><h3 id="bcrypt的工作原理"><a href="#bcrypt的工作原理" class="headerlink" title="bcrypt的工作原理"></a>bcrypt的工作原理</h3><p>bcrypt的工作原理可以概括为以下几点：</p><ul><li><strong>加盐：</strong> 在对密码进行哈希计算之前，会随机生成一个盐值，并将其与密码进行组合。这个盐值是唯一的，每次哈希计算都会生成不同的盐值。</li><li><strong>迭代次数：</strong> bcrypt允许设置一个工作因子，这个因子决定了哈希函数的迭代次数。迭代次数越多，计算时间越长，破解难度也就越大。</li><li><strong>自适应性：</strong> bcrypt具有自适应性，随着硬件计算能力的提升，可以动态增加迭代次数，以保持破解难度不变。</li></ul><h3 id="PHP-中-bcrypt-的实现：password-hash-和-password-verify-函数"><a href="#PHP-中-bcrypt-的实现：password-hash-和-password-verify-函数" class="headerlink" title="PHP 中 bcrypt 的实现：password_hash() 和 password_verify() 函数"></a>PHP 中 bcrypt 的实现：password_hash() 和 password_verify() 函数</h3><p>PHP 从 5.5 版本开始内置了 <code>password_hash()</code> 和 <code>password_verify()</code> 函数，用于生成和验证 bcrypt 哈希值。</p><ul><li><p><strong>password_hash() 函数</strong>：</p><ul><li><strong>功能：</strong> 创建一个新的密码哈希。</li><li><strong>参数：</strong><ul><li><code>password</code>: 要哈希的密码。</li><li><code>algo</code>: 算法标识符，通常使用 <code>PASSWORD_DEFAULT</code> 或 <code>PASSWORD_BCRYPT</code>。</li><li><code>options</code>: 一个关联数组，包含额外的选项，如 <code>cost</code>（哈希计算的成本）。</li></ul></li><li><strong>返回值：</strong> 一个字符串，表示生成的哈希值。</li></ul></li><li><p><strong>password_verify() 函数</strong>：</p><ul><li><strong>功能：</strong> 验证一个密码是否与一个已有的哈希值匹配。</li><li><strong>参数：</strong><ul><li><code>password</code>: 要验证的密码。</li><li><code>hash</code>: 之前使用 <code>password_hash()</code> 生成的哈希值。</li></ul></li><li><strong>返回值：</strong> 如果密码匹配，返回 <code>true</code>，否则返回 <code>false</code>。</li></ul></li></ul><!-- end list --><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 生成一个 bcrypt 哈希</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">'mypassword'</span>;</span><br><span class="line"><span class="variable">$options</span> = [</span><br><span class="line">    <span class="string">'cost'</span> =&gt; <span class="number">12</span>, <span class="comment">// 调整成本参数，值越大，计算越耗时</span></span><br><span class="line">];</span><br><span class="line"><span class="variable">$hash</span> = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$password</span>, PASSWORD_DEFAULT, <span class="variable">$options</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证密码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>, <span class="variable">$hash</span>)) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'密码正确'</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'密码错误'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="bcrypt的优势"><a href="#bcrypt的优势" class="headerlink" title="bcrypt的优势"></a>bcrypt的优势</h3><ul><li><strong>安全性高：</strong> 结合了加盐和可变工作因子，使得bcrypt对彩虹表攻击、字典攻击等具有很强的抵抗力。</li><li><strong>易用性强：</strong> bcrypt的实现相对简单，很多编程语言和数据库都提供了内置的bcrypt函数。</li><li><strong>灵活性强：</strong> 可以通过调整工作因子来适应不同的安全需求。</li></ul><h3 id="bcrypt在密码存储中的应用"><a href="#bcrypt在密码存储中的应用" class="headerlink" title="bcrypt在密码存储中的应用"></a>bcrypt在密码存储中的应用</h3><p>bcrypt常用于存储用户密码。当用户注册或修改密码时，系统会使用bcrypt对密码进行哈希计算，并将得到的哈希值存储在数据库中。当用户登录时，系统会再次对输入的密码进行哈希计算，并将结果与存储的哈希值进行比较。如果两者一致，则验证通过。</p><p><strong>为什么使用bcrypt存储密码比直接存储密码更安全？</strong></p><ul><li><strong>不可逆性：</strong> 哈希函数是单向的，无法从哈希值反推出原始密码。</li><li><strong>安全性高：</strong> bcrypt的加盐和可变工作因子使得破解难度大大增加。</li><li><strong>防止彩虹表攻击：</strong> 由于盐值是随机生成的，彩虹表攻击变得无效。</li></ul><h3 id="bcrypt的应用场景"><a href="#bcrypt的应用场景" class="headerlink" title="bcrypt的应用场景"></a>bcrypt的应用场景</h3><ul><li><strong>用户认证：</strong> 几乎所有需要用户登录的系统都会使用bcrypt来存储密码。</li><li><strong>密码重置：</strong> 在用户忘记密码时，系统会生成一个新的随机密码，并使用bcrypt进行哈希存储。</li><li><strong>其他需要保护密码的场景：</strong> 比如API认证、密钥存储等。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>bcrypt是一种非常安全的密码哈希函数，在保护用户密码方面发挥着重要作用。它的安全性、易用性和灵活性使其成为存储密码的首选方案。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希算法 </tag>
            
            <tag> 安全 </tag>
            
            <tag> bcrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>侧信道攻击：从旁门窥探密码世界的秘密</title>
      <link href="/posts/side-channel-attack.html"/>
      <url>/posts/side-channel-attack.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是侧信道攻击？"><a href="#什么是侧信道攻击？" class="headerlink" title="什么是侧信道攻击？"></a>什么是侧信道攻击？</h3><p>侧信道攻击，顾名思义，就是通过一些“旁门左道”来获取系统中的敏感信息，比如密码。不同于传统密码分析，侧信道攻击并不直接针对算法的数学弱点，而是利用系统在运行过程中的物理特性泄露的信息来破解。</p><p>这些物理特性可以是：</p><ul><li><strong>时间:</strong> 系统执行不同操作所需的时间。</li><li><strong>功耗:</strong> 系统在不同操作下的功耗变化。</li><li><strong>电磁辐射:</strong> 系统产生的电磁辐射。</li><li><strong>声音:</strong> 系统运行时产生的声音。</li></ul><h3 id="侧信道攻击的原理"><a href="#侧信道攻击的原理" class="headerlink" title="侧信道攻击的原理"></a>侧信道攻击的原理</h3><p>通过测量这些物理特性，攻击者可以推断出系统内部的某些状态，从而获取敏感信息。例如：</p><ul><li><strong>时序攻击:</strong> 通过测量加密算法执行时间，推断密钥的长度或部分位。</li><li><strong>功率分析攻击:</strong> 通过测量设备的功耗变化，推断密钥的具体值。</li><li><strong>电磁辐射攻击:</strong> 通过测量设备产生的电磁辐射，获取加密过程中的中间值。</li></ul><h3 id="侧信道攻击的危害"><a href="#侧信道攻击的危害" class="headerlink" title="侧信道攻击的危害"></a>侧信道攻击的危害</h3><ul><li><strong>密码泄露:</strong> 侧信道攻击可以轻松破解密码，导致系统被攻破。</li><li><strong>数据泄露:</strong> 攻击者可以获取系统中的敏感数据，造成巨大的损失。</li><li><strong>系统瘫痪:</strong> 攻击者可以通过侧信道攻击破坏系统的正常运行。</li></ul><h3 id="防御侧信道攻击"><a href="#防御侧信道攻击" class="headerlink" title="防御侧信道攻击"></a>防御侧信道攻击</h3><ul><li><strong>恒定时间算法:</strong> 设计算法时，确保算法执行时间与输入数据无关。</li><li><strong>随机延迟:</strong> 在执行敏感操作时，随机引入延迟，模糊时间信息。</li><li><strong>掩码技术:</strong> 对数据进行掩码处理，隐藏数据本身的特征。</li><li><strong>硬件安全模块(HSM):</strong> 使用专门的硬件设备来保护密钥，隔离敏感操作。</li></ul><h3 id="常见的侧信道攻击类型"><a href="#常见的侧信道攻击类型" class="headerlink" title="常见的侧信道攻击类型"></a>常见的侧信道攻击类型</h3><ul><li><strong>时序攻击:</strong> 利用时间差进行攻击。</li><li><strong>功率分析攻击:</strong> 利用功耗变化进行攻击。</li><li><strong>电磁辐射攻击:</strong> 利用电磁辐射进行攻击。</li><li><strong>故障注入攻击:</strong> 通过人为引入故障来获取信息。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>侧信道攻击是一种非常隐蔽且有效的攻击方式，对系统安全构成了严重威胁。为了防御侧信道攻击，我们需要从算法设计、硬件实现、软件防护等多个方面入手，采取综合性的防护措施。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 侧信道攻击 </tag>
            
            <tag> 时序攻击 </tag>
            
            <tag> 功率分析攻击 </tag>
            
            <tag> 电磁辐射攻击 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希算法：数据世界的指纹</title>
      <link href="/posts/hash-algorithm.html"/>
      <url>/posts/hash-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是哈希算法？"><a href="#什么是哈希算法？" class="headerlink" title="什么是哈希算法？"></a>什么是哈希算法？</h3><p>哈希算法，也被称为散列算法，是一种将任意长度的输入（比如文本、文件等）通过一个函数计算后，得到一个固定长度的输出（称为哈希值或摘要）的算法。这个输出通常是一个比输入小的字符串，且通常是十六进制的字符串。</p><p><strong>形象地说，哈希算法就像是一个特殊的“搅拌机”，无论你放入什么食材，它都能输出一个固定大小、且看起来杂乱无章的“混合物”。</strong></p><p>你可以想象一下，散列算法就像一个黑盒子，你把任何东西丢进去，它都会给你吐出一个固定的“指纹”。这个“指纹”虽然比原来的东西小得多，但却能代表原来的东西。而且，只要你输入的东西不变，输出的“指纹”也永远不变。</p><p>举个例子：<br>假设我们把一段文字作为输入，经过散列算法处理后，得到一个哈希值。如果我们对这段文字做任何修改，哪怕只改了一个字，得到的哈希值也会完全不同。这就好像给这段文字按了一个独一无二的“指纹”。</p><h3 id="哈希算法的特点"><a href="#哈希算法的特点" class="headerlink" title="哈希算法的特点"></a>哈希算法的特点</h3><ul><li><strong>确定性：</strong> 对于相同的输入，哈希算法总是产生相同的输出。</li><li><strong>快速计算：</strong> 哈希算法的计算速度通常很快。</li><li><strong>抗碰撞性：</strong> 找到两个不同的输入，却产生相同的输出（即碰撞）的概率非常小。</li><li><strong>单向性：</strong> 从哈希值反推出原始数据是极其困难的，甚至是不可能的。</li></ul><h3 id="哈希算法的应用"><a href="#哈希算法的应用" class="headerlink" title="哈希算法的应用"></a>哈希算法的应用</h3><ul><li><strong>密码存储:</strong> 网站通常不直接存储用户的明文密码，而是存储密码的哈希值。当用户登录时，系统会重新计算输入密码的哈希值，并与存储的哈希值进行比较。</li><li><strong>数据完整性校验:</strong> 通过比较文件的哈希值，可以快速检测文件是否被篡改。</li><li><strong>数字签名:</strong> 在数字签名中，哈希算法用于生成消息摘要，然后对摘要进行签名。</li><li><strong>分布式存储:</strong> 在分布式存储系统中，哈希算法用于定位数据。</li><li><strong>区块链:</strong> 哈希算法是区块链技术的基础，用于连接各个区块，保证数据的不可篡改性。</li></ul><h3 id="常用的哈希算法"><a href="#常用的哈希算法" class="headerlink" title="常用的哈希算法"></a>常用的哈希算法</h3><ul><li><strong><a href="md5-algorithm.html" target="_blank">MD5</a> (Message-Digest Algorithm 5):</strong> 产生128位（16字节）的哈希值。虽然速度快，但已经不再安全，容易发生碰撞。</li><li><strong>SHA-1 (Secure Hash Algorithm 1):</strong> 产生160位哈希值，比<a href="md5-algorithm.html" target="_blank">MD5</a>更安全，但也被证明存在漏洞。</li><li><strong><a href="sha256-algorithm.html" target="_blank">SHA-256</a>、SHA-512:</strong> SHA-2家族的算法，安全性更高，是目前广泛使用的哈希算法之一。</li></ul><h3 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h3><p>哈希碰撞是指两个不同的输入产生了相同的哈希值。虽然哈希算法的抗碰撞性很高，但理论上仍然可能发生碰撞。为了避免碰撞带来的安全问题，在实际应用中，通常会结合其他安全措施，比如使用盐值（salt）来增加密码的复杂性。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>哈希算法在计算机科学中有着广泛的应用，它的确定性、快速计算和抗碰撞性等特点使得它成为保障数据安全和完整性的重要工具。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希算法 </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对称加密技术详解与PHP实现</title>
      <link href="/posts/symmetric-encryption.html"/>
      <url>/posts/symmetric-encryption.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、什么是对称加密？"><a href="#一、什么是对称加密？" class="headerlink" title="一、什么是对称加密？"></a>一、什么是对称加密？</h2><p>对称加密（Symmetric Encryption）是一种加密算法，其特点是<strong>加密过程和解密过程使用相同的密钥</strong>。常见的对称加密算法包括：</p><ul><li><strong>AES</strong>（Advanced Encryption Standard）：最广泛使用的对称加密算法，支持128/192/256位密钥。</li><li><strong>DES</strong>（Data Encryption Standard）：较老旧的算法，密钥长度仅56位，安全性不足。</li><li><strong>ChaCha20</strong>：轻量级流加密算法，适合移动设备和物联网场景。</li></ul><p>对称加密的核心流程如下图所示：<br></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文 → 加密算法 + 密钥 → 密文  </span><br><span class="line">密文 → 解密算法 + 密钥 → 明文</span><br></pre></td></tr></tbody></table></figure><p></p><hr><h2 id="二、对称加密的核心原理"><a href="#二、对称加密的核心原理" class="headerlink" title="二、对称加密的核心原理"></a>二、对称加密的核心原理</h2><h3 id="1-密钥管理"><a href="#1-密钥管理" class="headerlink" title="1. 密钥管理"></a>1. 密钥管理</h3><p>对称加密的安全性完全依赖于<strong>密钥的保密性</strong>。如果攻击者获取了密钥，就能轻松解密所有数据。因此：</p><ul><li>密钥必须安全存储（如环境变量、硬件安全模块HSM）。</li><li>密钥轮换机制（定期更换密钥）。</li></ul><h3 id="2-加密模式与填充"><a href="#2-加密模式与填充" class="headerlink" title="2. 加密模式与填充"></a>2. 加密模式与填充</h3><p>对称加密算法通常需要配合<strong>加密模式</strong>（如CBC、ECB）和<strong>填充方式</strong>（如PKCS#7）使用：</p><ul><li><strong>CBC模式</strong>（推荐）：数据分块加密，每块使用前一块的密文作为输入，安全性高。</li><li><strong>ECB模式</strong>：数据分块独立加密，易受模式分析攻击，不推荐用于敏感数据。</li><li><strong>填充</strong>：确保明文长度满足算法对数据块长度的要求（如AES要求16字节倍数）。</li></ul><hr><h2 id="三、PHP中的对称加密实现"><a href="#三、PHP中的对称加密实现" class="headerlink" title="三、PHP中的对称加密实现"></a>三、PHP中的对称加密实现</h2><h3 id="1-AES-256-CBC加密示例"><a href="#1-AES-256-CBC加密示例" class="headerlink" title="1. AES-256-CBC加密示例"></a>1. AES-256-CBC加密示例</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesEncrypt</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$key</span>, <span class="variable">$iv</span></span>) </span>{</span><br><span class="line">    <span class="comment">// 确保数据为二进制格式</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">openssl_encrypt</span>(</span><br><span class="line">        <span class="variable">$data</span>,</span><br><span class="line">        <span class="string">'AES-256-CBC'</span>,</span><br><span class="line">        <span class="variable">$key</span>,</span><br><span class="line">        OPENSSL_RAW_DATA,</span><br><span class="line">        <span class="variable">$iv</span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Base64编码以便存储/传输</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$data</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesDecrypt</span>(<span class="params"><span class="variable">$ciphertext</span>, <span class="variable">$key</span>, <span class="variable">$iv</span></span>) </span>{</span><br><span class="line">    <span class="comment">// 解码Base64</span></span><br><span class="line">    <span class="variable">$ciphertext</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$ciphertext</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解密数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(</span><br><span class="line">        <span class="variable">$ciphertext</span>,</span><br><span class="line">        <span class="string">'AES-256-CBC'</span>,</span><br><span class="line">        <span class="variable">$key</span>,</span><br><span class="line">        OPENSSL_RAW_DATA,</span><br><span class="line">        <span class="variable">$iv</span></span><br><span class="line">    );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">32</span>)); <span class="comment">// 生成32位密钥（AES-256）</span></span><br><span class="line"><span class="variable">$iv</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>));   <span class="comment">// 生成16位IV</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$plaintext</span> = <span class="string">"Hello, this is a secret message!"</span>;</span><br><span class="line"><span class="variable">$ciphertext</span> = <span class="title function_ invoke__">aesEncrypt</span>(<span class="variable">$plaintext</span>, <span class="variable">$key</span>, <span class="variable">$iv</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"加密结果："</span> . <span class="variable">$ciphertext</span> . <span class="string">"\n"</span>;</span><br><span class="line"><span class="variable">$decryptedText</span> = <span class="title function_ invoke__">aesDecrypt</span>(<span class="variable">$ciphertext</span>, <span class="variable">$key</span>, <span class="variable">$iv</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"解密结果："</span> . <span class="variable">$decryptedText</span> . <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-关键代码解析"><a href="#2-关键代码解析" class="headerlink" title="2. 关键代码解析"></a>2. 关键代码解析</h3><ul><li><strong>随机密钥生成</strong>：<code>random_bytes(32)</code>生成安全的32位密钥（适用于AES-256）。</li><li><strong>初始化向量（IV）</strong>：<code>random_bytes(16)</code>生成16位随机IV，每个加密操作必须使用唯一的IV。</li><li><strong>OPENSSL_RAW_DATA</strong>：指定不添加填充头，直接返回原始二进制数据。</li><li><strong>Base64编码</strong>：将二进制密文转换为可存储/传输的字符串格式。</li></ul><hr><h2 id="四、对称加密的最佳实践"><a href="#四、对称加密的最佳实践" class="headerlink" title="四、对称加密的最佳实践"></a>四、对称加密的最佳实践</h2><h3 id="1-密钥管理原则"><a href="#1-密钥管理原则" class="headerlink" title="1. 密钥管理原则"></a>1. 密钥管理原则</h3><ul><li><strong>禁止硬编码密钥</strong>：使用环境变量（<code>.env</code>文件）或密钥管理服务（AWS KMS）。</li><li><strong>定期轮换密钥</strong>：建议每90天更换一次密钥。</li><li><strong>最小权限原则</strong>：仅授予必要用户/服务访问密钥的权限。</li></ul><h3 id="2-IV的使用规范"><a href="#2-IV的使用规范" class="headerlink" title="2. IV的使用规范"></a>2. IV的使用规范</h3><ul><li>每次加密必须使用<strong>唯一且随机的IV</strong>。</li><li>不要将IV与密文一起存储，但需与密文一同传输（否则无法解密）。</li></ul><h3 id="3-算法选择建议"><a href="#3-算法选择建议" class="headerlink" title="3. 算法选择建议"></a>3. 算法选择建议</h3><ul><li><strong>优先使用AES-256</strong>：安全性最高，被NIST列为标准算法。</li><li>避免DES/3DES：密钥短且易被暴力破解。</li><li>流加密场景推荐ChaCha20：性能优于AES，适合移动端。</li></ul><hr><h2 id="五、对称加密的应用场景"><a href="#五、对称加密的应用场景" class="headerlink" title="五、对称加密的应用场景"></a>五、对称加密的应用场景</h2><ol><li><strong>API通信加密</strong>：保护客户端与服务器间的敏感数据（如用户凭证）。</li><li><strong>文件加密</strong>：对数据库文件、配置文件进行加密存储。</li><li><strong>数据传输加密</strong>：WebSocket、HTTP API等实时通信场景。</li><li><strong>Token加密</strong>：对JWT的Payload字段进行对称加密（需配合非对称签名）。</li></ol><hr><h2 id="六、安全注意事项"><a href="#六、安全注意事项" class="headerlink" title="六、安全注意事项"></a>六、安全注意事项</h2><ol><li><strong>警惕弱密钥</strong>：避免使用默认密钥（如<code>password123</code>）或短密钥。</li><li><strong>防范重放攻击</strong>：在加密数据中加入时间戳（Timestamp）或随机数（Nonce）。</li><li><strong>算法配置检查</strong>：禁用不安全的加密模式（如ECB）和填充方式（如PKCS#5）。</li><li><strong>日志监控</strong>：记录异常加密失败事件，及时发现密钥泄露风险。</li></ol><hr><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>对称加密是保障数据机密性的核心技术之一，PHP开发者可通过OpenSSL扩展轻松实现。关键在于：</p><ul><li>合理选择算法（推荐AES-256-CBC）。</li><li>安全管理密钥与IV。</li><li>结合业务场景设计加密方案。</li></ul><p>通过掌握对称加密技术，我们可以在PHP项目中构建更安全的数据传输和存储机制。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恒定时间算法：抵御时序攻击的坚盾</title>
      <link href="/posts/constant-time-algorithm.html"/>
      <url>/posts/constant-time-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是恒定时间算法？"><a href="#什么是恒定时间算法？" class="headerlink" title="什么是恒定时间算法？"></a>什么是恒定时间算法？</h3><p>恒定时间算法（Constant-time algorithm）是指算法的运行时间与输入数据的内容无关，始终保持一致。换句话说，无论输入数据是什么，算法的执行时间都是固定的。</p><h3 id="为什么需要恒定时间算法？"><a href="#为什么需要恒定时间算法？" class="headerlink" title="为什么需要恒定时间算法？"></a>为什么需要恒定时间算法？</h3><ul><li><strong>抵御时序攻击：</strong> 时序攻击通过测量算法执行时间来获取敏感信息，恒定时间算法能有效地防止这种攻击。</li><li><strong>提高安全性：</strong> 恒定时间算法能防止攻击者通过分析执行时间来推断系统的内部状态。</li><li><strong>增强系统稳定性：</strong> 恒定时间算法能提高系统的稳定性，避免因输入数据不同导致性能波动。</li></ul><h3 id="恒定时间算法的实现"><a href="#恒定时间算法的实现" class="headerlink" title="恒定时间算法的实现"></a>恒定时间算法的实现</h3><p>实现恒定时间算法的关键在于，无论输入数据如何变化，算法的执行路径都必须是相同的。常用的实现方法包括：</p><ul><li><strong>循环比较：</strong> 比较两个字符串时，不采用逐字符比较的方式，而是遍历整个字符串，每次比较对应位置的字符，直到比较结束。</li><li><strong>查找表：</strong> 使用查找表来代替计算，确保每次查找的时间都是固定的。</li><li><strong>位操作：</strong> 利用位操作来实现恒定时间算法，例如使用异或操作来比较两个字符串。</li></ul><h3 id="恒定时间算法的应用场景"><a href="#恒定时间算法的应用场景" class="headerlink" title="恒定时间算法的应用场景"></a>恒定时间算法的应用场景</h3><ul><li><strong>密码验证：</strong> 比较用户输入的密码与存储的哈希值时，使用恒定时间算法可以防止时序攻击。</li><li><strong>加密算法：</strong> 许多加密算法都要求具有恒定时间特性，以防止侧信道攻击。</li><li><strong>安全协议：</strong> 在安全协议中，恒定时间算法可以提高协议的安全性。</li></ul><h3 id="PHP中的恒定时间比较函数-hash-equals"><a href="#PHP中的恒定时间比较函数-hash-equals" class="headerlink" title="PHP中的恒定时间比较函数 hash_equals()"></a>PHP中的恒定时间比较函数 <code>hash_equals()</code></h3><p>PHP提供了 <code>hash_equals()</code> 函数来进行恒定时间字符串比较，可以有效地防止时序攻击。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$known_string</span> = <span class="string">'secret'</span>;</span><br><span class="line"><span class="variable">$user_string</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$known_string</span>, <span class="variable">$user_string</span>)) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'密码正确'</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'密码错误'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>实现复杂度：</strong> 恒定时间算法的实现通常比普通的算法更加复杂。</li><li><strong>性能影响：</strong> 恒定时间算法的性能可能会比普通的算法稍慢。</li><li><strong>其他攻击方式：</strong> 恒定时间算法只能防御时序攻击，不能防御所有的攻击方式。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>恒定时间算法是保障系统安全的重要手段之一，尤其是在密码学领域。通过使用恒定时间算法，可以有效地防止时序攻击，提高系统的安全性。在实际应用中，需要根据具体的场景选择合适的恒定时间算法实现方式。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 时序攻击 </tag>
            
            <tag> 密码学 </tag>
            
            <tag> 恒定时间算法 </tag>
            
            <tag> hash_equals </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散列碰撞攻击的原理</title>
      <link href="/posts/hash-collision-attack.html"/>
      <url>/posts/hash-collision-attack.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>散列碰撞</strong>指的是，对于不同的输入数据，通过散列函数计算得到的哈希值却相同的情况。而<strong>散列碰撞攻击</strong>，就是利用这种碰撞特性，对系统进行攻击。</p><h3 id="散列函数与碰撞"><a href="#散列函数与碰撞" class="headerlink" title="散列函数与碰撞"></a>散列函数与碰撞</h3><ul><li><strong>散列函数</strong>：是一种将任意长度的输入数据映射成固定长度的输出（即哈希值）的函数。</li><li><strong>散列碰撞</strong>：当两个不同的输入数据经过散列函数计算后，得到了相同的哈希值，就发生了碰撞。</li></ul><p><strong>为什么会出现碰撞？</strong></p><ul><li><strong>鸽巢原理：</strong> 由于输入数据的可能性是无限的，而哈希值的取值范围是有限的，所以必然会出现碰撞。</li><li><strong>散列函数的设计：</strong> 不同的散列函数算法，其抗碰撞性也不同。较弱的散列函数更容易发生碰撞。</li></ul><h3 id="散列碰撞攻击的原理"><a href="#散列碰撞攻击的原理" class="headerlink" title="散列碰撞攻击的原理"></a>散列碰撞攻击的原理</h3><p>攻击者利用散列碰撞的特性，通过构造特殊的输入数据，使得这些数据与目标数据产生相同的哈希值。一旦成功，攻击者就可以用构造的数据来代替目标数据，从而达到欺骗系统的目的。</p><h3 id="常见的攻击场景"><a href="#常见的攻击场景" class="headerlink" title="常见的攻击场景"></a>常见的攻击场景</h3><ul><li><strong>密码破解：</strong> 攻击者通过构造大量不同的密码，计算它们的哈希值，与已知的哈希值进行对比，从而破解密码。</li><li><strong>数字签名伪造：</strong> 攻击者可以构造一份与原文件具有相同哈希值的文件，然后用伪造的文件替换原文件，从而伪造数字签名。</li><li><strong>拒绝服务攻击：</strong> 通过构造大量数据，使得哈希表发生碰撞，导致系统性能下降，甚至崩溃。</li></ul><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><ul><li><strong>选择强散列函数：</strong> 使用具有较高抗碰撞性的散列函数，如SHA-256、SHA-3等。</li><li><strong>加盐：</strong> 在原始数据中加入一个随机的字符串（盐），然后再进行散列，可以增加破解难度。</li><li><strong>使用更长的密钥：</strong> 增加密钥的长度可以降低碰撞的概率。</li><li><strong>多重哈希：</strong> 使用多个不同的散列函数，可以进一步提高安全性。</li><li><strong>限制重试次数：</strong> 对密码输入次数进行限制，可以有效防止暴力破解攻击。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>散列碰撞攻击是黑客利用散列函数特性进行的一种攻击方式。虽然无法完全避免碰撞，但我们可以通过选择合适的散列函数、加盐、使用更长的密钥等方式来提高系统的安全性。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 哈希 </tag>
            
            <tag> 散列碰撞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字版权管理（DRM）详解</title>
      <link href="/posts/digital-rights-management.html"/>
      <url>/posts/digital-rights-management.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是DRM？"><a href="#什么是DRM？" class="headerlink" title="什么是DRM？"></a>什么是DRM？</h3><p>数字版权管理（Digital Rights Management，简称DRM）是一系列技术和服务，旨在保护数字内容的版权，防止未经授权的复制、分发和使用。DRM通过加密、数字签名等技术手段，对数字内容进行保护，并限制其使用方式。</p><h3 id="DRM的工作原理"><a href="#DRM的工作原理" class="headerlink" title="DRM的工作原理"></a>DRM的工作原理</h3><ol><li><strong>加密:</strong> DRM系统会对数字内容进行加密，只有拥有正确密钥的用户才能解密并使用。</li><li><strong>数字签名:</strong> 通过数字签名，可以验证内容的完整性，防止内容被篡改。</li><li><strong>使用许可:</strong> DRM系统会为每个数字内容设置使用许可，限制用户的使用方式，例如只能播放一次、不能复制等。</li><li><strong>设备绑定:</strong> DRM系统可以将数字内容绑定到特定的设备上，防止在未授权设备上使用。</li></ol><h3 id="DRM的应用场景"><a href="#DRM的应用场景" class="headerlink" title="DRM的应用场景"></a>DRM的应用场景</h3><ul><li><strong>音乐:</strong> 数字音乐平台使用DRM保护音乐文件，防止非法下载和分享。</li><li><strong>视频:</strong> 流媒体平台使用DRM保护视频内容，防止盗版。</li><li><strong>电子书:</strong> 电子书平台使用DRM保护电子书，防止非法复制和传播。</li><li><strong>软件:</strong> 软件厂商使用DRM保护软件，防止未经授权的使用。</li></ul><h3 id="DRM的优缺点"><a href="#DRM的优缺点" class="headerlink" title="DRM的优缺点"></a>DRM的优缺点</h3><p><strong>优点:</strong></p><ul><li><strong>保护版权:</strong> 有效保护数字内容的版权，防止盗版。</li><li><strong>控制使用方式:</strong> 可以灵活控制数字内容的使用方式，满足不同场景的需求。</li><li><strong>增加收入:</strong> 通过DRM保护，内容提供商可以增加收入。</li></ul><p><strong>缺点:</strong></p><ul><li><strong>用户体验不佳:</strong> DRM可能限制用户的正常使用，如不能随意复制、分享等。</li><li><strong>技术复杂性:</strong> DRM系统相对复杂，可能导致兼容性问题。</li><li><strong>安全隐患:</strong> DRM系统本身也可能存在漏洞，被破解。</li><li><strong>法律争议:</strong> DRM的合法性一直存在争议，有些国家和地区对DRM的使用有严格的限制。</li></ul><h3 id="DRM面临的挑战"><a href="#DRM面临的挑战" class="headerlink" title="DRM面临的挑战"></a>DRM面临的挑战</h3><ul><li><strong>DRM破解:</strong> 随着技术的不断发展，DRM系统被破解的风险越来越高。</li><li><strong>用户体验:</strong> 过度严格的DRM限制会影响用户体验，导致用户流失。</li><li><strong>兼容性问题:</strong> 不同的DRM系统之间兼容性差，给用户带来不便。</li><li><strong>法律法规的限制:</strong> 不同国家和地区的法律法规对DRM的使用有不同的规定。</li></ul><h3 id="DRM的未来发展"><a href="#DRM的未来发展" class="headerlink" title="DRM的未来发展"></a>DRM的未来发展</h3><ul><li><strong>更灵活的DRM:</strong> 未来DRM系统会更加灵活，允许用户在一定范围内共享和修改内容。</li><li><strong>与区块链结合:</strong> 将区块链技术应用于DRM，提高透明度和安全性。</li><li><strong>人工智能的应用:</strong> 利用人工智能技术，实现更智能的DRM管理。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>DRM作为一种重要的版权保护技术，在数字内容产业中扮演着重要的角色。虽然DRM存在一些缺点和挑战，但随着技术的不断发展，DRM将会变得更加完善，更好地保护数字内容的版权。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 数字版权管理 </tag>
            
            <tag> DRM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时序攻击：窃取密码的隐形杀手</title>
      <link href="/posts/timing-attack.html"/>
      <url>/posts/timing-attack.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是时序攻击？"><a href="#什么是时序攻击？" class="headerlink" title="什么是时序攻击？"></a>什么是时序攻击？</h3><p>时序攻击是一种利用系统在处理不同数据时所花费的时间差异来获取敏感信息的攻击方式。简单来说，攻击者通过精确测量系统在执行不同操作时所花费的时间，来推断出一些敏感信息，比如密码。</p><h3 id="时序攻击的原理"><a href="#时序攻击的原理" class="headerlink" title="时序攻击的原理"></a>时序攻击的原理</h3><ul><li><strong>不同输入，不同时间：</strong> 计算机在处理不同的输入时，所花费的时间往往是不一样的。例如，比较两个字符串是否相等，如果从头开始逐个字符比较，那么当两个字符串的前几个字符不同时，比较过程就会提前结束，所花费的时间也会相应减少。</li><li><strong>攻击者利用时间差：</strong> 攻击者通过多次提交不同的输入，并精确测量系统响应的时间，就可以推断出系统的内部状态，从而获取敏感信息。</li></ul><h3 id="时序攻击的危害"><a href="#时序攻击的危害" class="headerlink" title="时序攻击的危害"></a>时序攻击的危害</h3><ul><li><strong>密码泄露：</strong> 最常见的时序攻击就是利用时间差来破解密码。攻击者通过不断尝试不同的密码，并测量系统响应的时间，就可以逐步推断出正确的密码。</li><li><strong>其他敏感信息泄露：</strong> 除了密码，时序攻击还可以用来泄露其他敏感信息，比如私钥、加密算法的内部状态等。</li></ul><h3 id="如何防御时序攻击"><a href="#如何防御时序攻击" class="headerlink" title="如何防御时序攻击"></a>如何防御时序攻击</h3><ul><li><strong>恒定时间算法：</strong><ul><li><strong>密码验证：</strong> 在比较密码时，应确保无论密码是否正确，算法都花费相同的时间。</li><li><strong>加密算法：</strong> 选择具有恒定时间特性的加密算法。</li></ul></li><li><strong>随机延迟：</strong> 在密码验证过程中，随机引入一些延迟，使得攻击者难以准确测量时间差。</li><li><strong>限制重试次数：</strong> 限制用户在短时间内多次尝试登录，减少攻击者进行多次尝试的机会。</li><li><strong>使用硬件安全模块（HSM）：</strong> HSM 可以提供更高的安全性，防止时序攻击。</li></ul><h3 id="时序攻击的示例"><a href="#时序攻击的示例" class="headerlink" title="时序攻击的示例"></a>时序攻击的示例</h3><ul><li><strong>密码验证：</strong> 攻击者通过不断尝试不同的密码，测量系统响应时间，来推断密码的长度和部分字符。</li><li><strong>加密算法：</strong> 攻击者通过测量加密算法的执行时间，来推断密钥的长度或部分位。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>时序攻击是一种隐蔽性很强的攻击方式，给系统安全带来了很大的威胁。为了防御时序攻击，我们需要采取多种措施，如使用恒定时间算法、随机延迟、限制重试次数等。在设计和实现系统时，应充分考虑时序攻击的可能性，并采取相应的防护措施。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 时序攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白盒密码学：在透明环境下保护密钥</title>
      <link href="/posts/white-box-cryptography.html"/>
      <url>/posts/white-box-cryptography.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是白盒密码学？"><a href="#什么是白盒密码学？" class="headerlink" title="什么是白盒密码学？"></a>什么是白盒密码学？</h3><p>白盒密码学是一种特殊的密码学技术，旨在保护密钥在完全暴露的环境中不被提取。想象一下，攻击者不仅知道你的加密算法，还能看到你的代码、内存、甚至硬件的每一个细节，这种极端的环境就被称为“白盒”环境。白盒密码学就是要在这个环境下，依然能够安全地保护密钥。</p><h3 id="为什么需要白盒密码学？"><a href="#为什么需要白盒密码学？" class="headerlink" title="为什么需要白盒密码学？"></a>为什么需要白盒密码学？</h3><ul><li><strong>DRM保护:</strong> 在数字版权管理（DRM）中，加密内容需要在各种设备上播放，这些设备可能被破解。白盒密码学可以确保密钥不会被提取，从而保护版权。</li><li><strong>移动设备安全:</strong> 移动设备上的应用可能被反编译，白盒密码学可以保护应用中的敏感数据。</li><li><strong>物联网安全:</strong> 物联网设备资源有限，难以部署复杂的安全机制。白盒密码学可以提供一种轻量级的安全解决方案。</li></ul><h3 id="白盒密码学的原理"><a href="#白盒密码学的原理" class="headerlink" title="白盒密码学的原理"></a>白盒密码学的原理</h3><p>白盒密码学主要通过以下技术来保护密钥：</p><ul><li><strong>查找表:</strong> 将复杂的密码运算转化为一系列的查找表操作，这些查找表中隐藏了密钥信息。</li><li><strong>混淆技术:</strong> 对算法进行混淆，增加攻击者分析的难度。</li><li><strong>密钥拆分:</strong> 将密钥拆分成多个部分，分散在不同的代码段中，增加攻击者恢复密钥的难度。</li></ul><h3 id="白盒密码学的挑战"><a href="#白盒密码学的挑战" class="headerlink" title="白盒密码学的挑战"></a>白盒密码学的挑战</h3><ul><li><strong>性能开销:</strong> 白盒密码学通常会带来较大的性能开销。</li><li><strong>安全性评估困难:</strong> 评估白盒密码系统的安全性非常困难，没有标准的评估方法。</li><li><strong>攻击手段多样:</strong> 攻击者可以采用多种手段攻击白盒系统，如差分分析、积分攻击等。</li></ul><h3 id="白盒密码学的应用场景"><a href="#白盒密码学的应用场景" class="headerlink" title="白盒密码学的应用场景"></a>白盒密码学的应用场景</h3><ul><li><strong>数字版权管理:</strong> 保护数字内容不被非法复制。</li><li><strong>移动支付:</strong> 保护支付信息的安全。</li><li><strong>物联网安全:</strong> 保护物联网设备中的敏感数据。</li><li><strong>云计算安全:</strong> 在云环境中保护数据隐私。</li></ul><h3 id="白盒密码学的发展趋势"><a href="#白盒密码学的发展趋势" class="headerlink" title="白盒密码学的发展趋势"></a>白盒密码学的发展趋势</h3><ul><li><strong>轻量级白盒密码:</strong> 为了适应资源受限的设备，研究人员正在开发更轻量级的白盒密码算法。</li><li><strong>抗量子计算的白盒密码:</strong> 随着量子计算的发展，抗量子计算的白盒密码成为了研究热点。</li><li><strong>标准化:</strong> 白盒密码的标准化工作也在不断推进，以促进其在实际应用中的推广。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>白盒密码学为我们在高度不信任的环境中保护密钥提供了一种新的思路。虽然面临着诸多挑战，但随着研究的深入，白盒密码学将在越来越多的领域发挥重要作用。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 混淆技术 </tag>
            
            <tag> 数字版权管理 </tag>
            
            <tag> DRM </tag>
            
            <tag> 白盒密码学 </tag>
            
            <tag> 密钥保护 </tag>
            
            <tag> 物联网安全 </tag>
            
            <tag> 查找表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零信任架构：构建更安全的数字世界</title>
      <link href="/posts/zero-trust.html"/>
      <url>/posts/zero-trust.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是零信任架构？"><a href="#什么是零信任架构？" class="headerlink" title="什么是零信任架构？"></a>什么是零信任架构？</h3><p>零信任架构是一种全新的安全理念，它摒弃了传统的“城堡与护城河”式的网络安全模型，转而采用“永不信任，始终验证”的原则。无论用户、设备还是服务，在访问网络资源之前，都必须经过严格的身份验证和授权。</p><p><strong>传统网络安全模型 vs. 零信任架构</strong></p><div class="table-container"><table><thead><tr><th>特点</th><th>传统网络安全模型</th><th>零信任架构</th></tr></thead><tbody><tr><td>信任边界</td><td>明确的网络边界，内部网络被视为可信</td><td>没有固定的信任边界，所有访问都必须验证</td></tr><tr><td>访问控制</td><td>基于网络位置的访问控制</td><td>基于身份和上下文的多因素认证</td></tr><tr><td>安全策略</td><td>一刀切的安全策略</td><td>精细化的访问控制策略</td></tr></tbody></table></div><h3 id="零信任架构的核心原则"><a href="#零信任架构的核心原则" class="headerlink" title="零信任架构的核心原则"></a>零信任架构的核心原则</h3><ul><li><strong>永不信任：</strong> 不信任任何用户、设备或服务，即使它们已经在网络内部。</li><li><strong>始终验证：</strong> 对每个访问请求进行严格的身份验证和授权。</li><li><strong>最小权限原则：</strong> 只授予用户执行任务所需的最小权限。</li><li><strong>动态访问控制：</strong> 根据实时上下文调整访问权限。</li><li><strong>数据加密：</strong> 对所有敏感数据进行加密。</li><li><strong>微分段:</strong> 将网络划分为更小的信任域。</li></ul><h3 id="零信任架构的优势"><a href="#零信任架构的优势" class="headerlink" title="零信任架构的优势"></a>零信任架构的优势</h3><ul><li><strong>增强安全性：</strong> 通过消除对网络边界的依赖，显著降低了攻击面。</li><li><strong>适应云原生环境：</strong> 适用于云计算、混合云和多云环境。</li><li><strong>提高灵活性：</strong> 可以根据业务需求动态调整安全策略。</li><li><strong>降低风险：</strong> 及早发现并阻止潜在的威胁。</li></ul><h3 id="零信任架构的实现"><a href="#零信任架构的实现" class="headerlink" title="零信任架构的实现"></a>零信任架构的实现</h3><ul><li><strong>身份验证与授权:</strong> 使用多因素认证、基于角色的访问控制等技术。</li><li><strong>微分段:</strong> 将网络划分为更小的信任域，限制数据流动。</li><li><strong>数据加密:</strong> 对数据在传输和存储过程中进行加密。</li><li><strong>日志与监控:</strong> 收集和分析日志数据，及时发现异常行为。</li><li><strong>持续评估:</strong> 不断评估安全态势，及时调整安全策略。</li></ul><h3 id="零信任架构的挑战"><a href="#零信任架构的挑战" class="headerlink" title="零信任架构的挑战"></a>零信任架构的挑战</h3><ul><li><strong>复杂性:</strong> 实现零信任架构需要对现有的IT基础设施进行重大改造。</li><li><strong>成本:</strong> 零信任架构的实施需要投入大量的资金和人力资源。</li><li><strong>人才短缺:</strong> 具备零信任架构专业知识的人才相对较少。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>零信任架构是一种全新的安全理念，它为构建更安全的数字世界提供了新的思路。虽然实现零信任架构面临诸多挑战，但其带来的好处是显而易见的。随着云计算、物联网等新兴技术的不断发展，零信任架构将成为未来网络安全的主流趋势。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 零信任架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学的历史演进：从古老密语到量子时代</title>
      <link href="/posts/cryptography-history.html"/>
      <url>/posts/cryptography-history.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>密码学，这门保护信息安全的学科，其发展历程就像一部跌宕起伏的史诗。从最初的简单密语，到如今的量子加密，密码学始终在与破解者进行着一场永不停歇的较量。</p><p><strong>1. 古典密码学：神秘的“暗语”时代</strong></p><p>在19世纪之前，密码学还处于古典时代。那时的加密方法，就像孩童玩耍的“暗语”，简单却充满趣味。</p><ul><li><strong>替换密码：</strong><ul><li>这是最古老的加密方式之一。就像玩“文字替换游戏”，把一个字母换成另一个。</li><li><strong>凯撒密码：</strong><ul><li>据说凯撒大帝用它来传递军事情报。把每个字母向后移动固定位数，比如A变成D，B变成E。</li><li>简单易懂，但也容易被破解，只要尝试所有可能的移动位数就行。</li></ul></li><li><strong>维吉尼亚密码：</strong><ul><li>比凯撒密码复杂一些，用一个密钥来控制字母的替换。</li><li>破解难度稍高，但如果密钥太短或有规律，还是会被破解。</li></ul></li></ul></li><li><strong>转置密码：</strong><ul><li>不改变字母本身，只改变它们的顺序，就像“打乱字母顺序游戏”。</li><li><strong>栅栏密码：</strong><ul><li>把明文分成几行，然后按列读取，就像把文字“穿过栅栏”。</li><li>简单粗暴，容易被破解。</li></ul></li></ul></li></ul><p>古典密码学的特点是：简单、手工操作，容易被破解。但它们是密码学的“启蒙老师”，为后来的发展奠定了基础。</p><p><strong>2. 现代密码学：数学与计算机的“强强联合”</strong></p><p>到了20世纪，密码学迎来了“文艺复兴”，数学和计算机的加入，让密码学变得强大而复杂。</p><ul><li><strong>香农的信息论：</strong><ul><li>1949年，香农发表《通信的数学理论》，奠定了信息论的基础。</li><li>他用数学方法研究信息的传输和加密，为现代密码学提供了理论支撑。</li></ul></li><li><strong>公钥密码学：</strong><ul><li>1977年，RSA算法诞生，这是公钥密码学的里程碑。</li><li>它用一对密钥：公钥和私钥。公钥可以公开，私钥自己保管。</li><li>加密用公钥，解密用私钥。就像你有一把公开的“邮箱钥匙”，别人用它给你发信，但只有你能用私钥打开。</li></ul></li><li><strong>哈希函数：</strong><ul><li>哈希函数就像信息的“指纹”，把任意长度的信息变成固定长度的“指纹”。</li><li>SHA系列是美国国家标准与技术研究院（NIST）主导的哈希函数标准。</li><li>它们被广泛应用于数字签名、数据完整性校验等。</li></ul></li></ul><p>现代密码学的特点是：复杂、数学化、计算机化，安全性大大提高。</p><p><strong>3. 量子密码学：未来的“终极武器”？</strong></p><p>进入21世纪，量子计算的出现，对传统密码学提出了挑战。而量子密码学，就像“魔法”，用量子力学的原理来保护信息。</p><ul><li><strong>量子密钥分发（QKD）：</strong><ul><li>利用量子力学的特性，实现密钥的安全分发。</li><li>如果有人窃听，密钥就会“自毁”，保证了密钥的安全性。</li></ul></li><li><strong>抗量子计算攻击：</strong><ul><li>研究能够抵抗量子计算机攻击的加密算法。</li><li>这是密码学未来的重要方向。</li></ul></li></ul><p>量子密码学的特点是：基于量子力学，安全性极高，但技术还不够成熟。</p><p><strong>总结</strong></p><p>密码学的历史，就像一部“猫鼠游戏”，加密者和破解者不断进行着攻防较量。从古典到现代，再到量子时代，密码学始终在进步，为我们的信息安全保驾护航。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 历史演进 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学：信息安全的坚实后盾</title>
      <link href="/posts/cryptography.html"/>
      <url>/posts/cryptography.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在数字时代，信息安全已成为重中之重。密码学，这门既古老又现代的学科，为我们构筑了保护信息安全的坚固防线。它不仅仅是把秘密藏起来那么简单，更是一门研究如何安全通信的科学。</p><p><strong>密码学到底是啥？</strong></p><p>说白了，密码学就是研究如何把秘密藏起来，不让别人轻易发现。它不是变魔术，也不是搞什么玄学，它是实打实的科学。你想啊，咱们在网上聊天、转账，甚至发个朋友圈，这些信息要是被人偷看了，那还得了？密码学就是干这个的，它就像一把锁，把你的信息牢牢锁住，只有拿着钥匙的人才能打开。</p><p><strong>密码学要解决哪些问题？</strong></p><p>密码学可不只是藏秘密那么简单，它要解决的问题多着呢：</p><ol><li><strong>保密性（Confidentiality）：</strong><ul><li>这是最基本的要求。你的信息，只有你能看，别人看了也没用，这就是保密性。就像你写日记，锁在抽屉里，不想让别人看。</li><li>这也是密码学最基本的目标。通过加密算法，将明文转换为密文，使得未经授权的人无法读取信息内容。例如，在网络通信中，使用加密协议（如HTTPS）可以保护用户的隐私，防止信息被窃听。</li></ul></li><li><strong>完整性（Integrity）：</strong><ul><li>信息在传输过程中，不能被人偷偷改动。就像你给朋友寄信，信封完好无损，里面的内容也没被篡改。</li><li>通过哈希函数和消息认证码（MAC），可以检测信息是否被篡改。例如，在软件下载中，使用数字签名可以确保下载的文件没有被恶意修改。</li></ul></li><li><strong>身份验证（Authentication）：</strong><ul><li>你要确定和你说话的人，是不是他本人。就像你打电话给朋友，你能听出他的声音，确定是他本人。</li><li>通过数字签名和身份验证协议，可以验证通信双方的身份，防止身份伪造。例如，在网上银行中，使用双因素身份验证可以提高账户的安全性。</li></ul></li><li><strong>不可否认性（Non-repudiation）：</strong><ul><li>你发出去的信息，不能抵赖。就像你签了合同，就不能说没签过。</li><li>通过数字签名，可以确保发送方不能否认其发送的信息，接收方也不能否认其接收的信息。例如，在电子商务中，使用数字签名可以确保交易的合法性和有效性。</li></ul></li></ol><p><strong>这些问题怎么解决？</strong></p><p>密码学里有很多工具，每种工具都有自己的用途：</p><ul><li><strong>加密算法：</strong><ul><li>这是核心工具，就像一把锁，把你的信息锁住。有对称加密，用同一把钥匙加密解密；有非对称加密，用两把钥匙，一把公开，一把自己留着。</li><li>例如：<ul><li>AES（高级加密标准）：目前最常用的对称加密算法，安全性高，被广泛应用于各种场景。</li><li>RSA（非对称加密）：一种经典的公钥加密算法，适用于密钥交换和数字签名。</li></ul></li></ul></li><li><strong>哈希函数：</strong><ul><li>就像一个指纹，给你的信息生成一个独一无二的“指纹”，别人改动一点点，指纹就变了。</li><li>例如：SHA-256。</li></ul></li><li><strong>数字签名：</strong><ul><li>就像你的亲笔签名，别人伪造不了。</li></ul></li></ul><p><strong>密码学有什么用？</strong></p><p>现在是互联网时代，密码学无处不在：</p><ul><li><strong>网上银行：</strong><ul><li>你的账号密码、交易记录，都靠密码学保护。</li></ul></li><li><strong>微信、QQ：</strong><ul><li>你的聊天记录，也是加密的，不用担心被人偷看。</li></ul></li><li><strong>电子支付：</strong><ul><li>你用支付宝、微信支付，密码学保证你的钱不会被盗。</li></ul></li><li><strong>区块链：</strong><ul><li>比特币、以太坊，都离不开密码学。</li></ul></li><li><strong>网络安全：</strong><ul><li>密码学是网络安全的基础，用于保护网络通信、数据传输和存储的安全。</li></ul></li><li><strong>数据安全：</strong><ul><li>密码学用于保护敏感数据，如个人信息、财务信息和商业机密。</li></ul></li><li><strong>电子商务：</strong><ul><li>密码学用于保护在线交易的安全，确保电子支付和数字证书的有效性。</li></ul></li></ul><p><strong>学密码学难不难？</strong></p><p>说实话，密码学有点烧脑，需要一些数学基础。但是，只要你有兴趣，肯下功夫，就能学会。你可以从一些简单的概念入手，比如凯撒密码，然后慢慢深入。多看书，多动手实践，慢慢就能掌握。</p><p><strong>总结</strong></p><p>密码学不是什么高深莫测的东西，它就在我们身边，保护着我们的信息安全。随着数字化程度的不断提高，密码学在未来将发挥更加重要的作用。学点密码学知识，能让你更好地了解这个数字世界。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 信息安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学里的那些“行话”</title>
      <link href="/posts/cryptography-jargon.html"/>
      <url>/posts/cryptography-jargon.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>学任何一门学问，都得先懂它的“行话”。密码学也一样，它有自己的一套术语，就像武林里的招式名称，你得先记住，才能开始练功。</p><ol><li><strong>明文（Plaintext）：</strong><ul><li>这就是你想加密的原始信息，就像你写在纸上的字，或者存在电脑里的文件。</li><li>简单说，就是“原本的秘密”。</li></ul></li><li><strong>密文（Ciphertext）：</strong><ul><li>这是明文经过加密算法处理后的结果，就像你把纸上的字变成了乱码，或者把文件加密成了一堆看不懂的符号。</li><li>简单说，就是“藏起来的秘密”。</li></ul></li><li><strong>密钥（Key）：</strong><ul><li>这是加密和解密的关键，就像一把钥匙，只有拿着它，才能把密文还原成明文。</li><li>密钥可以是数字、字母，或者其他任何形式的数据。</li></ul></li><li><strong>加密（Encryption）：</strong><ul><li>这就是把明文变成密文的过程，就像你用钥匙把门锁上。</li><li>加密算法就是加密的具体方法，就像锁的构造原理。</li></ul></li><li><strong>解密（Decryption）：</strong><ul><li>这就是把密文还原成明文的过程，就像你用钥匙把门打开。</li><li>解密算法就是解密的具体方法，通常和加密算法是一对。</li></ul></li><li><strong>密码算法（Cryptographic Algorithm）：</strong><ul><li>这就是加密和解密的方法，就像武林里的招式，有各种各样的，每种都有自己的特点。</li><li>比如：<ul><li>对称加密算法：加密和解密用同一把钥匙。</li><li>非对称加密算法：加密和解密用不同的钥匙。</li><li>哈希算法：把信息变成一串固定长度的乱码，但不能还原。</li></ul></li></ul></li></ol><p><strong>这些术语有什么用？</strong></p><p>搞清楚这些术语，你才能看懂密码学的文章，才能和其他人交流。就像你学英语，得先背单词，才能看懂句子。</p><p><strong>举个例子</strong></p><p>你想给朋友发一条秘密消息：“今晚八点，老地方见。”</p><ol><li>这条消息就是<strong>明文</strong>。</li><li>你用一种<strong>加密算法</strong>，比如AES，把这条消息加密成了一串乱码：“asdfghjkl”。</li><li>这串乱码就是<strong>密文</strong>。</li><li>你用一把<strong>密钥</strong>，比如“123456”，来加密和解密。</li><li>你把密文和密钥一起发给朋友，朋友用相同的密钥和<strong>解密算法</strong>，把密文还原成明文。</li></ol><p><strong>总结</strong></p><p>这些术语是密码学的基础，就像盖房子要先打地基。掌握了这些术语，你才能更好地理解密码学的原理和应用。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对称加密：一把钥匙开一把锁</title>
      <link href="/posts/cryptography-symmetric-encryption.html"/>
      <url>/posts/cryptography-symmetric-encryption.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天，咱们来聊聊对称加密，这可是密码学里的“老大哥”，至今仍然在保护着我们的大量数据。</p><p>对称加密，顾名思义，就是加密和解密用的是同一把钥匙。就像你家大门，用同一把钥匙锁门和开门。这种加密方式的特点是速度快，效率高，适合加密大量数据。</p><p><strong>对称加密的“家族成员”</strong></p><p>对称加密算法有很多，其中最著名的有：</p><ul><li><strong>AES（高级加密标准）：</strong><ul><li>这是目前最流行的对称加密算法，被美国政府采纳为标准。</li><li>AES 的特点是安全性高，速度快，支持多种密钥长度（128位、192位、256位）。</li><li>就像加密界的“全能冠军”，各种场景都能胜任。</li></ul></li><li><strong>DES（数据加密标准）：</strong><ul><li>这是早期的对称加密算法，曾被广泛使用。</li><li>但 DES 的密钥长度只有 56 位，容易被破解，现在已经不安全了。</li><li>就像加密界的“老爷爷”，已经退休了。</li></ul></li><li><strong>3DES（三重数据加密标准）：</strong><ul><li>这是 DES 的升级版，通过多次加密提高安全性。</li><li>但 3DES 的速度较慢，效率不高，现在也逐渐被 AES 取代。</li><li>就像加密界的“中年大叔”，虽然还能用，但已经不是最佳选择。</li></ul></li></ul><p><strong>分组密码和流密码：两种加密方式</strong></p><p>对称加密算法可以分为两种类型：</p><ul><li><strong>分组密码：</strong><ul><li>把明文分成固定长度的“分组”，然后逐个加密。</li><li>AES、DES、3DES 都是分组密码。</li><li>就像“分批打包”，把数据分成小块，逐个加密。</li></ul></li><li><strong>流密码：</strong><ul><li>把明文逐个比特或字节加密，就像“流水线作业”。</li><li>RC4 是一种常见的流密码。</li><li>就像“逐字加密”，一个字一个字地加密。</li></ul></li></ul><p><strong>加密模式：不同的加密“姿势”</strong></p><p>分组密码在加密时，可以使用不同的“姿势”，也就是加密模式。常见的加密模式有：</p><ul><li><strong>ECB（电子密码本模式）：</strong><ul><li>每个分组独立加密，相同的明文分组会生成相同的密文分组。</li><li>就像“独立加密”，每个分组互不影响。</li><li>ECB 模式容易被攻击，不建议使用。</li></ul></li><li><strong>CBC（密码分组链接模式）：</strong><ul><li>每个分组的加密都依赖于前一个分组的密文，相同的明文分组会生成不同的密文分组。</li><li>就像“环环相扣”，每个分组都和前面的分组有关。</li><li>CBC 模式安全性较高，是常用的加密模式。</li></ul></li><li><strong>CTR（计数器模式）：</strong><ul><li>使用一个计数器来生成密钥流，然后和明文进行异或运算。</li><li>就像“生成密钥流”，用计数器生成密钥，然后和明文混合。</li><li>CTR 模式可以并行加密和解密，效率较高。</li></ul></li></ul><p><strong>总结</strong></p><p>对称加密是一种高效安全的加密方式，被广泛应用于各种场景。了解对称加密的原理和特点，有助于我们更好地保护数据安全。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非对称加密技术详解与PHP实现</title>
      <link href="/posts/symmetric-encryption.html"/>
      <url>/posts/symmetric-encryption.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、什么是非对称加密？"><a href="#一、什么是非对称加密？" class="headerlink" title="一、什么是非对称加密？"></a>一、什么是非对称加密？</h2><p>非对称加密（Asymmetric Encryption），又称<strong>公钥加密</strong>，是一种使用<strong>两把不同密钥</strong>（公钥和私钥）进行加密和解密的密码学技术。其核心特性是：</p><ul><li><strong>公钥</strong>（Public Key）：可公开分发，用于加密数据或验证签名。</li><li><strong>私钥</strong>（Private Key）：严格保密，用于解密数据或生成签名。</li></ul><h3 id="1-与对称加密的区别"><a href="#1-与对称加密的区别" class="headerlink" title="1. 与对称加密的区别"></a>1. 与对称加密的区别</h3><div class="table-container"><table><thead><tr><th>特性</th><th>对称加密</th><th>非对称加密</th></tr></thead><tbody><tr><td>密钥数量</td><td>1把密钥（共享）</td><td>2把密钥（公钥+私钥）</td></tr><tr><td>加密速度</td><td>快（适合大数据量）</td><td>慢（计算复杂度高）</td></tr><tr><td>核心用途</td><td>数据加密、密钥交换</td><td>密钥交换、数字签名、身份认证</td></tr></tbody></table></div><h3 id="2-历史背景"><a href="#2-历史背景" class="headerlink" title="2. 历史背景"></a>2. 历史背景</h3><p>非对称加密的里程碑算法是 <strong>RSA</strong>（1977年提出），后续演进出 <strong>ECC</strong>（椭圆曲线加密，2004年提出）等更高效的算法。</p><hr><h2 id="二、非对称加密的核心原理"><a href="#二、非对称加密的核心原理" class="headerlink" title="二、非对称加密的核心原理"></a>二、非对称加密的核心原理</h2><h3 id="1-数学基础"><a href="#1-数学基础" class="headerlink" title="1. 数学基础"></a>1. 数学基础</h3><p>非对称加密基于<strong>数论难题</strong>，常见实现方式：</p><ul><li><strong>RSA</strong>：基于大整数分解（将大素数乘积分解为原始素数）的困难性。</li><li><strong>ECC</strong>：基于椭圆曲线离散对数问题的困难性。</li></ul><h3 id="2-加密与解密流程"><a href="#2-加密与解密流程" class="headerlink" title="2. 加密与解密流程"></a>2. 加密与解密流程</h3><ol><li><strong>密钥生成</strong>：通过算法生成一对公私钥（如RSA）。</li><li><strong>加密过程</strong>：使用<strong>公钥</strong>加密明文，得到密文（只有私钥能解密）。</li><li><strong>解密过程</strong>：使用<strong>私钥</strong>解密密文，恢复明文。</li></ol><h3 id="3-数字签名"><a href="#3-数字签名" class="headerlink" title="3. 数字签名"></a>3. 数字签名</h3><ul><li><strong>签名生成</strong>：用私钥对数据哈希值加密，生成签名。</li><li><strong>签名验证</strong>：用公钥验证签名的合法性，确认数据完整性和来源可信性。</li></ul><hr><h2 id="三、PHP中的非对称加密实现"><a href="#三、PHP中的非对称加密实现" class="headerlink" title="三、PHP中的非对称加密实现"></a>三、PHP中的非对称加密实现</h2><h3 id="1-RSA密钥生成"><a href="#1-RSA密钥生成" class="headerlink" title="1. RSA密钥生成"></a>1. RSA密钥生成</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 生成RSA密钥对（2048位）</span></span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">'openssl genpkey -algorithm RSA -out private_key.pem -bits 2048'</span>);</span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">'openssl rsa -in private_key.pem -out public_key.pem -pubout'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取公钥和私钥</span></span><br><span class="line"><span class="variable">$privateKey</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">'private_key.pem'</span>);</span><br><span class="line"><span class="variable">$publicKey</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">'public_key.pem'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-使用OpenSSL进行加密-解密"><a href="#2-使用OpenSSL进行加密-解密" class="headerlink" title="2. 使用OpenSSL进行加密/解密"></a>2. 使用OpenSSL进行加密/解密</h3><h4 id="加密示例（使用公钥）"><a href="#加密示例（使用公钥）" class="headerlink" title="加密示例（使用公钥）"></a>加密示例（使用公钥）</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rsaEncrypt</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$publicKey</span></span>) </span>{</span><br><span class="line">    <span class="comment">// 将公钥转换为资源</span></span><br><span class="line">    <span class="variable">$resource</span> = <span class="title function_ invoke__">openssl_pkey_get_public</span>(<span class="variable">$publicKey</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加密数据（返回二进制密文）</span></span><br><span class="line">    <span class="variable">$encrypted</span> = <span class="title function_ invoke__">openssl_public_encrypt</span>(</span><br><span class="line">        <span class="variable">$data</span>,</span><br><span class="line">        <span class="variable">$ciphertext</span>,</span><br><span class="line">        <span class="variable">$resource</span>,</span><br><span class="line">        OPENSSL_PKCS1_PADDING</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$encrypted</span> === <span class="literal">false</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">"加密失败"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$ciphertext</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="variable">$plaintext</span> = <span class="string">"Hello, this is a secret message!"</span>;</span><br><span class="line"><span class="variable">$ciphertext</span> = <span class="title function_ invoke__">rsaEncrypt</span>(<span class="variable">$plaintext</span>, <span class="variable">$publicKey</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"加密结果："</span> . <span class="variable">$ciphertext</span> . <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="解密示例（使用私钥）"><a href="#解密示例（使用私钥）" class="headerlink" title="解密示例（使用私钥）"></a>解密示例（使用私钥）</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rsaDecrypt</span>(<span class="params"><span class="variable">$ciphertext</span>, <span class="variable">$privateKey</span></span>) </span>{</span><br><span class="line">    <span class="comment">// 将私钥转换为资源</span></span><br><span class="line">    <span class="variable">$resource</span> = <span class="title function_ invoke__">openssl_pkey_get_private</span>(<span class="variable">$privateKey</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解密数据（返回明文）</span></span><br><span class="line">    <span class="variable">$decrypted</span> = <span class="title function_ invoke__">openssl_private_decrypt</span>(</span><br><span class="line">        <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$ciphertext</span>),</span><br><span class="line">        <span class="variable">$plaintext</span>,</span><br><span class="line">        <span class="variable">$resource</span>,</span><br><span class="line">        OPENSSL_PKCS1_PADDING</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$decrypted</span> === <span class="literal">false</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">"解密失败"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$plaintext</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="variable">$decryptedText</span> = <span class="title function_ invoke__">rsaDecrypt</span>(<span class="variable">$ciphertext</span>, <span class="variable">$privateKey</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"解密结果："</span> . <span class="variable">$decryptedText</span> . <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-数字签名与验证"><a href="#3-数字签名与验证" class="headerlink" title="3. 数字签名与验证"></a>3. 数字签名与验证</h3><h4 id="签名生成"><a href="#签名生成" class="headerlink" title="签名生成"></a>签名生成</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">signData</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$privateKey</span></span>) </span>{</span><br><span class="line">    <span class="comment">// 生成哈希值</span></span><br><span class="line">    <span class="variable">$hash</span> = <span class="title function_ invoke__">hash</span>(<span class="string">'sha256'</span>, <span class="variable">$data</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用私钥签名</span></span><br><span class="line">    <span class="variable">$signature</span> = <span class="title function_ invoke__">openssl_sign</span>(</span><br><span class="line">        <span class="variable">$hash</span>,</span><br><span class="line">        <span class="variable">$signature</span>,</span><br><span class="line">        <span class="variable">$privateKey</span>,</span><br><span class="line">        OPENSSL_ALGO_SHA256</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$signature</span> === <span class="literal">false</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">"签名失败"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$signature</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="variable">$signature</span> = <span class="title function_ invoke__">signData</span>(<span class="string">"Hello, World!"</span>, <span class="variable">$privateKey</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"数字签名："</span> . <span class="variable">$signature</span> . <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="签名验证"><a href="#签名验证" class="headerlink" title="签名验证"></a>签名验证</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifySignature</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$signature</span>, <span class="variable">$publicKey</span></span>) </span>{</span><br><span class="line">    <span class="comment">// 生成哈希值</span></span><br><span class="line">    <span class="variable">$hash</span> = <span class="title function_ invoke__">hash</span>(<span class="string">'sha256'</span>, <span class="variable">$data</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证签名</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">openssl_verify</span>(</span><br><span class="line">        <span class="variable">$hash</span>,</span><br><span class="line">        <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$signature</span>),</span><br><span class="line">        <span class="variable">$publicKey</span>,</span><br><span class="line">        OPENSSL_ALGO_SHA256</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span> === <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="variable">$isValid</span> = <span class="title function_ invoke__">verifySignature</span>(<span class="string">"Hello, World!"</span>, <span class="variable">$signature</span>, <span class="variable">$publicKey</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"签名验证结果："</span> . (<span class="variable">$isValid</span> ? <span class="string">"成功"</span> : <span class="string">"失败"</span>) . <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="四、非对称加密的最佳实践"><a href="#四、非对称加密的最佳实践" class="headerlink" title="四、非对称加密的最佳实践"></a>四、非对称加密的最佳实践</h2><h3 id="1-密钥管理原则"><a href="#1-密钥管理原则" class="headerlink" title="1. 密钥管理原则"></a>1. 密钥管理原则</h3><ul><li><strong>私钥保护</strong>：存储在安全介质（如HSM、硬件密钥）中，禁止暴露。</li><li><strong>密钥轮换</strong>：定期更换密钥（建议RSA 2048位密钥至少使用3年后更换）。</li><li><strong>权限控制</strong>：限制私钥的访问权限（如Linux下设置<code>chmod 600 private_key.pem</code>）。</li></ul><h3 id="2-算法选择建议"><a href="#2-算法选择建议" class="headerlink" title="2. 算法选择建议"></a>2. 算法选择建议</h3><ul><li><strong>优先使用ECC</strong>：在相同安全强度下，密钥长度更短（例如ECC-256 ≈ RSA-3072）。</li><li>避免过时算法：禁用RSA-1024及以下弱密钥。</li></ul><h3 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h3><ol><li><strong>SSL/TLS通信</strong>：浏览器与服务器通过非对称加密交换对称密钥。</li><li><strong>SSH密钥认证</strong>：替代密码登录，提升服务器安全性。</li><li><strong>数字证书</strong>（如SSL证书、代码签名证书）：绑定公钥到实体身份。</li><li><strong>JWT签名</strong>：使用私钥签名令牌，客户端用公钥验证。</li></ol><hr><h2 id="五、安全注意事项"><a href="#五、安全注意事项" class="headerlink" title="五、安全注意事项"></a>五、安全注意事项</h2><ol><li><strong>防止中间人攻击</strong>：首次交换公钥时需通过可信渠道（如HTTPS证书）。</li><li><strong>填充攻击防护</strong>：禁用不安全的填充模式（如PKCS#1 v1.5），改用OAEP填充。</li><li><strong>密钥泄露应急</strong>：立即吊销受影响证书并生成新密钥对。</li></ol><hr><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>非对称加密是现代密码学的基石，广泛应用于安全通信、身份认证等领域。PHP开发者可通过OpenSSL扩展实现基础功能，但在生产环境中需结合<strong>证书权威（CA）</strong>和<strong>安全密钥存储方案</strong>构建完整的安全体系。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 非对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非对称加密：两把钥匙，各司其职</title>
      <link href="/posts/asymmetric-encryption.html"/>
      <url>/posts/asymmetric-encryption.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天，咱们来聊聊非对称加密，这可是密码学里的“黑科技”，它用两把钥匙，一把公开，一把私藏，就像你的保险箱，一把钥匙给别人放东西，一把钥匙你自己开箱。</p><p>非对称加密，也叫公钥密码学，它的特点是加密和解密用的是不同的密钥。就像你有一把公开的“邮箱钥匙”，别人用它给你发信，但只有你能用私钥打开。这种加密方式解决了对称加密的密钥分发问题，让加密更安全、更方便。</p><p><strong>非对称加密的“家族成员”</strong></p><p>非对称加密算法有很多，其中最著名的有：</p><ul><li><strong>RSA：</strong><ul><li>这是最经典的非对称加密算法，以三位发明者的名字命名。</li><li>RSA 的特点是安全性高，应用广泛，但速度较慢。</li><li>就像加密界的“老大哥”，虽然有点老，但依然很可靠。</li></ul></li><li><strong>ECC（椭圆曲线密码学）：</strong><ul><li>这是一种较新的非对称加密算法，基于椭圆曲线数学。</li><li>ECC 的特点是安全性高，密钥长度短，速度快，适合移动设备和嵌入式系统。</li><li>就像加密界的“新秀”，潜力无限。</li></ul></li></ul><p><strong>公钥和私钥：两把不同的“钥匙”</strong></p><p>非对称加密的核心是公钥和私钥：</p><ul><li><strong>公钥（Public Key）：</strong><ul><li>这是公开的密钥，可以给任何人。</li><li>就像你的“邮箱钥匙”，别人用它给你加密信息。</li></ul></li><li><strong>私钥（Private Key）：</strong><ul><li>这是私有的密钥，只有你自己知道。</li><li>就像你的“保险箱钥匙”，只有你能用它解密信息。</li></ul></li></ul><p><strong>密钥交换算法：安全地“交换钥匙”</strong></p><p>非对称加密的另一个重要应用是密钥交换。最著名的密钥交换算法是：</p><ul><li><strong>Diffie-Hellman：</strong><ul><li>这是一种安全的密钥交换算法，可以在不安全的信道上安全地交换密钥。</li><li>就像你们在公共场合，通过一系列计算，安全地约定一个共同的“暗号”。</li></ul></li></ul><p><strong>非对称加密的应用场景</strong></p><p>非对称加密被广泛应用于：</p><ul><li><strong>数字签名：</strong><ul><li>用于验证信息的来源和完整性。</li></ul></li><li><strong>安全通信：</strong><ul><li>用于保护网络通信的安全，如 HTTPS。</li></ul></li><li><strong>密钥管理：</strong><ul><li>用于安全地分发和管理密钥。</li></ul></li></ul><p><strong>总结</strong></p><p>非对称加密是一种强大的加密技术，它用两把不同的“钥匙”，解决了对称加密的密钥分发问题，让加密更安全、更方便。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 非对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么数组通常从0开始编号？</title>
      <link href="/posts/why-array-start-with-0.html"/>
      <url>/posts/why-array-start-with-0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>这是一个非常好的问题，很多初学者都会对此感到疑惑。</strong></p><p><strong>主要原因如下：</strong></p><ol><li><p><strong>内存地址的直接映射：</strong></p><ul><li>计算机的内存是一块连续的地址空间。当我们定义一个数组时，编译器会在内存中为它分配一块连续的内存区域。</li><li>数组的第一个元素的内存地址就是数组的起始地址。如果我们想访问数组的第n个元素，只需要将起始地址加上n个元素的大小即可。</li><li>从0开始编号，就意味着数组下标可以直接作为偏移量来计算内存地址，这样可以简化内存访问的计算，提高效率。</li></ul></li><li><p><strong>与计算机底层硬件的契合：</strong></p><ul><li>计算机指令集中的许多操作都是从0开始计数的。例如，许多指令的第一个操作数默认是寄存器0。</li><li>数组下标从0开始，可以更好地与底层硬件指令进行配合，提高程序的执行效率。</li></ul></li><li><p><strong>历史原因和惯性：</strong></p><ul><li>C语言是最早广泛使用的编程语言之一，它选择了从0开始编号的数组。</li><li>后来的许多编程语言都受到了C语言的影响，沿用了这一习惯，形成了一个约定俗成的规范。</li></ul></li></ol><p><strong>形象比喻：</strong></p><p>想象一下，你有一排房子，从左到右编号。如果你从1开始编号，那么当你想要找到第n间房子时，你实际上需要数到第n-1个房子才能找到。而如果从0开始编号，你直接数到第n个房子就可以了。</p><p><strong>总结：</strong></p><p>数组从0开始编号，是计算机科学发展过程中形成的一种约定俗成的规则。它与计算机的内存结构和指令集设计紧密相关，有助于提高程序的执行效率。</p><p><strong>当然，也有一些编程语言的数组是从1开始编号的，比如Matlab。</strong> 不过，从0开始编号仍然是主流。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找表：快速高效的数据检索工具</title>
      <link href="/posts/lookup-table.html"/>
      <url>/posts/lookup-table.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>查找表</strong>，顾名思义，就是用来查找数据的表格。它是一种非常常见且高效的数据结构，尤其在需要频繁查找特定数据的情况下。</p><h3 id="查找表的结构"><a href="#查找表的结构" class="headerlink" title="查找表的结构"></a>查找表的结构</h3><p>一个简单的查找表通常包含两列：</p><ul><li><strong>键（Key）：</strong> 唯一标识一条记录的字段。</li><li><strong>值（Value）：</strong> 与键相关联的数据。</li></ul><p><strong>示例：</strong></p><div class="table-container"><table><thead><tr><th>姓名</th><th>电话号码</th></tr></thead><tbody><tr><td>张三</td><td>13888888888</td></tr><tr><td>李四</td><td>13999999999</td></tr><tr><td>王五</td><td>13666666666</td></tr></tbody></table></div><p>在这个例子中，“姓名”是键，“电话号码”是值。当我们需要查找“张三”的电话号码时，只需要根据“姓名”这个键，就能迅速找到对应的“电话号码”。</p><h3 id="查找表的工作原理"><a href="#查找表的工作原理" class="headerlink" title="查找表的工作原理"></a>查找表的工作原理</h3><p>查找表的工作原理非常简单：</p><ol><li><strong>输入键值:</strong> 用户输入需要查找的键。</li><li><strong>查找键:</strong> 系统在查找表中搜索与输入键值相同的键。</li><li><strong>返回结果:</strong> 如果找到匹配的键，则返回对应的值；否则，返回“未找到”的信息。</li></ol><h3 id="查找表在计算机科学中的应用"><a href="#查找表在计算机科学中的应用" class="headerlink" title="查找表在计算机科学中的应用"></a>查找表在计算机科学中的应用</h3><p>查找表在计算机科学中有着广泛的应用，例如：</p><ul><li><strong>数据库索引:</strong> 数据库使用索引来加速数据的检索，索引本质上就是一种查找表。</li><li><strong>缓存:</strong> 缓存系统使用查找表来存储最近访问的数据，以便快速访问。</li><li><strong>编译器符号表:</strong> 编译器使用符号表来存储变量名和它们对应的内存地址。</li><li><strong>路由表:</strong> 网络设备使用路由表来确定数据包的转发路径。</li></ul><h3 id="查找表的数据结构"><a href="#查找表的数据结构" class="headerlink" title="查找表的数据结构"></a>查找表的数据结构</h3><p>为了提高查找效率，不同的应用场景会选择不同的数据结构来实现查找表：</p><ul><li><strong>数组:</strong> 适用于数据量较小且有序的情况。</li><li><strong>哈希表:</strong> 适用于数据量较大且需要快速查找的情况。</li><li><strong>树形结构:</strong> 适用于需要支持动态插入和删除操作的情况。</li><li><strong>B树和B+树:</strong> 适用于存储在磁盘上的大规模数据。</li></ul><h3 id="查找表的优点"><a href="#查找表的优点" class="headerlink" title="查找表的优点"></a>查找表的优点</h3><ul><li><strong>查询速度快:</strong> 对于已有的数据，查找速度非常快。</li><li><strong>实现简单:</strong> 容易理解和实现。</li><li><strong>灵活适用:</strong> 可以用于各种数据类型和场景。</li></ul><h3 id="查找表的缺点"><a href="#查找表的缺点" class="headerlink" title="查找表的缺点"></a>查找表的缺点</h3><ul><li><strong>占用空间:</strong> 查找表需要额外的存储空间来存储键值对。</li><li><strong>维护成本:</strong> 当数据量较大或频繁更新时，维护查找表会有一定的成本。</li></ul><p><strong>总结</strong></p><p>查找表是一种简单而高效的数据结构，在计算机科学中有着广泛的应用。通过选择合适的数据结构和算法，可以实现快速、准确的数据查找。</p>]]></content>
      
      
      <categories>
          
          <category> 数据检索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找表 </tag>
            
            <tag> 数据检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中，Supervisor的使用详解</title>
      <link href="/posts/supervisor.html"/>
      <url>/posts/supervisor.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是Supervisor？"><a href="#什么是Supervisor？" class="headerlink" title="什么是Supervisor？"></a>什么是Supervisor？</h3><p>Supervisor是一个进程管理工具，它可以帮助你管理和监控多个进程。在PHP开发中，Supervisor常用于：</p><ul><li><strong>管理多个PHP-FPM进程:</strong> 确保PHP应用程序始终运行，并在发生崩溃时自动重启。</li><li><strong>监控进程状态:</strong> 实时监控进程的运行状态，并及时发出告警。</li><li><strong>管理不同的应用程序:</strong> 可以同时管理多个不同的PHP应用程序。</li></ul><h3 id="为什么使用Supervisor？"><a href="#为什么使用Supervisor？" class="headerlink" title="为什么使用Supervisor？"></a>为什么使用Supervisor？</h3><ul><li><strong>提高稳定性:</strong> Supervisor可以保证PHP应用程序在发生崩溃时自动重启，提高系统的稳定性。</li><li><strong>简化管理:</strong> 通过简单的配置文件，就可以管理多个进程，减少了手动操作的繁琐。</li><li><strong>提供监控功能:</strong> Supervisor内置了监控功能，可以实时监控进程的状态，并提供丰富的告警方式。</li><li><strong>支持热重启:</strong> 在不中断服务的情况下，可以对PHP-FPM进程进行热重启，方便进行配置更新或代码部署。</li></ul><h3 id="安装Supervisor"><a href="#安装Supervisor" class="headerlink" title="安装Supervisor"></a>安装Supervisor</h3><p><strong>Ubuntu/Debian:</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install supervisor</span><br></pre></td></tr></tbody></table></figure><p><strong>CentOS/RHEL:</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install supervisor</span><br></pre></td></tr></tbody></table></figure><h3 id="配置Supervisor"><a href="#配置Supervisor" class="headerlink" title="配置Supervisor"></a>配置Supervisor</h3><p>Supervisor的配置文件一般位于<code>/etc/supervisor/supervisord.conf</code>。我们可以通过编辑这个文件来配置我们的进程。</p><p><strong>一个简单的配置示例:</strong></p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:php-fpm]</span></span><br><span class="line"><span class="attr">command</span>=/usr/sbin/php-fpm -c /etc/php/<span class="number">7.4</span>/fpm/php-fpm.conf</span><br><span class="line"><span class="attr">directory</span>=/var/www/html</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">user</span>=www-data</span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/supervisor/php-fpm.log</span><br><span class="line"><span class="attr">stderr_logfile</span>=/var/log/supervisor/php-fpm.err.log</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>program:</strong> 进程的名称，可以自定义。</li><li><strong>command:</strong> 要启动的命令。</li><li><strong>directory:</strong> 进程的工作目录。</li><li><strong>autostart:</strong> 是否在Supervisor启动时自动启动进程。</li><li><strong>autorestart:</strong> 进程崩溃时是否自动重启。</li><li><strong>user:</strong> 运行进程的用户。</li><li><strong>redirect_stderr:</strong> 将标准错误重定向到标准输出。</li><li><strong>stdout_logfile</strong> 和 <strong>stderr_logfile:</strong> 分别指定标准输出和标准错误的日志文件。</li></ul><h3 id="启动和管理Supervisor"><a href="#启动和管理Supervisor" class="headerlink" title="启动和管理Supervisor"></a>启动和管理Supervisor</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Supervisor</span></span><br><span class="line">sudo supervisorctl start all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Supervisor</span></span><br><span class="line">sudo supervisorctl reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Supervisor</span></span><br><span class="line">sudo supervisorctl stop all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程状态</span></span><br><span class="line">sudo supervisorctl status</span><br></pre></td></tr></tbody></table></figure><h3 id="Supervisor-Web界面"><a href="#Supervisor-Web界面" class="headerlink" title="Supervisor Web界面"></a>Supervisor Web界面</h3><p>Supervisor还提供了一个Web界面，可以更方便地管理进程。可以通过浏览器访问<code>http://localhost:9001</code>来访问Web界面。默认的用户名和密码是<code>user</code>和<code>password</code>。</p><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><ul><li><strong>事件监听:</strong> Supervisor支持事件监听，可以自定义脚本在发生特定事件时执行。</li><li><strong>进程组:</strong> 可以将多个进程分组，方便管理。</li><li><strong>配置文件包含:</strong> 可以将配置文件拆分成多个文件，提高可维护性。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>配置文件语法:</strong> Supervisor配置文件的语法比较严格，需要注意格式。</li><li><strong>日志管理:</strong> 定期清理日志文件，防止磁盘占用过大。</li><li><strong>监控告警:</strong> 配置适当的告警，以便及时发现问题。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Supervisor是一个功能强大且易于使用的进程管理工具，对于PHP开发人员来说，它是一个非常有用的工具。通过Supervisor，可以提高PHP应用程序的稳定性、可管理性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> supervisor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 日志</title>
      <link href="/posts/nginx-logs.html"/>
      <url>/posts/nginx-logs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是Nginx-日志？"><a href="#什么是Nginx-日志？" class="headerlink" title="什么是Nginx 日志？"></a>什么是Nginx 日志？</h3><p>Nginx 日志是 Nginx 服务器运行过程中产生的记录文件，它详细记录了服务器的各项活动，包括客户端请求、服务器响应、错误信息等。通过分析日志，我们可以了解服务器的运行状态、性能瓶颈、安全问题等，从而进行优化和维护。</p><h3 id="Nginx-日志的类型"><a href="#Nginx-日志的类型" class="headerlink" title="Nginx 日志的类型"></a>Nginx 日志的类型</h3><ul><li>访问日志 (access log)： 记录客户端对服务器的访问信息，包括 IP 地址、请求时间、请求方法、请求 URL、状态码、响应字节数、用户代理等。</li><li>错误日志 (error log)： 记录服务器运行过程中发生的错误信息，包括配置错误、脚本错误、连接错误等。</li></ul><h3 id="Nginx-日志的配置"><a href="#Nginx-日志的配置" class="headerlink" title="Nginx 日志的配置"></a>Nginx 日志的配置</h3><p>Nginx 日志的配置主要在配置文件中进行，通常位于 /etc/nginx/nginx.conf 或类似路径下。<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">access_log logs/access.log main;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">error_log logs/error.log;</span></span><br></pre></td></tr></tbody></table></figure><br>access_log: 配置访问日志的路径和格式。<br>error_log: 配置错误日志的路径和日志级别。<p></p><p>日志格式：<br>Nginx 支持自定义日志格式，使用 log_format 指令来定义。<br></p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span> main <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">              <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">              <span class="string">'"<span class="variable">$http_user_agent</span>"'</span>;</span><br></pre></td></tr></tbody></table></figure><br>$remote_addr: 客户端 IP 地址<br>$remote_user: 客户端用户名<br>$time_local: 本地时间<br>$request: 请求行，包含方法、URI 和协议<br>$status: 状态码<br>$body_bytes_sent: 发送的字节数<br>$http_referer: 请求来源页<br>$http_user_agent: 客户端浏览器信息<p></p><h3 id="Nginx-日志的用途"><a href="#Nginx-日志的用途" class="headerlink" title="Nginx 日志的用途"></a>Nginx 日志的用途</h3><ul><li>流量分析： 统计网站访问量、热门页面、访问来源等，为网站优化提供数据支持。</li><li>错误排查： 查找服务器错误的原因，定位问题，解决故障。</li><li>安全监控： 检测恶意攻击、入侵行为，保障服务器安全。</li><li>性能分析： 分析请求处理时间、慢请求等，优化服务器性能。</li></ul><h3 id="Nginx-日志的分析"><a href="#Nginx-日志的分析" class="headerlink" title="Nginx 日志的分析"></a>Nginx 日志的分析</h3><ul><li>手动分析： 使用 cat, grep, awk 等命令对日志进行分析。</li><li>日志分析工具： 使用专门的日志分析工具，如 logstash, elasticsearch, kibana 等，对日志进行可视化分析和搜索。</li></ul><h3 id="常见分析场景："><a href="#常见分析场景：" class="headerlink" title="常见分析场景："></a>常见分析场景：</h3><ul><li>统计网站访问量： 使用 awk 或 grep 命令统计访问日志中 IP 地址的数量。</li><li>查找错误日志： 使用 grep 命令搜索错误日志中的关键字。</li><li>分析访问来源： 使用 awk 命令提取访问日志中的 $http_referer 字段，统计访问来源。</li><li>分析用户行为： 使用日志分析工具，对用户行为进行可视化分析，了解用户访问路径、停留时间等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux如何排查cpu过高的原因</title>
      <link href="/posts/linux-high-cpu-troubleshoot.html"/>
      <url>/posts/linux-high-cpu-troubleshoot.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>要排查 Linux 上 CPU 过高的原因，可以按照以下步骤进行：</p><ol><li><p>使用系统监控工具：使用像 <code>top</code>、<code>htop</code> 或 <code>glances</code> 等系统监控工具来查看当前 CPU 使用情况。这将给我们一个快速的概述，了解哪些进程或服务占用了大量 CPU 资源。</p></li><li><p>检查排名靠前的进程：在系统监控工具中，查看哪些进程占用了大量的 CPU 资源。注意关注 CPU 使用率高的进程和其对应的 PID（进程 ID）。</p></li><li><p>查看进程详细信息：使用命令 <code>ps -p &lt;PID&gt; -f</code>，将 <code>&lt;PID&gt;</code> 替换为排名靠前的进程的 PID，可以查看该进程的详细信息。特别关注 CPU 使用率、内存占用情况以及进程运行时间等。</p></li><li><p>日志分析：查看系统日志（如 <code>/var/log/syslog</code> 或 <code>/var/log/messages</code>），寻找与 CPU 占用率高相关联的错误或警告消息。这可能有助于定位问题。</p></li><li><p>检查进程调度和优先级：使用命令 <code>ps -eo pid,ppid,cmd,%cpu,%mem,nice,pri,stat</code>，查看进程的调度和优先级信息。确保没有调度问题导致某些进程占用过多的 CPU 资源。</p></li><li><p>检查定时任务和后台进程：某些定时任务或后台进程可能会导致 CPU 负载过高。使用命令 <code>crontab -l</code> 检查定时任务，使用 <code>service --status-all</code> 或 <code>systemctl list-unit-files --type=service</code> 查看系统中运行的服务。</p></li><li><p>CPU 分析工具：如果上述方法没有找到问题根源，可以尝试使用 CPU 分析工具进行深入调查。例如，<code>perf</code>、<code>sysstat</code>、<code>strace</code>、<code>oprofile</code> 等工具可以提供更详细的性能数据和进程活动追踪。</p></li></ol><p>通过以上步骤，我们应该能够定位到导致 CPU 使用率过高的具体进程、服务或问题。根据问题的不同，采取相应的措施，如优化代码、调整配置、更新软件版本等，以解决 CPU 过高的问题。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> cpu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux tee 命令详解</title>
      <link href="/posts/linux-tee.html"/>
      <url>/posts/linux-tee.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="tee-命令是什么？"><a href="#tee-命令是什么？" class="headerlink" title="tee 命令是什么？"></a>tee 命令是什么？</h3><p>tee 命令是一个非常有用的 Linux 命令行工具，它可以将标准输入的数据同时输出到标准输出（通常是终端）和一个或多个文件中。换句话说，tee 命令可以将数据“分流”，一边显示在屏幕上，一边保存到文件中。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tee</span> [选项] [文件...]</span><br></pre></td></tr></tbody></table></figure><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li><strong>-a</strong> 或 <strong>—append</strong>：将数据追加到文件末尾，而不是覆盖原有内容。</li><li><strong>-i</strong> 或 <strong>—ignore-interrupts</strong>：忽略中断信号，即使收到中断信号，也会继续运行。</li><li><strong>-p</strong> 或 <strong>—pipeline</strong>：优化管道性能，减少缓冲。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><strong>将命令输出同时显示在终端并保存到文件：</strong><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l | <span class="built_in">tee</span> file.txt</span><br></pre></td></tr></tbody></table></figure>这会列出当前目录下的文件，同时将结果保存到 <code>file.txt</code> 文件中。</li><li><strong>将多条命令的输出合并到一个文件中：</strong><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> file1.txt file2.txt | <span class="built_in">tee</span> combined.txt</span><br></pre></td></tr></tbody></table></figure>这会将 <code>file1.txt</code> 和 <code>file2.txt</code> 的内容合并，并输出到 <code>combined.txt</code> 文件中。</li><li><strong>将命令输出追加到已有文件中：</strong><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> &gt;&gt; log.txt | <span class="built_in">tee</span> -a log.txt</span><br></pre></td></tr></tbody></table></figure>这会将当前日期和时间追加到 <code>log.txt</code> 文件的末尾，同时显示在终端。</li><li><strong>过滤输出并保存：</strong><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep error log.txt | <span class="built_in">tee</span> errors.txt</span><br></pre></td></tr></tbody></table></figure>这会从 <code>log.txt</code> 文件中提取包含 “error” 的行，并将结果显示在终端并保存到 <code>errors.txt</code> 文件中。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><strong>日志记录：</strong> 将程序输出实时记录到文件中，方便查看和分析。</li><li><strong>数据备份：</strong> 将重要数据同时保存到多个地方，以防数据丢失。</li><li><strong>调试：</strong> 将程序输出保存到文件中，以便仔细检查。</li><li><strong>管道操作：</strong> 将一个命令的输出作为另一个命令的输入，同时保存中间结果。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>tee 命令在 Linux 系统中非常常见，它可以帮助我们更好地管理和处理数据流。通过灵活运用 tee 命令，我们可以实现很多有用的功能。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> tee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 中执行命令并将输出保存到文件</title>
      <link href="/posts/command-output-to-file.html"/>
      <url>/posts/command-output-to-file.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 Linux 系统中，我们经常需要将命令的输出结果保存到文件中，以便后续分析或处理。Linux 提供了多种方法来实现这一目标，本文将介绍几种常用的方法。</p><h3 id="方法一：使用重定向符号（-gt-或-gt-gt-）"><a href="#方法一：使用重定向符号（-gt-或-gt-gt-）" class="headerlink" title="方法一：使用重定向符号（> 或 >>）"></a>方法一：使用重定向符号（&gt; 或 &gt;&gt;）</h3><p>重定向符号（&gt;）是最简单直接的方法，它可以将命令的输出重定向到指定的文件中。</p><p><strong>1. 覆盖写入（&gt;）</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l /etc &gt; file.txt</span><br></pre></td></tr></tbody></table></figure><p>上述命令将 <code>/etc</code> 目录下的文件列表输出到 <code>file.txt</code> 文件中。如果 <code>file.txt</code> 文件不存在，则会自动创建。如果文件已经存在，则会<strong>覆盖</strong>原有文件的内容。</p><p><strong>2. 追加写入（&gt;&gt;）</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l /etc &gt;&gt; file.txt</span><br></pre></td></tr></tbody></table></figure><p>与覆盖写入不同，追加写入（&gt;&gt;）会将命令的输出<strong>追加</strong>到文件末尾，而不会覆盖原有内容。这在需要多次记录命令输出时非常有用。</p><h3 id="方法二：使用-tee-命令"><a href="#方法二：使用-tee-命令" class="headerlink" title="方法二：使用 tee 命令"></a>方法二：使用 <code>tee</code> 命令</h3><p><code>tee</code> 命令可以将命令的输出同时显示在屏幕上并保存到文件中，方便我们实时查看输出结果。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l /etc | <span class="built_in">tee</span> file.txt</span><br></pre></td></tr></tbody></table></figure><p>上述命令将 <code>/etc</code> 目录下的文件列表输出到屏幕上，并同时保存到 <code>file.txt</code> 文件中。</p><p><code>tee</code> 命令还支持以下选项：</p><ul><li><code>-a</code> 或 <code>--append</code>：将输出追加到文件末尾，而不是覆盖它。</li><li><code>-i</code> 或 <code>--ignore-interrupts</code>：忽略中断信号。</li></ul><h3 id="方法三：结合输入重定向（-lt-）和输出重定向（-gt-）"><a href="#方法三：结合输入重定向（-lt-）和输出重定向（-gt-）" class="headerlink" title="方法三：结合输入重定向（<）和输出重定向（>）"></a>方法三：结合输入重定向（&lt;）和输出重定向（&gt;）</h3><p>我们可以将输入重定向和输出重定向结合使用，将文件内容作为命令的输入，并将命令的输出写入到另一个文件中。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &lt; inputfile &gt; outputfile</span><br></pre></td></tr></tbody></table></figure><p>上述命令将 <code>inputfile</code> 文件的内容作为 <code>command</code> 的输入，然后将 <code>command</code> 的输出写入到 <code>outputfile</code> 中。</p><h3 id="示例：监控-VIP-战斗并记录日志"><a href="#示例：监控-VIP-战斗并记录日志" class="headerlink" title="示例：监控 VIP 战斗并记录日志"></a>示例：监控 VIP 战斗并记录日志</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php /var/www/web/artisan match battleMonitor | <span class="built_in">tee</span> -a /var/www/web/storage/logs/vipBattle_monitor.<span class="built_in">log</span></span><br></pre></td></tr></tbody></table></figure><p>这是一个实际应用的例子，该命令用于监控 VIP 战斗，并将监控结果追加到 <code>/var/www/web/storage/logs/vipBattle_monitor.log</code> 文件中。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了 Linux 中几种常用的将命令输出保存到文件的方法，包括使用重定向符号（&gt; 或 &gt;&gt;）、<code>tee</code> 命令以及结合输入输出重定向。我们可以根据实际需求选择合适的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 输出重定向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 文件删除命令：rm</title>
      <link href="/posts/linux-command-rm.html"/>
      <url>/posts/linux-command-rm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Linux-文件删除命令：rm"><a href="#Linux-文件删除命令：rm" class="headerlink" title="Linux 文件删除命令：rm"></a>Linux 文件删除命令：rm</h2><p>在 Linux 系统中，<code>rm</code> 命令是用于删除文件和目录的强大工具。然而，由于其删除操作的不可逆性，使用时务必谨慎。本文将详细介绍 <code>rm</code> 命令的用法、选项以及注意事项，以帮助用户安全有效地管理文件。</p><h3 id="命令语法"><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h3><p><code>rm</code> 命令的基本语法如下：</p><figure class="highlight prolog"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 文件...</span><br></pre></td></tr></tbody></table></figure><p>其中，<code>文件...</code>  表示要删除的文件名或目录名，可以同时指定多个文件或目录。<code>选项</code>  则用于控制删除行为，常用的选项如下：</p><ul><li><code>-f</code> 或 <code>--force</code>：强制删除，不提示确认。</li><li><code>-i</code> 或 <code>--interactive</code>：交互式删除，每次删除前都会提示确认。</li><li><code>-r</code> 或 <code>-R</code> 或 <code>--recursive</code>：递归删除，用于删除目录及其下的所有文件和子目录。</li><li><code>-v</code> 或 <code>--verbose</code>：显示详细的删除过程。</li></ul><h3 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h3><ol><li><p><strong>删除单个文件：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> file.txt</span><br></pre></td></tr></tbody></table></figure><p>这条命令将删除当前目录下的 <code>file.txt</code> 文件。</p></li><li><p><strong>删除多个文件：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> file1.txt file2.txt file3.txt</span><br></pre></td></tr></tbody></table></figure><p>这条命令将同时删除 <code>file1.txt</code>、<code>file2.txt</code> 和 <code>file3.txt</code> 三个文件。</p></li><li><p><strong>删除目录及其内容：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r mydir</span><br></pre></td></tr></tbody></table></figure><p>这条命令将递归删除 <code>mydir</code> 目录及其下的所有文件和子目录。</p></li><li><p><strong>强制删除：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf mydir</span><br></pre></td></tr></tbody></table></figure><p>这条命令将强制删除 <code>mydir</code> 目录及其下的所有内容，且不会提示确认。</p></li><li><p><strong>交互式删除：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -i file.txt</span><br></pre></td></tr></tbody></table></figure><p>这条命令将以交互模式删除 <code>file.txt</code> 文件，每次删除前都会提示是否确认。</p></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>谨慎使用：</strong> <code>rm</code> 命令删除的文件通常无法恢复，请务必谨慎使用，尤其是在删除目录时。</li><li><strong>确认删除对象：</strong> 在执行 <code>rm</code> 命令前，请仔细确认要删除的文件或目录是否正确，避免误删重要文件。</li><li><strong>使用 <code>-i</code> 选项：</strong> 为了安全起见，建议在删除文件时尽量使用 <code>-i</code> 选项进行交互式删除，以便在删除前进行确认。</li><li><strong>备份重要文件：</strong> 对于重要的文件，建议提前备份，以防误删。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>rm</code> 命令是 Linux 系统中一个强大而常用的文件删除工具。通过灵活运用其选项，我们可以方便地删除文件和目录。然而，由于删除操作的不可逆性，我们必须谨慎使用，并养成良好的文件管理习惯，以避免误删重要文件。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> rm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux后台运行指定程序的几种方法</title>
      <link href="/posts/program-run-in-background.html"/>
      <url>/posts/program-run-in-background.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">在Linux系统中，将程序在后台运行可以释放终端，让您继续执行其他操作。下面介绍几种常用的方法：</div><h3 id="1-直接添加-amp-符号"><a href="#1-直接添加-amp-符号" class="headerlink" title="1. 直接添加 &amp; 符号"></a>1. <strong>直接添加 &amp; 符号</strong></h3><ul><li><strong>最简单的方法</strong>：在命令末尾加上 <code>&amp;</code> 符号，即可将程序放入后台运行。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python my_script.py &amp;</span><br></pre></td></tr></tbody></table></figure></li><li><strong>注意</strong>：<ul><li>该方法适用于大多数命令。</li><li>退出终端后，后台程序会随之终止。</li></ul></li></ul><h3 id="2-使用-nohup-命令"><a href="#2-使用-nohup-命令" class="headerlink" title="2. 使用 nohup 命令"></a>2. <strong>使用 nohup 命令</strong></h3><ul><li><strong>忽略挂断信号</strong>：<code>nohup</code> 命令可以使程序在用户退出终端后继续运行。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> python my_script.py &amp;</span><br></pre></td></tr></tbody></table></figure></li><li><strong>输出重定向</strong>：通常将输出重定向到一个文件中，以避免输出丢失。<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> python my_script.py &gt; output.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure><ul><li><code>&gt; output.log</code> 将标准输出重定向到 <code>output.log</code> 文件。</li><li><code>2&gt;&amp;1</code> 将标准错误重定向到标准输出，即也写入 <code>output.log</code> 文件。</li></ul></li></ul><h3 id="3-使用-screen-或-tmux"><a href="#3-使用-screen-或-tmux" class="headerlink" title="3. 使用 screen 或 tmux"></a>3. <strong>使用 screen 或 tmux</strong></h3><ul><li><strong>创建虚拟终端</strong>：screen 和 tmux 可以创建多个虚拟终端，您可以在这些终端中运行程序，即使关闭了原始终端，这些虚拟终端中的程序也会继续运行。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">screen</span><br><span class="line"><span class="comment"># 在screen中运行程序</span></span><br><span class="line">python my_script.py</span><br><span class="line"><span class="comment"># 退出screen但不终止程序</span></span><br><span class="line">Ctrl+a d</span><br></pre></td></tr></tbody></table></figure></li><li><strong>恢复screen</strong>：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="4-使用-systemd"><a href="#4-使用-systemd" class="headerlink" title="4. 使用 systemd"></a>4. <strong>使用 systemd</strong></h3><ul><li><strong>系统服务管理</strong>：systemd 是 Linux 系统的初始化系统和服务管理器，可以用来管理后台服务。</li><li><strong>创建服务单元文件</strong>：编写一个 <code>.service</code> 文件，定义服务的行为。</li><li><strong>启动服务</strong>：使用 <code>systemctl</code> 命令启动服务。</li><li><strong>较为复杂</strong>，适合长期运行的服务。</li></ul><h3 id="5-使用-jobs-和-bg-命令"><a href="#5-使用-jobs-和-bg-命令" class="headerlink" title="5. 使用 jobs 和 bg 命令"></a>5. <strong>使用 jobs 和 bg 命令</strong></h3><ul><li><strong>将前台进程转为后台</strong>：<ul><li><code>Ctrl+Z</code>：将当前前台进程挂起。</li><li><code>jobs</code>：查看后台作业。</li><li><code>bg %job_number</code>：将指定作业放入后台运行。</li></ul></li></ul><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a><strong>其他注意事项</strong></h3><ul><li><strong>查看后台进程</strong>：使用 <code>ps</code> 命令查看当前正在运行的进程。</li><li><strong>终止后台进程</strong>：使用 <code>kill</code> 命令终止指定进程。</li><li><strong>日志</strong>：对于长时间运行的程序，建议将输出重定向到日志文件中，以便查看运行情况。</li></ul><p><strong>选择合适的方法</strong></p><ul><li><strong>临时任务</strong>：直接添加 <code>&amp;</code> 或使用 <code>jobs</code> 和 <code>bg</code> 命令。</li><li><strong>长期运行</strong>：使用 <code>nohup</code>、<code>screen</code>、<code>tmux</code> 或 <code>systemd</code>。</li><li><strong>复杂管理</strong>：使用 <code>systemd</code>。</li></ul><p><strong>示例：</strong></p><p>假设您有一个 Python 脚本 <code>my_script.py</code>，要将其在后台运行，并把输出重定向到 <code>script.log</code> 文件。您可以使用以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> python my_script.py &gt; script.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><p>Linux 提供了多种方法将程序在后台运行，选择哪种方法取决于我们的具体需求和环境。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 后台运行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux搜索关键词前后几行</title>
      <link href="/posts/linux-grep-few-lines.html"/>
      <url>/posts/linux-grep-few-lines.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Linux 命令行中的快捷键非常丰富，可以大大提高程序员的工作效率。下面将详细介绍一些常用的快捷键，并分类说明：</p><p>在工作中，经常需要在linux中根据关键词搜索日志，并获取前后几行；其实，<code>grep</code> 命令可以搭配 <code>-C</code> 或 <code>-A</code> 或 <code>-B</code> 选项来获取匹配结果前后的行。具体如下：</p><ul><li><p>使用 <code>-C</code> 选项可以获取匹配行上下若干行。例如：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -C 2 <span class="string">"error"</span> logfile.txt</span><br></pre></td></tr></tbody></table></figure><p>该命令会查找 <code>logfile.txt</code> 文件中包含 <code>error</code> 关键字的行，并输出上下两行。<code>-C 2</code> 表示输出匹配行的上下两行。</p></li><li><p>使用 <code>-A</code> 选项可以获取匹配行上方若干行和匹配行本身。例如：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -A 2 <span class="string">"error"</span> logfile.txt</span><br></pre></td></tr></tbody></table></figure><p>该命令会查找 <code>logfile.txt</code> 文件中包含 <code>error</code> 关键字的行，并输出该行及其上面的两行。</p></li><li><p>使用 <code>-B</code> 选项可以获取匹配行下方若干行和匹配行本身。例如：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -B 2 <span class="string">"error"</span> logfile.txt</span><br></pre></td></tr></tbody></table></figure><p>该命令会查找 <code>logfile.txt</code> 文件中包含 <code>error</code> 关键字的行，并输出该行及其下面的两行。</p></li></ul><p>如果想要同时使用 <code>-A</code> 和 <code>-B</code> 选项，可以使用 <code>-C</code> 选项，例如：<br></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -C 2 <span class="string">"error"</span> logfile.txt</span><br></pre></td></tr></tbody></table></figure><br>这个命令会输出含有 <code>error</code> 关键字的行及其上下各两行内容。<p></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP任务加锁</title>
      <link href="/posts/php-task-lock.html"/>
      <url>/posts/php-task-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在PHP中，有时候我们需要设置定时任务，同一时间只有一个任务在执行。这就需要使用互斥锁来控制，下面介绍下实现方式：</p><h4 id="使用-flock-函数实现文件锁"><a href="#使用-flock-函数实现文件锁" class="headerlink" title="使用 flock 函数实现文件锁"></a>使用 flock 函数实现文件锁</h4><p>以下是一个示例：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">'/tmp/lock.txt'</span>, <span class="string">'w'</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">flock</span>(<span class="variable">$fp</span>, LOCK_EX | LOCK_NB)) { <span class="comment">// 获取独占锁</span></span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="title function_ invoke__">flock</span>(<span class="variable">$fp</span>, LOCK_UN);</span><br><span class="line">}</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br></pre></td></tr></tbody></table></figure><br>上面的代码使用 flock 函数获取一个文件锁，如果能成功获取到锁，则表示没有其他进程正在执行该任务，我们就可以执行该任务。执行完毕后，要记得释放锁，以便其他进程可以继续执行任务。<p></p><h4 id="使用-Redis-锁等方式实现互斥"><a href="#使用-Redis-锁等方式实现互斥" class="headerlink" title="使用 Redis 锁等方式实现互斥"></a>使用 Redis 锁等方式实现互斥</h4><p>使用 Redis 实现互斥锁的方式较为常见，因为 Redis 本身就支持分布式锁。</p><p>以下是使用 Redis 实现互斥锁的示例：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> <span class="title class_">Redis</span>();</span><br><span class="line"><span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="string">'task-lock'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">setnx</span>(<span class="variable">$key</span>, <span class="literal">true</span>)) { <span class="comment">// 尝试获取锁</span></span><br><span class="line">    <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">expire</span>(<span class="variable">$key</span>, <span class="number">10</span>); <span class="comment">// 设置锁的过期时间</span></span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">del</span>(<span class="variable">$key</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>上面的代码使用 Redis 的 <code>setnx</code> 方法尝试获取一个锁。如果能成功获取到锁，则表示没有其他进程正在执行该任务，我们就可以执行该任务。执行完毕后，要记得删除锁以便其他进程可以继续执行任务。需要注意的是，为了避免程序异常退出而导致锁无法释放，我们需要为锁添加一个过期时间。在 Redis 中，可以使用 <code>expire</code> 方法设置键的过期时间。<p></p><p>此外还可以使用其他方式实现互斥锁，比如数据库锁。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis中set、setex、setnx的用法和区别</title>
      <link href="/posts/redis-set-note.html"/>
      <url>/posts/redis-set-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Redis是一个高性能的键值对数据库，提供了多种设置键值的方法。其中，<code>set</code>、<code>setex</code> 和 <code>setnx</code> 是最常用的三个命令，它们在设置键值方面各有特点。</p><h3 id="1-set命令"><a href="#1-set命令" class="headerlink" title="1. set命令"></a>1. set命令</h3><ul><li><strong>功能：</strong> 将字符串值 value 关联到 key。</li><li><strong>语法：</strong> <code>SET key value</code></li><li><strong>特点：</strong><ul><li><strong>覆盖旧值：</strong> 如果 key 已经存在，SET 命令会直接覆盖旧值。</li><li><strong>无过期时间：</strong> 设置的键值没有默认的过期时间，除非手动设置。</li></ul></li></ul><h3 id="2-setex命令"><a href="#2-setex命令" class="headerlink" title="2. setex命令"></a>2. setex命令</h3><ul><li><strong>功能：</strong> setex(=SET EXpire)是将值 value 关联到 key，并设置 key 的生存时间。</li><li><strong>语法：</strong> <code>SETEX key seconds value</code> ，该命令相当于将下面两行操作合并为一个原子操作<figure class="highlight gams"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> key <span class="comment">value</span></span><br><span class="line">expire <span class="comment">key seconds</span></span><br></pre></td></tr></tbody></table></figure></li><li><strong>特点：</strong><ul><li><strong>设置过期时间：</strong> seconds 参数指定了 key 的过期时间，单位为秒。</li><li><strong>覆盖旧值：</strong> 如果 key 已经存在，SETEX 命令会覆盖旧值。</li></ul></li></ul><h3 id="3-setnx命令"><a href="#3-setnx命令" class="headerlink" title="3. setnx命令"></a>3. setnx命令</h3><ul><li><strong>功能：</strong> setnx(=SET if Not eXists)是将值 value 关联到 key，但只有当 key 不存在时才设置。</li><li><strong>语法：</strong> <code>SETNX key value</code></li><li><strong>特点：</strong><ul><li><strong>原子性操作：</strong> SETNX 是一个原子操作，如果 key 已经存在，则什么都不做。</li><li><strong>返回结果：</strong> 如果设置成功，返回 1；否则返回 0。</li></ul></li></ul><h3 id="三个命令的比较"><a href="#三个命令的比较" class="headerlink" title="三个命令的比较"></a>三个命令的比较</h3><div class="table-container"><table><thead><tr><th>命令</th><th>功能</th><th>特点</th></tr></thead><tbody><tr><td>SET</td><td>设置键值</td><td>覆盖旧值，无默认过期时间</td></tr><tr><td>SETEX</td><td>设置键值并设置过期时间</td><td>覆盖旧值，设置过期时间</td></tr><tr><td>SETNX</td><td>设置键值，仅当键不存在时</td><td>原子操作，返回设置结果</td></tr></tbody></table></div><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><strong>set命令：</strong> 适合设置不需要过期时间的键值，例如缓存一些静态数据。</li><li><strong>setex命令：</strong> 适合设置有过期时间的键值，例如实现限时优惠、验证码等功能。</li><li><strong>setnx命令：</strong> 适合实现分布式锁、唯一标识生成等需要原子性的操作。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置一个键值对，没有过期时间</span></span><br><span class="line"><span class="attribute">SET</span> name <span class="string">"张三"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个键值对，并设置过期时间为30秒</span></span><br><span class="line"><span class="attribute">SETEX</span> token <span class="number">30</span> <span class="string">"123456"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有在key不存在时才设置值</span></span><br><span class="line"><span class="attribute">SETNX</span> lock <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>选择哪个命令取决于具体的业务场景。</p><ul><li>如果需要设置一个永久有效的键值，使用 SET。</li><li>如果需要设置一个有过期时间的键值，使用 SETEX。</li><li>如果需要实现一个原子性的设置操作，使用 SETNX。</li></ul><p><strong>注意：</strong></p><ul><li>Redis 中的所有键都是字符串类型，即使存储的是数字或其他类型的数据，也会被转换为字符串。</li><li>对于复杂的业务逻辑，可以结合 Redis 的其他数据结构和命令，例如哈希、列表、集合等，来实现更灵活的功能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中&quot;&gt;&quot;和&quot;&gt;&gt;&quot;的区别</title>
      <link href="/posts/linux-add-content.html"/>
      <url>/posts/linux-add-content.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Linux中，<code>&gt;</code>符号用于将输出重定向到文件中，并会覆盖文件中原有的内容。</p><p>如果要将输出追加到文件中而不是覆盖原有内容，可以使用<code>&gt;&gt;</code>符号。</p><p>下面是两个符号的用法示例：</p><ul><li><p><code>&gt;</code>符号：覆盖原有内容。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "Hello, World!" &gt; output.txt</span><br></pre></td></tr></tbody></table></figure><p>这将创建一个名为<code>output.txt</code>的文件，并将文本<code>Hello, World!</code>写入文件。如果该文件已存在，那么原有内容将被覆盖。</p></li><li><p><code>&gt;&gt;</code>符号：追加内容。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "Hello, Again!" &gt;&gt; output.txt</span><br></pre></td></tr></tbody></table></figure><p>这会将文本<code>Hello, Again!</code>追加到<code>output.txt</code>文件的末尾，而不会覆盖原有内容。</p></li></ul><p>例如：后台运行指定程序，并将输出保存到指定文件里<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup php artisan xx xx &gt; nohup.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua笔记</title>
      <link href="/posts/lua-notes.html"/>
      <url>/posts/lua-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>进入交互式Lua：<code>lua -i</code></li><li>退出交互式Lua：<ul><li>linux：<code>ctrl+D</code>     </li><li>windows：<code>ctrl+z  或者 os.exit()</code></li></ul></li><li>Lua的数组下标是从1开始的</li></ol>]]></content>
      
      
      <categories>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中if else的优化方案</title>
      <link href="/posts/php-if-else.html"/>
      <url>/posts/php-if-else.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：在项目开发中，经常会遇到多个复杂if else的情况，下面说说这种情况的优化方案。</div><h3 id="提前return"><a href="#提前return" class="headerlink" title="提前return"></a>提前return</h3><p> 让正常流程走主干，非正常流程提前return，去除不必要的else，适用于函数参数校验。</p><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition){</span><br><span class="line">    doSomething</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!condition){</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line">doSomething</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="使用三目运算符"><a href="#使用三目运算符" class="headerlink" title="使用三目运算符"></a>使用三目运算符</h3><p> 适用于根据条件给变量赋值。</p><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition){</span><br><span class="line">    <span class="variable">$status</span> = <span class="number">1</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="variable">$status</span> = <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$status</span> = condition ? <span class="number">1</span> : <span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="合并条件表达式"><a href="#合并条件表达式" class="headerlink" title="合并条件表达式"></a>合并条件表达式</h3><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1){</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition2){</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1 || condition2){</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="使用switch-case优化"><a href="#使用switch-case优化" class="headerlink" title="使用switch case优化"></a>使用switch case优化</h3><p> php8可以使用match表达式</p><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$act</span>, <span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$act</span> == <span class="string">'sign in'</span>) {</span><br><span class="line">            <span class="built_in">self</span>::<span class="title function_ invoke__">sign</span>(<span class="variable">$userId</span>);</span><br><span class="line">        } <span class="keyword">elseif</span> (<span class="variable">$act</span> == <span class="string">'register user'</span>) {</span><br><span class="line">            <span class="built_in">self</span>::<span class="title function_ invoke__">register</span>(<span class="variable">$userId</span>);</span><br><span class="line">        } <span class="keyword">elseif</span> (<span class="variable">$act</span> == <span class="string">'change password'</span>) {</span><br><span class="line">            <span class="built_in">self</span>::<span class="title function_ invoke__">changePwd</span>(<span class="variable">$userId</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sign</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">changePwd</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$act</span>, <span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$act</span>) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'sign in'</span>:</span><br><span class="line">                <span class="built_in">self</span>::<span class="title function_ invoke__">sign</span>(<span class="variable">$userId</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'register user'</span>:</span><br><span class="line">                <span class="built_in">self</span>::<span class="title function_ invoke__">register</span>(<span class="variable">$userId</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'change password'</span>:</span><br><span class="line">                <span class="built_in">self</span>::<span class="title function_ invoke__">changePwd</span>(<span class="variable">$userId</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sign</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">changePwd</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>效果：和原来的差不多，每次新增方法后还得修改代码。</li></ul><h3 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h3><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$status</span> == <span class="number">0</span>){</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'待支付'</span>;</span><br><span class="line">}<span class="keyword">elseif</span>(<span class="variable">$status</span> == <span class="number">1</span>){</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'已支付'</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'支付失败'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$orderStatus</span> = [</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="string">'待支付'</span>,</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="string">'已支付'</span>,</span><br><span class="line">    <span class="number">2</span> =&gt; <span class="string">'支付失败'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$orderStatus</span>[<span class="variable">$status</span>];</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="表驱动法"><a href="#表驱动法" class="headerlink" title="表驱动法"></a>表驱动法</h3><ul><li>优化前<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$act</span>, <span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$act</span> == <span class="string">'sign in'</span>) {</span><br><span class="line">            <span class="built_in">self</span>::<span class="title function_ invoke__">sign</span>(<span class="variable">$userId</span>);</span><br><span class="line">        } <span class="keyword">elseif</span> (<span class="variable">$act</span> == <span class="string">'register user'</span>) {</span><br><span class="line">            <span class="built_in">self</span>::<span class="title function_ invoke__">register</span>(<span class="variable">$userId</span>);</span><br><span class="line">        } <span class="keyword">elseif</span> (<span class="variable">$act</span> == <span class="string">'change password'</span>) {</span><br><span class="line">            <span class="built_in">self</span>::<span class="title function_ invoke__">changePwd</span>(<span class="variable">$userId</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sign</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">changePwd</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>优化后<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$acts</span> = [</span><br><span class="line">        <span class="string">'sign in'</span> =&gt; <span class="string">'sign'</span>,</span><br><span class="line">        <span class="string">'register use'</span> =&gt; <span class="string">'register'</span>,</span><br><span class="line">        <span class="string">'change password'</span> =&gt; <span class="string">'changePwd'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$act</span>, <span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{</span><br><span class="line">        <span class="variable">$fun</span> = !<span class="keyword">empty</span>(<span class="variable">$act</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$acts</span>[<span class="variable">$act</span>]) ? <span class="built_in">self</span>::<span class="variable">$acts</span>[<span class="variable">$act</span>] : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$fun</span>) <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$fun</span>, <span class="variable">$userId</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sign</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">changePwd</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$userId</span></span>)</span>{}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>效果：新增方法后，只需修改配置项，不用变更其他代码。</li></ul><h3 id="策略模式-工厂方法消除if-else"><a href="#策略模式-工厂方法消除if-else" class="headerlink" title="策略模式+工厂方法消除if-else"></a>策略模式+工厂方法消除if-else</h3><p>参考：<a href="https://www.phpmianshi.com/?id=197">https://www.phpmianshi.com/?id=197</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下如何将桌面位置移到其他地方</title>
      <link href="/posts/windows-move-desktop.html"/>
      <url>/posts/windows-move-desktop.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">一般windows系统的桌面都是放在C盘里的，如果桌面内容过多就会导致C盘空间不足。为了保证电脑的干净整洁，除了需要定期清理桌面内容，其实我们还可以把桌面移动到其他地方。</div><ol><li>在”快速访问”里找到桌面<br><img src="/images/window_move_desktop_1.png" alt=""></li><li>右键”属性”，在”位置”栏点击”移动”，选择目录，我这里选择事先创建的空文件夹(D:\desktop)，然后点击”应用”<br><img src="/images/window_move_desktop_2.png" alt=""></li><li>然后点击”是”<br><img src="/images/window_move_desktop_3.png" alt=""></li><li>桌面内容开始移动，待移动完成，点击”确定”即可<br><img src="/images/window_move_desktop_4.png" alt=""></li><li>我们现在在<code>D:\desktop</code>就可以看到桌面的内容了。<br><img src="/images/window_move_desktop_5.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022-08-24杂谈</title>
      <link href="/posts/20220824-happy.html"/>
      <url>/posts/20220824-happy.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一大早被雨声惊醒了，哈哈，现在只能用汪洙的《四喜》来形容此刻的心情了——真是久旱逢甘霖呀！只是，这一场雨来得有点晚。。</p><p><img src="/images/20220824-rain.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死锁</title>
      <link href="/posts/dead-lock.html"/>
      <url>/posts/dead-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>死锁（Dead Lock）指的是两个或两个以上的运算单元（进程、线程或协程），都在等待对方释放资源，但没有一方提起释放资源，从而造成了一种阻塞的现象就称为死锁。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>死锁的产生需要满足以下 4 个条件：</p><ol><li>互斥条件：指运算单元（进程、线程或协程）对所分配到的资源具有排它性，也就是说在一段时间内某个锁资源只能被一个运算单元所占用。</li><li>请求和保持条件：指运算单元已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它运算单元占有，此时请求运算单元阻塞，但又对自己已获得的其它资源保持不放。</li><li>不可剥夺条件：指运算单元已获得的资源，在未使用完之前，不能被剥夺。</li><li>环路等待条件：指在发生死锁时，必然存在运算单元和资源的环形链，即运算单元正在等待另一个运算单元占用的资源，而对方又在等待自己占用的资源，从而造成环路等待的情况。<br>只有以上 4 个条件同时满足，才会造成死锁。</li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>死锁产生要满足以上 4 个必要条件，那么我们只需要改变其中的 1 个或多个条件就可以解决死锁的问题了。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://mp.weixin.qq.com/s/gq7w-V493OsRpezAZXzXog">https://mp.weixin.qq.com/s/gq7w-V493OsRpezAZXzXog</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>池化技术</title>
      <link href="/posts/pooling-technology.html"/>
      <url>/posts/pooling-technology.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>池化技术指的是提前准备一些资源，在需要时可以重复使用这些预先准备的资源。池化技术的优点主要有两个：提前准备和重复利用。<br>常见的池化技术的应用有：线程池、内存池、数据库连接池、HttpClient 连接池等。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 池化技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全</title>
      <link href="/posts/thread-safe.html"/>
      <url>/posts/thread-safe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>线程安全是指某个方法或某段代码，在多线程中能够正确的执行，不会出现数据不一致或数据污染的情况，我们把这样的程序称之为线程安全的，反之则为非线程安全的。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>导致线程安全问题的因素有以下 5 个：</p><ul><li>多线程抢占式执行<br>导致线程安全问题的第一大因素就是多线程抢占式执行，想象一下，如果是单线程执行，或者是多线程有序执行，那就不会出现混乱的情况了，不出现混乱的情况，自然就不会出现非线程安全的问题了。</li><li>多线程同时修改同一个变量<br>多线程只要不是同时修改同一个变量，也不会出现线程安全问题。</li><li>非原子性操作<br>原子性操作是指操作不能再被分隔就叫原子性操作。非原子性操作有很多不确定性，而这些不确定性就会造成线程安全问题问题。像 i++ 和 i— 这种操作就是非原子的，它在 +1 或 -1 之前，先要查询原变量的值，并不是一次性完成的，所以就会导致线程安全问题。</li><li>内存可见性<br>在 Java 编程中内存分为两种类型：工作内存和主内存，而工作内存使用的是 CPU 寄存器实现的，而主内存是指电脑中的内存，我们知道 CPU 寄存器的操作速度是远大于内存的操作速度的。<br>那这和线程安全有什么关系呢？这是因为在 Java 语言中，为了提高程序的执行速度，所以在操作变量时，会将变量从主内存中复制一份到工作内存，而主内存是所有线程共用的，工作内存是每个线程私有的，这就会导致一个线程已经把主内存中的公共变量修改了，而另一个线程不知道，依旧使用自己工作内存中的变量，这样就导致了问题的产生，也就导致了线程安全问题。</li><li>指令重排序<br>指令重排序是指 Java 程序为了提高程序的执行速度，所以会对一下操作进行合并和优化的操作。比如说，张三要去图书馆还书，舍友又让张三帮忙借书，那么程序的执行思维是，张三先去图书馆把自己的书还了，再去一趟图书馆帮舍友把书借回来。而指令重排序之后，把两次执行合并了，张三带着自己的书去图书馆把书先还了，再帮舍友把书借出来，整个流程就执行完了，这是正常情况下的指令重排序的好处。但是指令重排序也有“副作用”，而“副作用”是发生在多线程执行中的，还是以张三借书和帮舍友还书为例，如果张三是一件事做完再做另一件事是没有问题的（也就是单线程执行是没有问题的），但如果是多线程执行，就是两件事由多个人混合着做，比如张三在图书馆遇到了自己的多个同学，于是就把任务分派给多个人一起执行，有人借了几本书、有人借了还了几本书、有人再借了几本书、有人再借了还了几本书，执行的很混乱没有明确的目标，到最后悲剧就发生了，这就是在指令重排序带来的线程安全问题。</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决线程安全问题有以下 3 种手段：</p><ol><li>使用线程安全类，比如 AtomicInteger。</li><li>加锁排队执行<br> <code>使用 synchronized 加锁。</code><br> <code>使用 ReentrantLock 加锁。</code></li><li>使用线程本地变量 ThreadLocal。</li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://mp.weixin.qq.com/s/BKp1c1gMsXWSNy3-8-FH0Q">https://mp.weixin.qq.com/s/BKp1c1gMsXWSNy3-8-FH0Q</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中define和const的区别</title>
      <link href="/posts/php-define-const.html"/>
      <url>/posts/php-define-const.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">在PHP中，定义常量有两种方式： const、define；下面详细说下它们的区别：</div><ul><li>1、const是表达式赋值定义一个常量，而define是一个函数，它接受三个参数</li><li>2、const对定义的常量大小写敏感，而define可以通过函数的第三个参数来控制是否大小写敏感</li><li>3、const可以类中使用，define不能</li><li>4、const不能再条件语句中使用，而define可以</li><li><p>5、const在使用上比define要简单便捷，并且编译速度要比Define来得快</p></li><li><p>6、用法<br>define常放在文件的开头</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">defined</span>(<span class="string">'ENV_PREFIX'</span>) <span class="keyword">or</span> <span class="title function_ invoke__">define</span>(<span class="string">'ENV_PREFIX'</span>, <span class="string">'PHP_'</span>);</span><br></pre></td></tr></tbody></table></figure><p>const一般放在类里：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">STATUS_NORMAL</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">STATUS_FILED</span> = <span class="number">2</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> define与const </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下curl命令</title>
      <link href="/posts/linux-curl.html"/>
      <url>/posts/linux-curl.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:<span class="comment">//www.baidu.com</span></span><br></pre></td></tr></tbody></table></figure><p>上面命令向www.baidu.com发出 GET 请求，服务器返回的内容会在命令行输出。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><h4 id="d：使用-d参数向服务器发送POST请求的数据体"><a href="#d：使用-d参数向服务器发送POST请求的数据体" class="headerlink" title="-d：使用-d参数向服务器发送POST请求的数据体"></a>-d：使用-d参数向服务器发送POST请求的数据体</h4><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -d <span class="string">'login=admin＆password=123'</span> -X POST https:<span class="regexp">//</span>www.aa.com<span class="regexp">/admin/</span></span><br></pre></td></tr></tbody></table></figure><p>上方的命令向服务器发送（POST）了login=admin＆password=123。但是使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。</p><figure class="highlight scilab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -d <span class="string">'{"</span>login<span class="string">": "</span>admin<span class="string">", "</span>pass<span class="string">": "</span><span class="number">123</span><span class="string">"}'</span> -X <span class="string">'Content-Type: application/json'</span> https:<span class="comment">//www.aa.com/admin</span></span><br></pre></td></tr></tbody></table></figure><p>上方的命令添加了HTTP请求标头：Content-Type:application/json并使用-d参数向服务器发送（POST）了json数据。</p><h4 id="H：设置-HTTP头信息"><a href="#H：设置-HTTP头信息" class="headerlink" title="-H：设置 HTTP头信息"></a>-H：设置 HTTP头信息</h4><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H 'Token: xxxx' https:<span class="comment">//www.aa.com/</span></span><br></pre></td></tr></tbody></table></figure><p>使用-H参数设置Token为xxxx向服务器发送了GET请求。</p><h4 id="X：可以指定HTTP请求方法"><a href="#X：可以指定HTTP请求方法" class="headerlink" title="-X：可以指定HTTP请求方法"></a>-X：可以指定HTTP请求方法</h4><figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X <span class="keyword">POST</span> https:<span class="comment">//www.aa.com/</span></span><br></pre></td></tr></tbody></table></figure><p>上方的命令向服务器发送了POST请求。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.typeboom.com/archives/107/">https://www.typeboom.com/archives/107/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> curl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——建造者模式</title>
      <link href="/posts/builder-pattern.html"/>
      <url>/posts/builder-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。首先看下关系图：<br><img src="/images/builder-pattern-1.jpg" alt=""></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面讲解下设计模式的代码实现</p><ol><li>创建产品类<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$parts</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$part</span></span>): <span class="title">void</span></span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;parts[] = <span class="variable">$part</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>):<span class="title">void</span></span>{</span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="variable">$this</span>-&gt;parts);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>创建建造者接口<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Builder</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPartA</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPartB</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>): <span class="title">Product</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建多个建造者实现类</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder1</span> <span class="keyword">implements</span> <span class="title">Builder</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$product</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;product = <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPartA</span>(<span class="params"></span>): <span class="title">void</span></span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;product-&gt;<span class="title function_ invoke__">add</span>(<span class="string">'部件A'</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPartB</span>(<span class="params"></span>): <span class="title">void</span></span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;product-&gt;<span class="title function_ invoke__">add</span>(<span class="string">'部件B'</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>): <span class="title">Product</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;product;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder2</span> <span class="keyword">implements</span> <span class="title">Builder</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$product</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;product = <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPartA</span>(<span class="params"></span>): <span class="title">void</span></span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;product-&gt;<span class="title function_ invoke__">add</span>(<span class="string">'部件X'</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPartB</span>(<span class="params"></span>): <span class="title">void</span></span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;product-&gt;<span class="title function_ invoke__">add</span>(<span class="string">'部件Y'</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>): <span class="title">Product</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;product;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建构造器</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">construct</span>(<span class="params">Builder <span class="variable">$builder</span></span>)</span>{</span><br><span class="line">        <span class="variable">$builder</span>-&gt;<span class="title function_ invoke__">buildPartA</span>();</span><br><span class="line">        <span class="variable">$builder</span>-&gt;<span class="title function_ invoke__">buildPartB</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li><p>我们来测试下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable">$director</span> = <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line">        <span class="variable">$builder1</span> = <span class="keyword">new</span> <span class="title class_">ConcreteBuilder1</span>();</span><br><span class="line">        <span class="variable">$builder2</span> = <span class="keyword">new</span> <span class="title class_">ConcreteBuilder2</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$director</span>-&gt;<span class="title function_ invoke__">construct</span>(<span class="variable">$builder1</span>);</span><br><span class="line">        <span class="variable">$product1</span> = <span class="variable">$builder1</span>-&gt;<span class="title function_ invoke__">getResult</span>();</span><br><span class="line">        <span class="variable">$product1</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$director</span>-&gt;<span class="title function_ invoke__">construct</span>(<span class="variable">$builder2</span>);</span><br><span class="line">        <span class="variable">$product2</span> = <span class="variable">$builder2</span>-&gt;<span class="title function_ invoke__">getResult</span>();</span><br><span class="line">        <span class="variable">$product2</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>输出结果为：</p><figure class="highlight livescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span> ( [<span class="number">0</span>] =&gt; 部件A [<span class="number">1</span>] =&gt; 部件B )</span><br><span class="line"><span class="built_in">Array</span> ( [<span class="number">0</span>] =&gt; 部件X [<span class="number">1</span>] =&gt; 部件Y )</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>它与工厂模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建复合对象，多个部分。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP实现方法运行前(后)执行指定的程序</title>
      <link href="/posts/php-auto-run-func.html"/>
      <url>/posts/php-auto-run-func.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在PHP中，利用__call()，可实现方法运行前/后执行指定的程序片段。</p><p>下面演示下，在test方法执行后自动执行afterTest方法</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$method</span>)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">'no such method: '</span> . <span class="variable">$method</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="variable">$afterMethod</span> = <span class="string">'after'</span>.<span class="title function_ invoke__">ucfirst</span>(<span class="variable">$method</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$afterMethod</span>)) {</span><br><span class="line">            <span class="variable">$rs</span> = <span class="title function_ invoke__">call_user_func_array</span>([<span class="variable">$this</span>, <span class="variable">$method</span>], <span class="variable">$args</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$rs</span>[<span class="string">'code'</span>] == <span class="number">0</span>) {</span><br><span class="line">                <span class="title function_ invoke__">call_user_func_array</span>([<span class="variable">$this</span>, <span class="variable">$afterMethod</span>], <span class="variable">$rs</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$rs</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func_array</span>([<span class="variable">$this</span>, <span class="variable">$method</span>], <span class="variable">$args</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">afterTest</span>(<span class="params">...<span class="variable">$args</span></span>)</span>{</span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="variable">$args</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Class B{</span><br><span class="line">    <span class="keyword">use</span> <span class="title">A</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$id</span>,<span class="variable">$name</span></span>): <span class="title">array</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$id</span>&gt;<span class="number">10</span> ? [<span class="string">'code'</span>=&gt;<span class="number">1</span>,<span class="string">'msg'</span>=&gt;<span class="string">'ok'</span>] : [<span class="string">'code'</span>=&gt;<span class="number">0</span>,<span class="string">'msg'</span>=&gt;<span class="string">'error'</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$rs</span> = (<span class="keyword">new</span> <span class="title function_ invoke__">B</span>())-&gt;<span class="title function_ invoke__">test</span>(<span class="number">7</span>,<span class="string">'张三'</span>);</span><br></pre></td></tr></tbody></table></figure><p>输出结果为：<br><code>Array ( [0] =&gt; 0 [1] =&gt; error )</code></p><p>不难看出，这种处理方式存在以下两个缺陷：</p><ol><li>方法需设为外界不可用，protected/privated，在IDE中就无法跳转，其他人维护起来比较困难；</li><li>代码耦合度高，相互影响，不利于后期扩展。</li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中unset的一些使用</title>
      <link href="/posts/php-unset.html"/>
      <url>/posts/php-unset.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：在PHP开发中，经常使用到unset来释放掉给定的变量；但有时候会有些问题，本文记录下。</div><ul><li><p>如果需要去掉数组中的某些key，直接unset即可</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="string">'id'</span> =&gt; <span class="number">5</span>, <span class="string">'name'</span> =&gt; <span class="string">'张三'</span>, <span class="string">'status'</span> =&gt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$arr</span>[<span class="string">'status'</span>]);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);      <span class="comment">// Array ( [id] =&gt; 5 [name] =&gt; 张三 )</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>也可以去掉二位数组中指定的key</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$list</span> = [</span><br><span class="line">    [<span class="string">'id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'张三'</span>, <span class="string">'status'</span> =&gt; <span class="number">1</span>],</span><br><span class="line">    [<span class="string">'id'</span> =&gt; <span class="number">2</span>, <span class="string">'name'</span> =&gt; <span class="string">'李四'</span>, <span class="string">'status'</span> =&gt; <span class="number">0</span>],</span><br><span class="line">    [<span class="string">'id'</span> =&gt; <span class="number">3</span>, <span class="string">'name'</span> =&gt; <span class="string">'王五'</span>, <span class="string">'status'</span> =&gt; <span class="number">1</span>],</span><br><span class="line">];</span><br><span class="line"><span class="title function_ invoke__">array_walk</span>(<span class="variable">$list</span>, function (&amp;<span class="variable">$item</span>) {</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$item</span>[<span class="string">'status'</span>]);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$list</span>);</span><br><span class="line"><span class="comment">// output:  Array ( [0] =&gt; Array ( [id] =&gt; 1 [name] =&gt; 张三 ) [1] =&gt; Array ( [id] =&gt; 2 [name] =&gt; 李四 ) [2] =&gt; Array ( [id] =&gt; 3 [name] =&gt; 王五 ) )</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>下面试下去掉一维数组中的空值</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span> = [<span class="string">'test'</span>, <span class="string">'haha'</span>, <span class="string">''</span>, <span class="string">'hello'</span>, <span class="literal">null</span>, <span class="string">'good'</span>];</span><br><span class="line"><span class="title function_ invoke__">array_walk</span>(<span class="variable">$data</span>, function (&amp;<span class="variable">$item</span>) {</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$item</span>) <span class="keyword">unset</span>(<span class="variable">$item</span>);</span><br><span class="line">});</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// output: Array ( [0] =&gt; test [1] =&gt; haha [2] =&gt; [3] =&gt; hello [4] =&gt; [5] =&gt; good )</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>上面的代码没有达到预期的效果，那我们修改下试试</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span> = [<span class="string">'test'</span>, <span class="string">'haha'</span>, <span class="string">''</span>, <span class="string">'hello'</span>, <span class="literal">null</span>, <span class="string">'good'</span>, <span class="string">''</span>];</span><br><span class="line"><span class="title function_ invoke__">array_walk</span>(<span class="variable">$data</span>, function (<span class="variable">$item</span>, <span class="variable">$key</span>) <span class="keyword">use</span> (&amp;$<span class="title">data</span>) {</span><br><span class="line">    <span class="title">if</span> (!$<span class="title">item</span>) <span class="title">unset</span>($<span class="title">data</span>[$<span class="title">key</span>]);</span><br><span class="line">});</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// output: Array ( [0] =&gt; test [1] =&gt; haha [3] =&gt; hello [5] =&gt; good )</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>虽然达到了预期，但PHP给我们提供了更优雅的解决办法</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span> = [<span class="string">'test'</span>, <span class="string">'haha'</span>, <span class="string">''</span>, <span class="string">'hello'</span>, <span class="literal">null</span>, <span class="string">'good'</span>, <span class="string">''</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_filter</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="comment">// output: Array ( [0] =&gt; test [1] =&gt; haha [3] =&gt; hello [5] =&gt; good )</span></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中，通过&amp;改变变量的值，效率如何</title>
      <link href="/posts/php-assignment.html"/>
      <url>/posts/php-assignment.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在PHP中，通过&amp;改变变量的值，效率如何呢，下面来测试一下。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="string">'id'</span> =&gt; <span class="literal">null</span>, <span class="string">'name'</span> =&gt; <span class="string">'test'</span>, <span class="string">'age'</span> =&gt; <span class="literal">null</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$time1</span> = <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable">$tmp</span> = &amp;<span class="variable">$arr</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">100000000</span>; <span class="variable">$i</span>++) {</span><br><span class="line">    <span class="variable">$tmp</span>[<span class="string">'id'</span>] = <span class="variable">$i</span>;</span><br><span class="line">}</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>); </span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>) - <span class="variable">$time1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="variable">$time2</span> = <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable">$tmp1</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">100000000</span>; <span class="variable">$i</span>++) {</span><br><span class="line">    <span class="variable">$tmp1</span> = <span class="variable">$i</span>;</span><br><span class="line">}</span><br><span class="line"><span class="variable">$tmp</span>[<span class="string">'id'</span>] = <span class="variable">$tmp1</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>) - <span class="variable">$time2</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>输出结果为：<code><br>Array ( [id] =&gt; 99999999 [name] =&gt; test [age] =&gt; )<br>2.0506858825684<br>Array ( [id] =&gt; 99999999 [name] =&gt; test [age] =&gt; )<br>1.1653530597687</code></p><p>不难看出，两次的处理结果是一样的，但通过&amp;多次改变值，效率较低。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php中，this、self、static的区别</title>
      <link href="/posts/php-self-static.html"/>
      <url>/posts/php-self-static.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>this指当前类，不能用于静态成员函数中，使用形式：$this-&gt;</li><li>self是对静态成员函数/变量的访问，使用形式：self::</li><li>static和self很接近，唯一区别在于：self调用的是本身代码片段的这个类；而static调用的是从堆内存中提取出来的，即访问的是当前实例化的那个类。</li></ul><p>下面看下测试代码：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">'Jams'</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$age</span> = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">get_called_class</span>() . <span class="string">'==&gt;'</span> . <span class="variable language_">$this</span>-&gt;name . <span class="string">'==&gt;'</span> . <span class="variable language_">$this</span>::<span class="variable">$age</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">get_called_class</span>() . <span class="string">'==&gt;'</span> . <span class="built_in">self</span>::<span class="variable">$age</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">get_called_class</span>() . <span class="string">'==&gt;'</span> . <span class="built_in">static</span>::<span class="variable">$age</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">'Kiv'</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$age</span> = <span class="number">20</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title function_ invoke__">B</span>())-&gt;<span class="title function_ invoke__">start</span>();</span><br><span class="line">B::<span class="title function_ invoke__">getAge</span>();</span><br><span class="line">B::<span class="title function_ invoke__">getInfo</span>();</span><br></pre></td></tr></tbody></table></figure><p>输出结果为：<code><br>B==&gt;Kiv==&gt;20<br>B==&gt;26<br>B==&gt;20</code></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中isset与array_key_exists的性能对比</title>
      <link href="/posts/php-isset-array_key_exists.html"/>
      <url>/posts/php-isset-array_key_exists.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：在开发中，之前判断数组中的键是否存在，我一直使用isset；今天看到有同事大量使用array_key_exists，闲来没事就测试了一下它们的性能。</div><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="string">'id'</span> =&gt; <span class="number">3242</span>, <span class="string">'name'</span> =&gt; <span class="string">'test'</span>, <span class="string">'age'</span> =&gt; <span class="literal">null</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$time1</span> = <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">100000000</span>; <span class="variable">$i</span>++) {</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">'age'</span>]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>) - <span class="variable">$time1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="variable">$time2</span> = <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">100000000</span>; <span class="variable">$i</span>++) {</span><br><span class="line">    <span class="variable">$tmp1</span> = <span class="title function_ invoke__">array_key_exists</span>(<span class="string">'age'</span>, <span class="variable">$arr</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>) - <span class="variable">$time2</span>;</span><br></pre></td></tr></tbody></table></figure><p>上面的代码运行结果为：<code><br>2.1061670780182<br>3.1671521663666</code></p><p>经测试：isset的效率要高于array_key_exists。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中...的用法</title>
      <link href="/posts/php-uncertain-params.html"/>
      <url>/posts/php-uncertain-params.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>如果…在函数的定义中，则表示传入多个参数(个数不定)将合并成一个数组(索引数组)<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...<span class="variable">$numbers</span></span>)</span>{</span><br><span class="line">    <span class="variable">$sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$numbers</span> <span class="keyword">as</span> <span class="variable">$number</span>){</span><br><span class="line">        <span class="variable">$sum</span> += <span class="variable">$number</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$sum</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);    <span class="comment">//15</span></span><br></pre></td></tr></tbody></table></figure></li><li>如果…在调用函数的语句中，则表示传入的数组(索引数组)将拆分成多个参数<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = [<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">add</span>(...<span class="variable">$arr</span>);      <span class="comment">//5</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">add</span>(...[<span class="number">1</span>]));  <span class="comment">//没有任何输出</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">add</span>(...[<span class="string">'a'</span>=&gt;<span class="number">1</span>,<span class="string">'b'</span>=&gt;<span class="number">2</span>]));  <span class="comment">//没有任何输出</span></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 中rule规则</title>
      <link href="/posts/thinkphp-rule.html"/>
      <url>/posts/thinkphp-rule.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>rule规则<br></p><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">\think\Validate</span></span>{</span><br><span class="line"><span class="keyword">protected</span> $rule = [</span><br><span class="line">['mobile|手机号', 'require|length:<span class="number">11</span>', '手机号必填|手机号格式不正确'],</span><br><span class="line">…</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> $scene = [</span><br><span class="line">'add'=&gt;['mobile','name'…],</span><br><span class="line">…</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p><p>添加自定义校验<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$rule</span> = [</span><br><span class="line">[<span class="string">'anchor_id|关联账号'</span>, <span class="string">'require|checkAnchor'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkAnchor</span>(<span class="params"><span class="variable">$value</span></span>)</span>{</span><br><span class="line">…</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$error</span> = <span class="variable">$server</span>-&gt;<span class="title function_ invoke__">getError</span>()) {</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$error</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> $msg</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$msg</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的JSON</title>
      <link href="/posts/mysql-json.html"/>
      <url>/posts/mysql-json.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">以MySQL为代表的关系型数据库，5.7.8之前没有JSON这种数据类型，只能以varchar或者text形式变相的支持JSON，存取键值极不方便；5.7.8开始有JSON数据类型，有专门语法支持键值的存取，易用性得到很大提升。下面说说json类型的使用。</div><h3 id="json类型的使用"><a href="#json类型的使用" class="headerlink" title="json类型的使用"></a>json类型的使用</h3><ol><li>先看下版本号，确定是否支持json类型<br><img src="/images/mysql_json_1.png" alt=""></li><li>创建表user，其中extdata字段为json类型<br><img src="/images/mysql_json_2.png" alt=""></li><li>往表user里插入一条数据<br><img src="/images/mysql_json_3.png" alt=""></li><li>设置extdata字段的值<br><img src="/images/mysql_json_4.png" alt=""></li><li>查看数据<br><img src="/images/mysql_json_5.png" alt=""></li><li>查看json字段的指定项：<code>json_extract(字段名,'$.xx')</code><br><img src="/images/mysql_json_6.png" alt=""></li><li>explain看下<br><img src="/images/mysql_json_7.png" alt=""></li><li>以json字段中的指定项来添加字段<br><img src="/images/mysql_json_8.png" alt=""></li><li>派生字段添加索引<br><img src="/images/mysql_json_9.png" alt=""></li></ol><h3 id="json函数与find-in-set对比"><a href="#json函数与find-in-set对比" class="headerlink" title="json函数与find_in_set对比"></a>json函数与find_in_set对比</h3><ol><li>新建表test<figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test (</span><br><span class="line">id <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">member_ids <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">manager_ids <span class="type">json</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY KEY</span> (id)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">50159</span> <span class="keyword">DEFAULT</span> CHARSET=utf8mb4;</span><br></pre></td></tr></tbody></table></figure></li><li><p>并插入五万条数据<br><img src="/images/mysql_json_10.png" alt=""><br><img src="/images/mysql_json_11.png" alt=""></p></li><li><p>对比查询效率</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE * <span class="function"><span class="keyword">from</span> test <span class="keyword">where</span> <span class="title">FIND_IN_SET</span>(<span class="params"><span class="number">2</span>,member_ids</span>)</span>;</span><br><span class="line"><span class="keyword">select</span> SQL_NO_CACHE * <span class="function"><span class="keyword">from</span> test <span class="keyword">where</span> <span class="title">json_contains</span>(<span class="params">manager_ids,<span class="string">'2'</span></span>)</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/mysql_json_12.png" alt=""><br><img src="/images/mysql_json_13.png" alt=""><br><img src="/images/mysql_json_14.png" alt=""><br>find_in_set稳定性不好，时间在0.09s到0.69s之间变动<br>json_contains稳定在0.14s左右，第二个字段必须是字符串<br>如果连表的话，要使用cast(b.id as char)</p><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">a.id,</span><br><span class="line">a.NAME,</span><br><span class="line">group_concat( <span class="keyword">DISTINCT</span> ( b.NAME ) <span class="keyword">ORDER</span> <span class="keyword">BY</span> b.id SEPARATOR <span class="string">'、'</span> ) managerNames</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span> json_contains( a.manager_ids, <span class="keyword">cast</span>(b.id <span class="keyword">as</span> char) )</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="symbol">`a`</span>.<span class="symbol">`id`</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line"><span class="symbol">`a`</span>.<span class="symbol">`id`</span> <span class="keyword">ASC</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><p>综上，对于多id存储，还是使用逗号分隔的字符串会好一些，json数据使用json类型来存储会更方便。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——中介者模式</title>
      <link href="/posts/mediator-pattern.html"/>
      <url>/posts/mediator-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下中介者模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createMediator</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">workAll</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMediator</span> <span class="keyword">implements</span> <span class="title">Mediator</span></span>{</span><br><span class="line">    <span class="keyword">private</span> User <span class="variable">$user1</span>,<span class="variable">$user2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser1</span>(<span class="params"></span>): <span class="title">User</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user1;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser2</span>(<span class="params"></span>): <span class="title">User</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createMediator</span>(<span class="params"></span>): <span class="title">void</span></span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user1 = <span class="keyword">new</span> <span class="title class_">User1</span>(<span class="variable language_">$this</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user2 = <span class="keyword">new</span> <span class="title class_">User2</span>(<span class="variable language_">$this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">workAll</span>(<span class="params"></span>): <span class="title">void</span></span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user1-&gt;<span class="title function_ invoke__">work</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user2-&gt;<span class="title function_ invoke__">work</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Mediator <span class="variable">$mediator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Mediator <span class="variable">$mediator</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mediator = <span class="variable">$mediator</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMediator</span>(<span class="params"></span>): <span class="title">Mediator</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;mediator;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>):<span class="title">void</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User1</span> <span class="keyword">extends</span> <span class="title">User</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Mediator <span class="variable">$mediator</span></span>)</span>{</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$mediator</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>): <span class="title">void</span></span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"user1 exe!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User2</span> <span class="keyword">extends</span> <span class="title">User</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Mediator <span class="variable">$mediator</span></span>)</span>{</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$mediator</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>): <span class="title">void</span></span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"user2 exe!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$mediator</span> = <span class="keyword">new</span> <span class="title class_">MyMediator</span>();</span><br><span class="line"><span class="variable">$mediator</span>-&gt;<span class="title function_ invoke__">createMediator</span>();</span><br><span class="line"><span class="variable">$mediator</span>-&gt;<span class="title function_ invoke__">workAll</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * user1 exe!</span></span><br><span class="line"><span class="comment"> * user2 exe!</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——享元模式</title>
      <link href="/posts/flyweight-pattern.html"/>
      <url>/posts/flyweight-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。<br>  FlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象，FlyWeight是超类。一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下享元模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">array</span> <span class="variable">$pool</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$server</span> = <span class="string">'127.0.0.1'</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$username</span> = <span class="string">'root'</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$password</span> = <span class="string">'root'</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$database</span> = <span class="string">'test'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="variable">$poolSize</span> = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> ?ConnectionPool <span class="variable">$instance</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$conn</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pool = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable language_">$this</span>-&gt;poolSize; <span class="variable">$i</span>++){</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="variable">$mysqlConn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$this</span>-&gt;server, <span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable">$mysqlConn</span>)  <span class="keyword">die</span>(<span class="string">"connect error"</span>);</span><br><span class="line">                <span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$mysqlConn</span>,<span class="variable">$this</span>-&gt;database);</span><br><span class="line">                <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$mysqlConn</span>,<span class="string">'SET NAMES utf8'</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;pool[] = <span class="variable">$mysqlConn</span>;</span><br><span class="line">            }<span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>){</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"connect error"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConnection</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;pool) &gt; <span class="number">0</span>){</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;conn = <span class="title function_ invoke__">array_shift</span>(<span class="variable">$this</span>-&gt;pool);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;conn;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$connPool</span> = <span class="keyword">new</span> <span class="title class_">ConnectionPool</span>();</span><br><span class="line"><span class="variable">$conn1</span> = <span class="variable">$connPool</span>-&gt;<span class="title function_ invoke__">getConnection</span>();</span><br><span class="line"><span class="variable">$conn2</span> = <span class="variable">$connPool</span>-&gt;<span class="title function_ invoke__">getConnection</span>();</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$conn1</span>===<span class="variable">$conn2</span>);      <span class="comment">//false</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——代理模式</title>
      <link href="/posts/proxy-pattern.html"/>
      <url>/posts/proxy-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操作，比如我们在租房子的时候回去找中介，为什么呢？因为你对该地区房屋的信息掌握的不够全面，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需要请律师，因为律师在法律方面有专长，可以替我们进行操作，表达我们的想法。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下代理模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建接口Sourceable</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类Source实现接口Sourceable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"the original method!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类Proxy实现Sourceable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Source <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="keyword">new</span> <span class="title class_">Source</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">before</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source-&gt;<span class="title function_ invoke__">method</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">after</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">before</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"before proxy!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">after</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"after proxy!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$source</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>();</span><br><span class="line"><span class="variable">$source</span>-&gt;<span class="title function_ invoke__">method</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * before proxy!</span></span><br><span class="line"><span class="comment"> * the original method!</span></span><br><span class="line"><span class="comment"> * after proxy!</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：<br>    1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。<br>    2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——单例模式</title>
      <link href="/posts/singleton-pattern.html"/>
      <url>/posts/singleton-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。<br>单例模式适用于经常被访问的对象，或是创建和销毁需要调用大量资源和时间的对象，使用单例模式可以避免频繁创建和销毁对象。单例模式的常用实现方法有 4 种：饿汉模式、懒汉模式、静态内部类和枚举。从写法的简洁性、线程安全性和代码的易懂性等方面综合来看，博主比较推荐使用枚举或懒汉模式来实现单例模式。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下单例模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="comment">//持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> ?Singleton <span class="variable">$instance</span>=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止被实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止被克隆</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>): <span class="title">Singleton</span></span>{</span><br><span class="line">        <span class="comment">//if (!self::$instance){    有线程安全问题</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>){</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果使用<code>if (!self::$instance){ </code>会有线程安全问题</p><ul><li>a. A、B线程同时进入了getInstance </li><li>b. A首先进入if判断，由于instance为null，所以它执行self::$instance = new self();</li><li>c. 由于内存的优化机制，会先划出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时内存没有开始初始化这个实例），然后A离开了if代码块。</li><li>d. B进入if判断，由于instance此时不是null，因此它马上离开了if代码块并将结果返回给调用该方法的程序。</li><li>e. 此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。<br>改为<code>if (!self::$instance instanceof self){</code>即可</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>单例模式有几个好处：<br>    1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。<br>    2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。<br>    3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——原型模式</title>
      <link href="/posts/prototype-pattern.html"/>
      <url>/posts/prototype-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。<br>  <img src="/images/prototype-pattern-1.png" alt=""></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下原型模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个原型</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v</span> = <span class="string">'clone'</span>.PHP_EOL;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'create'</span>.PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype1</span> <span class="keyword">extends</span> <span class="title">Prototype</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"><span class="variable">$param</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v = <span class="variable">$param</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype2</span> <span class="keyword">extends</span> <span class="title">Prototype</span></span>{</span><br><span class="line">    <span class="comment">//当外部使用clone关键字进行对象克隆时，直接就会进入这个魔术方法中。</span></span><br><span class="line">    <span class="comment">//在这个魔术方法里面我们可以对属性进行处理，特别是针对引用属性进行一些独特的处理。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v = <span class="string">'clone 2'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">ConcretePrototype1</span>();</span><br><span class="line"><span class="variable">$p</span>-&gt;<span class="title function_ invoke__">init</span>(<span class="string">'hello'</span>);</span><br><span class="line"><span class="variable">$p1</span> = <span class="keyword">clone</span> <span class="variable">$p</span>;    <span class="comment">// ConcretePrototype1的__construct不会被执行</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$p</span>-&gt;v.<span class="string">'=='</span>.<span class="variable">$p1</span>-&gt;v;     <span class="comment">// output: create hello==hello</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">ConcretePrototype2</span>();</span><br><span class="line"><span class="variable">$p2</span> = <span class="keyword">clone</span> <span class="variable">$p</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$p</span>-&gt;v.<span class="string">'=='</span>.<span class="variable">$p2</span>-&gt;v;     <span class="comment">// output: create clone ==clone 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</span></span><br><span class="line"><span class="comment">// 深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  特点：减少创建对象时的开销</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——命令模式</title>
      <link href="/posts/command-pattern.html"/>
      <url>/posts/command-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下命令模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建接口Command</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exe</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"command received!"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类MyCommand实现接口Command</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Receiver <span class="variable">$receiver</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Receiver <span class="variable">$receiver</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;receiver = <span class="variable">$receiver</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exe</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;receiver-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Command <span class="variable">$command</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Command <span class="variable">$command</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;command = <span class="variable">$command</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;command-&gt;<span class="title function_ invoke__">exe</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$receiver</span> = <span class="keyword">new</span> <span class="title class_">Receiver</span>();</span><br><span class="line"><span class="variable">$cmd</span> = <span class="keyword">new</span> <span class="title class_">MyCommand</span>(<span class="variable">$receiver</span>);</span><br><span class="line"><span class="variable">$invoker</span> = <span class="keyword">new</span> <span class="title class_">Invoker</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$invoker</span>-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line"><span class="comment">// output:  command received!</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——备忘录模式</title>
      <link href="/posts/memento-pattern.html"/>
      <url>/posts/memento-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下备忘录模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Original</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$value</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;value = <span class="variable">$value</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>): <span class="title">string</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setValue</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$value</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;value = <span class="variable">$value</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createMemento</span>(<span class="params"></span>): <span class="title">Memento</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(<span class="variable language_">$this</span>-&gt;value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">restoreMemento</span>(<span class="params">Memento <span class="variable">$memento</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;value = <span class="variable">$memento</span>-&gt;<span class="title function_ invoke__">getValue</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$value</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;value = <span class="variable">$value</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>): <span class="title">string</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setValue</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$value</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;value = <span class="variable">$value</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Memento <span class="variable">$memento</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Memento <span class="variable">$memento</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;memento = <span class="variable">$memento</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMemento</span>(<span class="params"></span>): <span class="title">Memento</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;memento;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMemento</span>(<span class="params">Memento <span class="variable">$memento</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;memento = <span class="variable">$memento</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$origi</span> = <span class="keyword">new</span> <span class="title class_">Original</span>(<span class="string">"egg"</span>);</span><br><span class="line"><span class="variable">$storage</span> = <span class="keyword">new</span> <span class="title class_">Storage</span>(<span class="variable">$origi</span>-&gt;<span class="title function_ invoke__">createMemento</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"初始化状态为："</span> . <span class="variable">$origi</span>-&gt;<span class="title function_ invoke__">getValue</span>() . PHP_EOL;</span><br><span class="line"><span class="variable">$origi</span>-&gt;<span class="title function_ invoke__">setValue</span>(<span class="string">"niu"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"修改后的状态为："</span> . <span class="variable">$origi</span>-&gt;<span class="title function_ invoke__">getValue</span>() . PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="variable">$origi</span>-&gt;<span class="title function_ invoke__">restoreMemento</span>(<span class="variable">$storage</span>-&gt;<span class="title function_ invoke__">getMemento</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"恢复后的状态为："</span> . <span class="variable">$origi</span>-&gt;<span class="title function_ invoke__">getValue</span>() . PHP_EOL;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * 初始化状态为：egg</span></span><br><span class="line"><span class="comment"> * 修改后的状态为：niu</span></span><br><span class="line"><span class="comment"> * 恢复后的状态为：egg</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——外观模式</title>
      <link href="/posts/facade-pattern.html"/>
      <url>/posts/facade-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口，看下类图：（我们以一个计算机的启动过程为例）</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下外观模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">startup</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"cpu startup!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shutdown</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"cpu shutdown!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">startup</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"memory startup!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shutdown</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"memory shutdown!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Disk</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">startup</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"disk startup!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shutdown</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"disk shutdown!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>{</span><br><span class="line">    <span class="keyword">private</span> CPU <span class="variable">$cpu</span>;</span><br><span class="line">    <span class="keyword">private</span> Memory <span class="variable">$memory</span>;</span><br><span class="line">    <span class="keyword">private</span> Disk <span class="variable">$disk</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cpu = <span class="keyword">new</span> <span class="title function_ invoke__">CPU</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;memory = <span class="keyword">new</span> <span class="title class_">Memory</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;disk = <span class="keyword">new</span> <span class="title class_">Disk</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">startup</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"start the computer!"</span> . PHP_EOL;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cpu-&gt;<span class="title function_ invoke__">startup</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;memory-&gt;<span class="title function_ invoke__">startup</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;disk-&gt;<span class="title function_ invoke__">startup</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"start computer finished!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shutdown</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"begin to close th computer!"</span> . PHP_EOL;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cpu-&gt;<span class="title function_ invoke__">shutdown</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;memory-&gt;<span class="title function_ invoke__">shutdown</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;disk-&gt;<span class="title function_ invoke__">shutdown</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"computer closed!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="variable">$computer</span> = <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line"><span class="variable">$computer</span>-&gt;<span class="title function_ invoke__">startup</span>();</span><br><span class="line"><span class="variable">$computer</span>-&gt;<span class="title function_ invoke__">shutdown</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">start the computer!</span></span><br><span class="line"><span class="comment">cpu startup!</span></span><br><span class="line"><span class="comment">memory startup!</span></span><br><span class="line"><span class="comment">disk startup!</span></span><br><span class="line"><span class="comment">start computer finished!</span></span><br><span class="line"><span class="comment">begin to close th computer!</span></span><br><span class="line"><span class="comment">cpu shutdown!</span></span><br><span class="line"><span class="comment">memory shutdown!</span></span><br><span class="line"><span class="comment">disk shutdown!</span></span><br><span class="line"><span class="comment">computer closed!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观模式！</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——工厂方法模式</title>
      <link href="/posts/factory-method-pattern.html"/>
      <url>/posts/factory-method-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  创建一个工厂接口和创建多个工厂实现类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下工厂方法模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建公共接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sender</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"mail send"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"sms send"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂类接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Provider</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">produce</span>(<span class="params"></span>): <span class="title">Sender</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendMailFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">produce</span>(<span class="params"></span>): <span class="title">Sender</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailSender</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendSmsFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">produce</span>(<span class="params"></span>): <span class="title">Sender</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsSender</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="variable">$sender</span> = (<span class="keyword">new</span> <span class="title class_">SendMailFactory</span>())-&gt;<span class="title function_ invoke__">produce</span>();</span><br><span class="line"><span class="variable">$sender</span>-&gt;<span class="title function_ invoke__">send</span>();</span><br><span class="line"><span class="comment">// output: mail send</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  优点：扩展性好。如果需要添加个企业微信推送，只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——桥接模式</title>
      <link href="/posts/bridge-pattern.html"/>
      <url>/posts/bridge-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下桥接模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SourceSub1</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"this is first sub!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SourceSub2</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"this is the second sub!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个桥，持有Sourceable的一个实例</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bridge</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Sourceable <span class="variable">$source</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source-&gt;<span class="title function_ invoke__">method</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMSource</span>(<span class="params"></span>): <span class="title">Sourceable</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSource</span>(<span class="params">Sourceable <span class="variable">$source</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$source</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBridge</span> <span class="keyword">extends</span> <span class="title">Bridge</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getMSource</span>()-&gt;<span class="title function_ invoke__">method</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$bridge</span> = <span class="keyword">new</span> <span class="title class_">MyBridge</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$source1</span> = <span class="keyword">new</span> <span class="title class_">SourceSub1</span>();</span><br><span class="line"><span class="variable">$bridge</span>-&gt;<span class="title function_ invoke__">setSource</span>(<span class="variable">$source1</span>);</span><br><span class="line"><span class="variable">$bridge</span>-&gt;<span class="title function_ invoke__">method</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$source2</span> = <span class="keyword">new</span> <span class="title class_">SourceSub2</span>();</span><br><span class="line"><span class="variable">$bridge</span>-&gt;<span class="title function_ invoke__">setSource</span>(<span class="variable">$source2</span>);</span><br><span class="line"><span class="variable">$bridge</span>-&gt;<span class="title function_ invoke__">method</span>();</span><br><span class="line"><span class="comment">// 这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment">this is first sub!</span></span><br><span class="line"><span class="comment">this is the second sub!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——模板方法模式</title>
      <link href="/posts/template-method-pattern.html"/>
      <url>/posts/template-method-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下模板方法模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$exp</span>,<span class="keyword">string</span> <span class="variable">$opt</span></span>)</span>{</span><br><span class="line">        <span class="variable">$arr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">split</span>(<span class="variable">$exp</span>,<span class="variable">$opt</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">cal</span>(<span class="variable">$arr</span>[<span class="number">0</span>],<span class="variable">$arr</span>[<span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cal</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$num1</span>, <span class="keyword">int</span> <span class="variable">$num2</span></span>): <span class="title">int</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">split</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$exp</span>, <span class="keyword">string</span> <span class="variable">$opt</span></span>): <span class="title">array</span></span>{</span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">explode</span>(<span class="variable">$opt</span>,<span class="variable">$exp</span>);</span><br><span class="line">        <span class="keyword">return</span> [<span class="title function_ invoke__">intval</span>(<span class="variable">$arr</span>[<span class="number">0</span>]),<span class="title function_ invoke__">intval</span>(<span class="variable">$arr</span>[<span class="number">1</span>])];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cal</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$num1</span>, <span class="keyword">int</span> <span class="variable">$num2</span></span>): <span class="title">int</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$num1</span> + <span class="variable">$num2</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$exp</span> = <span class="string">'2+8'</span>;</span><br><span class="line"><span class="variable">$cal</span> = <span class="keyword">new</span> <span class="title class_">Plus</span>();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$cal</span>-&gt;<span class="title function_ invoke__">calculate</span>(<span class="variable">$exp</span>, <span class="string">'+'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"><span class="comment">// output:  10</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——状态模式</title>
      <link href="/posts/state-pattern.html"/>
      <url>/posts/state-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下状态模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>): <span class="title">string</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setValue</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$value</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;value = <span class="variable">$value</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"execute the first opt!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"execute the second opt!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span>{</span><br><span class="line">    <span class="keyword">private</span> State <span class="variable">$state</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">State <span class="variable">$state</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="variable">$state</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>): <span class="title">State</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;state;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">State <span class="variable">$state</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="variable">$state</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;state-&gt;<span class="title function_ invoke__">getValue</span>() == <span class="string">'state1'</span>){</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;state-&gt;<span class="title function_ invoke__">method1</span>();;</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;state-&gt;<span class="title function_ invoke__">getValue</span>() == <span class="string">'state2'</span>){</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;state-&gt;<span class="title function_ invoke__">method2</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$state</span> = <span class="keyword">new</span> <span class="title class_">State</span>();</span><br><span class="line"><span class="variable">$context</span> = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="variable">$state</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$state</span>-&gt;<span class="title function_ invoke__">setValue</span>(<span class="string">'state1'</span>);</span><br><span class="line"><span class="variable">$context</span>-&gt;<span class="title function_ invoke__">method</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$state</span>-&gt;<span class="title function_ invoke__">setValue</span>(<span class="string">'state2'</span>);</span><br><span class="line"><span class="variable">$context</span>-&gt;<span class="title function_ invoke__">method</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * execute the first opt!</span></span><br><span class="line"><span class="comment"> * execute the second opt!</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——策略模式</title>
      <link href="/posts/strategy-pattern.html"/>
      <url>/posts/strategy-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下策略模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICalculator</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$exp</span></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">split</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$exp</span>,<span class="keyword">string</span> <span class="variable">$opt</span></span>): <span class="title">array</span></span>{</span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">explode</span>(<span class="variable">$opt</span>,<span class="variable">$exp</span>);</span><br><span class="line">        <span class="keyword">return</span> [<span class="title function_ invoke__">intval</span>(<span class="variable">$arr</span>[<span class="number">0</span>]),<span class="title function_ invoke__">intval</span>(<span class="variable">$arr</span>[<span class="number">1</span>])];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$exp</span></span>)</span>{</span><br><span class="line">        <span class="variable">$arr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">split</span>(<span class="variable">$exp</span>,<span class="string">'+'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>[<span class="number">0</span>] + <span class="variable">$arr</span>[<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$exp</span></span>)</span>{</span><br><span class="line">        <span class="variable">$arr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">split</span>(<span class="variable">$exp</span>, <span class="string">'-'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>[<span class="number">0</span>] - <span class="variable">$arr</span>[<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Multiply</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$exp</span></span>)</span>{</span><br><span class="line">        <span class="variable">$arr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">split</span>(<span class="variable">$exp</span>, <span class="string">'*'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>[<span class="number">0</span>] * <span class="variable">$arr</span>[<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$exp</span> = <span class="string">'2+8'</span>;</span><br><span class="line"><span class="variable">$cal</span> = <span class="keyword">new</span> <span class="title class_">Plus</span>();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$cal</span>-&gt;<span class="title function_ invoke__">calculate</span>(<span class="variable">$exp</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>; </span><br><span class="line"><span class="comment">// output:  10</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——简单工厂方法模式</title>
      <link href="/posts/simple-factory-pattern.html"/>
      <url>/posts/simple-factory-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。<br>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看下关系图：<br><img src="/images/simple-factory-pattern-1.jpg" alt=""></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面讲解下静态工厂方法模式的代码实现</p><ol><li>创建公共接口<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sender</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>创建实现类<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"mail send"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"sms send"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>创建工厂类<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">produceMail</span>(<span class="params"></span>): <span class="title">Sender</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MailSender</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">produceSms</span>(<span class="params"></span>): <span class="title">Sender</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SmsSender</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li><p>我们来测试下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable">$sender</span> = <span class="title class_">SendFactory</span>::<span class="title function_ invoke__">produceSms</span>();</span><br><span class="line">        <span class="variable">$sender</span>-&gt;<span class="title function_ invoke__">send</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>输出结果为：</p><figure class="highlight autoit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sms <span class="built_in">send</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>缺陷：类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——组合模式</title>
      <link href="/posts/composite-pattern.html"/>
      <url>/posts/composite-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  又叫部分-整体模式,在处理类似树形结构的问题时比较方便。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下组合模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="variable">$parent</span>;</span><br><span class="line">    <span class="keyword">private</span> ?TreeNode <span class="variable">$children</span>=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getParent</span>(<span class="params"></span>): <span class="title">TreeNode</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setParent</span>(<span class="params">TreeNode <span class="variable">$parent</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="variable">$parent</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加子节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">TreeNode <span class="variable">$node</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;children = <span class="variable">$node</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//删除子节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">TreeNode <span class="variable">$node</span></span>)</span>{</span><br><span class="line">        <span class="comment">//unset($this-&gt;children-&gt;{$node});</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;children-&gt;<span class="title function_ invoke__">remove</span>(<span class="variable">$node</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//取得子节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params"></span>): ?<span class="title">TreeNode</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;children;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="variable">$root</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">'A'</span>);</span><br><span class="line"><span class="variable">$nodeB</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">'B'</span>);</span><br><span class="line"><span class="variable">$nodeC</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="string">'C'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$nodeB</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$nodeC</span>);</span><br><span class="line"><span class="variable">$root</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$nodeB</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$root</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"build the tree finished!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">TreeNode Object</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">[name:TreeNode:private] =&gt; A</span></span><br><span class="line"><span class="comment">[children:TreeNode:private] =&gt; TreeNode Object</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">[name:TreeNode:private] =&gt; B</span></span><br><span class="line"><span class="comment">[children:TreeNode:private] =&gt; TreeNode Object</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">[name:TreeNode:private] =&gt; C</span></span><br><span class="line"><span class="comment">[children:TreeNode:private] =&gt;</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">build the tree finished!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  使用场景：将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——装饰模式</title>
      <link href="/posts/decorator-pattern.html"/>
      <url>/posts/decorator-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下装饰模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"the original method!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Sourceable <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Sourceable <span class="variable">$source</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$source</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"before decorator"</span> . PHP_EOL;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source-&gt;<span class="title function_ invoke__">method</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"after decorator"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="variable">$source</span> = <span class="keyword">new</span> <span class="title class_">Source</span>();</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Decorator</span>(<span class="variable">$source</span>);</span><br><span class="line"><span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">method</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">before decorator</span></span><br><span class="line"><span class="comment">the original method!</span></span><br><span class="line"><span class="comment">after decorator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  装饰器模式的应用场景：<br>    1、需要扩展一个类的功能。<br>    2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）<br>  缺点：产生过多相似的对象，不易排错！</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——观察者模式</title>
      <link href="/posts/observer-pattern.html"/>
      <url>/posts/observer-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下观察者模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer1</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"observer1 has received!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer2</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"observer2 has received!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">Observer <span class="variable">$observer</span></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">Observer <span class="variable">$observer</span></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notifyObservers</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$vector</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">Observer <span class="variable">$observer</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;vector[] = <span class="variable">$observer</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">Observer <span class="variable">$observer</span></span>)</span>{</span><br><span class="line">        <span class="variable">$index</span> = <span class="title function_ invoke__">array_search</span>(<span class="variable">$observer</span>,<span class="variable">$this</span>-&gt;vector);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;vector[<span class="variable">$index</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notifyObservers</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;vector <span class="keyword">as</span> <span class="variable">$value</span>){</span><br><span class="line">            <span class="variable">$value</span>-&gt;<span class="title function_ invoke__">update</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">extends</span> <span class="title">AbstractSubject</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"update self!"</span> . PHP_EOL;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">notifyObservers</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$sub</span> = <span class="keyword">new</span> <span class="title class_">MySubject</span>();</span><br><span class="line"><span class="variable">$sub</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="keyword">new</span> <span class="title class_">Observer1</span>());</span><br><span class="line"><span class="variable">$sub</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="keyword">new</span> <span class="title class_">Observer2</span>());</span><br><span class="line"><span class="variable">$sub</span>-&gt;<span class="title function_ invoke__">operation</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * update self!</span></span><br><span class="line"><span class="comment"> * observer1 has received!</span></span><br><span class="line"><span class="comment"> * observer2 has received!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——解释器模式</title>
      <link href="/posts/interpreter-pattern.html"/>
      <url>/posts/interpreter-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下解释器模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Expression</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">interpret</span>(<span class="params">Context <span class="variable">$context</span></span>): <span class="title">int</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">implements</span> <span class="title">Expression</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">interpret</span>(<span class="params">Context <span class="variable">$context</span></span>): <span class="title">int</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$context</span>-&gt;<span class="title function_ invoke__">getNum1</span>() + <span class="variable">$context</span>-&gt;<span class="title function_ invoke__">getNum2</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">implements</span> <span class="title">Expression</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">interpret</span>(<span class="params">Context <span class="variable">$context</span></span>): <span class="title">int</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$context</span>-&gt;<span class="title function_ invoke__">getNum1</span>() - <span class="variable">$context</span>-&gt;<span class="title function_ invoke__">getNum2</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="variable">$num1</span>,<span class="variable">$num2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$num1</span>,<span class="keyword">int</span> <span class="variable">$num2</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;num1 = <span class="variable">$num1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;num2 = <span class="variable">$num2</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNum1</span>(<span class="params"></span>): <span class="title">int</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;num1;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setNum1</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$num1</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;num1 = <span class="variable">$num1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNum2</span>(<span class="params"></span>): <span class="title">int</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;num2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setNum2</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$num2</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;num2 = <span class="variable">$num2</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$result</span> = (<span class="keyword">new</span> <span class="title class_">Minus</span>())-&gt;<span class="title function_ invoke__">interpret</span>(<span class="keyword">new</span> <span class="title class_">Context</span>((<span class="keyword">new</span> <span class="title class_">Plus</span>())-&gt;<span class="title function_ invoke__">interpret</span>(<span class="keyword">new</span> <span class="title class_">Context</span>(<span class="number">9</span>,<span class="number">2</span>)),<span class="number">8</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"><span class="comment">// output: 3</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——访问者模式</title>
      <link href="/posts/visitor-pattern.html"/>
      <url>/posts/visitor-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下访问者模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visit</span>(<span class="params">Subject <span class="variable">$sub</span></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visit</span>(<span class="params">Subject <span class="variable">$sub</span></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"visit the subject："</span> . <span class="variable">$sub</span>-&gt;<span class="title function_ invoke__">getSubject</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span>(<span class="params">Visitor <span class="variable">$visitor</span></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSubject</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span>(<span class="params">Visitor <span class="variable">$visitor</span></span>)</span>{</span><br><span class="line">        <span class="variable">$visitor</span>-&gt;<span class="title function_ invoke__">visit</span>(<span class="variable">$this</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSubject</span>(<span class="params"></span>): <span class="title">string</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"love"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$visitor</span> = <span class="keyword">new</span> <span class="title class_">MyVisitor</span>();</span><br><span class="line"><span class="variable">$sub</span> = <span class="keyword">new</span> <span class="title class_">MySubject</span>();</span><br><span class="line"><span class="variable">$sub</span>-&gt;<span class="title function_ invoke__">accept</span>(<span class="variable">$visitor</span>);</span><br><span class="line"><span class="comment">// output:  visit the subject：love</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——责任链模式</title>
      <link href="/posts/chain-of-responsibility-pattern.html"/>
      <url>/posts/chain-of-responsibility-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下责任链模式的代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Handler</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandler</span></span>{</span><br><span class="line">    <span class="keyword">private</span> ?Handler <span class="variable">$handler</span>=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHandler</span>(<span class="params"></span>): ?<span class="title">Handler</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;handler;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHandler</span>(<span class="params">Handler <span class="variable">$handler</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handler = <span class="variable">$handler</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> <span class="keyword">implements</span> <span class="title">Handler</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name . <span class="string">' deal!'</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$handler</span>=<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getHandler</span>()) != <span class="literal">null</span>){</span><br><span class="line">            <span class="variable">$handler</span>-&gt;<span class="title function_ invoke__">operation</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$h1</span> = <span class="keyword">new</span> <span class="title class_">MyHandler</span>(<span class="string">"h1"</span>);</span><br><span class="line"><span class="variable">$h2</span> = <span class="keyword">new</span> <span class="title class_">MyHandler</span>(<span class="string">"h2"</span>);</span><br><span class="line"><span class="variable">$h3</span> = <span class="keyword">new</span> <span class="title class_">MyHandler</span>(<span class="string">"h3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$h1</span>-&gt;<span class="title function_ invoke__">setHandler</span>(<span class="variable">$h2</span>);</span><br><span class="line"><span class="variable">$h2</span>-&gt;<span class="title function_ invoke__">setHandler</span>(<span class="variable">$h3</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$h1</span>-&gt;<span class="title function_ invoke__">operation</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * h1 deal! h2 deal! h3 deal!</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件的设计模式</title>
      <link href="/posts/design-patterns.html"/>
      <url>/posts/design-patterns.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><ul><li><p>总原则：开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。</p></li><li><p>1、单一职责原则<br>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p></li><li><p>2、里氏替换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。<br>历史替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p></li><li><p>3、依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p></li><li><p>4、接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p></li><li><p>5、迪米特法则（最少知道原则）（Demeter Principle）<br>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p></li></ul><p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p><ul><li>6、合成复用原则（Composite Reuse Principle）<br>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</li></ul><h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h3><p>总体来说设计模式分为三大类：</p><ul><li>创建型模式，共五种：<a href="simple-factory-pattern.html" target="_blank">工厂方法模式</a>、抽象工厂模式、<a href="singleton-pattern.html" target="_blank">单例模式</a>、<a href="builder-pattern.html" target="_blank">建造者模式</a>、<a href="prototype-pattern.html" target="_blank">原型模式</a>。</li><li>结构型模式，共七种：<a href="adapter-pattern.html" target="_blank">适配器模式</a>、<a href="decorator-pattern.html" target="_blank">装饰器模式</a>、<a href="proxy-pattern.html" target="_blank">代理模式</a>、<a href="facade-pattern.html" target="_blank">外观模式</a>、<a href="bridge-pattern.html" target="_blank">桥接模式</a>、<a href="composite-pattern.html" target="_blank">组合模式</a>、<a href="flyweight-pattern.html" target="_blank">享元模式</a>。</li><li>行为型模式，共十一种：<a href="strategy-pattern.html" target="_blank">策略模式</a>、<a href="template-method-pattern.html" target="_blank">模板方法模式</a>、<a href="observer-pattern.html" target="_blank">观察者模式</a>、<a href="iterator-pattern.html" target="_blank">迭代子模式</a>、<a href="chain-of-responsibility-pattern.html" target="_blank">责任链模式</a>、<a href="command-pattern.html" target="_blank">命令模式</a>、<a href="memento-pattern.html" target="_blank">备忘录模式</a>、<a href="state-pattern.html" target="_blank">状态模式</a>、<a href="visitor-pattern.html" target="_blank">访问者模式</a>、<a href="mediator-pattern.html" target="_blank">中介者模式</a>、<a href="interpreter-pattern.html" target="_blank">解释器模式</a>。</li><li>其实还有两类：并发型模式和线程池模式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——迭代器模式</title>
      <link href="/posts/iterator-pattern.html"/>
      <url>/posts/iterator-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下代码实现</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Collection</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$i</span></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">previous</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasNext</span>(<span class="params"></span>): <span class="title">bool</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCollection</span> <span class="keyword">implements</span> <span class="title">Collection</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$str</span> = <span class="string">'ABCDE'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params"></span>): <span class="title">MyIterator</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyIterator</span>(<span class="variable language_">$this</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$i</span></span>): <span class="title">string</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str[<span class="variable">$i</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>): <span class="title">int</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;str);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Collection <span class="variable">$collection</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="variable">$pos</span> = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Collection <span class="variable">$collection</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;collection = <span class="variable">$collection</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">previous</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;pos &gt; <span class="number">0</span>){</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;pos--;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;collection-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;pos);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;pos &lt; <span class="variable language_">$this</span>-&gt;collection-&gt;<span class="title function_ invoke__">size</span>() - <span class="number">1</span>){</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;pos++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;collection-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;pos);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasNext</span>(<span class="params"></span>): <span class="title">bool</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;pos &lt; <span class="variable language_">$this</span>-&gt;collection-&gt;<span class="title function_ invoke__">size</span>() - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;collection-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;pos);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$collection</span> = <span class="keyword">new</span> <span class="title class_">MyCollection</span>();</span><br><span class="line"><span class="variable">$it</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">iterator</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$it</span>-&gt;<span class="title function_ invoke__">hasNext</span>()){</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$it</span>-&gt;<span class="title function_ invoke__">next</span>().<span class="string">'&amp;nbsp;&amp;nbsp;'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// output: A  B  C  D  E</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——适配器模式</title>
      <link href="/posts/adapter-pattern.html"/>
      <url>/posts/adapter-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="类的适配器模式"><a href="#类的适配器模式" class="headerlink" title="类的适配器模式"></a>类的适配器模式</h4><p>  核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口是Targetable，通过Adapter类，将Source的功能扩展到Targetable里</p><p>示例<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Source</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'this is original method!'</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Targetable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adapter类继承Source类，实现Targetable接口，这样Targetable接口的实现类就具有了Source类的功能。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Targetable</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'this is the targetable method!'</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$target</span> = <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line"><span class="variable">$target</span>-&gt;<span class="title function_ invoke__">method1</span>();</span><br><span class="line"><span class="variable">$target</span>-&gt;<span class="title function_ invoke__">method2</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * this is original method!</span></span><br><span class="line"><span class="comment"> * this is the targetable method!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="对象的适配器模式"><a href="#对象的适配器模式" class="headerlink" title="对象的适配器模式"></a>对象的适配器模式</h4><p>  与类的适配器模式大体相同，只是适配的方法不同。</p><p>示例<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Source</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'this is original method!'</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Targetable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adapter类不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">Targetable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Source <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Source <span class="variable">$source</span></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$source</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'this is the targetable method!'</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source-&gt;<span class="title function_ invoke__">method1</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="variable">$source</span> = <span class="keyword">new</span> <span class="title class_">Source</span>();</span><br><span class="line"><span class="variable">$target</span> = <span class="keyword">new</span> <span class="title class_">Wrapper</span>(<span class="variable">$source</span>);</span><br><span class="line"><span class="variable">$target</span>-&gt;<span class="title function_ invoke__">method1</span>();</span><br><span class="line"><span class="variable">$target</span>-&gt;<span class="title function_ invoke__">method2</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * this is original method!</span></span><br><span class="line"><span class="comment"> * this is the targetable method!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="接口的适配器模式"><a href="#接口的适配器模式" class="headerlink" title="接口的适配器模式"></a>接口的适配器模式</h4><p>  接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。</p><p>示例<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>)</span>{}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SourceSub1</span> <span class="keyword">extends</span> <span class="title">Wrapper</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"the sourceable interface's first Sub1!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SourceSub2</span> <span class="keyword">extends</span> <span class="title">Wrapper</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"ths sourceable interface's second Sub2!"</span> . PHP_EOL;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="variable">$source1</span> = <span class="keyword">new</span> <span class="title class_">SourceSub1</span>();</span><br><span class="line"><span class="variable">$source2</span> = <span class="keyword">new</span> <span class="title class_">SourceSub2</span>();</span><br><span class="line"><span class="variable">$source1</span>-&gt;<span class="title function_ invoke__">method1</span>();</span><br><span class="line"><span class="variable">$source1</span>-&gt;<span class="title function_ invoke__">method2</span>();</span><br><span class="line"><span class="variable">$source2</span>-&gt;<span class="title function_ invoke__">method1</span>();</span><br><span class="line"><span class="variable">$source2</span>-&gt;<span class="title function_ invoke__">method2</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * output:</span></span><br><span class="line"><span class="comment"> * the sourceable interface's first Sub1!</span></span><br><span class="line"><span class="comment"> * ths sourceable interface's second Sub2!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>  类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。<br>  对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。<br>  接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis笔记</title>
      <link href="/posts/redis-note.html"/>
      <url>/posts/redis-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装redis客户端"><a href="#安装redis客户端" class="headerlink" title="安装redis客户端"></a>安装redis客户端</h3><p><code>yum install redis</code></p><h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><p><code>info</code><br><img src="/images/redis_note_1.png" alt=""></p><h3 id="通过命令行方式连接redis"><a href="#通过命令行方式连接redis" class="headerlink" title="通过命令行方式连接redis"></a>通过命令行方式连接redis</h3><p><code>redis-cli -h host -p port -a password</code><br>host:远程redis服务器host<br>port:远程redis服务端口<br>password:远程redis服务密码（无密码的的话就不需要-a参数了）<br><img src="/images/redis_note_2.png" alt=""></p><h3 id="redis执行lua脚本"><a href="#redis执行lua脚本" class="headerlink" title="redis执行lua脚本"></a>redis执行lua脚本</h3><p><img src="/images/redis_note_3.png" alt=""><br><img src="/images/redis_note_4.png" alt=""></p><h3 id="monitor监控"><a href="#monitor监控" class="headerlink" title="monitor监控"></a>monitor监控</h3><p>在项目中有时候需要查看某个redis数据的情况，可以使用monitor来监控<br><img src="/images/redis_monitor_1.png" alt=""><br>上述代码是在redis里监控key包含<code>pay_center_pay_methods</code>的信息，发现在db3里有被get一次。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm常用快捷键</title>
      <link href="/posts/phpstorm-quick-key.html"/>
      <url>/posts/phpstorm-quick-key.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="删除某行"><a href="#删除某行" class="headerlink" title="删除某行"></a>删除某行</h3><p>ctrl+Y</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决phpStorm无法显示目录结构的问题</title>
      <link href="/posts/phpstorm-show-dir.html"/>
      <url>/posts/phpstorm-show-dir.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>问题：PhpStorm侧边栏Project里面只显示文件不显示文件夹<br><img src="/images/phpstorm_show_dir_1.png" alt=""></p><p>解决：删除项目根目录下的.idea文件夹，重启Phpstorm打开项目目录。Alt + 1调出左侧的目录<br><img src="/images/phpstorm_show_dir_2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm使用笔记</title>
      <link href="/posts/phpstorm-notes.html"/>
      <url>/posts/phpstorm-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="phpStorm显示类的函数或方法列表"><a href="#phpStorm显示类的函数或方法列表" class="headerlink" title="phpStorm显示类的函数或方法列表"></a>phpStorm显示类的函数或方法列表</h4><p> 点击左下方的Structure即可<br><img src="/images/phpstorm_notes_1.png" alt=""></p><h4 id="设置在新窗口打开项目"><a href="#设置在新窗口打开项目" class="headerlink" title="设置在新窗口打开项目"></a>设置在新窗口打开项目</h4><p> 在File=&gt;Settings=&gt;Appearance &amp; Behavior=&gt;System Settings中设置<br><img src="/images/phpstorm_notes_2.png" alt=""></p><h4 id="修改字体的风格和大小"><a href="#修改字体的风格和大小" class="headerlink" title="修改字体的风格和大小"></a>修改字体的风格和大小</h4><p> 在File=&gt;Setting=&gt;Editor/Font中设置<br><img src="/images/phpstorm_notes_3.png" alt=""></p><h4 id="在phpstorm中写lua"><a href="#在phpstorm中写lua" class="headerlink" title="在phpstorm中写lua"></a>在phpstorm中写lua</h4><p> 可以安装插件<a href="https://github.com/EmmyLua/IntelliJ-EmmyLua">EmmyLua</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS命令进入MySQL</title>
      <link href="/posts/use-mysql-on-dos.html"/>
      <url>/posts/use-mysql-on-dos.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-先进入mysql安装目录下的bin目录中"><a href="#1-先进入mysql安装目录下的bin目录中" class="headerlink" title="1. 先进入mysql安装目录下的bin目录中"></a>1. 先进入mysql安装目录下的bin目录中</h3><p><img src="/images/doc_mysql_1.png" alt=""></p><h3 id="2-执行命令"><a href="#2-执行命令" class="headerlink" title="2. 执行命令"></a>2. 执行命令</h3><p><code>mysql -hlocalhost -uroot -p</code><br>按要求输入密码，回车即可。<br><img src="/images/doc_mysql_2.png" alt=""></p><h3 id="3-执行命令操作数据库"><a href="#3-执行命令操作数据库" class="headerlink" title="3. 执行命令操作数据库"></a>3. 执行命令操作数据库</h3><p>如：显示所有的数据库<br><img src="/images/doc_mysql_3.png" alt=""></p><h3 id="4-退出mysql数据库"><a href="#4-退出mysql数据库" class="headerlink" title="4. 退出mysql数据库"></a>4. 退出mysql数据库</h3><p>exit回车即可<br><img src="/images/doc_mysql_4.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOS命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的binlog</title>
      <link href="/posts/mysql-binlog.html"/>
      <url>/posts/mysql-binlog.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="如何查看binlog日志"><a href="#如何查看binlog日志" class="headerlink" title="如何查看binlog日志"></a>如何查看binlog日志</h3><h4 id="1-开启binlog"><a href="#1-开启binlog" class="headerlink" title="1. 开启binlog"></a>1. 开启binlog</h4><ul><li>在my.ini文件[mysqld]里添加<code>log_bin=mysql-bin</code>，值 mysql-bin 是日志的基本名或前缀名</li><li>通过mysql的变量配置表，查看二进制日志是否已开启<br><img src="/images/mysql_binlog_1.png" alt=""></li><li>查看MySQL的binlog模式<br><img src="/images/mysql_binlog_2.png" alt=""><br>在查看binlog的时候可能会遇到错误：<code>mysqlbinlog: [ERROR] unknown variable 'default-character-set=utf8'</code><br><img src="/images/mysql_binlog_3.png" alt=""><br>原因是mysqlbinlog这个工具无法识别binlog中的配置中的default-character-set=utf8这个指令。<br>两个方法可以解决这个问题<br>A. 在MySQL的配置/etc/my.cnf中将<code>default-character-set=utf8</code> 修改为<br><code>character-set-server = utf8</code>，但是这需要重启MySQL服务，如果你的MySQL服务正在忙，那这样的代价会比较大。<br>B. 用mysqlbinlog —no-defaults mysql-bin.000001 命令打开<br><img src="/images/mysql_binlog_4.png" alt=""></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/weixin_43944305/article/details/108620849">https://blog.csdn.net/weixin_43944305/article/details/108620849</a><br><a href="https://www.kancloud.cn/wenshunbiao/wenshunbiao/1403850">https://www.kancloud.cn/wenshunbiao/wenshunbiao/1403850</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binlog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5框架where条件中含有or的使用方法</title>
      <link href="/posts/thinkphp-where.html"/>
      <url>/posts/thinkphp-where.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-直接whereOr"><a href="#1-直接whereOr" class="headerlink" title="1. 直接whereOr"></a>1. 直接whereOr</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$list</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">'tb'</span>)-&gt;<span class="title function_ invoke__">where</span>([<span class="string">'status'</span>=&gt;<span class="number">1</span>,<span class="string">'admin_id'</span>=&gt;<span class="number">5</span>])-&gt;<span class="title function_ invoke__">whereOr</span>([<span class="string">'type'</span>=&gt;<span class="number">1</span>,<span class="string">'step'</span>=&gt;<span class="number">2</span>])-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"><span class="comment">// 生成的sql为：select * from `tb` where `status`=1 and `admin_id`=5 or (`type`=1 or `step`=2);</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-采用闭包的方式"><a href="#2-采用闭包的方式" class="headerlink" title="2. 采用闭包的方式"></a>2. 采用闭包的方式</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$map</span> = [<span class="string">'status'</span>=&gt;<span class="number">1</span>,<span class="string">'admin_id'</span>=&gt;<span class="number">5</span>];</span><br><span class="line"><span class="variable">$orMap</span> = [<span class="string">'type'</span>=&gt;<span class="number">1</span>,<span class="string">'step'</span>=&gt;<span class="number">2</span>];</span><br><span class="line"><span class="variable">$list</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">'tb'</span>)-&gt;<span class="title function_ invoke__">where</span>(function (<span class="variable">$query</span>) <span class="keyword">use</span> ($<span class="title">map</span>) {</span><br><span class="line">    $<span class="title">query</span>-&gt;<span class="title">where</span>($<span class="title">map</span>);</span><br><span class="line">})-&gt;<span class="title function_ invoke__">whereOr</span>(function (<span class="variable">$query</span>) <span class="keyword">use</span> ($<span class="title">orMap</span>) {</span><br><span class="line">    $<span class="title">query</span>-&gt;<span class="title">where</span>($<span class="title">orMap</span>);</span><br><span class="line">})-&gt;<span class="title function_ invoke__">order</span>(<span class="string">'id desc'</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"><span class="comment">// 生成的sql为：select * from `tb` where (`status`=1 and `admin_id`=5) or (`type`=1 and `step`=2);</span></span><br></pre></td></tr></tbody></table></figure><p>一般来说，在复杂的查询里，我们更多的是使用第二种方式。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中数组内容依次赋值给变量</title>
      <link href="/posts/php-assign-array-values.html"/>
      <url>/posts/php-assign-array-values.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在日常开发过程中，经常需要把数组中的内容依次赋值给变量，可以使用list、[]、extract来处理。</p><h3 id="1-list-var1-var2…-arr"><a href="#1-list-var1-var2…-arr" class="headerlink" title="1. list($var1,$var2…) = $arr;"></a>1. list($var1,$var2…) = $arr;</h3><p>   或者[$var1,$var2…] = $arr;<br>   将数组中的值赋给一些变量<br>   该函数只能用于索引数组，且数字索引从0开始。<br>   如果对应的数字下标，则该变量赋值为null</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>) = [<span class="string">'Jone'</span>, <span class="string">'Jam'</span>, <span class="string">'Kav'</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>);       <span class="comment">//output：string(4) "Jone" string(3) "Jam" string(3) "Kav"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$a</span>, <span class="variable">$b</span>) = [<span class="string">'Jone'</span>, <span class="string">'Jam'</span>, <span class="string">'Kav'</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>, <span class="variable">$b</span>);           <span class="comment">//output：string(4) "Jone" string(3) "Jam"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>) = [<span class="number">2</span> =&gt; <span class="string">'Jone'</span>, <span class="number">3</span> =&gt; <span class="string">'Jam'</span>, <span class="number">4</span> =&gt; <span class="string">'Kav'</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>);       <span class="comment">//output：NULL NULL string(4) "Jone"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>) = [<span class="string">'id'</span> =&gt; <span class="number">4</span>, <span class="number">2</span> =&gt; <span class="string">'Jam'</span>, <span class="string">'name'</span> =&gt; <span class="string">'Kav'</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>);       <span class="comment">//output：NULL NULL string(3) "Jam"</span></span><br></pre></td></tr></tbody></table></figure><p>   list()如果需要跳过某些值<br></p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$info</span> = [<span class="string">'coffee'</span>, <span class="string">'brown'</span>, <span class="string">'caffeine'</span>];</span><br><span class="line">[,<span class="variable">$a</span>,] = <span class="variable">$info</span>;</span><br><span class="line">var_dump(<span class="variable">$a</span>);<span class="regexp">//</span> string(<span class="number">5</span>) <span class="string">"brown"</span></span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="2-extract-array-extract-rules-prefix"><a href="#2-extract-array-extract-rules-prefix" class="headerlink" title="2. extract(array,extract_rules,prefix);"></a>2. extract(array,extract_rules,prefix);</h3><p>   从数组中将变量导入到当前的符号表<br>   该函数使用数组键名作为变量名，使用数组键值作为变量值，进行依次赋值<br></p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extract([<span class="string">'id'</span> =&gt; <span class="number">3</span>, <span class="string">'name'</span> =&gt; <span class="string">'Hoj'</span>]);</span><br><span class="line">/**</span><br><span class="line"> * 在IDE中会提示错误，加上注释即可</span><br><span class="line"> * @var <span class="variable">$id</span></span><br><span class="line"> * @var <span class="variable">$name</span></span><br><span class="line"> */</span><br><span class="line">var_dump(<span class="variable">$id</span>, <span class="variable">$name</span>);       <span class="regexp">//</span>output：int(<span class="number">3</span>) string(<span class="number">3</span>) <span class="string">"Hoj"</span></span><br><span class="line"></span><br><span class="line">extract([<span class="number">3</span>, <span class="string">'name'</span> =&gt; <span class="string">'Hoj'</span>]);</span><br><span class="line">var_dump(<span class="variable">$name</span>);            <span class="regexp">//</span>output：string(<span class="number">3</span>) <span class="string">"Hoj"</span></span><br></pre></td></tr></tbody></table></figure><br>总结：一般索引数组用list，关联数组用extract。<p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下快速拆分txt文件</title>
      <link href="/posts/windows-quick-split-file.html"/>
      <url>/posts/windows-quick-split-file.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时候，需要把一个大的txt文件拆分为多个小文件，并行处理文件里的内容，来提高工作效率。下面介绍一下在windows下的拆分方法。</p><p>现在有个a.txt文件，里面有若干行内容，现要拆分为多个小文件<br><img src="/images/split_txt_1.png" alt=""></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1、在文件所在目录打开git-bash；"><a href="#1、在文件所在目录打开git-bash；" class="headerlink" title="1、在文件所在目录打开git bash；"></a>1、在文件所在目录打开git bash；</h3><h3 id="2、创建一个文件夹"><a href="#2、创建一个文件夹" class="headerlink" title="2、创建一个文件夹"></a>2、创建一个文件夹</h3><p><img src="/images/split_txt_2.png" alt=""></p><h3 id="3、执行命令"><a href="#3、执行命令" class="headerlink" title="3、执行命令"></a>3、执行命令</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">split</span> -l 5 -d -a 1 a.txt tmp/m_ &amp;&amp; <span class="built_in">cd</span> tmp/ &amp;&amp; <span class="built_in">ls</span>|grep m_|xargs -n1 -i{} <span class="built_in">mv</span>  {} {}.txt</span><br></pre></td></tr></tbody></table></figure><p>命令分解：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-l 5 ：按行分割，每个文件5行</span><br><span class="line">-d ：添加数字后缀，如00,01</span><br><span class="line">-a 1 : 用一位数据来顺序命名(从0开始)</span><br><span class="line">tmp/ ：拆分后的文件放在tmp目录下</span><br><span class="line">m_ ：拆分后的文件名前缀</span><br><span class="line">&amp;&amp; <span class="built_in">cd</span> tmp/ &amp;&amp; <span class="built_in">ls</span>|grep m_|xargs -n1 -i{} <span class="built_in">mv</span>  {} {}.txt ：进入tmp目录，对拆分后的文件添加扩展名txt(默认生成的文件是没有扩展名的)</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="4、在tmp目录下就看到生成的文件了"><a href="#4、在tmp目录下就看到生成的文件了" class="headerlink" title="4、在tmp目录下就看到生成的文件了"></a>4、在tmp目录下就看到生成的文件了</h3><p><img src="/images/split_txt_3.png" alt=""></p><p>注：对xlsx文件拆分有问题</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中不太常用的函数</title>
      <link href="/posts/php-unusual-functions.html"/>
      <url>/posts/php-unusual-functions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-constant"><a href="#1-constant" class="headerlink" title="1. constant()"></a>1. constant()</h3><p>   返回常量的值<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'DEV'</span>,<span class="string">'test'</span>);</span><br><span class="line"></span><br><span class="line">var_dump(constant(<span class="string">'DEV'</span>));       //string(4) <span class="string">"test"</span>     等同于var_dump(DEV);</span><br><span class="line">var_dump(constant(<span class="string">'SORT_ASC'</span>));  //int(4)    等同于var_dump(SORT_ASC);</span><br><span class="line">var_dump(constant(SORT_ASC));    //NULL</span><br><span class="line">var_dump(TEST);                  //string(4) <span class="string">"TEST"</span></span><br></pre></td></tr></tbody></table></figure><br>   个人感觉作用不大，还不如直接使用常量呢，最多也就是判断常量是否被定义。<p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 中order的使用</title>
      <link href="/posts/thinkphp-order.html"/>
      <url>/posts/thinkphp-order.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前一直在使用Yii2，在查询排序时习惯了使用 SORT_DESC | SORT_ASC，今天在使用的时候发现了问题，记录一下。<br>下面这个查询没有得到预期的结果：<br></p><figure class="highlight livescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> $<span class="keyword">list</span> = Db::name<span class="function"><span class="params">(<span class="string">'tb'</span>)</span>-&gt;</span>where<span class="function"><span class="params">([<span class="string">'status'</span>=&gt;<span class="number">1</span>])</span>-&gt;</span>order<span class="function"><span class="params">([<span class="string">'create_time'</span>=&gt;SORT_DESC])</span>-&gt;</span>field<span class="function"><span class="params">(<span class="string">'id,name'</span>)</span>-&gt;</span>select();</span><br><span class="line"><span class="regexp">// 输出sql为：select id,name from tb where status=1 order by create_time;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>问题在于SORT_DESC=3、SORT_ASC=4，这不符合thinkphp中order方法的传参规则，<br>可以这样使用：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">order</span><span class="params">(<span class="string">'id'</span>,<span class="string">'desc'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">order</span><span class="params">(<span class="string">'id desc'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">order</span><span class="params">([<span class="string">'id'</span>=&gt;<span class="string">'desc'</span>,<span class="string">'create_time'</span>=&gt;<span class="string">'asc'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">order</span><span class="params">(<span class="string">'id,create_time desc'</span>)</span></span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能测试——ab.exe</title>
      <link href="/posts/performance-test.html"/>
      <url>/posts/performance-test.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ab.exe是apache server下的一个性能检测小组件，使用方便简单。<br>使用方法：</p><h3 id="1-找到ab-exe的位置"><a href="#1-找到ab-exe的位置" class="headerlink" title="1. 找到ab.exe的位置"></a>1. 找到ab.exe的位置</h3><p>在电脑中找到ab.exe的位置，一般在Apache文件下的bin目录中，我这里的目录路径为：D:\software\phpstudy_pro\Extensions\Apache2.4.39\bin<br><img src="/images/test_ab_1.png" alt=""></p><h3 id="2-打开cmd"><a href="#2-打开cmd" class="headerlink" title="2. 打开cmd"></a>2. 打开cmd</h3><h3 id="3-进入ab-exe所在目录"><a href="#3-进入ab-exe所在目录" class="headerlink" title="3. 进入ab.exe所在目录"></a>3. 进入ab.exe所在目录</h3><p><img src="/images/test_ab_2.png" alt=""></p><h3 id="4-开始压测"><a href="#4-开始压测" class="headerlink" title="4. 开始压测"></a>4. 开始压测</h3><p><img src="/images/test_ab_3.png" alt=""></p><p>常用参数说明：<br>-n：请求个数，默认一次一个<br>-c：并发数<br>-t：超时限制(秒)，默认不限制</p><p>结果分析：<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">D:\software\phpstudy_pro\Extensions\Apache2.4.39\bin&gt;ab -n 10 -c 10 http://www.baidu.com/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.baidu.com (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        BWS/1.1</span><br><span class="line">Server Hostname:        www.baidu.com</span><br><span class="line">Server Port:            80    #端口</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        353122 bytes    #请求文件大小</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10           #并发数</span><br><span class="line">Time taken for tests:   0.535 seconds    #整个测试所用的时间</span><br><span class="line">Complete requests:      10               #完成的请求数量</span><br><span class="line">Failed requests:        9                #失败的请求数量</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 9, Exceptions: 0)</span><br><span class="line">Total transferred:      3548070 bytes    #整个场景的网络传输量</span><br><span class="line">HTML transferred:       3536205 bytes    #整个场景的HTML传输量</span><br><span class="line">Requests per second:    18.71 [#/sec] (mean)    #平均每秒请求数</span><br><span class="line">Time per request:       534.535 [ms] (mean)     #平均每个请求的响应时间</span><br><span class="line">Time per request:       53.453 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          6482.11 [Kbytes/sec] received    #平均每秒网络上的流量</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">网络上消耗时间分解</span></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:       30   34   3.3     34      39</span><br><span class="line">Processing:   151  225  78.4    220     378</span><br><span class="line">Waiting:       35  139  92.2    151     281</span><br><span class="line">Total:        186  260  75.8    254     410</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面为整个场景所有请求的响应情况，50%的响应时间小于254毫秒，66%的响应时间小于281毫秒……最长响应时间 410毫秒</span></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta prompt_">  50% </span><span class="language-bash">   254</span></span><br><span class="line"><span class="meta prompt_">  66% </span><span class="language-bash">   281</span></span><br><span class="line"><span class="meta prompt_">  75% </span><span class="language-bash">   314</span></span><br><span class="line"><span class="meta prompt_">  80% </span><span class="language-bash">   342</span></span><br><span class="line"><span class="meta prompt_">  90% </span><span class="language-bash">   410</span></span><br><span class="line"><span class="meta prompt_">  95% </span><span class="language-bash">   410</span></span><br><span class="line"><span class="meta prompt_">  98% </span><span class="language-bash">   410</span></span><br><span class="line"><span class="meta prompt_">  99% </span><span class="language-bash">   410</span></span><br><span class="line"><span class="meta prompt_"> 100% </span><span class="language-bash">   410 (longest request)</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ab.exe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码规范建议</title>
      <link href="/posts/coding-standard-tips.html"/>
      <url>/posts/coding-standard-tips.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-参数规范"><a href="#1-参数规范" class="headerlink" title="1. 参数规范"></a>1. 参数规范</h2><p> 在函数/方法里，未设置默认值的参数应放在设置默认值的参数前，如：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="built_in">test</span>(<span class="variable">$age</span> = 21, <span class="variable">$id</span>, <span class="variable">$options</span> = []){</span><br><span class="line">     print_r(func_get_args());</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p></p><p> 上述代码在IDE中会对$age=21，提示“Optional parameter is provided before required”，应改为：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="built_in">test</span>(<span class="variable">$id</span>, <span class="variable">$age</span> = 21, <span class="variable">$options</span> = []){</span><br><span class="line">     print_r(func_get_args());</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h2 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2. 命名规范"></a>2. 命名规范</h2><p> 常用的四种命名格式：驼峰、帕斯卡、蛇形、串形，主要是为了解决多个单词之间的空格问题。</p><ul><li>驼峰命名（Camel Case），又叫小驼峰，除了第一个单词，其他单词首字母大写：<br>原始：<code>last login time</code><br>驼峰：<code>lastLoginTime</code></li><li>帕斯卡（Pascal Case），又叫大驼峰，跟驼峰命名很像，只不过所有单词首字母都需要大写：<br>原始：<code>last login time</code><br>帕斯卡：<code>LastLoginTime</code></li><li>蛇形（Snake Case），全由小写字母和下划线组成，是指用下划线(_)作用单词间的分隔符：<br>原始：<code>last login time</code><br>蛇形：<code>last_login_time</code></li><li>串行（Kebab Case），又叫脊柱命名法（spinal case），是指用短横线(-)作用单词间的分隔符：<br>原始：<code>last login time</code><br>串行：<code>last-login-time</code><br>一般而言，函数名或方法名采用小驼峰，类名采用大驼峰，数据库字段名采用蛇形。</li></ul><h3 id="3-二次确认"><a href="#3-二次确认" class="headerlink" title="3. 二次确认"></a>3. 二次确认</h3><p> 不可撤销的高危操作需二次确认，如删除、批量推送</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm查找指定文件的修改历史</title>
      <link href="/posts/phpstorm-show-history.html"/>
      <url>/posts/phpstorm-show-history.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>打开需要查找的文件，对着文件右击选择Local History=&gt;Show History<br><img src="/images/phpstorm_show_history_1.png" alt=""><br><img src="/images/phpstorm_show_history_2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 中clone Query对象</title>
      <link href="/posts/thinkphp-clone-query.html"/>
      <url>/posts/thinkphp-clone-query.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们在给前端提供列表接口的时候，经常需要根据条件返回总条数和当页列表数据；这时，我们就需要复用共同的查询条件对数据库执行多次查询操作。</p><p>在Yii2里，可以通过clone处理：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="title class_">Post</span>::<span class="title function_ invoke__">find</span>()-&gt;<span class="title function_ invoke__">where</span>([<span class="string">'status'</span>=&gt;<span class="number">1</span>]);</span><br><span class="line"><span class="variable">$query</span>-&gt;<span class="title function_ invoke__">andFilterWhere</span>([<span class="string">'name'</span>=&gt;<span class="variable">$kw</span>]);</span><br><span class="line"><span class="variable">$count</span> = (<span class="keyword">clone</span> <span class="variable">$query</span>)-&gt;<span class="title function_ invoke__">count</span>();</span><br><span class="line"><span class="variable">$list</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">limit</span>(<span class="number">20</span>)-&gt;<span class="title function_ invoke__">offset</span>(<span class="number">0</span>)-&gt;<span class="title function_ invoke__">orderBy</span>([<span class="string">'id'</span>=&gt;SORT_DESC])-&gt;<span class="title function_ invoke__">all</span>()-&gt;<span class="title function_ invoke__">asArray</span>();</span><br></pre></td></tr></tbody></table></figure><br>在thinkphp5中，使用如下代码进行clone，会存在问题，提示：<code>SQLSTATE[HY000]: General error: 2031</code><br><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$offset</span> = (<span class="variable">$page</span> - <span class="number">1</span>) * <span class="variable">$pageSize</span>;</span><br><span class="line"><span class="variable">$query</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">'artist_bill'</span>)-&gt;<span class="title function_ invoke__">where</span>([<span class="string">'month'</span> =&gt; <span class="variable">$month</span>]);</span><br><span class="line"><span class="variable">$count</span> = (<span class="keyword">clone</span> <span class="variable">$query</span>)-&gt;<span class="title function_ invoke__">count</span>();</span><br><span class="line"><span class="variable">$list</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">field</span>(<span class="string">'id,title,month'</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">limit</span>(<span class="variable">$offset</span>, <span class="variable">$pageSize</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">order</span>([<span class="string">'id'</span> =&gt; SORT_DESC])</span><br><span class="line">    -&gt;<span class="title function_ invoke__">select</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><ul><li>如果把第3行改为：$count = $query-&gt;count();  第一个查询正常，之后的查询没有任何where条件；这是因为query执行完成后会把查询条件清空。</li><li>如果使用clone，打印处理的sql如下：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> t_artist_bill <span class="keyword">where</span> `<span class="keyword">month</span>` <span class="operator">=</span> :where_AND_month;</span><br></pre></td></tr></tbody></table></figure>初步认为是参数没有绑定上去。应该也是query内部引用了一个对象，对象在clone之后与原有对象是一个地址引用。通过一步一步断点输出，确认在$this-&gt;builder-&gt;select($options);之后获得了bind数据。因此只需要解绑clone前后对象的builder属性即可完成query对象的复制。查看query对象的属性，只有builder,connection是对象，但是connection我们希望在整个请求中是一个单实例，所以没必要区分。<br>最终修改,新建query子类，添加__clone方法,指定clone后对新对象执行php $this-&gt;setBuilder();保证 clone之后的builder是一个新实例。<br>这样就可以正常使用clone了。</li></ul><p>另一种处理方式是把where条件提取出来共用：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params">?<span class="keyword">string</span> <span class="variable">$month</span>, <span class="keyword">int</span> <span class="variable">$page</span>, <span class="keyword">int</span> <span class="variable">$pageSize</span></span>): <span class="title">array</span></span>{</span><br><span class="line">    <span class="variable">$offset</span> = (<span class="variable">$page</span> - <span class="number">1</span>) * <span class="variable">$pageSize</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$where</span> = [];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$month</span>)) {</span><br><span class="line">        <span class="variable">$where</span>[<span class="string">'month'</span>] = <span class="variable">$month</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="variable">$query</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">'artist_bill'</span>);</span><br><span class="line">    <span class="variable">$count</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$where</span>)-&gt;<span class="title function_ invoke__">count</span>(<span class="string">'id'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$list</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$where</span>)-&gt;<span class="title function_ invoke__">field</span>(<span class="string">'id,title,month'</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">limit</span>(<span class="variable">$offset</span>, <span class="variable">$pageSize</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">order</span>([<span class="string">'id'</span> =&gt; SORT_DESC])</span><br><span class="line">        -&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'count'</span> =&gt; <span class="variable">$count</span>, <span class="string">'list'</span> =&gt; <span class="variable">$list</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm实现保存后，代码自动格式化</title>
      <link href="/posts/phpstorm-auto-format.html"/>
      <url>/posts/phpstorm-auto-format.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>鉴于个人编程风格的不同，为了保证团队开发能更好地开展，需要进行代码统一格式化。我们可以在ctrl+s的时候让IED来自动格式化保存。<br>下面介绍下设置步骤：</p><h3 id="1-点击File-》Settings-》Keymap"><a href="#1-点击File-》Settings-》Keymap" class="headerlink" title="1. 点击File-》Settings-》Keymap"></a>1. 点击File-》Settings-》Keymap</h3><p><img src="/images/phpstorm_auth_format_1.png" alt=""></p><h3 id="2-在右侧搜索save-ALL"><a href="#2-在右侧搜索save-ALL" class="headerlink" title="2. 在右侧搜索save ALL"></a>2. 在右侧搜索save ALL</h3><p><img src="/images/phpstorm_auth_format_2.png" alt=""></p><h3 id="3-右键点击Save-All，选择Remove-Ctrl-S"><a href="#3-右键点击Save-All，选择Remove-Ctrl-S" class="headerlink" title="3. 右键点击Save All，选择Remove Ctrl+S"></a>3. 右键点击Save All，选择Remove Ctrl+S</h3><p><img src="/images/phpstorm_auth_format_3.png" alt=""></p><h3 id="4-右键点击Save-All，选择Add-Keyboard-Shortcut，然后按键盘shift-ctrl-alt-s，然后保存。"><a href="#4-右键点击Save-All，选择Add-Keyboard-Shortcut，然后按键盘shift-ctrl-alt-s，然后保存。" class="headerlink" title="4. 右键点击Save All，选择Add Keyboard Shortcut，然后按键盘shift+ctrl+alt+s，然后保存。"></a>4. 右键点击Save All，选择Add Keyboard Shortcut，然后按键盘shift+ctrl+alt+s，然后保存。</h3><p><img src="/images/phpstorm_auth_format_4.png" alt=""><br>PS:shift+ctrl+alt+s这个可以自己随便设置，但是不能和其他的快捷键冲突，而且要记住，一会我们会用得到。</p><h3 id="5-点击Edit-编辑-gt-Macros-宏-gt-Start-Macro-Recording-开始录制宏-。"><a href="#5-点击Edit-编辑-gt-Macros-宏-gt-Start-Macro-Recording-开始录制宏-。" class="headerlink" title="5. 点击Edit(编辑)->Macros(宏)->Start Macro Recording(开始录制宏)。"></a>5. 点击Edit(编辑)-&gt;Macros(宏)-&gt;Start Macro Recording(开始录制宏)。</h3><p>右下角会出现这样一个图标<br><img src="/images/phpstorm_auth_format_5.png" alt=""><br>然后先按ctrl+alt+l，再按我们刚刚把save  all设置的快捷键shift+ctrl+alt+s，最后点击红色的小方块结束录制宏<br><img src="/images/phpstorm_auth_format_6.png" alt=""><br>保存宏：名称设置为：Format And Save（这个名字随意啦，自己记得就好）<br><img src="/images/phpstorm_auth_format_7.png" alt=""></p><h3 id="6-点击File-》Settings-》Keymap-搜索Format-And-Save"><a href="#6-点击File-》Settings-》Keymap-搜索Format-And-Save" class="headerlink" title="6. 点击File-》Settings-》Keymap  搜索Format And Save"></a>6. 点击File-》Settings-》Keymap  搜索Format And Save</h3><h3 id="7-右键点击Format-And-Save，选择Add-Keyboard-Shortcut-设置为command-s，保存就可以了"><a href="#7-右键点击Format-And-Save，选择Add-Keyboard-Shortcut-设置为command-s，保存就可以了" class="headerlink" title="7. 右键点击Format And Save，选择Add Keyboard Shortcut,设置为command+s，保存就可以了"></a>7. 右键点击Format And Save，选择Add Keyboard Shortcut,设置为command+s，保存就可以了</h3><p><img src="/images/phpstorm_auth_format_8.png" alt=""><br>最后试一下吧，ctrl+s 就实现了 保存+代码格式化</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下快捷键使用</title>
      <link href="/posts/windows-short-cut.html"/>
      <url>/posts/windows-short-cut.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>通过Tab键可以在当前界面将光标向下切换，Tab+Shift是向上切换。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5使用笔记</title>
      <link href="/posts/thinkphp-note.html"/>
      <url>/posts/thinkphp-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-报错：Request-php中-variable-type-error-array"><a href="#1-报错：Request-php中-variable-type-error-array" class="headerlink" title="1. 报错：Request.php中 variable type error: array"></a>1. 报错：Request.php中 variable type error: array</h3><ul><li><p>描述：如果在post请求的时候，raw内容中某个参数的值为数组，直接使用$this-&gt;request-&gt;post(‘field’);，会报错<br><img src="/images/thinkphp_note_1.png" alt=""></p></li><li><p>原因：TP5之后，默认的变量修饰符为/s，转为字符串了。</p></li><li>解决办法：在变量名后加/a，转为数组：$this-&gt;request-&gt;post(‘field/a’);</li></ul><h3 id="2-回显处理"><a href="#2-回显处理" class="headerlink" title="2. 回显处理"></a>2. 回显处理</h3><p>如果请求参数里有&amp;等符号，在接收后会进行转义为&amp;，要使用htmlspecialchars_decode回显</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php中trait的用法</title>
      <link href="/posts/php-trait.html"/>
      <url>/posts/php-trait.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">trait是php的一种代码复用的方法。</div><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="1-通过use-Trait类来使用"><a href="#1-通过use-Trait类来使用" class="headerlink" title="1. 通过use Trait类来使用"></a>1. 通过use Trait类来使用</h4><p>可以将一些常用的处理封装到trait类里，在其他地方直接use就可以了。<br> 例如：封装单例<br>    先创建Singleton类，代码如下：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ...$args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params">...<span class="variable">$args</span></span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$instance</span>)) {</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="built_in">static</span>(...<span class="variable">$args</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>再创建Test类，代码如下：<br><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Singleton</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'test'</span>;</span><br><span class="line">    }    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>调用：<br><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title class_">Test</span>::<span class="title function_ invoke__">getInstance</span>()-&gt;<span class="title function_ invoke__">test</span>();</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2. 优先级"></a>2. 优先级</h4><p>当前类中的方法会覆盖trait方法，而trait方法用覆盖了基类中的方法。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Hello '</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">SayWorld</span></span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">sayHello</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'world!'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> <span class="keyword">extends</span> <span class="title">Base</span></span>{</span><br><span class="line">    <span class="keyword">use</span> <span class="title">SayWorld</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">MyHelloWorld</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">sayHello</span>();     </span><br><span class="line"><span class="comment">//output: Hello world!</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-多个trait"><a href="#3-多个trait" class="headerlink" title="3. 多个trait"></a>3. 多个trait</h4><p>通过逗号分隔，在 use 声明列出多个 trait类</p><h3 id="常用的trait类"><a href="#常用的trait类" class="headerlink" title="常用的trait类"></a>常用的trait类</h3><h4 id="1-单例类"><a href="#1-单例类" class="headerlink" title="1. 单例类"></a>1. 单例类</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用作单例</span></span><br><span class="line"><span class="comment"> * Trait Singleton</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ...$args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params">...<span class="variable">$args</span></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$instance</span>)) {</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="built_in">static</span>(...<span class="variable">$args</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-错误处理类"><a href="#2-错误处理类" class="headerlink" title="2. 错误处理类"></a>2. 错误处理类</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">common</span>\<span class="title class_">helper</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 错误操作类</span></span><br><span class="line"><span class="comment"> * Trait Error</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> app\common\helper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Error</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_code</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_error</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setError</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$code</span>, <span class="keyword">string</span> <span class="variable">$msg</span></span>): <span class="title">void</span></span>{</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_code = <span class="variable">$code</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_error = <span class="variable">$msg</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getError</span>(<span class="params"></span>): ?<span class="title">array</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;_code) ? [<span class="string">'code'</span> =&gt; <span class="variable language_">$this</span>-&gt;_code, <span class="string">'msg'</span> =&gt; <span class="variable language_">$this</span>-&gt;_error] : <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用方法：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Error</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">        ……</span><br><span class="line">        <span class="keyword">if</span>(){</span><br><span class="line">             <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setError</span>(<span class="number">0</span>, <span class="string">'数据不存在'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;           </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$rs</span> = <span class="variable">$s</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$error</span> = <span class="variable">$s</span>-&gt;<span class="title function_ invoke__">getError</span>()) {</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$error</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> $code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> $msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setError</span>(<span class="variable">$code</span>, <span class="variable">$msg</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.php.net/manual/zh/language.oop5.traits.php">https://www.php.net/manual/zh/language.oop5.traits.php</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trait </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP使用ES</title>
      <link href="/posts/php-elasticsearch.html"/>
      <url>/posts/php-elasticsearch.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p>下载安装java<br><code>https://www.oracle.com/java/technologies/downloads/#jdk18-windows</code><br>查看版本 java -version<br><img src="/images/php_es_1.png" alt=""></p></li><li><p>下载es<br><code>https://www.elastic.co/cn/downloads/elasticsearch</code></p></li><li><p>修改config\elasticsearch.yml文件的配置项</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xpack<span class="selector-class">.security</span><span class="selector-class">.enabled</span>: false</span><br><span class="line">xpack<span class="selector-class">.ml</span><span class="selector-class">.enabled</span>: false</span><br></pre></td></tr></tbody></table></figure></li><li><p>双击 bin\elasticsearch.bat<br>等几十秒后，在浏览器访问：<code>localhost:9200</code><br><img src="/images/php_es_2.png" alt=""></p></li><li><p>下载Kibana<br><code>https://www.elastic.co/cn/downloads/kibana</code><br>运行：<code>bin\kibana.bat</code><br>访问<code>http://localhost:5601</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈MySQL中的聚簇索引和非聚簇索引</title>
      <link href="/posts/mysql-clustered-index.html"/>
      <url>/posts/mysql-clustered-index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="聚簇索引和非聚簇索引的区别"><a href="#聚簇索引和非聚簇索引的区别" class="headerlink" title="聚簇索引和非聚簇索引的区别"></a>聚簇索引和非聚簇索引的区别</h3><p>聚簇索引的主索引的叶子结点存储的是键值对应的数据本身，辅助索引的叶子结点存储的是键值对应的数据的主键键值。</p><p>聚簇索引的数据和主键索引存储在一起。<br>聚簇索引的数据是根据主键的顺序保存。因此适合按主键索引的区间查找，可以有更少的磁盘I/O，加快查询速度。</p><p>MyISAM存储引擎采用的是非聚簇索引，非聚簇索引的主索引和辅助索引几乎是一样的，只是主索引不允许重复，不允许空值，他们的叶子结点的key都存储指向键值对应的数据的物理地址。<br>非聚簇索引的数据表和索引表是分开存储的。<br>非聚簇索引中的数据是根据数据的插入顺序保存。因此非聚簇索引更适合单个数据的查询。插入顺序不受键值影响。</p><p>聚集索引的B+Tree中的叶子节点存放的是整张表的行记录数据。辅助索引与聚集索引的区别在于辅助索引的叶子节点并不包含行记录的全部数据，而是存储相应行数据的聚集索引键，即主键。当通过辅助索引来查询数据时，InnoDB存储引擎会遍历辅助索引找到主键，然后再通过主键在聚集索引中找到完整的行记录数据。</p><p>MyISAM：非聚簇索引<br>innoDB：聚簇索引</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://mp.weixin.qq.com/s/pC0_Y7M7BkoUmlRwneZZdA">https://mp.weixin.qq.com/s/pC0_Y7M7BkoUmlRwneZZdA</a><br><a href="https://www.cnblogs.com/setalone/p/14851000.html">https://www.cnblogs.com/setalone/p/14851000.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 聚簇索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B树与B+树</title>
      <link href="/posts/btree-and-b+tree.html"/>
      <url>/posts/btree-and-b+tree.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="B-Tree对比BTree的优点"><a href="#B-Tree对比BTree的优点" class="headerlink" title="B+Tree对比BTree的优点"></a>B+Tree对比BTree的优点</h3><ul><li>磁盘读写代价更低<br>一般来说B+Tree比BTree更适合实现外存的索引结构，因为存储引擎的设计专家巧妙的利用了外存（磁盘）的存储结构，即磁盘的最小存储单位是扇区（sector），而操作系统的块（block）通常是整数倍的sector，操作系统以页（page）为单位管理内存，一页（page）通常默认为4K，数据库的页通常设置为操作系统页的整数倍，因此索引结构的节点被设计为一个页的大小，然后利用外存的“预读取”原则，每次读取的时候，把整个节点的数据读取到内存中，然后在内存中查找，已知内存的读取速度是外存读取I/O速度的几百倍，那么提升查找速度的关键就在于尽可能少的磁盘I/O，那么可以知道，每个节点中的key个数越多，那么树的高度越小，需要I/O的次数越少，因此一般来说B+Tree比BTree更快，因为B+Tree的非叶节点中不存储data，就可以存储更多的key。</li><li>查询速度更稳定<br>由于B+Tree非叶子节点不存储数据（data），因此所有的数据都要查询至叶子节点，而叶子节点的高度都是相同的，B+Tree的高度一般都在2~4层，因此所有数据的查询速度都是一样的。</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>  <a href="https://blog.csdn.net/u013235478/article/details/50625677">https://blog.csdn.net/u013235478/article/details/50625677</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下电脑截图</title>
      <link href="/posts/windows-screen-shot.html"/>
      <url>/posts/windows-screen-shot.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、QQ截图：<code>ctrl+alt+A</code><br>2、花式截图：<code>Win+shift+S</code>  可截任意形状<br>3、微信截图：<code>Alt+A</code><br>4、浏览器截图：<code>Ctrl+shift+X</code><br>5、WPS截图：<code>Ctrl+Alt+X</code> </p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP常见面试题</title>
      <link href="/posts/php-interview.html"/>
      <url>/posts/php-interview.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、什么是面向对象？主要特征是什么？"><a href="#1、什么是面向对象？主要特征是什么？" class="headerlink" title="1、什么是面向对象？主要特征是什么？"></a>1、什么是面向对象？主要特征是什么？</h4><p>面向对象是程序的一种设计方式，它利于提高程序的重用性，使程序结构更加清晰。主要特征：封装、继承、多态。</p><h4 id="2、session-与-cookie-的区别和联系，请从协议，产生的原因与作用说明"><a href="#2、session-与-cookie-的区别和联系，请从协议，产生的原因与作用说明" class="headerlink" title="2、session 与 cookie 的区别和联系，请从协议，产生的原因与作用说明?"></a>2、session 与 cookie 的区别和联系，请从协议，产生的原因与作用说明?</h4><p>A、http无状态协议，不能区分用户是否是从同一个网站上来的，同一个用户请求不同的页面不能看做是同一个用户。<br>B、SESSION存储在服务器端，COOKIE保存在客户端。Session比较安全，cookie用某些手段可以修改，不安全。Session依赖于cookie进行传递。<br>禁用cookie后，session不能正常使用。Session的缺点：保存在服务器端，每次读取都从服务器进行读取，对服务器有资源消耗。Session保存在服务器端的文件或数据库中，默认保存在文件中，文件路径由php配置文件的session.save_path指定。Session文件是公有的。</p><p>区别：</p><ol><li>存放位置：Session 保存在服务器，Cookie 保存在客户端。</li><li>存放的形式：Session 是以对象的形式保存在服务器，Cookie 以字符串的形式保存在客户端。</li><li>用途：Cookies 适合做保存用户的个人设置，爱好等，Session 适合做客户的身份验证</li><li>路径：Session 不能区分路径，同一个用户在访问一个网站期间，所有的 Session 在任何一个地方都可以访问到。而 Cookie 中如果设置了路径参数，那么同一个网站中不同路径下的 Cookie 互相是访问不到的。</li><li>安全性：Cookie 不是很安全，别人可以分析存放在本地的 COOKIE 并进行 COOKIE 欺骗，考虑到安全应当使用 session</li><li>大小以及数量限制：每个域名所包含的 cookie 数：IE7/8,FireFox:50 个，Opera30 个； Cookie 总大小：Firefox 和 Safari 允许 cookie 多达 4097 个字节，Opera 允许 cookie 多达 4096 个字 节，InternetExplorer 允许 cookie 多达 4095 个字节；一般认为 Session 没有大小和数量限制。</li></ol><p>关系：</p><ol><li>Session 需要借助 Cookie 才能正常工作。如果客户端完全禁止 Cookie，Session 将失效！因为 Session 是由应用服务器维持的一个 服务器端的存储空间，用户在连接服务器时，会由服务器生成一个唯一的 SessionID, 用该 SessionID 为标识符来存取服务器端的 Session 存储空间。而 SessionID 这一数据则是保存到客户端，用 Cookie 保存的，用户提交页面时，会将这一 SessionID 提交到服务器端，来存取 Session 数据。这一过程，是不用开发人员干预的。所以一旦客户端禁用 Cookie，那么 Session 也会失效。</li></ol><h4 id="3、HTTP-状态中302、403、-500代码含义？"><a href="#3、HTTP-状态中302、403、-500代码含义？" class="headerlink" title="3、HTTP 状态中302、403、 500代码含义？"></a>3、HTTP 状态中302、403、 500代码含义？</h4><p>一二三四五原则:（即一：消息系列；二：成功系列； 三：重定向系列；四：请求错误系列；五：服务器端错误系列。）<br>302:临时转移成功，请求的内容已转移到新位置<br>403:禁止访问<br>500:服务器内部错误<br>401：代表未授权。</p><h4 id="4、请写出数据类型-int-char-varchar-datetime-text-的意思；请问-varchar-和-char有什么区别？"><a href="#4、请写出数据类型-int-char-varchar-datetime-text-的意思；请问-varchar-和-char有什么区别？" class="headerlink" title="4、请写出数据类型(int char varchar datetime text)的意思；请问 varchar 和 char有什么区别？"></a>4、请写出数据类型(int char varchar datetime text)的意思；请问 varchar 和 char有什么区别？</h4><p>Int 整数char 定长字符 Varchar 变长字符 Datetime 日期时间型Text 文本型 Varchar与char的区别 char是固定长度的字符类型，分配多少空间，就占用多长空间。Varchar是可变长度的字符类型，内容有多大就占用多大的空间，能有效节省空间。由于varchar类型是可变的，所以在数据长度改变的时，服务器要进行额外的操作，所以效率比char类型低。</p><h4 id="5、MyISAM和-InnoDB-的基本区别？索引结构如何实现？"><a href="#5、MyISAM和-InnoDB-的基本区别？索引结构如何实现？" class="headerlink" title="5、MyISAM和 InnoDB 的基本区别？索引结构如何实现？"></a>5、MyISAM和 InnoDB 的基本区别？索引结构如何实现？</h4><p>A、MyISAM类型不支持事务，表锁，易产生碎片，要经常优化，读写速度较快，适合用于频繁查询的应用；<br>B、InnoDB类型支持事务，行锁，有崩溃恢复能力，读写速度比MyISAM慢，适合于插入和更新操作比较多的应用，空间占用大，不支持全文索引等。<br>创建索引：alert table tablename add index 索引名 (<code>字段名</code>)</p><h4 id="6、isset-和-empty-区别"><a href="#6、isset-和-empty-区别" class="headerlink" title="6、isset() 和 empty() 区别"></a>6、isset() 和 empty() 区别</h4><p>isset判断变量是否存在，可以传入多个变量，若其中一个变量不存在则返回假；empty判断变量是否为空为假，只可传一个变量，如果为空为假则返回真。</p><h4 id="7、请说明-PHP-中传值与传引用的区别。什么时候传值什么时候传引用？"><a href="#7、请说明-PHP-中传值与传引用的区别。什么时候传值什么时候传引用？" class="headerlink" title="7、请说明 PHP 中传值与传引用的区别。什么时候传值什么时候传引用？"></a>7、请说明 PHP 中传值与传引用的区别。什么时候传值什么时候传引用？</h4><p>按值传递：函数范围内对值的任何改变在函数外部都会被忽略<br>按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改<br>优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。按引用传递则不需要复制值，对于性能提高很有好处。</p><h4 id="8、在PHP中error-reporting这个函数有什么作用？"><a href="#8、在PHP中error-reporting这个函数有什么作用？" class="headerlink" title="8、在PHP中error_reporting这个函数有什么作用？"></a>8、在PHP中error_reporting这个函数有什么作用？</h4><p>设置PHP的报错级别并返回当前级别。</p><h4 id="9、说说你对缓存技术的了解？"><a href="#9、说说你对缓存技术的了解？" class="headerlink" title="9、说说你对缓存技术的了解？"></a>9、说说你对缓存技术的了解？</h4><p>缓存技术是将动态内容缓存到文件中，在一定时间内访问动态页面直接调用缓存文件，而不必重新访问数据库。</p><h4 id="10、现在编程中经常采取MVC三层结构，请问MVC分别指哪三层，有什么优点？"><a href="#10、现在编程中经常采取MVC三层结构，请问MVC分别指哪三层，有什么优点？" class="headerlink" title="10、现在编程中经常采取MVC三层结构，请问MVC分别指哪三层，有什么优点？"></a>10、现在编程中经常采取MVC三层结构，请问MVC分别指哪三层，有什么优点？</h4><p>MVC三层分别指：业务模型、视图、控制器，由控制器层调用模型处理数据，然后将数据映射到视图层进行显示，优点是：①可以实现代码的重用性，避免产生代码冗余；②M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式</p><h4 id="11、AJAX的优势是什么？"><a href="#11、AJAX的优势是什么？" class="headerlink" title="11、AJAX的优势是什么？"></a>11、AJAX的优势是什么？</h4><p>ajax是异步传输技术，可以通过javascript实现，也可以通过JQuery框架实现，实现局部刷新，减轻了服务器的压力，也提高了用户体验。</p><h4 id="12、在程序的开发中，如何提高程序的运行效率？"><a href="#12、在程序的开发中，如何提高程序的运行效率？" class="headerlink" title="12、在程序的开发中，如何提高程序的运行效率？"></a>12、在程序的开发中，如何提高程序的运行效率？</h4><p>A、优化SQL语句，查询语句中尽量不使用select *，用哪个字段查哪个字段；少用子查询可用表连接代替；少用模糊查询；<br>B、数据表中创建索引；<br>C、对程序中经常用到的数据生成缓存。</p><h4 id="13、请用正则表达式（Regular-Expression）写一个函数验证电子邮件的格式是否正确。"><a href="#13、请用正则表达式（Regular-Expression）写一个函数验证电子邮件的格式是否正确。" class="headerlink" title="13、请用正则表达式（Regular Expression）写一个函数验证电子邮件的格式是否正确。"></a>13、请用正则表达式（Regular Expression）写一个函数验证电子邮件的格式是否正确。</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkemail</span>(<span class="params"><span class="variable">$email</span></span>)</span>{</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_match</span>(‘/^[<span class="number">0</span>-<span class="number">9</span>a-zA-Z-]+@[<span class="number">0</span>-<span class="number">9</span>a-zA-Z-]+\.[<span class="number">0</span>-<span class="number">9</span>a-zA-Z]+$/’,<span class="variable">$email</span>)?’email格式正确‘:’email格式不正确‘;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="14、接口和抽象类的区别"><a href="#14、接口和抽象类的区别" class="headerlink" title="14、接口和抽象类的区别"></a>14、接口和抽象类的区别</h4><p>当多个同类的类要设计一个上层，通常设计为抽象类，当多个异构的类要设计一个上层，通常设计为接口。</p><h4 id="15、说说数据库的索引"><a href="#15、说说数据库的索引" class="headerlink" title="15、说说数据库的索引"></a>15、说说数据库的索引</h4><p>唯一索引、主键索引、联合索引</p><h4 id="16、说说redis常用的数据结构"><a href="#16、说说redis常用的数据结构" class="headerlink" title="16、说说redis常用的数据结构"></a>16、说说redis常用的数据结构</h4><p>string、list、hash、set、zset等</p><h4 id="17、Redis的内存淘汰策略有哪些"><a href="#17、Redis的内存淘汰策略有哪些" class="headerlink" title="17、Redis的内存淘汰策略有哪些"></a>17、Redis的内存淘汰策略有哪些</h4><p>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p><ul><li>全局的键空间选择性移除<ol><li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。</li><li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。（这个是最常用的）</li><li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li></ol></li><li>设置过期时间的键空间选择性移除<ol><li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</li><li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</li><li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</li></ol></li></ul><h4 id="18、Redis如何实现延时队列"><a href="#18、Redis如何实现延时队列" class="headerlink" title="18、Redis如何实现延时队列"></a>18、Redis如何实现延时队列</h4><p>使用sortedset，使用时间戳做score, 消息内容作为key,调用zadd来生产消息，消费者使用zrangbyscore获取n秒之前的数据做轮询处理。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下批处理</title>
      <link href="/posts/php-bat.html"/>
      <url>/posts/php-bat.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因工作需要，需要按条件删除指定表中大批量数据，故用php做了个站点页面处理程序，每页处理500条数据，处理后sleep(5)，跳转下一页；但程序运行中可能出现超时页面挂掉的情况，为了减少个人的工作量，就借助windows的任务计划程序，设置每两个小时，关闭浏览器，休眠几秒，再次在浏览器中访问处理程序地址。没想到效果还不错。下面是计划任务的bat程序。<br></p><figure class="highlight dos"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">TASKKILL</span> /F /IM chrome.exe</span><br><span class="line"><span class="built_in">ping</span> -n <span class="number">10</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> &gt; <span class="built_in">nul</span></span><br><span class="line"><span class="built_in">cmd</span> /c <span class="built_in">start</span> https://manage.lepayedu.com/index.php/my-test/deal-school-entry?page=<span class="number">100</span></span><br></pre></td></tr></tbody></table></figure><br><img src="/images/php_bat_1.png" alt=""><p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己封装的一些常用的PHP函数</title>
      <link href="/posts/php-some-my-functions.html"/>
      <url>/posts/php-some-my-functions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-将字符串每隔n位显示一个指定字符"><a href="#1-将字符串每隔n位显示一个指定字符" class="headerlink" title="1. 将字符串每隔n位显示一个指定字符"></a>1. 将字符串每隔n位显示一个指定字符</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字符串每隔n位显示一个指定字符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $str   原始字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $n        间隔位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $d     分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string       结果字符串</span></span><br><span class="line"><span class="comment"> * eg: ed4a32c2=&gt;ed:4a:32:c2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divisionStr</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$str</span>,<span class="keyword">int</span> <span class="variable">$n</span>,<span class="keyword">string</span> <span class="variable">$d</span>=<span class="string">" "</span></span>):<span class="title">string</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">join</span>(<span class="variable">$d</span>,<span class="title function_ invoke__">str_split</span>(<span class="variable">$str</span>,<span class="variable">$n</span>)));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-打印图片的每一个像素颜色值"><a href="#2-打印图片的每一个像素颜色值" class="headerlink" title="2. 打印图片的每一个像素颜色值"></a>2. 打印图片的每一个像素颜色值</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印图片的每一个像素颜色值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $picUrl    图片路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPicPixels</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$picUrl</span></span>): <span class="title">void</span> </span>{</span><br><span class="line">    <span class="variable">$i</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="variable">$picUrl</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$i</span>)    <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">imagesy</span>(<span class="variable">$i</span>); <span class="variable">$y</span>++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$x</span> = <span class="number">0</span>; <span class="variable">$x</span> &lt; <span class="title function_ invoke__">imagesx</span>(<span class="variable">$i</span>); <span class="variable">$x</span>++) {</span><br><span class="line">            <span class="variable">$rgb</span> = <span class="title function_ invoke__">imagecolorat</span>(<span class="variable">$i</span>, <span class="variable">$x</span>, <span class="variable">$y</span>);</span><br><span class="line">            <span class="variable">$r</span> = (<span class="variable">$rgb</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">            <span class="variable">$g</span> = (<span class="variable">$rgb</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">            <span class="variable">$b</span> = <span class="variable">$rgb</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"rgb(<span class="subst">$r</span>,<span class="subst">$g</span>,<span class="subst">$b</span>)"</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-字符串按照ASCII码顺序排序"><a href="#3-字符串按照ASCII码顺序排序" class="headerlink" title="3. 字符串按照ASCII码顺序排序"></a>3. 字符串按照ASCII码顺序排序</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串按照ASCII码顺序排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $str 字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $sort 排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortStr</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$str</span>, <span class="variable">$sort</span>=SORT_ASC</span>): <span class="title">string</span></span>{</span><br><span class="line">    <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$sort</span> == SORT_ASC){</span><br><span class="line">        <span class="title function_ invoke__">asort</span>(<span class="variable">$arr</span>);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="title function_ invoke__">arsort</span>(<span class="variable">$arr</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">join</span>(<span class="string">''</span>, <span class="variable">$arr</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-字节数转化为常用单位"><a href="#4-字节数转化为常用单位" class="headerlink" title="4. 字节数转化为常用单位"></a>4. 字节数转化为常用单位</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字节数转化为常用单位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $size 字节数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$size</span></span>): <span class="title">string</span></span>{</span><br><span class="line">    <span class="variable">$unit</span> = [<span class="string">'b'</span>, <span class="string">'kb'</span>, <span class="string">'mb'</span>, <span class="string">'gb'</span>, <span class="string">'tb'</span>, <span class="string">'pb'</span>];</span><br><span class="line">    <span class="variable">$exp</span> = <span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">log</span>(<span class="variable">$size</span>, <span class="number">1024</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">round</span>(<span class="variable">$size</span> / <span class="title function_ invoke__">pow</span>(<span class="number">1024</span>, <span class="variable">$exp</span>), <span class="number">2</span>) . <span class="string">' '</span> . <span class="variable">$unit</span>[<span class="variable">$exp</span>];</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 使用：查看内存使用 echo convert(memory_get_usage(false));</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-ping指定地址，用于监控服务器是否在线"><a href="#5-ping指定地址，用于监控服务器是否在线" class="headerlink" title="5. ping指定地址，用于监控服务器是否在线"></a>5. ping指定地址，用于监控服务器是否在线</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ping 指定地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $address</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pingHost</span>(<span class="params"><span class="variable">$address</span></span>)</span>{</span><br><span class="line">    <span class="variable">$address</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$address</span>);</span><br><span class="line">    <span class="variable">$host</span> = <span class="keyword">isset</span>(<span class="variable">$address</span>[<span class="string">'host'</span>]) ? <span class="variable">$address</span>[<span class="string">'host'</span>] : <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$host</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="variable">$status</span> = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strcasecmp</span>(PHP_OS, <span class="string">'WINNT'</span>) === <span class="number">0</span>) {</span><br><span class="line">        <span class="variable">$rs</span> = <span class="title function_ invoke__">exec</span>(<span class="string">"ping -n 1 <span class="subst">{$host}</span>"</span>, <span class="variable">$outcome</span>, <span class="variable">$status</span>);  <span class="comment">// Windows 服务器下</span></span><br><span class="line">    } <span class="keyword">elseif</span> (<span class="title function_ invoke__">strcasecmp</span>(PHP_OS, <span class="string">'Linux'</span>) === <span class="number">0</span>) {</span><br><span class="line">        <span class="variable">$rs</span> = <span class="title function_ invoke__">exec</span>(<span class="string">"ping -c 1 <span class="subst">{$host}</span>"</span>, <span class="variable">$outcome</span>, <span class="variable">$status</span>);  <span class="comment">// Linux 服务器下</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$status</span>==<span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//$url = "https://cloud.tencent.com/document/api/457/37184?id=232";</span></span><br><span class="line"><span class="comment">//var_dump(pingHost($url));       //true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-文本变量替换"><a href="#6-文本变量替换" class="headerlink" title="6. 文本变量替换"></a>6. 文本变量替换</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 变量替换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $string 要进行替换的原始字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params 关联数组(包含需要替换的占位符和对应的值)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceString</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$string</span>, <span class="keyword">array</span> <span class="variable">$params</span> = []</span>): <span class="title">string</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) {</span><br><span class="line">        <span class="variable">$placeholder</span> = <span class="string">'{'</span> . <span class="variable">$key</span> . <span class="string">'}'</span>;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$placeholder</span>, <span class="variable">$value</span>, <span class="variable">$string</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//    $string = 'Accumulated login {amount} days';</span></span><br><span class="line"><span class="comment">//    $params = ['amount' =&gt; 20];</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    $result = replaceString($string, $params);</span></span><br><span class="line"><span class="comment">//    echo $result;  // 输出：Accumulated login 20 days</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-判断指定数字是否在区间里"><a href="#7-判断指定数字是否在区间里" class="headerlink" title="7. 判断指定数字是否在区间里"></a>7. 判断指定数字是否在区间里</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断指定数字是否在区间里</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int|float $num    指定数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $interval  区间  支持格式：(,20)、[10,5)、【20.5,)、(-∞，50.1)、(-∞,+∞)、(,)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInInterval</span>(<span class="params"><span class="variable">$num</span>, <span class="variable">$interval</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">'/^([\[\(])(-?∞|\d*),(\+?∞|\d*)([\]\)])$/'</span>;</span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$interval</span>, <span class="variable">$matches</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$res</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$leftBracket</span> = <span class="variable">$matches</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="variable">$leftNum</span> = <span class="variable">$matches</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="variable">$rightNum</span> = <span class="variable">$matches</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="variable">$rightBracket</span> = <span class="variable">$matches</span>[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$leftNum</span> !== <span class="string">'∞'</span> &amp;&amp; <span class="variable">$leftNum</span> !== <span class="string">''</span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$leftBracket</span> == <span class="string">'['</span>) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$num</span> &lt; <span class="variable">$leftNum</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$num</span> &lt;= <span class="variable">$leftNum</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$rightNum</span> !== <span class="string">'+∞'</span> &amp;&amp; <span class="variable">$rightNum</span> !== <span class="string">''</span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$rightBracket</span> == <span class="string">']'</span>) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$num</span> &gt; <span class="variable">$rightNum</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$num</span> &gt;= <span class="variable">$rightNum</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//    $num = 20;</span></span><br><span class="line"><span class="comment">//    $interval = "(20,]";</span></span><br><span class="line"><span class="comment">//    if (MathUtils::isInInterval($num, $interval)) {</span></span><br><span class="line"><span class="comment">//        echo "数字 {$num} 在区间 {$interval} 中";</span></span><br><span class="line"><span class="comment">//    } else {</span></span><br><span class="line"><span class="comment">//        echo "数字 {$num} 不在区间 {$interval} 中";</span></span><br><span class="line"><span class="comment">//    }</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见颜色值</title>
      <link href="/posts/normal-rgb.html"/>
      <url>/posts/normal-rgb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>RGB(255,255,255)：白色   #FFFFFF<br>RGB(0,0,0)：黑色  #000000<br>RGB(255,0,0)：红色  #FF0000</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/posts/cross-domain.html"/>
      <url>/posts/cross-domain.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="存在原因"><a href="#存在原因" class="headerlink" title="存在原因"></a>存在原因</h3><p>浏览器的同源策略，一个源表示协议、端口、域名都相同，否则就形成跨域。<br><img src="/images/cross_domain_1.png" alt=""></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>  A. 服务器响应头：header(“Access-Control-Allow-Origin:*”);<br>  B. iframe实现跨域<br>  C. jsonp  带有 src属性的标签(&lt;script&gt;/&lt;img&gt;/&lt;iframe&gt;)不受同源策略限制</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锚定效应</title>
      <link href="/posts/anchoring-effect.html"/>
      <url>/posts/anchoring-effect.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>沉锚效应，心理学名词，指的是人们在对某人某事做出判断时，易受第一印象或第一信息支配，就像沉入海底的锚一样把人们的思想固定在某处。</p>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锚定效应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP常用的算法</title>
      <link href="/posts/php-common-algorithm.html"/>
      <url>/posts/php-common-algorithm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>时间复杂度：O(N^2)</li><li>代码实现<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>{</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable">$n</span>-<span class="number">1</span>; <span class="variable">$i</span>++){</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="variable">$i</span>+<span class="number">1</span>; <span class="variable">$j</span>&lt;<span class="variable">$n</span>; <span class="variable">$j</span>++){</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$j</span>] &lt; <span class="variable">$arr</span>[<span class="variable">$i</span>]){</span><br><span class="line">                [<span class="variable">$arr</span>[<span class="variable">$i</span>], <span class="variable">$arr</span>[<span class="variable">$j</span>]] = [<span class="variable">$arr</span>[<span class="variable">$j</span>], <span class="variable">$arr</span>[<span class="variable">$i</span>]];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = [<span class="number">45</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">54</span>,<span class="number">3</span>,<span class="number">23</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">bubbleSort</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="comment">// Array ( [0] =&gt; 2 [1] =&gt; 3 [2] =&gt; 5 [3] =&gt; 23 [4] =&gt; 45 [5] =&gt; 54 )</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>{</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$n</span> &lt;= <span class="number">1</span>)    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    <span class="variable">$index</span> = <span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable">$leftArr</span> = <span class="variable">$rightArr</span> = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;<span class="variable">$n</span>; <span class="variable">$i</span>++){</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$i</span>] &lt;= <span class="variable">$index</span>){</span><br><span class="line">            <span class="variable">$leftArr</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="variable">$rightArr</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="variable">$leftArr</span> = <span class="title function_ invoke__">quickSort</span>(<span class="variable">$leftArr</span>);</span><br><span class="line">    <span class="variable">$rightArr</span> = <span class="title function_ invoke__">quickSort</span>(<span class="variable">$rightArr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_merge</span>(<span class="variable">$leftArr</span>,[<span class="variable">$index</span>],<span class="variable">$rightArr</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = [<span class="number">1</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">54</span>,<span class="number">3</span>,<span class="number">23</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">quickSort</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="comment">// Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 5 [4] =&gt; 23 [5] =&gt; 45 [6] =&gt; 54 )</span></span><br></pre></td></tr></tbody></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li>时间复杂度：O(N^2)</li><li>代码实现<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>{</span><br><span class="line">    <span class="variable">$n</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable">$n</span>-<span class="number">1</span>; <span class="variable">$i</span>++){</span><br><span class="line">        <span class="variable">$k</span> = <span class="variable">$i</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="variable">$i</span>+<span class="number">1</span>; <span class="variable">$j</span>&lt;<span class="variable">$n</span>; <span class="variable">$j</span>++){</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$k</span>] &gt; <span class="variable">$arr</span>[<span class="variable">$j</span>]){</span><br><span class="line">                <span class="variable">$k</span> = <span class="variable">$j</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$k</span> != <span class="variable">$i</span>){</span><br><span class="line">            [<span class="variable">$arr</span>[<span class="variable">$k</span>],<span class="variable">$arr</span>[<span class="variable">$i</span>]] = [<span class="variable">$arr</span>[<span class="variable">$i</span>],<span class="variable">$arr</span>[<span class="variable">$k</span>]];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = [<span class="number">1</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">54</span>,<span class="number">3</span>,<span class="number">23</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">selectSort</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="comment">// Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 5 [4] =&gt; 23 [5] =&gt; 45 [6] =&gt; 54 )</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul><li>流程<br>将一个待排序的无序的数组看作是两个列表，一个有序的列表，一个无序的列表，从无序的列表每次拿出一个待插入的元素，插入到有序的列表中，直到无序列表为空，排序完毕.</li><li>实例<ol><li>有一个无序的一维数组是这次需要排序的数组，数组是：[36,12,96,-1]</li><li>首先把数组的第一个元素 [36] 看作是一个独立的有序的列表，把剩下的元素 [12, 96, -1] 看作是一个无序的列表</li><li>第一个待插入的元素就是 12，要把 12 插入到有序的列表中，首先需要 12 和 36 比较，如果带插入的元素 12 小于 36, 就需要把 12 插入到 36前面，也就是 36 要后移一位。</li><li>插入排序实际是需要比较数组元素的总数减一轮，因为第一个元素不需要比较。</li></ol></li><li>时间复杂度：O(N^2)</li><li>代码实现  <figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>{</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$arr</span>))    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="variable">$count</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$count</span> &lt;= <span class="number">1</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;<span class="variable">$count</span>; <span class="variable">$i</span>++){</span><br><span class="line">        <span class="variable">$insertValue</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$insertIndex</span> = <span class="variable">$i</span>-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$insertIndex</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$insertValue</span> &lt; <span class="variable">$arr</span>[<span class="variable">$insertIndex</span>]){</span><br><span class="line">            <span class="variable">$arr</span>[<span class="variable">$insertIndex</span>+<span class="number">1</span>] = <span class="variable">$arr</span>[<span class="variable">$insertIndex</span>];</span><br><span class="line">            <span class="variable">$insertIndex</span>--;</span><br><span class="line">        }</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$insertIndex</span>+<span class="number">1</span>] = <span class="variable">$insertValue</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = [<span class="number">1</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">54</span>,<span class="number">3</span>,<span class="number">23</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">insertSort</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="comment">//  Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 5 [4] =&gt; 23 [5] =&gt; 45 [6] =&gt; 54 )</span></span><br></pre></td></tr></tbody></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3></li></ul><h3 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h3><ul><li>概念<br>  二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。<br>  首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</li><li>代码实例<ul><li>循环二分查找<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params"><span class="variable">$array</span>,<span class="variable">$findVal</span></span>)</span>{</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$array</span>) || <span class="keyword">empty</span>(<span class="variable">$array</span>)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$start</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$array</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$start</span> &lt;= <span class="variable">$end</span>){</span><br><span class="line">        <span class="variable">$middle</span> = <span class="title function_ invoke__">intval</span>((<span class="variable">$start</span>+<span class="variable">$end</span>)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$array</span>[<span class="variable">$middle</span>] &gt; <span class="variable">$findVal</span>){</span><br><span class="line">            <span class="variable">$end</span> = <span class="variable">$middle</span> - <span class="number">1</span>;</span><br><span class="line">        }<span class="keyword">elseif</span> (<span class="variable">$array</span>[<span class="variable">$middle</span>] &lt; <span class="variable">$findVal</span>){</span><br><span class="line">            <span class="variable">$start</span> = <span class="variable">$middle</span> + <span class="number">1</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$middle</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line"><span class="variable">$array</span> = [<span class="number">3</span>,<span class="number">54</span>,<span class="number">67</span>,<span class="number">124</span>,<span class="number">542</span>,<span class="number">642</span>,<span class="number">843</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">binarySearch</span>(<span class="variable">$array</span>, <span class="number">542</span>);     <span class="comment">// 4</span></span><br></pre></td></tr></tbody></table></figure></li><li>递归二分查找<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params"><span class="variable">$array</span>,<span class="variable">$findVal</span>,<span class="variable">$start</span>,<span class="variable">$end</span></span>)</span>{</span><br><span class="line">    <span class="variable">$middle</span> = <span class="title function_ invoke__">intval</span>((<span class="variable">$start</span>+<span class="variable">$end</span>)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$start</span>&gt;<span class="variable">$end</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$array</span>[<span class="variable">$middle</span>] &gt; <span class="variable">$findVal</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">binarySearch</span>(<span class="variable">$array</span>,<span class="variable">$findVal</span>,<span class="variable">$start</span>,<span class="variable">$middle</span>-<span class="number">1</span>);</span><br><span class="line">    }<span class="keyword">elseif</span> (<span class="variable">$array</span>[<span class="variable">$middle</span>] &lt; <span class="variable">$findVal</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">binarySearch</span>(<span class="variable">$array</span>,<span class="variable">$findVal</span>,<span class="variable">$middle</span>+<span class="number">1</span>,<span class="variable">$end</span>);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$middle</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="number">3</span>,<span class="number">54</span>,<span class="number">67</span>,<span class="number">124</span>,<span class="number">542</span>,<span class="number">642</span>,<span class="number">843</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">binarySearch</span>(<span class="variable">$array</span>, <span class="number">542</span>,<span class="number">0</span>,<span class="title function_ invoke__">count</span>(<span class="variable">$array</span>)-<span class="number">1</span>);     <span class="comment">// 4</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB笔记</title>
      <link href="/posts/mongodb-notes.html"/>
      <url>/posts/mongodb-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="常用脚本"><a href="#常用脚本" class="headerlink" title="常用脚本"></a>常用脚本</h3><ol><li><p>修改字段名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">'集合名'</span>).<span class="keyword">update</span>({}, {$rename: {"修改前字段名1": "修改后字段名1", "修改前字段名2": "修改后字段名2"...}}, {multi:<span class="literal">true</span>})</span><br></pre></td></tr></tbody></table></figure><p><code>{multi:true}</code>表示 对该集合的所有数据生效</p></li><li><p>新增字段</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">'集合名'</span>).<span class="keyword">update</span>({}, {$<span class="keyword">set</span>: {"字段名1": "", "字段名2": ""...}}, {multi:<span class="literal">true</span>})</span><br></pre></td></tr></tbody></table></figure><p><code>{multi:true}</code>表示 对该集合的所有数据生效</p></li><li><p>更新某个字段的值，使其与另一个字段的值相同</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">'集合名'</span>).find().forEach(</span><br><span class="line"><span class="keyword">function</span>(item){</span><br><span class="line">db.getCollection(<span class="string">'集合名'</span>).<span class="keyword">update</span>({"_id":item._id}, {"$set":{"字段名A":item.字段名B}}, {})</span><br><span class="line">}</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建集合</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection("集合名");</span><br></pre></td></tr></tbody></table></figure></li></ol><ol><li>创建索引<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection("集合名").createIndex({</span><br><span class="line">    "字段名": NumberInt("1"),</span><br><span class="line">    "字段名": NumberInt("-1"),</span><br><span class="line">……</span><br><span class="line">    "字段名": NumberInt("1")</span><br><span class="line">}, {</span><br><span class="line">    name: "索引名"</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>1：升序，-1：降序</li></ol><ol><li>插入数据<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection("集合名").<span class="keyword">insert</span>({</span><br><span class="line">"字段1": 值<span class="number">1</span>,</span><br><span class="line">"字段2": 值<span class="number">2</span>,</span><br><span class="line">……</span><br><span class="line">    "字段n": 值n</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标管理</title>
      <link href="/posts/target-management.html"/>
      <url>/posts/target-management.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目标管理"><a href="#目标管理" class="headerlink" title="目标管理"></a>目标管理</h2><h2 id="向上管理"><a href="#向上管理" class="headerlink" title="向上管理"></a>向上管理</h2><h2 id="向下负责"><a href="#向下负责" class="headerlink" title="向下负责"></a>向下负责</h2><h2 id="激励团队"><a href="#激励团队" class="headerlink" title="激励团队"></a>激励团队</h2>]]></content>
      
      
      <categories>
          
          <category> 技术管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号消息推送</title>
      <link href="/posts/wx-msg-push.html"/>
      <url>/posts/wx-msg-push.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、公众号模板消息推送"><a href="#1、公众号模板消息推送" class="headerlink" title="1、公众号模板消息推送"></a>1、公众号模板消息推送</h3><ol><li>需在公众号的IP白名单中添加IP<br><img src="/images/wx_msg_push_1.png" alt=""></li><li><p>启用服务器配置<br><img src="/images/wx_msg_push_2.png" alt=""></p></li><li><p>报错<code>ridinvalid weapp pagepath</code><br>说明公众号关联的小程序没有这个界面，可以不设置pagepath</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品设计</title>
      <link href="/posts/product-design.html"/>
      <url>/posts/product-design.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、我们的手机上都装了很多APP，而现在的APP基本上都需要账号登录。那么问题来了，如果手机丢了，你最关心的是什么呢，是这些APP的账号信息泄露被不法份子使用，还是这个应用里的个人隐私数据泄露呢？个人感觉可以从以下几个方面提高产品的安全性：</p><p>  A、APP内部涉及到交易功能需校验交易密码；</p><p>  B、在进入指定页面的时候，添加面容ID/手势解锁，如启动时、进入个人中心时等；</p><p>  C、APP内可进行设备管理，APP内可查看设备的最近登录信息，并解绑当前设备外的指定设备(或删除指定设备数据)；</p><p>  D、对于不合常规的系列行为进行限制，如：修改登录密码后立即注销账号。</p>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html网页内容转为pdf文件</title>
      <link href="/posts/html-to-pdf.html"/>
      <url>/posts/html-to-pdf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用wkhtmltopdf"><a href="#使用wkhtmltopdf" class="headerlink" title="使用wkhtmltopdf"></a>使用wkhtmltopdf</h3><p>软件下载地址：<a href="https://wkhtmltopdf.org/downloads.html，需翻墙">https://wkhtmltopdf.org/downloads.html，需翻墙</a></p><ul><li>windows下使用<br>下载并安装<br>cmd命令行执行示例：<br><code>wkhtmltopdf\bin\wkhtmltopdf.exe https://crazy-boy.com/xx.html F:/b.pdf</code><br>页面地址中不能含有&amp;等特殊符号</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.cnblogs.com/see7di/p/3781864.html">https://www.cnblogs.com/see7di/p/3781864.html</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goframe框架使用</title>
      <link href="/posts/goframe-note.html"/>
      <url>/posts/goframe-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="gen-dao使用"><a href="#gen-dao使用" class="headerlink" title="gen dao使用"></a>gen dao使用</h4><ol><li>下载软件：<a href="https://github.com/gogf/gf-cli/releases">https://github.com/gogf/gf-cli/releases</a></li><li><p>安装，并添加环境变量<br><img src="/images/goframe_note_1.png" alt=""></p></li><li><p>查看版本：<code>gf -version</code></p></li><li>更新model：<code>gf gen dao -c bin/config.toml -path . -r tf_</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Goframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化</title>
      <link href="/posts/mysql-optimization.html"/>
      <url>/posts/mysql-optimization.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">数据库优化无论实在面试还是工作中都非常重要，结合个人多年的从业经验，它主要从数据库设计、sql优化、服务器优化等方面来进行。</div><h3 id="数据库设计优化"><a href="#数据库设计优化" class="headerlink" title="数据库设计优化"></a>数据库设计优化</h3><h4 id="表设计方面"><a href="#表设计方面" class="headerlink" title="表设计方面"></a>表设计方面</h4><ul><li>1）表的数据类型是否合理，要遵守选取数据类型越简单越小的原则</li><li>2）表中碎片是否整理</li><li>3）表的统计信息是否收集，只有统计信息准确，执行计划才能帮助优化SQL</li><li>4）表设计时候增加必要的注释，说明字段的用途<h4 id="字段设计方面"><a href="#字段设计方面" class="headerlink" title="字段设计方面"></a>字段设计方面</h4></li><li>1）使用varchar替代char<br>   varchar的存储是按实际长度来存储的，可以节省存储空间，而char是按照定义长度来存储的，不足补充空格</li></ul><h3 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h3><h4 id="常规优化"><a href="#常规优化" class="headerlink" title="常规优化"></a>常规优化</h4><ul><li>1）尽量不要使用 <code>select *</code>，而是使用具体的字段<br>   避免了不需要的列返回给客户端调用，节约流量，<code>select *</code>可能会用到覆盖索引，直接从索引中获取要查询的列数据，减少了回表查询，调高查询效率</li><li>2）避免在where子句中使用OR来进行条件关联，有可能造成索引失效</li><li>3）尽量使用数值类型代替字符串<br>   处理引擎在执行查询和连接时候，如果是字符串类型则会逐个比较字符，要是数值类型的话直接比较一次就可以了，字符串的连接性能也会大大降低。</li><li>4）应尽量避免在where子句中使用!=或&lt;&gt;操作符<br>   这种情况可能会造成索引失效，经过sql优化器优化，执行引擎发现使用索引的代价比不走索引还要大，就会放弃使用索引直接走全表扫描</li><li>5）在inner join 、left join、right join都满足条件的状况下，优先使用inner join<br>   inner join内连接，只保留左右两张表中都匹配的结果集；left join 左连接，以左表为主表，返回左表中的所有行，即使右表中没有匹配的行；right join右连接，以右表为主表，返回右表中的所有数据，即使坐标中没有匹配的行；如果是inner join等值连接，返回的行数比较小，所以效率较高；左右连接的话，按照“小表驱动大表的原则”，用小表作为主表</li><li>6）遵循“小表驱动大表”的原则<br>   在含有复杂子查询的sql语句中，在满足条件的情况下，应该将小表放在里面层层过滤，缩小查询的范围</li><li>7）分组过滤的时候，应该先过滤，再分组</li><li>8）执行delete或update语句，加个limit或者循环分批次删除<br>   降低误删数据的代价，避免长事务，数据量大的话，容易把cpu打满，一次性删除数据太多的话可能造成锁表</li><li>9）用union all替代union<br>   union会对筛选掉重复的记录，所以会在连接后对所产生的结果集先进行排序运算，然后再删除重复记录返回，如果数据量比较大的情况下可能会使用磁盘排序</li><li>10）多条写数据，建议采用批量提交减少事务提交的次数，提高性能</li><li>11）关联查询的表连接不要太多<br>   关联表的个数越多，编译的时间和开销也越大，每次关联在内存中都会产生一个临时表</li><li>12）索引并不是越多越好<br>   索引虽然提高了查询性能，但是会降低数据写入的速度，并且索引的存储是要占用空间的，索引也是排序的，排序是要花费时间的，insert和update操作可能会导致重建索引，如果数据量巨大，这笔消耗也是非常惊人的 </li><li>13）去重distinct过滤字段要少<br>   数据库引擎对数据的比较、过滤是一个很耗费资源的操作</li><li><p>14）尽量避使用游标</p><h4 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h4></li><li>1）通过explain，查看执行计划，检查索引使用情况，没有用到索引，考虑创建</li><li>2）创建索引前，查看索引的选择性distinct，判断该字段是否适创建索引<br> 索引选择性指不重复的索引值和数据记录总数的比值，越接近1越好；主键索引和唯一索引选择性是1</li><li>3）创建索引后，再查看执行计划，对比两次结果，查看效率是否提高<h4 id="慢查询优化"><a href="#慢查询优化" class="headerlink" title="慢查询优化"></a>慢查询优化</h4></li><li>1）如果一个select语句中没有where条件，只有单纯的group by | order by，这是无法使用索引的。需要有where作为基础铺垫，遵从最左原则才能使用索引。</li></ul><h3 id="服务器优化"><a href="#服务器优化" class="headerlink" title="服务器优化"></a>服务器优化</h3><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yii2使用笔记</title>
      <link href="/posts/php-yii2-notes.html"/>
      <url>/posts/php-yii2-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-安装Yii2第三方扩展"><a href="#1-安装Yii2第三方扩展" class="headerlink" title="1. 安装Yii2第三方扩展"></a>1. 安装Yii2第三方扩展</h3><ul><li>方法一：composer安装<figure class="highlight armasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">php</span> composer.phar <span class="meta">require</span> php-amqplib/php-amqplib</span><br><span class="line">或者</span><br><span class="line">在composer.json文件的<span class="meta">require</span>里添加<span class="string">"php-amqplib/php-amqplib"</span>: <span class="string">"~2.7"</span>，然后执行composer update</span><br></pre></td></tr></tbody></table></figure></li><li>方法二：手动添加<br>1、拷贝php-amqplib扩展到vendor目录下，<br>2、在vendor/yiisoft/extensions.php里添加如下配置项： <figure class="highlight smali"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">'php-amqplib/php-amqplib' =&gt;</span><br><span class="line">  <span class="built_in"> array </span>(</span><br><span class="line">      'name' =&gt; 'php-amqplib/php-amqplib',</span><br><span class="line">      'version' =&gt; '2.4.5.0',</span><br><span class="line">      'alias' =&gt;</span><br><span class="line">        <span class="built_in"> array </span>(</span><br><span class="line">            '@PhpAmqpLib' =&gt; $vendorDir . '/php-amqplib/php-amqplib/PhpAmqpLib',</span><br><span class="line">         ),</span><br><span class="line">   ), </span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yii2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitMQ+yii2实现远程过程调用(RPC)</title>
      <link href="/posts/yii2-rabbitmq.html"/>
      <url>/posts/yii2-rabbitmq.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="RPC服务端代码"><a href="#RPC服务端代码" class="headerlink" title="RPC服务端代码"></a>RPC服务端代码</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">console</span>\<span class="title class_">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">console</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RpcServerController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$channel</span>;</span><br><span class="line"><span class="keyword">private</span>  <span class="variable">$connection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span> (<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable">$amqp</span> = yii::<span class="variable">$app</span>-&gt;params[<span class="string">'amqp'</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//建立一个到RabbitMQ服务器的连接</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;connection = <span class="keyword">new</span> <span class="title class_">AMQPStreamConnection</span>(<span class="variable">$amqp</span>[<span class="string">"host"</span>], <span class="variable">$amqp</span>[<span class="string">"port"</span>], <span class="variable">$amqp</span>[<span class="string">"user"</span>], <span class="variable">$amqp</span>[<span class="string">"password"</span>]);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;channel = <span class="variable language_">$this</span>-&gt;connection-&gt;<span class="title function_ invoke__">channel</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RPC服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionRpcServer</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="comment">//建立一个到RabbitMQ服务器的连接</span></span><br><span class="line">        <span class="variable">$connection</span> = <span class="variable language_">$this</span>-&gt;connection;</span><br><span class="line">        <span class="variable">$channel</span> = <span class="variable language_">$this</span>-&gt;channel;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//接下来,我们创建一个通道</span></span><br><span class="line">        <span class="variable">$channel</span>-&gt;<span class="title function_ invoke__">queue_declare</span>(<span class="string">'rpc_queue'</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params"><span class="variable">$n</span></span>) </span>{</span><br><span class="line">           <span class="keyword">return</span> <span class="variable">$n</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//回调</span></span><br><span class="line">        <span class="variable">$callback</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$req</span></span>)</span>{</span><br><span class="line">            <span class="variable">$n</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$req</span>-&gt;body);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">" [.] fib("</span>, <span class="variable">$n</span>, <span class="string">")\n"</span>;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="keyword">new</span> <span class="title class_">AMQPMessage</span>((<span class="keyword">string</span>) <span class="title function_ invoke__">fib</span>(<span class="variable">$n</span>),[]<span class="string">'correlation_id'</span> =&gt; <span class="variable">$req</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">'correlation_id'</span>)]);</span><br><span class="line">            <span class="variable">$req</span>-&gt;delivery_info[<span class="string">'channel'</span>]-&gt;<span class="title function_ invoke__">basic_publish</span>(<span class="variable">$msg</span>,<span class="string">''</span>, <span class="variable">$req</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">'reply_to'</span>));</span><br><span class="line">            <span class="variable">$req</span>-&gt;delivery_info[<span class="string">'channel'</span>]-&gt;<span class="title function_ invoke__">basic_ack</span>(<span class="variable">$req</span>-&gt;delivery_info[<span class="string">'delivery_tag'</span>]);</span><br><span class="line">        };</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$channel</span>-&gt;<span class="title function_ invoke__">basic_qos</span>(<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="variable">$channel</span>-&gt;<span class="title function_ invoke__">basic_consume</span>(<span class="string">'rpc_queue'</span>,<span class="string">''</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="variable">$callback</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$channel</span>-&gt;callbacks)) {</span><br><span class="line"><span class="variable">$channel</span>-&gt;<span class="title function_ invoke__">wait</span>();</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$channel</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">        <span class="variable">$connection</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="RPC客户端代码"><a href="#RPC客户端代码" class="headerlink" title="RPC客户端代码"></a>RPC客户端代码</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">service</span>\<span class="title class_">entry</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">common</span>\<span class="title">components</span>\<span class="title">BaseServer</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">common</span>\<span class="title">library</span>\<span class="title">Helper</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Channel</span>\<span class="title">AMQPChannel</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Wire</span>\<span class="title">AMQPTable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteOpenDoor</span> <span class="keyword">extends</span> <span class="title">BaseServer</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">   <span class="keyword">const</span> <span class="variable constant_">EXPIRE</span> = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">const</span> <span class="variable constant_">QUEUE_NAME</span> = <span class="string">"remote_open_door"</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$devSn</span>,<span class="variable">$schoolId</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@var</span> AMQPChannel</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="variable">$channel</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="variable">$connection</span>,<span class="variable">$replyQueue</span>,<span class="variable">$corrId</span>,<span class="variable">$response</span>,<span class="variable">$params</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="variable">$door</span> = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{</span><br><span class="line">      <span class="variable">$amqp</span> = <span class="title class_">Yii</span>::<span class="variable">$app</span>-&gt;params[<span class="string">'rabbitMQ'</span>];</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;connection = <span class="keyword">new</span> <span class="title class_">AMQPStreamConnection</span>(<span class="variable">$amqp</span>[<span class="string">'host'</span>],<span class="variable">$amqp</span>[<span class="string">'port'</span>],<span class="variable">$amqp</span>[<span class="string">'user'</span>],<span class="variable">$amqp</span>[<span class="string">'password'</span>],<span class="variable">$amqp</span>[<span class="string">'vhost'</span>]);</span><br><span class="line">      <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;connection-&gt;<span class="title function_ invoke__">isConnected</span>()){</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setError</span>(<span class="number">10003</span>,<span class="string">'连接失败'</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;channel = <span class="variable language_">$this</span>-&gt;connection-&gt;<span class="title function_ invoke__">channel</span>();</span><br><span class="line"></span><br><span class="line">      <span class="variable">$arguments</span> = <span class="keyword">new</span> <span class="title class_">AMQPTable</span>();</span><br><span class="line">      <span class="variable">$arguments</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="string">"x-message-ttl"</span>,<span class="number">10000</span>);    <span class="comment">//消息10s过期</span></span><br><span class="line">      <span class="comment">//$this-&gt;channel-&gt;queue_declare(self::QUEUE_NAME,false,false,false,false,false,$arguments);</span></span><br><span class="line">      <span class="variable language_">$this</span>-&gt;channel-&gt;<span class="title function_ invoke__">exchange_declare</span>(<span class="built_in">self</span>::<span class="variable constant_">QUEUE_NAME</span>,<span class="string">'topic'</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line">      <span class="comment">//$this-&gt;replyQueue = $this-&gt;devSn.'_'.$this-&gt;schoolId.'_'.microtime(true);</span></span><br><span class="line">      <span class="keyword">list</span>(<span class="variable language_">$this</span>-&gt;replyQueue, ,) = <span class="variable language_">$this</span>-&gt;channel-&gt;<span class="title function_ invoke__">queue_declare</span>(<span class="string">""</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">      <span class="comment">//回调</span></span><br><span class="line">      <span class="variable">$callback</span> = <span class="function"><span class="keyword">function</span>(<span class="params">AMQPMessage <span class="variable">$rep</span></span>)</span>{</span><br><span class="line">         <span class="comment">//var_dump($rep-&gt;get_properties());die;</span></span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$rep</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">'correlation_id'</span>) == <span class="variable language_">$this</span>-&gt;corrId) {</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;response = <span class="variable">$rep</span>-&gt;body;</span><br><span class="line">         }</span><br><span class="line">      };</span><br><span class="line"></span><br><span class="line">      <span class="comment">//接收回调信息</span></span><br><span class="line">      <span class="variable language_">$this</span>-&gt;channel-&gt;<span class="title function_ invoke__">basic_consume</span>( <span class="variable">$this</span>-&gt;replyQueue,<span class="string">''</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="variable">$callback</span>);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>{</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">init</span>();</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//组装参数</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">buildParams</span>(<span class="params"></span>)</span>{</span><br><span class="line">      <span class="variable">$params</span> = [</span><br><span class="line">         <span class="string">'expire'</span>=&gt;<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">time</span>() + <span class="built_in">self</span>::<span class="variable constant_">EXPIRE</span>),</span><br><span class="line">         <span class="string">'devSn'</span>=&gt;<span class="title function_ invoke__">intval</span>(<span class="variable">$this</span>-&gt;devSn),</span><br><span class="line">         <span class="string">'door'</span>=&gt;<span class="variable language_">$this</span>-&gt;door,</span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">$this</span>-&gt;params = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$params</span>,<span class="literal">true</span>);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//发送mq开门指令</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"></span>)</span>{</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildParams</span>();</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;corrId = <span class="title function_ invoke__">uniqid</span>();</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;response = <span class="literal">null</span>;</span><br><span class="line">      <span class="variable">$properties</span> = [<span class="string">'correlation_id'</span>=&gt;<span class="variable language_">$this</span>-&gt;corrId,<span class="string">'reply_to'</span>=&gt;<span class="variable language_">$this</span>-&gt;replyQueue];</span><br><span class="line">      <span class="variable">$message</span> = <span class="keyword">new</span> <span class="title class_">AMQPMessage</span>(<span class="variable language_">$this</span>-&gt;params,<span class="variable">$properties</span>);</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;channel-&gt;<span class="title function_ invoke__">basic_publish</span>(<span class="variable">$message</span>,<span class="built_in">self</span>::<span class="variable constant_">QUEUE_NAME</span>,<span class="title function_ invoke__">sprintf</span>(<span class="string">'school.%d'</span>,<span class="variable">$this</span>-&gt;schoolId));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//test</span></span><br><span class="line">      <span class="comment">/*$message = new AMQPMessage(json_encode(['FailDoor'=&gt;[1,2]],true),$properties);</span></span><br><span class="line"><span class="comment">      $this-&gt;channel-&gt;basic_publish($message,'',$this-&gt;replyQueue);*/</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>{</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;channel-&gt;<span class="title function_ invoke__">wait</span>(<span class="literal">null</span>,<span class="literal">false</span>,<span class="built_in">self</span>::<span class="variable constant_">EXPIRE</span>);</span><br><span class="line">      }<span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$exception</span>){</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setError</span>(<span class="number">10003</span>,<span class="string">'开门失败'</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//var_dump($this-&gt;response);</span></span><br><span class="line">      <span class="comment">// // $this-&gt;channel-&gt;close();</span></span><br><span class="line">      <span class="comment">// $this-&gt;connection-&gt;close();</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$rs</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$this</span>-&gt;response,<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$rs</span>[<span class="string">'failDoor'</span>]) &amp;&amp; (!<span class="variable">$rs</span>[<span class="string">'failDoor'</span>] || <span class="variable">$rs</span>[<span class="string">'failDoor'</span>]!=<span class="variable language_">$this</span>-&gt;door)){</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setError</span>(<span class="number">10003</span>,<span class="string">'开门失败'</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="客户端调用代码："><a href="#客户端调用代码：" class="headerlink" title="客户端调用代码："></a>客户端调用代码：</h3><figure class="highlight xl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$server = new RemoteOpenDoor();</span><br><span class="line">$<span class="function"><span class="title">server</span>-&gt;</span>devSn = $devSn;</span><br><span class="line">$<span class="function"><span class="title">server</span>-&gt;</span><span class="function"><span class="title">schoolId</span> = $teacher-&gt;</span>getSchoolId();</span><br><span class="line">$<span class="function"><span class="title">rs</span> = $server-&gt;</span>open();</span><br><span class="line">$<span class="function"><span class="title">error</span> = $server-&gt;</span>getError();</span><br><span class="line"><span class="keyword">if</span>(!$rs){</span><br><span class="line">   <span class="function"><span class="title">return</span> $error ? \Yii::$app-&gt;</span><span class="function"><span class="title">responseHelper</span>-&gt;</span><span class="function"><span class="title">error</span>($error)-&gt;</span><span class="function"><span class="title">response</span>() : \Yii::$app-&gt;</span><span class="function"><span class="title">responseHelper</span>-&gt;</span><span class="function"><span class="title">error</span>(new Error(110000,'操作失败！'))-&gt;</span>response();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">return</span> \Yii::$app-&gt;</span><span class="function"><span class="title">responseHelper</span>-&gt;</span><span class="function"><span class="title">success</span>(null)-&gt;</span>response();</span><br></pre></td></tr></tbody></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/weixin_36851500/article/details/93501861">https://blog.csdn.net/weixin_36851500/article/details/93501861</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yii2 </tag>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php中composer的使用</title>
      <link href="/posts/php-composer.html"/>
      <url>/posts/php-composer.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li>降低composer版本<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">composer self-update -r</span><br><span class="line">或者是 composer self-update -- l</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的SQL</title>
      <link href="/posts/common-sql.html"/>
      <url>/posts/common-sql.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、查看所有的触发器"><a href="#1、查看所有的触发器" class="headerlink" title="1、查看所有的触发器"></a>1、查看所有的触发器</h4><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.<span class="symbol">`TRIGGERS`</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="2、查询所有的表"><a href="#2、查询所有的表" class="headerlink" title="2、查询所有的表"></a>2、查询所有的表</h4><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TABLE_NAME</span> <span class="built_in">table_name</span>,TABLE_COMMENT table_comment <span class="keyword">FROM</span> INFORMATION_SCHEMA.<span class="keyword">TABLES</span> <span class="keyword">where</span> table_schema=<span class="string">'myDB'</span> <span class="keyword">and</span> table_type=<span class="string">'BASE TABLE'</span>;   //表名(不包含视图)及备注</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> <span class="keyword">tables</span> <span class="keyword">where</span> Table_type = <span class="string">'BASE TABLE'</span>;    //表名</span><br></pre></td></tr></tbody></table></figure><h4 id="3、查询db1数据库中所有有触发器的表"><a href="#3、查询db1数据库中所有有触发器的表" class="headerlink" title="3、查询db1数据库中所有有触发器的表"></a>3、查询db1数据库中所有有触发器的表</h4><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> EVENT_OBJECT_TABLE <span class="keyword">FROM</span> information_schema.<span class="symbol">`TRIGGERS`</span> <span class="keyword">WHERE</span> EVENT_OBJECT_SCHEMA = <span class="string">"db1"</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="4、查询db1数据库中所有无触发器的表"><a href="#4、查询db1数据库中所有无触发器的表" class="headerlink" title="4、查询db1数据库中所有无触发器的表"></a>4、查询db1数据库中所有无触发器的表</h4><figure class="highlight n1ql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.TABLE_NAME <span class="keyword">from</span> information_schema.<span class="symbol">`TABLES`</span> A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> information_schema.<span class="symbol">`TRIGGERS`</span> B <span class="keyword">ON</span> A.TABLE_NAME=B.EVENT_OBJECT_TABLE <span class="keyword">where</span> B.EVENT_OBJECT_TABLE <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">and</span> A.TABLE_SCHEMA=<span class="string">"db1"</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="5、创建索引"><a href="#5、创建索引" class="headerlink" title="5、创建索引"></a>5、创建索引</h4><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="built_in">table_name</span> <span class="keyword">add</span> <span class="keyword">index</span> index_name (索引字段);   <span class="comment">-- 创建普通索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> <span class="built_in">table_name</span> (索引字段);         <span class="comment">-- 创建普通索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="built_in">table_name</span> <span class="keyword">add</span> <span class="keyword">primary key</span>(colunm_name);     <span class="comment">-- 创建主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="built_in">table_name</span> <span class="keyword">add</span> <span class="keyword">unique</span>(colunm_name);          <span class="comment">-- 创建唯一索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_c1_c2 <span class="keyword">on</span> <span class="built_in">table_name</span>(c1,c2);             <span class="comment">-- 创建联合索引</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="built_in">table_name</span>;                              <span class="comment">-- 查看表中的索引</span></span><br></pre></td></tr></tbody></table></figure><h4 id="6、去除数据表中指定字段的换行符"><a href="#6、去除数据表中指定字段的换行符" class="headerlink" title="6、去除数据表中指定字段的换行符"></a>6、去除数据表中指定字段的换行符</h4><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- char(10)：换行符      char(13)：回车符</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> <span class="keyword">set</span> <span class="type">name</span>=replace(replace(`field`,<span class="type">char</span>(<span class="number">10</span>),<span class="string">''</span>),<span class="type">char</span>(<span class="number">13</span>),<span class="string">''</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="7、修改表引擎"><a href="#7、修改表引擎" class="headerlink" title="7、修改表引擎"></a>7、修改表引擎</h4><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="built_in">table_name</span> engine=MyISAM;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统设计</title>
      <link href="/posts/soft-system-design.html"/>
      <url>/posts/soft-system-design.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-系统分析"><a href="#1-系统分析" class="headerlink" title="1. 系统分析"></a>1. 系统分析</h3><ul><li><p>对于初期单一系统的产品来说，一个数据库➕一个平台程序即可；</p></li><li><p>对于含有两个及以上平台的初期产品来说，系统结构应该是：多个平台程序➕一个服务中心➕一个或多个数据库；</p></li><li><p>对于多平台且需与第三方交互的产品来说，系统结构应该是：多个平台程序➕一个开放平台（含接口及订阅）➕一个服务中台（一个服务中心➕一个socket服务器➕一个异步数据处理中心）➕多个数据库；</p></li></ul><h3 id="2-如何设计一个高并发、高可用的系统"><a href="#2-如何设计一个高并发、高可用的系统" class="headerlink" title="2. 如何设计一个高并发、高可用的系统"></a>2. 如何设计一个高并发、高可用的系统</h3><p><img src="/images/soft_design_1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下网络相关的命令</title>
      <link href="/posts/network-command-on-linux.html"/>
      <url>/posts/network-command-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、检测IP-域名是否连通："><a href="#1、检测IP-域名是否连通：" class="headerlink" title="1、检测IP/域名是否连通："></a>1、检测IP/域名是否连通：</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping -c 4 192.168.10.8  #指定ping的次数  -c times</span><br><span class="line">ping -q -c 4 www.baidu.com  #只显示结果  -q</span><br></pre></td></tr></tbody></table></figure><h2 id="2、测试端口的连通性："><a href="#2、测试端口的连通性：" class="headerlink" title="2、测试端口的连通性："></a>2、测试端口的连通性：</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet ip port  #如果未安装telnet，需执行yum install telnet进行安装</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云闪付的商业模式</title>
      <link href="/posts/business-model-of-union-pay.html"/>
      <url>/posts/business-model-of-union-pay.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="ipage">    <div class="ititle">云闪付的商业模式</div>  <div class="izhengwen">  <p>2018年，由银联主导的一个APP——云闪付上线，之后以新用户前20笔消费可享优惠的方式吸引了一大批羊毛党，近一两年在各大地铁站、公交站等出现了云闪付的广告。个人及周边的朋友也有使用过，但都是从开始的频繁使用，到现在的基本不使用。</p>  <p>云闪付的目的是打破支付宝、财付通的垄断，挤入移动支付的阵营，而且统一银行APP，聚合网上商城、移动支付、交通扫码等，立足二线以下城市。</p>  <p>就公交地铁扫码支付这一业务，不及天府通。天府通可以根据本地的定价策略进行优惠折扣，而云闪付无法一一对接个性化本地定价策略。故用户粘性不高。</p>  </div></div>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云闪付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notepad++常用操作</title>
      <link href="/posts/notepad++-notes.html"/>
      <url>/posts/notepad++-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-将指定字符替换为换行"><a href="#1-将指定字符替换为换行" class="headerlink" title="1. 将指定字符替换为换行"></a>1. 将指定字符替换为换行</h3><ul><li>方法一<br>查找目标：待替换的字符<br>替换为：\r<br>查找模式：扩展<br>如把 | 替换为换行<br><img src="/images/notepad_note_1.png" alt=""><br><img src="/images/notepad_note_2.png" alt=""></li><li>方法二  <ol><li>打开 需要修改的文本文件。</li><li>按下 Ctrl+H 组合键，打开“替换”对话框。</li><li>查找目标： 在“查找目标”输入框中输入要替换的内容的正则表达式。</li><li>替换为： 在“替换为”输入框中输入 \n，表示换行符。</li><li>选择模式： 在“查找模式”中，确保选中了“正则表达式”选项。</li><li>点击“全部替换” 按钮。<br><img src="/images/notepad_note_1.2.png" alt=""></li></ol></li></ul><h3 id="2-去除重复的行"><a href="#2-去除重复的行" class="headerlink" title="2. 去除重复的行"></a>2. 去除重复的行</h3><ul><li>选择内容，然后点击 编辑-&gt;行操作-&gt;升(降)序排列文本行<br><img src="/images/notepad_note_3.png" alt=""></li><li>选择内容，然后点击 编辑-&gt;行操作-&gt;删除连续的重复行<br><img src="/images/notepad_note_4.png" alt=""></li><li>得到去重后的内容，唯一缺点是打乱了原有内容的顺序<br><img src="/images/notepad_note_5.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notepad++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP常用的魔术方法</title>
      <link href="/posts/php-magic-methods.html"/>
      <url>/posts/php-magic-methods.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>__construct()</p></li><li><p>__clone()</p></li><li><p>__get()</p></li><li><p>__set()</p></li><li><p>__call()</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔术方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库三范式</title>
      <link href="/posts/db-3nf.html"/>
      <url>/posts/db-3nf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h3><ol><li>第一范式(1NF)：规定表中的每个列都应该是不可分割的最小单元。</li><li>第二范式(2NF)：是在满足第一范式的基础上，规定表中的非主键列不存在对主键的部分依赖。<br>即要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。</li><li>第三范式(3NF)：是在满足第一范式和第二范式的基础上，规定表中的列不存在对非主键列的传递依赖。<br>所以第三范式具有如下特征：<pre><code>1. 每一列只有一个值2. 每一行都能区分。3. 每一个表都不包含其他表已经包含的非主关键字信息。</code></pre>例如，帖子表中只能出现发帖人的id，而不能出现发帖人的id，还同时出现发帖人姓名，否则，只要出现同一发帖人id的所有记录，它们中的姓名部分都必须严格保持一致，这就是数据冗余。<br>但在实际中，我们经常会进行反范式设计，适当增加表的冗余字段来提高查询效率。</li></ol><ul><li>优势：使表的结构更简单、优雅，表的逻辑和条理性更强，并且使用三范式可以很大程度的减少表中的冗余数据，很好的节省了数据库的存储资源。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL脚本执行中，预防误处理数据的方法</title>
      <link href="/posts/mysql-deal-miss-handle.html"/>
      <url>/posts/mysql-deal-miss-handle.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">在工作中，有时需要通过数据库脚本来变更生产数据，但稍有疏忽，就会误删数据、或者变更过多数据；为防预防这类情况的发生，根据我个人的工作经验，总结了以下几点方法：</div><h3 id="1、先测试"><a href="#1、先测试" class="headerlink" title="1、先测试"></a>1、先测试</h3><p>   脚本写好之后，先在测试环境执行一遍，一方面可以看看脚本是否有语法问题，另一方面看看数据是否正确被处理；</p><h3 id="2、脚本简单化"><a href="#2、脚本简单化" class="headerlink" title="2、脚本简单化"></a>2、脚本简单化</h3><p>   尽量将复杂的联表处理语句转为多条单表处理语句，这可以防止由于逻辑不严谨导致的数据过多被处理的问题；<br>如：现有脚本<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> personnel p <span class="keyword">set</span> p.status<span class="operator">=</span><span class="number">1</span> <span class="keyword">left</span> <span class="keyword">join</span> classes c <span class="keyword">on</span> p.class_id<span class="operator">=</span>c.class_id <span class="keyword">where</span> c.grade_id<span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><br>假设经查询，grade_id=5的personnel 为201-296，可改为：<br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> personnel <span class="keyword">set</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">201</span>;</span><br><span class="line"><span class="keyword">update</span> personnel <span class="keyword">set</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">202</span>;</span><br><span class="line"><span class="keyword">update</span> personnel <span class="keyword">set</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">203</span>;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">update</span> personnel <span class="keyword">set</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">296</span>;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="3、Where条件精确化"><a href="#3、Where条件精确化" class="headerlink" title="3、Where条件精确化"></a>3、Where条件精确化</h3><p>   变更的where条件尽量为唯一索引字段，这可以防止由于条件过于复杂、数据表过大，导致锁表时间过长，执行效率过低的问题；<br>如：现有脚本<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> personnel <span class="keyword">set</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> class_id<span class="operator">=</span><span class="number">20</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="number">0</span> <span class="keyword">and</span> create_time<span class="operator">&lt;</span><span class="number">1571580242</span>;</span><br></pre></td></tr></tbody></table></figure><p></p><p>假设经查询，满足上述条件的personnelId 为220、233、234、256，可改为：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> personnel <span class="keyword">set</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">220</span>;</span><br><span class="line"><span class="keyword">update</span> personnel <span class="keyword">set</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">233</span>;</span><br><span class="line"><span class="keyword">update</span> personnel <span class="keyword">set</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">234</span>;</span><br><span class="line"><span class="keyword">update</span> personnel <span class="keyword">set</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">256</span>;</span><br></pre></td></tr></tbody></table></figure><p></p><p>单条复杂语句拆分成多条单一条件语句的方法有很多，下面列举几种方式：<br>（1）将满足条件的数据导出，借助excel/Notepad++等工具进行批量补全sql语句；<br>（2）在数据库中使用concat函数进行sql拼接，如：<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> CONCAT(<span class="string">'delete from t_bracelet_person_relation where person_id='</span>,person_id,<span class="string">' and mac_id="'</span>,mac_id,<span class="string">'";'</span>) </span><br><span class="line"><span class="keyword">from</span> t_bracelet_person_relation</span><br><span class="line"><span class="keyword">where</span> mac_id <span class="keyword">in</span> (<span class="string">'C9B1EC032CB3'</span>,<span class="string">'FCBA0EB1DA09'</span>) <span class="keyword">and</span> status<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="4、有条件处理"><a href="#4、有条件处理" class="headerlink" title="4、有条件处理"></a>4、有条件处理</h3><p>每条SQL语句必须有where条件，否则可能有问题，容易引起数据过度被处理的情况；<br>如：现有脚本<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> goods <span class="keyword">set</span> status<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure><p></p><p>经查上述语句本来只变更id=23的数据，由于疏忽大意忘些where条件，导致整个表的数据都被变更了，这个问题的严重性不亚于删库；<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> goods <span class="keyword">set</span> status<span class="operator">=</span><span class="number">0</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">23</span>;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="5、脚本数据校验"><a href="#5、脚本数据校验" class="headerlink" title="5、脚本数据校验"></a>5、脚本数据校验</h3><p>脚本写好之后，可以将update、delete改为select查询下，从查询结果的数据总条数和具体数据上比对下，看看数据是否和预期需要处理的数据有出入，如果有就是条件未控制好，需修改；<br>如：现有脚本<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> personnel p <span class="keyword">set</span> p.status<span class="operator">=</span><span class="number">1</span> <span class="keyword">left</span> <span class="keyword">join</span> classes c <span class="keyword">on</span> p.class_id<span class="operator">=</span>c.class_id <span class="keyword">where</span> c.grade_id<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> personnel <span class="keyword">where</span> class_id<span class="operator">=</span><span class="number">20</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="number">0</span> <span class="keyword">and</span> create_time<span class="operator">&lt;</span><span class="number">1571580242</span>;</span><br></pre></td></tr></tbody></table></figure><br>可改为如下语句，查询后核对数据<br><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p.<span class="operator">*</span> <span class="keyword">from</span> personnel p <span class="keyword">left</span> <span class="keyword">join</span> classes c <span class="keyword">on</span> p.class_id<span class="operator">=</span>c.class_id <span class="keyword">where</span> c.grade_id<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> personnel <span class="keyword">where</span> class_id<span class="operator">=</span><span class="number">20</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="number">0</span> <span class="keyword">and</span> create_time<span class="operator">&lt;</span><span class="number">1571580242</span>;</span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解php.ini</title>
      <link href="/posts/php-ini-config.html"/>
      <url>/posts/php-ini-config.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>safe_mode_exec_dir<br> 设置安全模式下脚本可执行的目录，如果要通过popen()、system()、exec()等执行脚本，则该脚本需放在本配置设置的目录下。</li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中decimal类型</title>
      <link href="/posts/mysql-decimal.html"/>
      <url>/posts/mysql-decimal.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在mysql中，经常会使用decimal数据类型来保存精度准确的数值，如工资、价格、金额等货币数据。</p><ul><li>语法及其说明<br><code>columName decimal(P,D);</code><br>P表示有效数字的精度，范围为1~65；P的默认值为10，如<code>columName decimal;</code>表示不含小数数字最大长度为10。<br>D表示小数点后的位数，范围为0~30，D&lt;=P；如果D为空(<code>columName decimal(P);</code>)或者0(<code>columName decimal(P,0);</code>)表示列不包含小数部分或小数点。</li><li>示例<br><code>amount decimal(6,2);</code>表示amount列最多可以存储6位数字，小数点位数为2位；amount列的范围为-9999.99~9999.99。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的explain</title>
      <link href="/posts/mysql-explain1.html"/>
      <url>/posts/mysql-explain1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们在执行sql时，一般都会使用explain来分析sql的效率情况。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>  只需要在查询的 SQL 前面添加上 explain 关键字即可。<br><img src="/images/mysql_explain_1.png" alt=""></p><h4 id="结果列说明"><a href="#结果列说明" class="headerlink" title="结果列说明"></a>结果列说明</h4><ul><li>id — 选择标识符，id 越大优先级越高，越先被执行；</li><li>select_type — 表示查询的类型；</li><li>table — 输出结果集的表；</li><li>partitions — 匹配的分区；</li><li>type — 表示表的连接类型；<br>  type 值有如下类型<ul><li>all — 全表扫描，在数据量大时效率极低；</li><li>index — 遍历索引，全索引排序；根据extra的内容分以下几种情况：<br>  Using Index：覆盖索引，即<strong>只需要</strong>通过索引就可以返回查询所需要的数据<br>  Using Where：查询列未用到索引<br>  Using Index  Using Where：其中的查询列是索引，但是并不是前导列，因此其实是没法用到这个索引的<br>  Null：查询列有些不是索引，需要回表来查询未被索引覆盖的字段（不是纯粹用了索引，也不是完全没用到索引）</li><li>range — 索引范围查找，有范围的索引排序；如：<code>between and &lt; &gt; in or</code></li><li>index_subquery — 在子查询中使用 ref；非唯一性索引，一般出现在in查询中；</li><li>unique_subquery — 在子查询中使用 eq_ref，一般出现在in查询中；</li><li>index_merge — 使用了索引合并优化。(对多个索引分别进行了条件的查询，最后对这几个查询的结果进行合并交集运算)</li><li>ref_or_null — 对 null 进行索引的优化的 ref； 类似 ref。区别是他会额外的搜索包含 null 的记录，他会对其进行一些优化。(例如：SELECT * FROM table WHERE age = 18 and name is null)</li><li>fulltext — 使用全文索引；</li><li>ref — 使用非唯一索引查找数据；利用查询索引来进行搜索。（非主键以及 UNIQUE）</li><li>eq_ref — 在 join 查询中使用主键或唯一索引关联；查询列是主键或者非 NULL 的 UNIQUE 索引，常用在联合查询。(例如：SELECT * FROM ref_table,other_table WHERE ref_table.key_column=other_table.column =&gt; ref_table.key_column 是主键或者非 NULL 的 UNIQUE 索引)</li><li>const — 将一个主键放置到 where 后面作为条件查询， MySQL 优化器就能把这次查询优化转化为一个常量，如何转化以及何时转化，这个取决于优化器，这个比 eq_ref 效率高一点。<br>  查询条件是主键或者非 NULL 的 UNIQUE 索引，因此结果只有一条，同时优化过程中查询列值会转成常量。</li><li>system — 表中数据只有一行的情况；</li><li>null — 不用访问表就可以直接得到结果。(例如：SELECT 1)<br>type的效率高低情况：<code>all &lt; index &lt; range &lt; index_subquery &lt; unique_subquery &lt; index_merge &lt; ref_or_null &lt; ref &lt; eq_ref &lt; const &lt; system</code></li></ul></li><li>possible_keys — 表示查询时，可能使用的索引；</li><li>key — 表示实际使用的索引；<br>  如果这一列为 NULL 则表示未使用索引，反之则使用了索引。</li><li>key_len — 索引字段的长度；</li><li>ref—  列与索引的比较；</li><li>rows — 大概估算的行数；</li><li>filtered — 按表条件过滤的行百分比；</li><li>Extra — 执行情况的描述和说明。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/posts/mysql-index.html"/>
      <url>/posts/mysql-index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="导致-MySQL-索引失效的常见场景"><a href="#导致-MySQL-索引失效的常见场景" class="headerlink" title="导致 MySQL 索引失效的常见场景"></a>导致 MySQL 索引失效的常见场景</h4><ol><li>联合索引不满足最左匹配原则<br> 最左匹配原则是指以最左边的为起点字段查询可以使用联合索引，否则将不能使用联合索引。<br> 假设联合索引为A+B+C，则能使用索引的为A+B+C、A+B、A+C。</li><li>模糊查询最前面的为不确定匹配字符<br> 只有模糊匹配后面任意字符：<code>like 'xx%'</code> 可以使用索引</li><li>索引列参与了运算<br> 如：<code>explain select * from tname where id+1=1;</code>未使用索引</li><li>索引列使用了函数<br> 如：<code>explain select * from tname where ifnull(id,0)=1;</code>未使用索引</li><li>索引列存在类型转换<br> 如果索引列存在类型转换，那么也不会走索引，比如 name 为字符串类型，而查询的时候设置了 int 类型的值就会导致索引失效</li><li>索引列使用 is not null 查询<br> 当在查询中使用了 is not null 也会导致索引失效，而 is null 则会正常触发索引的</li></ol><h4 id="哪些情况不适合创建索引"><a href="#哪些情况不适合创建索引" class="headerlink" title="哪些情况不适合创建索引"></a>哪些情况不适合创建索引</h4><ol><li>不应该在字段比较长的字段上建立索引，因为会消耗大量的空间</li><li>对于频繁更新、插入的字段应该少建立索引，因为在修改和插入之后，数据库会去维护索引，会消耗资源</li><li>尽量少在无用字段上建立索引【where条件中用不到的字段】</li><li>表记录太少不应该创建索引</li><li>数据重复且分布平均的表字段不应该创建索引【选择性太低，例如性别、状态、真假值等字段】</li><li>参与列计算的列不适合建索引【保持列”干净”，比如from_unixtime(create_time) = ‘2022-05-29’就不能使用到索引，原因是b+树中存的都是数据表中的字段值，但进行检索时需要把所有元素都应用函数才能比较，显然成本太大，所以语句应该写成create_time = unix_timestamp(‘2022-05-29’)】</li></ol><h4 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h4><ol><li>建立索引是要消耗一定的空间，况且在索引的维护上也会消耗资源</li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL架构设计</title>
      <link href="/posts/mysql-structural-design.html"/>
      <url>/posts/mysql-structural-design.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、MySQL架构设计中的经验"><a href="#1、MySQL架构设计中的经验" class="headerlink" title="1、MySQL架构设计中的经验"></a>1、MySQL架构设计中的经验</h3><ul><li>1）根据公司现有业务设计合理架构</li><li>2）选择成熟架构方案</li><li>3）因地制宜，根据实际设备情况做出选择</li><li>4）考虑方案的可行性</li><li>5）越简单越好，越适合公司越好</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL联表查询</title>
      <link href="/posts/mysql-join.html"/>
      <url>/posts/mysql-join.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-联表查询后的结果集比较"><a href="#1-联表查询后的结果集比较" class="headerlink" title="1. 联表查询后的结果集比较"></a>1. 联表查询后的结果集比较</h3><p><img src="/images/mysql_join_1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 联表查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人收集的一些公用数据</title>
      <link href="/posts/personnel-public-data.html"/>
      <url>/posts/personnel-public-data.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">这是个人采集的一些公用数据，大家可根据需要自取，不谢！</div><ul><li><a href="https://github.com/crazy-boy/public-data/blob/main/地名词库.txt" target="_blank">地名词库</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/歇后语.txt" target="_blank">歇后语</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/成语.txt" target="_blank">成语</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/品牌名(英文).txt" target="_blank">2015年搜集的一些英文版品牌名</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/常见的用户名.txt" target="_blank">常见的用户名</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/常见的弱密码.txt" target="_blank">常见的弱密码</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/姓氏(中文).txt" target="_blank">姓氏(中文)</a></li><li><a href="https://github.com/crazy-boy/public-data/blob/main/姓氏(日文).txt" target="_blank">姓氏(日文)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛云图片</title>
      <link href="/posts/qiniu-storage.html"/>
      <url>/posts/qiniu-storage.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、七牛云图片地址："><a href="#1、七牛云图片地址：" class="headerlink" title="1、七牛云图片地址："></a>1、七牛云图片地址：</h3><p><code>域名/hash值</code><br>如：<a href="https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4">https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4</a></p><h3 id="2、按指定尺寸显示图片："><a href="#2、按指定尺寸显示图片：" class="headerlink" title="2、按指定尺寸显示图片："></a>2、按指定尺寸显示图片：</h3><p><code>域名/hash值?imageMogr2/auto-orient/thumbnail/!宽x高r/gravity/Center/crop/宽x高/interlace/1/blur/1x0/quality/80|imageslim</code><br>如：<a href="https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4?imageMogr2/auto-orient/thumbnail/!100x200r/gravity/Center/crop/100x200/interlace/1/blur/1x0/quality/80|imageslim">https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4?imageMogr2/auto-orient/thumbnail/!100x200r/gravity/Center/crop/100x200/interlace/1/blur/1x0/quality/80|imageslim</a></p><h3 id="3、资源下载："><a href="#3、资源下载：" class="headerlink" title="3、资源下载："></a>3、资源下载：</h3><p><code>域名/hash值?attname=文件名.扩展名</code><br>如：<a href="https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?attname=a.jpg">https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?attname=a.jpg</a></p><h3 id="4、图片等比例缩放："><a href="#4、图片等比例缩放：" class="headerlink" title="4、图片等比例缩放："></a>4、图片等比例缩放：</h3><p><code>域名/hash值?imageView2/&lt;mode&gt;/w/&lt;Width&gt;/h/&lt;Height&gt;</code><br>如：<a href="https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?imageView2/2/w/450/h/450">https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?imageView2/2/w/450/h/450</a></p><h3 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h3><p><a href="https://developer.qiniu.com/dora/api/1279/basic-processing-images-imageview2">https://developer.qiniu.com/dora/api/1279/basic-processing-images-imageview2</a></p>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel使用小技巧</title>
      <link href="/posts/e939ff3c.html"/>
      <url>/posts/e939ff3c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-excel固定第一行："><a href="#1-excel固定第一行：" class="headerlink" title="1. excel固定第一行："></a>1. excel固定第一行：</h3><p>选择第二行，点击视图里的冻结窗口即可。</p><h3 id="2-excel分列："><a href="#2-excel分列：" class="headerlink" title="2. excel分列："></a>2. excel分列：</h3><pre><code>如：将某一列的数据由C4159D5953D8转为C4:15:9D:59:53:D8格式：</code></pre><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">公式为</span></span><br><span class="line">=left(A1,2) &amp; ":" &amp; mid(A1,3,2) &amp; ":" &amp; mid(A1,5,2) &amp; ":" &amp; mid(A1,7,2) &amp; ":" &amp; mid(A1,9,2) &amp; ":" &amp; right(A1,2)</span><br></pre></td></tr></tbody></table></figure><h3 id="3-删除重复项："><a href="#3-删除重复项：" class="headerlink" title="3. 删除重复项："></a>3. 删除重复项：</h3><pre><code>选中数据区域-&gt;数据-&gt;删除重复项-&gt;确定</code></pre><h3 id="4-VLOOKUP函数的使用"><a href="#4-VLOOKUP函数的使用" class="headerlink" title="4. VLOOKUP函数的使用"></a>4. VLOOKUP函数的使用</h3>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>领导与下属交往之道</title>
      <link href="/posts/relation-between-leaders-and-staffs.html"/>
      <url>/posts/relation-between-leaders-and-staffs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>非工作时间，不要拿工作上的事来打压威胁下属；这会让下属心生反感。<br> 如：领导让下属帮忙做某件事情，下属不肯，领导就说以后所有的工作都指派给你，升职加薪想都别想……</p></li><li><p>对下属不好分配任务，工期评估过长，如何处理？</p><ul><li>不要口头安排任务，引入任务管理系统，设置好截止日期，需求描述清楚，通知下属及时完成；</li><li>评估每个任务的标准产出(行业中等偏上水平的一个员工完成某个任务所需的时间)，由于每个任务有大小难易之分，所以要私下评估出每个任务的标准产出；如果无法评估，那就按照自己的水平来评估即可，即：假设自己来做这个任务需要花多少时间，就是标准产出时间。</li><li>定期对每个员工的标准产出进行统计，结合员工级别、薪资、工作时间和标准产出就可以对大家的状态有个清晰的认识了。<br><img src="/images/tec_manage_1.png" alt=""><br>从上面的统计中，很容易就能看出谁是老油条了</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装php5(php7)</title>
      <link href="/posts/install-php-on-linux.html"/>
      <url>/posts/install-php-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-先安装依赖包"><a href="#1-先安装依赖包" class="headerlink" title="1. 先安装依赖包"></a>1. 先安装依赖包</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">  yum install gcc bison bison-devel zlib-devel libmcrypt-devel mcrypt mhash-devel openssl-devel libxml2-devel libcurl-devel bzip2-devel readline-devel libedit-devel</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-下载php-5-3-0"><a href="#2-下载php-5-3-0" class="headerlink" title="2. 下载php-5.3.0"></a>2. 下载php-5.3.0</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wget http://cn2.php.net/get/php-5.3.0.tar.gz/from/this/mirror -o php-5.3.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -zxvf php-5.3.0.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> php-5.3.0</span></span><br><span class="line"></span><br><span class="line">yum install libxml2</span><br><span class="line"></span><br><span class="line">yum install libxml2-devel -y</span><br><span class="line"></span><br><span class="line">yum install curl curl-devel</span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y libmcrypt-devel</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">php5 配置 </span><br><span class="line"></span><br><span class="line"> ./configure \</span><br><span class="line">--prefix=/usr/local/php5 \</span><br><span class="line">--with-config-file-path=/usr/local/php5/etc \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--disable-debug \</span><br><span class="line">--disable-rpath \</span><br><span class="line">--enable-shared \</span><br><span class="line">--enable-opcache \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-fpm-user=www \</span><br><span class="line">--with-fpm-group=www \</span><br><span class="line">--with-mysql=mysqlnd \</span><br><span class="line">--with-mysqli=mysqlnd \</span><br><span class="line">--with-pdo-mysql=mysqlnd \</span><br><span class="line">--with-gettext \</span><br><span class="line">--with-gd \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--with-iconv \</span><br><span class="line">--with-mcrypt \</span><br><span class="line">--with-mhash \</span><br><span class="line">--with-openssl \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--enable-soap \</span><br><span class="line">--with-libxml-dir \</span><br><span class="line">--enable-pcntl \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-sysvmsg \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-sysvshm \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--with-curl \</span><br><span class="line">--with-zlib \</span><br><span class="line">--enable-zip \</span><br><span class="line">--with-bz2 \</span><br><span class="line">--with-readline \</span><br><span class="line">--with-xsl \</span><br><span class="line">--without-sqlite3 \</span><br><span class="line">--without-pdo-sqlite \</span><br><span class="line">--with-pear</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">php7 配置</span><br><span class="line"></span><br><span class="line"> ./configure \</span><br><span class="line">--prefix=/usr/local/php7 \</span><br><span class="line">--with-config-file-path=/usr/local/php7/etc \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--disable-debug \</span><br><span class="line">--disable-rpath \</span><br><span class="line">--enable-shared \</span><br><span class="line">--enable-opcache \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-fpm-user=www \</span><br><span class="line">--with-fpm-group=www \</span><br><span class="line">--with-mysql=mysqlnd \</span><br><span class="line">--with-mysqli=mysqlnd \</span><br><span class="line">--with-pdo-mysql=mysqlnd \</span><br><span class="line">--with-gettext \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--with-iconv \</span><br><span class="line">--with-mcrypt \</span><br><span class="line">--with-mhash \</span><br><span class="line">--with-openssl \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--enable-soap \</span><br><span class="line">--with-libxml-dir \</span><br><span class="line">--enable-pcntl \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-sysvmsg \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-sysvshm \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--with-curl \</span><br><span class="line">--with-zlib \</span><br><span class="line">--enable-zip \</span><br><span class="line">--with-bz2 \</span><br><span class="line">--with-readline \</span><br><span class="line">--without-sqlite3 \</span><br><span class="line">--without-pdo-sqlite \</span><br><span class="line">--with-pear</span><br></pre></td></tr></tbody></table></figure><h3 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3. 编译安装"></a>3. 编译安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make &amp;&amp; make install</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-复制-php-配置文件"><a href="#4-复制-php-配置文件" class="headerlink" title="4. 复制 php 配置文件"></a>4. 复制 php 配置文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_2_centos php-5.6.30]# cp php.ini-production /usr/local/php7/etc/php.ini</span><br><span class="line">已经安装完成，查看版本号</span><br><span class="line"></span><br><span class="line">[root@VM_0_2_centos php-5.6.30]# /usr/local/php7/bin/php -v</span><br><span class="line">返回</span><br><span class="line"></span><br><span class="line">PHP 5.6.30 (cli) (built: Aug 29 2018 09:09:28) </span><br><span class="line">Copyright (c) 1997-2016 The PHP Group</span><br><span class="line">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</span><br></pre></td></tr></tbody></table></figure><h3 id="5-配置-php-fpm"><a href="#5-配置-php-fpm" class="headerlink" title="5. 配置 php-fpm"></a>5. 配置 php-fpm</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_2_centos php-5.6.30]# cp /usr/local/php7/etc/php-fpm.conf.default /usr/local/php7/etc/php-fpm.conf</span><br><span class="line">[root@VM_0_2_centos php-5.6.30]# vim /usr/local/php7/etc/php-fpm.conf</span><br><span class="line">查找 user 将</span><br><span class="line"></span><br><span class="line">user = nobody</span><br><span class="line">group = nobody</span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">user = www</span><br><span class="line">group = www</span><br><span class="line">查找 listen 将</span><br><span class="line"></span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">listen = 127.0.0.1:9001</span><br><span class="line"></span><br><span class="line">配置 php-fpm 服务</span><br><span class="line"></span><br><span class="line">[root@VM_0_2_centos php-5.6.30]# cp sapi/fpm/php-fpm.service /usr/lib/systemd/system/php7-fpm.service</span><br><span class="line">[root@VM_0_2_centos php-5.6.30]# vim /usr/lib/systemd/system/php7-fpm.service </span><br><span class="line">将：</span><br><span class="line"></span><br><span class="line">PIDFile=${prefix}/var/run/php-fpm.pid</span><br><span class="line">ExecStart=${exec_prefix}/sbin/php-fpm --nodaemonize --fpm-config ${prefix}/etc/php-fpm.conf</span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">PIDFile=/usr/local/php7/var/run/php-fpm.pid</span><br><span class="line">ExecStart=/usr/local/php7/sbin/php-fpm --nodaemonize --fpm-config /usr/local/php7/etc/php-fpm.conf</span><br></pre></td></tr></tbody></table></figure><h3 id="6-重新载入-systemd"><a href="#6-重新载入-systemd" class="headerlink" title="6. 重新载入 systemd"></a>6. 重新载入 systemd</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_2_centos php-5.6.30]# systemctl daemon-reload</span><br><span class="line">可以设置开机启动：</span><br><span class="line"></span><br><span class="line">[root@VM_0_2_centos php-5.6.30]# systemctl enable php7-fpm</span><br><span class="line">返回结果</span><br><span class="line"></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/php7-fpm.service to /usr/lib/systemd/system/php7-fpm.service.</span><br><span class="line">启动：</span><br><span class="line"></span><br><span class="line">[root@VM_0_2_centos php-5.6.30]# systemctl start php7-fpm</span><br><span class="line">关闭：</span><br><span class="line"></span><br><span class="line">[root@VM_0_2_centos php-5.6.30]# systemctl stop php7-fpm</span><br><span class="line">查看状态：</span><br><span class="line"></span><br><span class="line">[root@VM_0_2_centos php-5.6.30]# systemctl status php7-fpm</span><br><span class="line">返回</span><br><span class="line"></span><br><span class="line">● php5-fpm.service - The PHP FastCGI Process Manager</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/php5-fpm.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Wed 2018-08-29 09:36:39 CST; 47s ago</span><br><span class="line"> Main PID: 14996 (php-fpm)</span><br><span class="line">   CGroup: /system.slice/php5-fpm.service</span><br><span class="line">           ├─14996 php-fpm: master process (/usr/local/php5/etc/php-fpm.conf)</span><br><span class="line">           ├─14997 php-fpm: pool www</span><br><span class="line">           └─14998 php-fpm: pool www</span><br></pre></td></tr></tbody></table></figure><p>参考地址：<a href="https://blog.csdn.net/weixin_42579642/article/details/85290670">https://blog.csdn.net/weixin_42579642/article/details/85290670</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装mysql5.0版本教程</title>
      <link href="/posts/install-mysql-on-linux.html"/>
      <url>/posts/install-mysql-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载mysql-bundle-tar包"><a href="#1-下载mysql-bundle-tar包" class="headerlink" title="1. 下载mysql bundle.tar包"></a>1. 下载mysql bundle.tar包</h3><p>上传  mysql bundle.tar包到服务器<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解压  tar -xvf mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="2-按顺序逐个安装rpm"><a href="#2-按顺序逐个安装rpm" class="headerlink" title="2. 按顺序逐个安装rpm"></a>2. 按顺序逐个安装rpm</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mariadb</span><br><span class="line">rpm -e mariadb-libs-5.5.35-3.el7.x86_64 --nodeps</span><br><span class="line">rpm - ivh mysql-community-common-</span><br><span class="line">rpm - ivh mysql-community-libs-      </span><br><span class="line">rpm - ivh mysql-community-client-  </span><br><span class="line">rpm - ivh mysql-community-server-   </span><br><span class="line">rpm - ivh mysql-community-devel-</span><br></pre></td></tr></tbody></table></figure><h3 id="3-启动-amp-配置"><a href="#3-启动-amp-配置" class="headerlink" title="3. 启动&amp;配置"></a>3. 启动&amp;配置</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">systemctl  start mysqld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭</span></span><br><span class="line">systemctl  stop mysqld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动</span></span><br><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看运行状态</span></span><br><span class="line">systemctl  status mysqld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看到绿色的running代表已经启动成功，然后mysql在5.6之后的版本都会默认生成一个默认密码，是root用户的。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看默认设置的密码</span></span><br><span class="line">grep 'temporary password' /var/log/mysqld.log</span><br></pre></td></tr></tbody></table></figure><h3 id="4-进入mysql"><a href="#4-进入mysql" class="headerlink" title="4. 进入mysql"></a>4. 进入mysql</h3><p>执行完如下命令之后输入默认密码<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></tbody></table></figure><p></p><p>MySQL 5调整密码验证规则：<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">set</span> global validate_password_policy=0;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">set</span> global validate_password_length=1;</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>重新设置密码<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER  user() identified by "123456";</span><br></pre></td></tr></tbody></table></figure><p></p><p>授权 root 远程连接<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></tbody></table></figure><p></p><p>修改连接权限，执行：<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set host='%' where user ='root';</span><br></pre></td></tr></tbody></table></figure><p></p><p>执行刷新权限：<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装nodejs</title>
      <link href="/posts/linux-install-nodejs.html"/>
      <url>/posts/linux-install-nodejs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载nodejs"><a href="#1-下载nodejs" class="headerlink" title="1. 下载nodejs"></a>1. 下载nodejs</h3><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wget</span>&nbsp;https://nodejs.org/dist/v8.<span class="number">11</span>.<span class="number">4</span>/node-v8.<span class="number">11</span>.<span class="number">4</span>-linux-x64.tar.xz</span><br></pre></td></tr></tbody></table></figure><h3 id="2-解压nodejs"><a href="#2-解压nodejs" class="headerlink" title="2. 解压nodejs"></a>2. 解压nodejs</h3><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xvf <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.4</span>-linux-x64.tar.xz <span class="comment">#解压</span></span><br><span class="line">mv <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.4</span>-linux-x64 <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.4</span> <span class="comment">#改短名</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-查看版本"><a href="#3-查看版本" class="headerlink" title="3. 查看版本"></a>3. 查看版本</h3><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /<span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.4</span>/bin &amp;&amp; ls <span class="comment">#进入目录并列出</span></span><br><span class="line">./<span class="keyword">node</span> <span class="title">-v</span> <span class="comment">#查看node版本</span></span><br><span class="line"><span class="keyword">node</span> <span class="title">-v</span> <span class="comment">#无法获取，未配置</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/images/linux_install_nodejs_1.png" alt=""></p><h3 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h3><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /<span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.4</span>/bin/<span class="keyword">node</span> <span class="title">/usr</span>/bin/<span class="keyword">node</span></span><br><span class="line"><span class="title">ln</span> -s /<span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.4</span>/bin/npm /usr/bin/npm</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/linux_install_nodejs_2.png" alt=""></p><h3 id="5-清理安装包"><a href="#5-清理安装包" class="headerlink" title="5. 清理安装包"></a>5. 清理安装包</h3><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">11.4</span>-linux-x64.tar.xz</span><br></pre></td></tr></tbody></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/8cdbe4f4b533">https://www.jianshu.com/p/8cdbe4f4b533</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装Cacti</title>
      <link href="/posts/install-cacti-on-linux.html"/>
      <url>/posts/install-cacti-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、安装rrdtool"><a href="#1、安装rrdtool" class="headerlink" title="1、安装rrdtool"></a>1、安装rrdtool</h3><p><code>yum install rrdtool rrdtool-perl -y</code></p><h3 id="2、安装配置net-snmp"><a href="#2、安装配置net-snmp" class="headerlink" title="2、安装配置net-snmp"></a>2、安装配置net-snmp</h3><ul><li>(1)、安装net-snmp<br><code>yum install net-snmp net-snmp-libs net-snmp-utils</code></li></ul><p>可能报错：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="number">2</span>:postfix-<span class="number">2.10</span>.<span class="number">1</span>-<span class="number">6</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> has missing requires of libmysqlclient<span class="selector-class">.so</span>.<span class="number">18</span>()(<span class="number">64</span>bit)</span><br><span class="line"><span class="number">2</span>:postfix-<span class="number">2.10</span>.<span class="number">1</span>-<span class="number">6</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> has missing requires of libmysqlclient<span class="selector-class">.so</span>.<span class="number">18</span>(libmysqlclient_18)(<span class="number">64</span>bit)</span><br></pre></td></tr></tbody></table></figure><p>解决:缺少Percona-XtraDB-Cluster-shared-55-5.5.37-25.10.756.el6.x86_64.rpm这个包</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wget http://www.percona.com/redir/downloads/Percona-XtraDB-Cluster/5.5.37-25.10/RPM/rhel6/x86_64/Percona-XtraDB-Cluster-shared-55-5.5.37-25.10.756.el6.x86_64.rpm</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rpm -ivh Percona-XtraDB-Cluster-shared-55-5.5.37-25.10.756.el6.x86_64.rp</span></span><br></pre></td></tr></tbody></table></figure><ul><li>(2)、配置net-snmp<br><code>vim /etc/snmp/snmpd.conf</code></li></ul><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">41</span>行 <span class="number">1</span>将<span class="keyword">default</span> 改为监控服务器ip;<span class="number">2</span> 将<span class="built_in">public</span> 改成复杂些的识别的字符串  </span><br><span class="line">com2sec notConfigUser  <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>      <span class="built_in">public</span>  </span><br><span class="line">  </span><br><span class="line"><span class="number">62</span>行 <span class="number">1</span>将systemview 改为<span class="keyword">all</span>,供所有snmp 访问权限  </span><br><span class="line"><span class="keyword">access</span>  notConfigGroup ""      <span class="keyword">any</span>       noauth    exact  <span class="keyword">all</span> <span class="keyword">none</span> <span class="keyword">none</span>  </span><br><span class="line">  </span><br><span class="line"><span class="number">85</span>行 将#注释符号去掉  </span><br><span class="line"><span class="keyword">view</span> <span class="keyword">all</span>    included  <span class="number">.1</span>                               <span class="number">80</span>  </span><br></pre></td></tr></tbody></table></figure><ul><li><p>(3)、启动net-snmp<br><code>service snmpd start</code><br>可能提示：Redirecting to /bin/systemctl start snmpd.service<br>解决方法：<code>/bin/systemctl start snmpd</code></p></li><li><p>(4)、测试net-snmp<br>snmpd 使用 tcp/udp 161 端口,验证snmpd 服务<br><code>lsof -i :161</code><br><img src="/images/install_cacti_on_linux_1.png" alt=""><br>使用snmpwalk 命令验证</p><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v <span class="number">2</span><span class="keyword">c</span> -<span class="keyword">c</span> public <span class="number">127.0</span>.<span class="number">0.1</span> </span><br><span class="line">-v是指版本<span class="punctuation">,</span>-<span class="keyword">c</span> 是指密钥，获取到系统信息则正常！</span><br><span class="line">如果cacti搭建好后很久还是没出图，用这个命令试试看能否获取到数据。</span><br><span class="line">正常情况下，执行完这个命令后会有很多数据出现！</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="3、安装cacti"><a href="#3、安装cacti" class="headerlink" title="3、安装cacti"></a>3、安装cacti</h3><ul><li>(1)、安装net-snmp<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp </span><br><span class="line">wget http://www.cacti.net/downloads/cacti-0.8.8a.tar.gz </span><br><span class="line">tar xzf cacti-0.8.8a.tar.gz </span><br><span class="line">mv cacti-0.8.8a /var/www/cacti </span><br><span class="line">cd /var/www/cacti</span><br></pre></td></tr></tbody></table></figure></li><li><p>(2)、创建数据库<br><code>mysqladmin --user=root -p create cacti</code></p></li><li><p>(3)、导入数据库<br><code>mysql -uroot -p cacti &lt; cacti.sql</code><br>可能报错：ERROR 1067 (42000) at line 1847: Invalid default value for ‘status_fail_date’<br>原因：status_fail_date的datetime默认类型是不允许的<br>解决方法：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/my.<span class="keyword">cnf</span></span><br><span class="line">添加如下内容：</span><br><span class="line">sql-<span class="keyword">mode</span>=<span class="string">"ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span></span><br><span class="line">重启mysql服务：systemctl restart mysqld</span><br></pre></td></tr></tbody></table></figure></li><li><p>(4)、创建数据库用户</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysql -uroot -p mysql </span><br><span class="line">mysql&gt; <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> cacti.* <span class="keyword">TO</span> cactiuser@localhost IDENTIFIED <span class="keyword">BY</span> <span class="string">'Cacti@pwd001231'</span>; </span><br><span class="line">mysql&gt; flush <span class="keyword">privileges</span>; </span><br></pre></td></tr></tbody></table></figure></li><li><p>(5)、配置include/config.php</p><figure class="highlight perl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$database_type = <span class="string">"mysql"</span>; </span><br><span class="line">$database_default = <span class="string">"cacti"</span>; </span><br><span class="line">$database_hostname = <span class="string">"localhost"</span>; </span><br><span class="line">$database_username = <span class="string">"cactiuser"</span>; </span><br><span class="line">$database_password = <span class="string">"Cacti@pwd001231"</span>; </span><br></pre></td></tr></tbody></table></figure></li></ul><p>打开注释掉的：<code>$url_path = "/cacti/";</code></p><ul><li><p>(6)、配置include/global.php</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Default database settings*/</span> </span><br><span class="line"><span class="variable">$database_type</span> = <span class="string">"mysql"</span>; </span><br><span class="line"><span class="variable">$database_default</span> = <span class="string">"cacti"</span>; </span><br><span class="line"><span class="variable">$database_hostname</span> = <span class="string">"localhost"</span>; </span><br><span class="line"><span class="variable">$database_username</span> = <span class="string">"cactiuser"</span>; </span><br><span class="line"><span class="variable">$database_password</span> = <span class="string">"Cacti@pwd001231"</span>; </span><br><span class="line"><span class="variable">$database_port</span> = <span class="string">"3306"</span>; </span><br><span class="line"><span class="variable">$database_ssl</span> = <span class="literal">false</span>; </span><br></pre></td></tr></tbody></table></figure></li><li><p>(7)、设置目录权限</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd cactiuser </span><br><span class="line"><span class="built_in">chown</span> -R cactiuser rra/ <span class="built_in">log</span>/ </span><br></pre></td></tr></tbody></table></figure></li><li><p>(8)、配置计划任务</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#crontab -e </span></span><br><span class="line">*<span class="regexp">/5 * * * * /u</span>sr<span class="regexp">/bin/</span>php <span class="regexp">/var/</span>www<span class="regexp">/html/</span>cacti<span class="regexp">/poller.php &gt; /</span>dev<span class="regexp">/null 2&gt;&amp;1 /</span>/让系统每<span class="number">5</span>分钟收集</span><br><span class="line">service crond restart </span><br></pre></td></tr></tbody></table></figure></li><li><p>(9)、完成cacti的安装<br>注意关闭防火墙或者允许80端口，关闭selinux<br>1) 在浏览器中输入：<a href="http://监控服务器IP/cacti/">http://监控服务器IP/cacti/</a><br>默认用户名：admin 密码：admin<br>2）设置cacti用到的命令路径<br>3) 更改密码<br>登陆成功户 next&gt;&gt;   next&gt;&gt;<br><img src="/images/install_cacti_on_linux_2.png" alt=""><br><img src="/images/install_cacti_on_linux_3.png" alt=""></p></li></ul><p>参考地址：<a href="https://www.cnblogs.com/liuyansheng/p/6118535.html">https://www.cnblogs.com/liuyansheng/p/6118535.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cacti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下操作MySQL</title>
      <link href="/posts/use-mysql-on-linux.html"/>
      <url>/posts/use-mysql-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-登录MySQL数据库"><a href="#1-登录MySQL数据库" class="headerlink" title="1. 登录MySQL数据库"></a>1. 登录MySQL数据库</h3><p><code>mysql -uroot -p</code><br><img src="/images/use_mysql_on_linux_1.png" alt=""></p><h3 id="2-退出MySQL"><a href="#2-退出MySQL" class="headerlink" title="2. 退出MySQL"></a>2. 退出MySQL</h3><p><code>quit或者exit</code><br><img src="/images/use_mysql_on_linux_2.png" alt=""></p><h3 id="3-查看MySQL版本-四种方法"><a href="#3-查看MySQL版本-四种方法" class="headerlink" title="3. 查看MySQL版本(四种方法)"></a>3. 查看MySQL版本(四种方法)</h3><ul><li><p>在终端下执行： <code>mysql -V</code><br><img src="/images/show_mysql_version_on_linux_1.png" alt=""></p></li><li><p>在help中查找 <code>mysql --help | grep Distrib</code><br><img src="/images/show_mysql_version_on_linux_2.png" alt=""></p></li><li><p>在mysql 里查看 <code>select version()</code><br><img src="/images/show_mysql_version_on_linux_3.png" alt=""></p></li><li><p>在mysql 里查看 <code>status</code><br><img src="/images/show_mysql_version_on_linux_4.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS点击复制指定内容</title>
      <link href="/posts/js-copy-object.html"/>
      <url>/posts/js-copy-object.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>点击按钮，复制指定文本框内容，代码如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"my-data"</span>);</span></span><br><span class="line"><span class="language-javascript">    str.<span class="title function_">select</span>(); <span class="comment">// 选择对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">"Copy"</span>); <span class="comment">// 执行浏览器复制命令</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">"复制成功！"</span>);</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"20"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">id</span>=<span class="string">"my-data"</span>&gt;</span>我的测试内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"copy();"</span> <span class="attr">value</span>=<span class="string">"复制"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中rz的使用</title>
      <link href="/posts/rz-on-linux.html"/>
      <url>/posts/rz-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们常常需要在客户端和服务器(windows和linux)之间互传文件，这就可以使用rz(sz)命令。</p><ol><li><p>如果服务器不支持rz命令，需安装：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install lrzsz</span><br></pre></td></tr></tbody></table></figure></li><li><p>从客户端上传文件(可多选)到服务器：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rz</span><br><span class="line">sudo rz -be</span><br></pre></td></tr></tbody></table></figure></li><li><p>从服务端发送文件到客户端：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sz filename</span><br></pre></td></tr></tbody></table></figure></li><li><p>卸载rz：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove lrzsz</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rz/sz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常见报错问题</title>
      <link href="/posts/mysql-errors.html"/>
      <url>/posts/mysql-errors.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>[Err] 1066 - Not unique table/alias: ‘s’</p><p>原因：SQL语句中存在多个表的别名为’s’</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP运维笔记</title>
      <link href="/posts/php-operate-note.html"/>
      <url>/posts/php-operate-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-常见命令"><a href="#1-常见命令" class="headerlink" title="1. 常见命令"></a>1. 常见命令</h3><pre><code>查看PHP扩展：`php -m`查看扩展的版本信息：`php -ri 扩展名`  如：`php -ri redis`</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown笔记</title>
      <link href="/posts/markdown-note.html"/>
      <url>/posts/markdown-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>解决有序列表排序失败的问题，格式如下：<figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="selector-attr">[空格]</span>测试文字<span class="number">1</span> </span><br><span class="line"><span class="selector-attr">[Tab]</span>-<span class="selector-attr">[空格]</span>测试文字<span class="number">1</span>-<span class="number">1</span> </span><br><span class="line"><span class="selector-attr">[Tab]</span>-<span class="selector-attr">[空格]</span>测试文字<span class="number">1</span>-<span class="number">2</span> </span><br><span class="line"><span class="number">2</span>.<span class="selector-attr">[空格]</span>测试文字<span class="number">2</span> </span><br><span class="line"><span class="selector-attr">[Tab]</span>-<span class="selector-attr">[空格]</span>测试文字<span class="number">2</span>-<span class="number">1</span> </span><br><span class="line"><span class="selector-attr">[Tab]</span><span class="selector-attr">[Tab]</span>-<span class="selector-attr">[空格]</span>测试文字<span class="number">2</span>-<span class="number">1</span>-<span class="number">1</span> </span><br><span class="line"><span class="selector-attr">[Tab]</span><span class="selector-attr">[Tab]</span>-<span class="selector-attr">[空格]</span>测试文字<span class="number">2</span>-<span class="number">1</span>-<span class="number">2</span> </span><br><span class="line"><span class="selector-attr">[Tab]</span>-<span class="selector-attr">[空格]</span>测试文字<span class="number">2</span>-<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure> 代码段使用Tab退格</li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prolog笔记</title>
      <link href="/posts/prolog-notes.html"/>
      <url>/posts/prolog-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-加载脚本"><a href="#1-加载脚本" class="headerlink" title="1. 加载脚本"></a>1. 加载脚本</h2><p><code>?- ['E:/SWI-Prolog/test/friend.pl'].       %true</code></p><h2 id="2-教程"><a href="#2-教程" class="headerlink" title="2. 教程"></a>2. 教程</h2><p><a href="https://riptutorial.com/zh-CN/prolog">https://riptutorial.com/zh-CN/prolog</a></p><h2 id="3-简单的计算求解："><a href="#3-简单的计算求解：" class="headerlink" title="3. 简单的计算求解："></a>3. 简单的计算求解：</h2><p><code>?- X is 3*7.       %X = 21</code></p><h2 id="4-CLP（约束逻辑编程）库的使用"><a href="#4-CLP（约束逻辑编程）库的使用" class="headerlink" title="4. CLP（约束逻辑编程）库的使用"></a>4. CLP（约束逻辑编程）库的使用</h2><p>求解方程，CLP只能处理整数运算<br>    </p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?-</span> use_module(library(clpfd)).</span><br><span class="line"><span class="string">?-</span> Y <span class="comment">#= 3+4.                    %Y = 7.</span></span><br><span class="line"><span class="string">?-</span> <span class="number">5</span> <span class="comment">#= 4+W.                    %W = 1.</span></span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="5-单行注释"><a href="#5-单行注释" class="headerlink" title="5. 单行注释"></a>5. 单行注释</h2><p>使用”%”</p><h2 id="6-知识库"><a href="#6-知识库" class="headerlink" title="6. 知识库"></a>6. 知识库</h2><p>事实 + 规则 = 知识库。<br>事实是我们对这个世界直接观察的结果。规则是关于现实世界的逻辑推论。</p><h2 id="7-合一（unification）"><a href="#7-合一（unification）" class="headerlink" title="7. 合一（unification）"></a>7. 合一（unification）</h2><p>找出那些使规则匹配的值。<br>合一有时候不是唯一的，可以通过“;”来进行追问，有时候我们可能不满足于一个答案。</p><h2 id="8-列表-元组"><a href="#8-列表-元组" class="headerlink" title="8. 列表/元组"></a>8. 列表/元组</h2><p>程序 = 算法 + 数据结构。      列表是变长的容器，元组是定长的容器。<br>    </p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?- <span class="comment">(1,2,3)</span> = <span class="comment">(1,2,3)</span>.               <span class="meta">%</span>元组</span><br><span class="line">yes</span><br><span class="line"></span><br><span class="line">?- [A,B,C] = [A,B,C].               <span class="meta">%</span>列表</span><br><span class="line">yes</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="9-内置谓词"><a href="#9-内置谓词" class="headerlink" title="9. 内置谓词"></a>9. 内置谓词</h2><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>获取列表的长度   <code>?- length([1,2,3],L).      %L = 3.</code></p><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><p>可以用来合并两个列表<br>    </p><figure class="highlight inform7"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?- append(<span class="comment">[1]</span>,<span class="comment">[2]</span>,What).      %What = <span class="comment">[1, 2]</span>.</span><br><span class="line">?- append(<span class="comment">[1]</span>,W,<span class="comment">[1,2,3]</span>).      %W = <span class="comment">[2, 3]</span>.</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="member"><a href="#member" class="headerlink" title="member"></a>member</h3><p>检查某一个值是否在一个列表内<br>    </p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?-</span> member(<span class="number">1</span>,[<span class="number">1</span>,<span class="number">2</span>]).      %<span class="literal">true</span>.</span><br><span class="line"><span class="string">?-</span>  member(<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>]).      %<span class="literal">false</span>.</span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> Prolog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prolog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPExcel笔记</title>
      <link href="/posts/php-excel.html"/>
      <url>/posts/php-excel.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-设置字体和样式"><a href="#1-设置字体和样式" class="headerlink" title="1. 设置字体和样式"></a>1. 设置字体和样式</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="string">'A1'</span>)-&gt;applyFromArray([<span class="string">'font'</span>=&gt;[<span class="string">'bold'</span>=&gt;<span class="literal">true</span>]]);//设置单元格A1字体加粗</span><br><span class="line"><span class="variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="string">'A1:GL1'</span>)-&gt;applyFromArray([<span class="string">'font'</span>=&gt;[<span class="string">'bold'</span>=&gt;<span class="literal">true</span>]]);//设置单元格A1-GL1字体加粗</span><br><span class="line"><span class="variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="string">'A1:B3'</span>)-&gt;getFont()-&gt;setBold(<span class="literal">true</span>);//设置A1-B3之间的单元格字体加粗</span><br></pre></td></tr></tbody></table></figure><h3 id="2-设置行高"><a href="#2-设置行高" class="headerlink" title="2. 设置行高"></a>2. 设置行高</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getDefaultRowDimension()-&gt;setRowHeight(20);//设置默认行高</span><br><span class="line"><span class="variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getRowDimension(<span class="string">'1'</span>)-&gt;setRowHeight(30);//设置第一行行高</span><br></pre></td></tr></tbody></table></figure><h3 id="3-设置列宽"><a href="#3-设置列宽" class="headerlink" title="3. 设置列宽"></a>3. 设置列宽</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getColumnDimension(<span class="string">'A'</span>)-&gt;setWidth(20);//设置A列列宽</span><br></pre></td></tr></tbody></table></figure><h3 id="4-单元格内容特定位置换行"><a href="#4-单元格内容特定位置换行" class="headerlink" title="4. 单元格内容特定位置换行"></a>4. 单元格内容特定位置换行</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$objPHPExcel</span>-&gt;setActiveSheetIndex(0)-&gt;setCellValue(<span class="string">'A3'</span>, <span class="string">"第三节\n11:00-12:00"</span>);   //注意双引号</span><br><span class="line"><span class="variable">$objPHPExcel</span>-&gt;getActiveSheet()-&gt;getStyle(<span class="string">'A3'</span>)-&gt;getAlignment()-&gt;setWrapText(<span class="literal">true</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="5-PhpSpreadsheet日期格式问题"><a href="#5-PhpSpreadsheet日期格式问题" class="headerlink" title="5. PhpSpreadsheet日期格式问题"></a>5. PhpSpreadsheet日期格式问题</h3><p>使用PhpSpreadsheet  进行导入处理时，如果单元格格式为：自定义的<code>yyyy/m/d</code>，导入后的数据格式会变为<code>m/d/yyyy</code>，即12/13/2021<br><img src="/images/php_excel_note_1.png" alt=""><br>这是因为PhpSpreadsheet会把单元格转为数字，而校验出的单元格格式为<code>m/d/yyyy</code>。<br>解决办法：使用日期格式的<code>yyyy/m/d</code><br><img src="/images/php_excel_note_2.png" alt=""><br>程序校验出的日期格式为：<code>yyyy/m/d;@</code><br>excel导入，获取数据：<br></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$allobjWorksheets</span> = <span class="variable">$objPHPExcel</span>-&gt;<span class="title function_ invoke__">getAllSheets</span>();</span><br><span class="line"><span class="variable">$result</span> = [];</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$allobjWorksheets</span> <span class="keyword">as</span> <span class="variable">$objWorksheet</span>) {</span><br><span class="line">    <span class="variable">$sheetname</span> = <span class="variable">$objWorksheet</span>-&gt;<span class="title function_ invoke__">getTitle</span>();</span><br><span class="line">    <span class="variable">$highestRow</span> = <span class="variable">$objWorksheet</span>-&gt;<span class="title function_ invoke__">getHighestRow</span>();</span><br><span class="line">    <span class="variable">$highestColumn</span> = <span class="variable">$objWorksheet</span>-&gt;<span class="title function_ invoke__">getHighestColumn</span>();</span><br><span class="line">    <span class="variable">$highestColumnIndex</span> = <span class="title class_">Coordinate</span>::<span class="title function_ invoke__">columnIndexFromString</span>(<span class="variable">$highestColumn</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$row</span> = <span class="number">1</span>; <span class="variable">$row</span> &lt;= <span class="variable">$highestRow</span>; ++<span class="variable">$row</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$col</span> = <span class="number">0</span>; <span class="variable">$col</span> &lt;= <span class="variable">$highestColumnIndex</span>; ++<span class="variable">$col</span>) {</span><br><span class="line">            <span class="variable">$cell</span> = <span class="variable">$objWorksheet</span>-&gt;<span class="title function_ invoke__">getCellByColumnAndRow</span>(<span class="variable">$col</span>, <span class="variable">$row</span>);</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable">$cell</span>-&gt;<span class="title function_ invoke__">getValue</span>();</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$cell</span>-&gt;<span class="title function_ invoke__">getDataType</span>() == <span class="title class_">DataType</span>::<span class="variable constant_">TYPE_NUMERIC</span>) {</span><br><span class="line">                <span class="variable">$formatcode</span> = <span class="variable">$cell</span>-&gt;<span class="title function_ invoke__">getStyle</span>()-&gt;<span class="title function_ invoke__">getNumberFormat</span>()-&gt;<span class="title function_ invoke__">getFormatCode</span>();</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">'/^(\[\$[A-Z]*-[0-9A-F]*\])*[hmsdy]/i'</span>, <span class="variable">$formatcode</span>)) {</span><br><span class="line">                    <span class="variable">$value</span> = <span class="variable">$cell</span>-&gt;<span class="title function_ invoke__">getFormattedValue</span>();</span><br><span class="line">                    <span class="comment">//$value=gmdate("Y-m-d", PHPExcel_Shared_Date::ExcelToPHP($value));</span></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="variable">$value</span> = <span class="title class_">NumberFormat</span>::<span class="title function_ invoke__">toFormattedString</span>(<span class="variable">$value</span>, <span class="variable">$formatcode</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="variable">$result</span>[<span class="variable">$sheetname</span>][<span class="variable">$row</span> - <span class="number">1</span>][<span class="variable">$col</span>] = <span class="variable">$value</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="keyword">die</span>;</span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHPExcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL自定义函数</title>
      <link href="/posts/mysql-custom-functions.html"/>
      <url>/posts/mysql-custom-functions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">有时候要对MySQL数据进行批量处理，仅仅依靠已有的内置函数是不够的，这个时候就需要添加一些自定义的函数了，下面列举一些常用的自定义函数</div><h3 id="1-批量处理字符串，将”FEEED305904B”转为”FE-EE-D3-05-90-4B”格式："><a href="#1-批量处理字符串，将”FEEED305904B”转为”FE-EE-D3-05-90-4B”格式：" class="headerlink" title="1. 批量处理字符串，将”FEEED305904B”转为”FE:EE:D3:05:90:4B”格式："></a>1. 批量处理字符串，将”FEEED305904B”转为”FE:EE:D3:05:90:4B”格式：</h3><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> `SPLIT_STR`; </span><br><span class="line"><span class="keyword">delimiter</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> SPLIT_STR(</span></span><br><span class="line"><span class="language-pgsql">  x <span class="type">VARCHAR</span>(<span class="number">255</span>),</span></span><br><span class="line"><span class="language-pgsql">  delim <span class="type">VARCHAR</span>(<span class="number">12</span>),</span></span><br><span class="line"><span class="language-pgsql">  pos <span class="type">INT</span></span></span><br><span class="line"><span class="language-pgsql">)</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>)</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">DECLARE</span> s <span class="type">text</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>;</span></span><br><span class="line"><span class="language-pgsql">    myloop: <span class="keyword">LOOP</span></span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">SET</span> i = i+pos;</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">SET</span> s = CONCAT(s,delim,left(x,pos));</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">SET</span> x = right(x,length(x)-pos);</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">if</span> pos&gt;length(x) <span class="keyword">then</span></span></span><br><span class="line"><span class="language-pgsql">            <span class="keyword">if</span> length(x)&gt;<span class="number">0</span> <span class="keyword">then</span></span></span><br><span class="line"><span class="language-pgsql">                <span class="keyword">SET</span> s = CONCAT(s,delim,x);</span></span><br><span class="line"><span class="language-pgsql">            <span class="keyword">end</span> <span class="keyword">if</span>;</span></span><br><span class="line"><span class="language-pgsql">            leave myloop;</span></span><br><span class="line"><span class="language-pgsql">        <span class="keyword">end</span> <span class="keyword">if</span>;</span></span><br><span class="line"><span class="language-pgsql">    <span class="keyword">END</span> <span class="keyword">LOOP</span> myloop;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">RETURN</span> right(s,length(s)-length(delim));</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span> $$</span></span><br></pre></td></tr></tbody></table></figure><p>调用：<code>SELECT SPLIT_STR('FEEED305904B', ':', 2);</code></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP生成数据字典</title>
      <link href="/posts/make-dictionary-by-php.html"/>
      <url>/posts/make-dictionary-by-php.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过php代码生成MySQL数据字典，代码如下：</p><figure class="highlight php-template"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="language-php"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-php"> * 生成mysql数据字典</span></span></span><br><span class="line"><span class="comment"><span class="language-php"> */</span></span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">header</span>(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</span></span><br><span class="line"><span class="language-php"><span class="comment">//配置数据库</span></span></span><br><span class="line"><span class="language-php"><span class="variable">$dbserver</span>   = <span class="string">"127.0.0.1"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$dbusername</span> = <span class="string">"root"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$dbpassword</span> = <span class="string">"root"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$database</span>   = <span class="string">"demodb"</span>;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="comment">//其他配置</span></span></span><br><span class="line"><span class="language-php"><span class="variable">$mysql_conn</span> = @<span class="title function_ invoke__">mysql_connect</span>(<span class="variable">$dbserver</span>, <span class="variable">$dbusername</span>, <span class="variable">$dbpassword</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Mysql connect is error."</span>);</span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">mysql_select_db</span>(<span class="variable">$database</span>, <span class="variable">$mysql_conn</span>);</span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">mysql_query</span>(<span class="string">'SET NAMES utf8'</span>, <span class="variable">$mysql_conn</span>);</span></span><br><span class="line"><span class="language-php"><span class="variable">$table_result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="string">'show tables'</span>, <span class="variable">$mysql_conn</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="variable">$no_show_table</span> = <span class="keyword">array</span>();    <span class="comment">//不需要显示的表</span></span></span><br><span class="line"><span class="language-php"><span class="variable">$no_show_field</span> = <span class="keyword">array</span>();   <span class="comment">//不需要显示的字段</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="comment">//取得所有的表名</span></span></span><br><span class="line"><span class="language-php"><span class="keyword">while</span>(<span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$table_result</span>)){</span></span><br><span class="line"><span class="language-php"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$row</span>[<span class="number">0</span>],<span class="variable">$no_show_table</span>)){</span></span><br><span class="line"><span class="language-php"><span class="variable">$tables</span>[][<span class="string">'TABLE_NAME'</span>] = <span class="variable">$row</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-php">}</span></span><br><span class="line"><span class="language-php">}</span></span><br><span class="line"><span class="language-php"><span class="comment">//替换所以表的表前缀</span></span></span><br><span class="line"><span class="language-php"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">'prefix'</span>])){ </span></span><br><span class="line"><span class="language-php"><span class="variable">$prefix</span> = <span class="string">'wxaj'</span>;</span></span><br><span class="line"><span class="language-php"><span class="keyword">foreach</span>(<span class="variable">$tables</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>){</span></span><br><span class="line"><span class="language-php"><span class="variable">$tableName</span> = <span class="variable">$val</span>[<span class="string">'TABLE_NAME'</span>];</span></span><br><span class="line"><span class="language-php"><span class="variable">$string</span> = <span class="title function_ invoke__">explode</span>(<span class="string">'_'</span>,<span class="variable">$tableName</span>);</span></span><br><span class="line"><span class="language-php"><span class="keyword">if</span>(<span class="variable">$string</span>[<span class="number">0</span>] != <span class="variable">$prefix</span>){  </span></span><br><span class="line"><span class="language-php"><span class="variable">$string</span>[<span class="number">0</span>] = <span class="variable">$prefix</span>;  </span></span><br><span class="line"><span class="language-php"><span class="variable">$newTableName</span> = <span class="title function_ invoke__">implode</span>(<span class="string">'_'</span>, <span class="variable">$string</span>);  </span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">mysql_query</span>(<span class="string">'rename table '</span>.<span class="variable">$tableName</span>.<span class="string">' TO '</span>.<span class="variable">$newTableName</span>);  </span></span><br><span class="line"><span class="language-php">}</span></span><br><span class="line"><span class="language-php">}</span></span><br><span class="line"><span class="language-php"><span class="keyword">echo</span> <span class="string">"替换成功！"</span>;<span class="keyword">exit</span>();</span></span><br><span class="line"><span class="language-php">}</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="comment">//循环取得所有表的备注及表中列消息</span></span></span><br><span class="line"><span class="language-php"><span class="keyword">foreach</span> (<span class="variable">$tables</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>) {</span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span>  = <span class="string">'SELECT * FROM '</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span> .= <span class="string">'INFORMATION_SCHEMA.TABLES '</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span> .= <span class="string">'WHERE '</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span> .= <span class="string">"table_name = '<span class="subst">{$v['TABLE_NAME']}</span>'  AND table_schema = '<span class="subst">{$database}</span>'"</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$table_result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>, <span class="variable">$mysql_conn</span>);</span></span><br><span class="line"><span class="language-php">    <span class="keyword">while</span> (<span class="variable">$t</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$table_result</span>) ) {</span></span><br><span class="line"><span class="language-php">        <span class="variable">$tables</span>[<span class="variable">$k</span>][<span class="string">'TABLE_COMMENT'</span>] = <span class="variable">$t</span>[<span class="string">'TABLE_COMMENT'</span>];</span></span><br><span class="line"><span class="language-php">    }</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span>  = <span class="string">'SELECT column_name FROM '</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span> .= <span class="string">'INFORMATION_SCHEMA.`KEY_COLUMN_USAGE` '</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span> .= <span class="string">'WHERE '</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span> .= <span class="string">"table_name = '<span class="subst">{$v['TABLE_NAME']}</span>'  AND constraint_name = 'PRIMARY'"</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$pk_result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>, <span class="variable">$mysql_conn</span>);</span></span><br><span class="line"><span class="language-php">    <span class="variable">$pks</span> = [];</span></span><br><span class="line"><span class="language-php">    <span class="keyword">while</span> (<span class="variable">$t</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$pk_result</span>) ) {</span></span><br><span class="line"><span class="language-php">        <span class="variable">$pks</span>[] = <span class="variable">$t</span>[<span class="string">'column_name'</span>];</span></span><br><span class="line"><span class="language-php">    }</span></span><br><span class="line"><span class="language-php">    <span class="variable">$tables</span>[<span class="variable">$k</span>][<span class="string">'PRIMARY_KEY'</span>] = <span class="variable">$pks</span>;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span>  = <span class="string">'SELECT * FROM '</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span> .= <span class="string">'INFORMATION_SCHEMA.COLUMNS '</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span> .= <span class="string">'WHERE '</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$sql</span> .= <span class="string">"table_name = '<span class="subst">{$v['TABLE_NAME']}</span>' AND table_schema = '<span class="subst">{$database}</span>'"</span>;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="variable">$fields</span> = [];</span></span><br><span class="line"><span class="language-php">    <span class="variable">$field_result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>, <span class="variable">$mysql_conn</span>);</span></span><br><span class="line"><span class="language-php">    <span class="keyword">while</span> (<span class="variable">$t</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$field_result</span>) ) {</span></span><br><span class="line"><span class="language-php">        <span class="variable">$fields</span>[] = <span class="variable">$t</span>;</span></span><br><span class="line"><span class="language-php">    }</span></span><br><span class="line"><span class="language-php">    <span class="variable">$tables</span>[<span class="variable">$k</span>][<span class="string">'COLUMN'</span>] = <span class="variable">$fields</span>;</span></span><br><span class="line"><span class="language-php">}</span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">mysql_close</span>(<span class="variable">$mysql_conn</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> = <span class="string">''</span>;</span></span><br><span class="line"><span class="language-php"><span class="comment">//循环所有表</span></span></span><br><span class="line"><span class="language-php"><span class="keyword">foreach</span> (<span class="variable">$tables</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>) {</span></span><br><span class="line"><span class="language-php">    <span class="variable">$html</span> .= <span class="string">'&lt;h3&gt;'</span> . (<span class="variable">$k</span> + <span class="number">1</span>) . <span class="string">'、'</span> . <span class="variable">$v</span>[<span class="string">'TABLE_COMMENT'</span>] .<span class="string">'  （'</span>. <span class="variable">$v</span>[<span class="string">'TABLE_NAME'</span>]. <span class="string">'）&lt;/h3&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$html</span> .= <span class="string">'&lt;table border="1" cellspacing="0" cellpadding="0" width="100%"&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$html</span> .= <span class="string">'&lt;tbody&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;tr&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;th&gt;字段名&lt;/th&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;th&gt;数据类型&lt;/th&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;th&gt;默认值&lt;/th&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;th&gt;允许非空&lt;/th&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;th&gt;自动递增&lt;/th&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;th&gt;是否主键&lt;/th&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;th&gt;备注&lt;/th&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;/tr&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">foreach</span> (<span class="variable">$v</span>[<span class="string">'COLUMN'</span>] <span class="keyword">as</span> <span class="variable">$f</span>) {</span></span><br><span class="line"><span class="language-php"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$no_show_field</span>[<span class="variable">$v</span>[<span class="string">'TABLE_NAME'</span>]]) || !<span class="title function_ invoke__">is_array</span>(<span class="variable">$no_show_field</span>[<span class="variable">$v</span>[<span class="string">'TABLE_NAME'</span>]])){ </span></span><br><span class="line"><span class="language-php"><span class="variable">$no_show_field</span>[<span class="variable">$v</span>[<span class="string">'TABLE_NAME'</span>]] = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="language-php">}</span></span><br><span class="line"><span class="language-php"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$f</span>[<span class="string">'COLUMN_NAME'</span>],<span class="variable">$no_show_field</span>[<span class="variable">$v</span>[<span class="string">'TABLE_NAME'</span>]])){</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;tr&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;td class="c1"&gt;'</span> . <span class="variable">$f</span>[<span class="string">'COLUMN_NAME'</span>] . <span class="string">'&lt;/td&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;td class="c2"&gt;'</span> . <span class="variable">$f</span>[<span class="string">'COLUMN_TYPE'</span>] . <span class="string">'&lt;/td&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;td class="c3"&gt;'</span> . <span class="variable">$f</span>[<span class="string">'COLUMN_DEFAULT'</span>] . <span class="string">'&lt;/td&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;td class="c4"&gt;'</span> . <span class="variable">$f</span>[<span class="string">'IS_NULLABLE'</span>] . <span class="string">'&lt;/td&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;td class="c5"&gt;'</span> . (<span class="variable">$f</span>[<span class="string">'EXTRA'</span>]==<span class="string">'auto_increment'</span>?<span class="string">'是'</span>:<span class="string">'&amp;nbsp;'</span>) . <span class="string">'&lt;/td&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;td class="c6"&gt;'</span> . (<span class="title function_ invoke__">in_array</span>(<span class="variable">$f</span>[<span class="string">'COLUMN_NAME'</span>],<span class="variable">$v</span>[<span class="string">'PRIMARY_KEY'</span>])?<span class="string">'是'</span>:<span class="string">'&amp;nbsp;'</span>) . <span class="string">'&lt;/td&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;td class="c7"&gt;'</span> . <span class="variable">$f</span>[<span class="string">'COLUMN_COMMENT'</span>] . <span class="string">'&lt;/td&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;/tr&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php">}</span></span><br><span class="line"><span class="language-php">    }</span></span><br><span class="line"><span class="language-php">    <span class="variable">$html</span> .= <span class="string">'&lt;/tbody&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php"><span class="variable">$html</span> .= <span class="string">'&lt;/table&gt;'</span>.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="language-php">}</span></span><br><span class="line"><span class="language-php"><span class="meta">?&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>数据字典<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"generator"</span> <span class="attr">content</span>=<span class="string">"ThinkDb V1.0"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"Crazy_boy"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"copyright"</span> <span class="attr">content</span>=<span class="string">"2014-208 zotuo.com"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">body</span>, <span class="selector-tag">td</span>, <span class="selector-tag">th</span> { <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>; <span class="attribute">font-size</span>: <span class="number">14px</span>; }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.warp</span>{<span class="attribute">margin</span>:auto; <span class="attribute">width</span>:<span class="number">900px</span>;}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.warp</span> <span class="selector-tag">h3</span>{<span class="attribute">margin</span>:<span class="number">0px</span>; <span class="attribute">padding</span>:<span class="number">0px</span>; <span class="attribute">line-height</span>:<span class="number">30px</span>; <span class="attribute">margin-top</span>:<span class="number">10px</span>;}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">table</span> { <span class="attribute">border-collapse</span>: collapse; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#CCC</span>; <span class="attribute">background</span>: <span class="number">#efefef</span>; }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">table</span> <span class="selector-tag">th</span> { <span class="attribute">text-align</span>: left; <span class="attribute">font-weight</span>: bold; <span class="attribute">height</span>: <span class="number">26px</span>; <span class="attribute">line-height</span>: <span class="number">26px</span>; <span class="attribute">font-size</span>: <span class="number">14px</span>; <span class="attribute">text-align</span>:center; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#CCC</span>; <span class="attribute">padding</span>:<span class="number">5px</span>;}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">table</span> <span class="selector-tag">td</span> { <span class="attribute">height</span>: <span class="number">20px</span>; <span class="attribute">font-size</span>: <span class="number">14px</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#CCC</span>; <span class="attribute">background-color</span>: <span class="number">#fff</span>; <span class="attribute">padding</span>:<span class="number">5px</span>;}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.c1</span> { <span class="attribute">width</span>: <span class="number">120px</span>; }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.c2</span> { <span class="attribute">width</span>: <span class="number">120px</span>; }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.c3</span> { <span class="attribute">width</span>: <span class="number">150px</span>; }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.c4</span> { <span class="attribute">width</span>: <span class="number">80px</span>; <span class="attribute">text-align</span>:center;}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.c5</span> { <span class="attribute">width</span>: <span class="number">80px</span>; <span class="attribute">text-align</span>:center;}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.c6</span> { <span class="attribute">width</span>: <span class="number">80px</span>; <span class="attribute">text-align</span>:center;}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.c7</span> { <span class="attribute">width</span>: <span class="number">270px</span>; }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span>数据字典<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="language-php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$html</span>; <span class="meta">?&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></tbody></table></figure><p>其中$dbserver、$dbusername、$dbpassword、$database需配置为相应的数据库IP地址、用户名、密码、数据库名。<br>代码下载：<a href="/codes/dictionary.php">dictionary.php</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle笔记</title>
      <link href="/posts/oracle-note.html"/>
      <url>/posts/oracle-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-强制并行处理"><a href="#1-强制并行处理" class="headerlink" title="1. 强制并行处理"></a>1. 强制并行处理</h4><p><code>/*+ monitor parallel(8)*/</code></p><h3 id="2-plsql查看sql性能"><a href="#2-plsql查看sql性能" class="headerlink" title="2. plsql查看sql性能"></a>2. plsql查看sql性能</h3><p><code>F5</code></p><h3 id="3-在oracle中有时候需要进行MySQL中的find-in-set查询，故封装了如下函数："><a href="#3-在oracle中有时候需要进行MySQL中的find-in-set查询，故封装了如下函数：" class="headerlink" title="3. 在oracle中有时候需要进行MySQL中的find_in_set查询，故封装了如下函数："></a>3. 在oracle中有时候需要进行MySQL中的find_in_set查询，故封装了如下函数：</h3><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">FUNCTION</span> FIND_IN_SET(piv_str1 varchar2, piv_str2 varchar2, p_sep varchar2 := <span class="string">','</span>)</span><br><span class="line"><span class="keyword">RETURN</span> NUMBER <span class="keyword">IS</span></span><br><span class="line">  l_idx    number:=<span class="number">0</span>; <span class="comment">-- 用于计算piv_str2中分隔符的位置</span></span><br><span class="line">  str      varchar2(<span class="number">500</span>);  <span class="comment">-- 根据分隔符截取的子字符串</span></span><br><span class="line">  piv_str  varchar2(<span class="number">500</span>) := piv_str2; <span class="comment">-- 将piv_str2赋值给piv_str</span></span><br><span class="line">  res      number:=<span class="number">0</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- 如果piv_str中没有分割符，直接判断piv_str1和piv_str是否相等，相等 res=1</span></span><br><span class="line"><span class="keyword">IF</span> instr(piv_str, p_sep, <span class="number">1</span>) = <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">   <span class="keyword">IF</span> piv_str = piv_str1 <span class="keyword">THEN</span></span><br><span class="line">      res:= <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="comment">-- 循环按分隔符截取piv_str</span></span><br><span class="line"><span class="keyword">LOOP</span></span><br><span class="line">    l_idx := instr(piv_str,p_sep);</span><br><span class="line"><span class="comment">-- 当piv_str中还有分隔符时</span></span><br><span class="line">      <span class="keyword">IF</span> l_idx &gt; <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">   <span class="comment">-- 截取第一个分隔符前的字段str</span></span><br><span class="line">         str:= substr(piv_str,<span class="number">1</span>,l_idx<span class="number">-1</span>);</span><br><span class="line">   <span class="comment">-- 判断 str 和piv_str1 是否相等，相等 res=1 并结束循环判断</span></span><br><span class="line">         <span class="keyword">IF</span> str = piv_str1 <span class="keyword">THEN</span></span><br><span class="line">           res:= <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">EXIT</span>;</span><br><span class="line">         <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">        piv_str := substr(piv_str,l_idx+length(p_sep));</span><br><span class="line">      <span class="keyword">ELSE</span></span><br><span class="line">   <span class="comment">-- 当截取后的piv_str 中不存在分割符时，判断piv_str和piv_str1是否相等，相等 res=1</span></span><br><span class="line">        <span class="keyword">IF</span> piv_str = piv_str1 <span class="keyword">THEN</span></span><br><span class="line">           res:= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">        <span class="comment">-- 无论最后是否相等，都跳出循环</span></span><br><span class="line">        <span class="keyword">EXIT</span>;</span><br><span class="line">      <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line"><span class="comment">-- 结束循环</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="comment">-- 返回res</span></span><br><span class="line"><span class="keyword">RETURN</span> res;</span><br><span class="line"><span class="keyword">END</span> FIND_IN_SET;</span><br></pre></td></tr></tbody></table></figure><h3 id="4-日期转时间戳函数"><a href="#4-日期转时间戳函数" class="headerlink" title="4. 日期转时间戳函数"></a>4. 日期转时间戳函数</h3><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or replace</span> <span class="keyword">function</span> oracle_to_unix(in_date <span class="keyword">IN</span> <span class="type">DATE</span>) <span class="keyword">return</span> number <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">begin</span> </span><br><span class="line">        <span class="keyword">return</span>( (in_date -TO_DATE(<span class="string">'19700101'</span>,<span class="string">'yyyymmdd'</span>))*<span class="number">86400</span> - TO_NUMBER(SUBSTR(TZ_OFFSET(sessiontimezone),<span class="number">1</span>,<span class="number">3</span>))*<span class="number">3600</span>);</span><br><span class="line">    <span class="keyword">end</span> oracle_to_unix;</span><br></pre></td></tr></tbody></table></figure><h3 id="5-时间戳转日期函数"><a href="#5-时间戳转日期函数" class="headerlink" title="5. 时间戳转日期函数"></a>5. 时间戳转日期函数</h3><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or replace</span> <span class="keyword">function</span> unix_to_oracle(in_number NUMBER) <span class="keyword">return</span> <span class="type">date</span> <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">return</span>(TO_DATE(<span class="string">'19700101'</span>,<span class="string">'yyyymmdd'</span>) + in_number/<span class="number">86400</span> +TO_NUMBER(SUBSTR(TZ_OFFSET(sessiontimezone),<span class="number">1</span>,<span class="number">3</span>))/<span class="number">24</span>);</span><br><span class="line">    <span class="keyword">end</span> unix_to_oracle;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心跳包机制</title>
      <link href="/posts/heartbeat.html"/>
      <url>/posts/heartbeat.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>心跳包机制：主要也就是用于长连接的保活和断线处理。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心跳包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript笔记</title>
      <link href="/posts/javascript-notes.html"/>
      <url>/posts/javascript-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="如果想获取ajax里的function返回值，可用同步ajax。"><a href="#如果想获取ajax里的function返回值，可用同步ajax。" class="headerlink" title="如果想获取ajax里的function返回值，可用同步ajax。"></a>如果想获取ajax里的function返回值，可用同步ajax。</h3><h3 id="JavaScript不定参数"><a href="#JavaScript不定参数" class="headerlink" title="JavaScript不定参数"></a>JavaScript不定参数</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript不定参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++ ){</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"test('one','two','three','four');"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel使用小技巧</title>
      <link href="/posts/excel-tips.html"/>
      <url>/posts/excel-tips.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>excel固定第一行：选择第二行，点击视图里的冻结窗口即可。</p></li><li><p>excel分列：<br> 如将某一列的数据由C4159D5953D8转为C4:15:9D:59:53:D8格式：<br> <code>公式为：=left(A1,2) &amp; ":" &amp; mid(A1,3,2) &amp; ":" &amp; mid(A1,5,2) &amp; ":" &amp; mid(A1,7,2) &amp; ":" &amp; mid(A1,9,2) &amp; ":" &amp; right(A1,2)</code></p></li><li><p>删除重复项：<br> 选中数据区域-&gt;数据-&gt;删除重复项-&gt;确定</p></li><li><p>VLOOKUP函数的使用</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言学习</title>
      <link href="/posts/r-notes.html"/>
      <url>/posts/r-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前断断续续看了一些R语言的视频，一直没什么效果，看来还得做笔记：</p><ol><li>&lt;- 是赋值的意思</li><li>向量是下标以1开始的</li><li>区分大小写</li><li>路径：<code>C://a.txt</code></li><li>round：四舍五入</li></ol>]]></content>
      
      
      <categories>
          
          <category> R语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEO——权重转移</title>
      <link href="/posts/seo-weight-transfer.html"/>
      <url>/posts/seo-weight-transfer.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong> 产品列表存在多页，或者文章内容过多存在多页时，为了SEO考虑，避免权重流失，内容重复，可以通过下面的方法优化：</strong><br></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"主页url"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>Google 等搜索引擎最终都会只收录 canonical 标签指定的这个网址，搜索引擎会将其它页面作为重复内容，这些重复的内容不再参与页面的权重分配(如 Google 的 PR 值)。<p></p><p>如：<br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=1">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=1</a><br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=2">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=2</a><br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=3">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=3</a><br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=4">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=4</a><br>……<br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=45">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=45</a></p><p>就可以在每个页面的head标签内添加代码：</p><link rel="canonical" href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html">]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言基础</title>
      <link href="/posts/go-note.html"/>
      <url>/posts/go-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自学Go语言的过程漫长而坎坷，先记录一些基础知识。</p><h3 id="执行go文件"><a href="#执行go文件" class="headerlink" title="执行go文件"></a>执行go文件</h3><p><code>E:\Go_WorkSpace&gt;go run test.go</code></p><h3 id="把go程序编译成exe文件"><a href="#把go程序编译成exe文件" class="headerlink" title="把go程序编译成exe文件"></a>把go程序编译成exe文件</h3><p><code>E:\Go_WorkSpace&gt;go build test.go</code></p><h3 id="打印内容"><a href="#打印内容" class="headerlink" title="打印内容"></a>打印内容</h3><p><code>fmt.Printf("Hello,World!")</code></p><h3 id="switch语句中，多个case共用一组执行语句"><a href="#switch语句中，多个case共用一组执行语句" class="headerlink" title="switch语句中，多个case共用一组执行语句"></a>switch语句中，多个case共用一组执行语句</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">switch A{</span><br><span class="line">case a,b,c:</span><br><span class="line">...</span><br><span class="line">case d:</span><br><span class="line">...</span><br><span class="line">default :</span><br><span class="line">...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="GoLand使用"><a href="#GoLand使用" class="headerlink" title="GoLand使用"></a>GoLand使用</h3><p>新部署项目后，需通过<code>go mod download</code> 下载第三方依赖包，如果报错，需设置Go Modules中的Proxy为：<code>https://goproxy.cn</code></p><h3 id="GoLand使用下载第三方依赖包"><a href="#GoLand使用下载第三方依赖包" class="headerlink" title="GoLand使用下载第三方依赖包"></a>GoLand使用下载第三方依赖包</h3><p>1、 IDE-》setting-》Go-》Go Modules中，设置代理：<a href="https://goproxy.cn">https://goproxy.cn</a><br><img src="/images/goland_1.png" alt=""><br>2、项目中，创建go.mod文件，包含需要引入的依赖包，<br>如：导入 gin：require github.com/gin-gonic/gin latest<br>在Terminal上，运行go mod download即可，系统会自动将版本号回填到go.mod中<br><img src="/images/goland_2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitBook使用笔记</title>
      <link href="/posts/gitbook-note.html"/>
      <url>/posts/gitbook-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">使用GitBook来写书还是比较方便的，可以部署在github上的，总的来说，不太复杂。现记录一些常用的操作，方便大家参考。</div><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><ol><li>编译文件生成网页        <code>gitbook build</code></li><li>启动服务        <code>gitbook serve</code></li><li>安装可以参考这个网页 <a href="https://www.jianshu.com/p/421cc442f06c">gitbook安装</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用笔记</title>
      <link href="/posts/hexo-notes.html"/>
      <url>/posts/hexo-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：这个博客网站是使用hexo搭建，部署在github上的，总的来说，不太复杂。现记录一些常用的操作，方便大家参考。</div><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol><li>清除当前缓存        <code>$ hexo clean</code></li><li>重新生成并部署到github上        <code>$ hexo g -d</code></li><li>启动服务        <code>$ hexo s</code></li><li>新建页面        <code>$ hexo new page categories</code></li><li>快速构建        <code>$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code></li></ol><h3 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h3><h4 id="1-如何在首页设置「阅读全文」"><a href="#1-如何在首页设置「阅读全文」" class="headerlink" title="1. 如何在首页设置「阅读全文」?"></a>1. 如何在首页设置「阅读全文」?</h4><p>   在首页显示一篇文章的部分内容(或者摘要)，并提供一个链接(「阅读全文」)跳转到文章详情页。 NexT 提供以下三种方式：</p><ol><li>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式(<font color="#FF0000">推荐</font> )</li><li>在文章的 <a href="https://hexo.io/docs/front-matter.html">front-matter</a> 中添加 description，并提供文章摘录</li><li>自动形成摘要，在 主题配置文件_config.yml 中添加：<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  length: 150</span><br></pre></td></tr></tbody></table></figure>默认截取的长度为 150 字符，可以根据需要自行设定。</li></ol><p>建议使用 <code>&lt;!-- more --&gt;</code>方式，既可以精确控制需要显示的摘录内容， 还可以让 Hexo 中的插件更好的识别。    </p><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><h4 id="1-文章生成永久短链接"><a href="#1-文章生成永久短链接" class="headerlink" title="1. 文章生成永久短链接"></a>1. 文章生成永久短链接</h4><p><code>npm install hexo-abbrlink --save</code><br>在站点配置项文件_config.yml下添加：<br></p><figure class="highlight oxygene"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">url: https:<span class="comment">//crazy-boy.com</span></span><br><span class="line">root: /</span><br><span class="line">permalink: archives/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(<span class="keyword">default</span>) <span class="keyword">and</span> crc32</span><br><span class="line">  rep: hex    # 进制：dec(<span class="keyword">default</span>) <span class="keyword">and</span> hex</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">'index.html'</span> <span class="keyword">from</span> permalinks</span><br><span class="line">  trailing_html: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">'.html'</span> <span class="keyword">from</span> permalinks</span><br></pre></td></tr></tbody></table></figure><br>当然文章的短链部分可以在文章的首部进行设置，如：<code>abbrlink: 'hexo-notes'</code>，如果不设置就会自动生成随机短链。<p></p><h4 id="2-开启文章字数统计"><a href="#2-开启文章字数统计" class="headerlink" title="2. 开启文章字数统计"></a>2. 开启文章字数统计</h4><p><code>npm i --save hexo-wordcount</code></p><h4 id="3-文章设置密码"><a href="#3-文章设置密码" class="headerlink" title="3. 文章设置密码"></a>3. 文章设置密码</h4><p><code>npm install --save hexo-blog-encrypt</code><br>将”password”字段添加到文章的信息头：<code>password: abc123</code><br>文章可以按标签进行加密，优先级为：文章信息头&gt;按标签加密<br>文章信息头的设置示例<br><img src="/images/hexo_notes_2.png" alt=""></p><p>_config.yml示例<br></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">有东西被加密了,</span> <span class="string">请输入密码查看.</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> {<span class="attr">name:</span> <span class="string">tagNameA</span>, <span class="attr">password:</span> <span class="string">密码A</span>}</span><br><span class="line">  <span class="bullet">-</span> {<span class="attr">name:</span> <span class="string">tagNameB</span>, <span class="attr">password:</span> <span class="string">密码B</span>}</span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">抱歉,</span> <span class="string">密码不太对哟.</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br></pre></td></tr></tbody></table></figure><br>如果tagNameA中的某篇博文不想被加密，只需把博文头部的password设置为””即可。<p></p><h3 id="多台电脑同步更新hexo博客"><a href="#多台电脑同步更新hexo博客" class="headerlink" title="多台电脑同步更新hexo博客"></a>多台电脑同步更新hexo博客</h3><ul><li>在github上切个hexo分支，把源代码push上去。</li><li>在需要同步更新的电脑上进行如下操作：<br>  安装git<br>  下载安装nodejs<br>  node -v<br>  npm -v<br>  git clone xx.git<br>  删除主题下.git目录<br>  进入目录，执行下面命令：  <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">$ npm install hexo<span class="operator">-</span>generator<span class="operator">-</span><span class="keyword">search</span> <span class="comment">--save</span></span><br><span class="line">$ npm i hexo<span class="operator">-</span>permalink<span class="operator">-</span>pinyin <span class="comment">--save</span></span><br><span class="line">$ npm install hexo<span class="operator">-</span><span class="keyword">filter</span><span class="operator">-</span>github<span class="operator">-</span>emojis <span class="comment">--save</span></span><br><span class="line">$ npm install hexo<span class="operator">-</span>generator<span class="operator">-</span>feed <span class="comment">--save</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1-执行hexo命令，提示hexo-command-not-found"><a href="#1-执行hexo命令，提示hexo-command-not-found" class="headerlink" title="1. 执行hexo命令，提示hexo: command not found"></a>1. 执行hexo命令，提示<code>hexo: command not found</code></h4><ul><li>首先检查nodejs和npm是否正常，依次输入<code>node -v</code>和<code>npm -v</code>检查版本信息</li><li>将与_config.yml同级的node_modules下的.bin路径(F:\GitHub\crazy-boy.github.io\node_modules.bin)添加到系统环境变量的Path里</li><li>如果还不行，就重装hexo：<code>npm install hexo-cli -g</code></li></ul><h4 id="2-hexo-g-d报错fatal-in-unpopulated-submodule-‘-deploy-git’"><a href="#2-hexo-g-d报错fatal-in-unpopulated-submodule-‘-deploy-git’" class="headerlink" title="2. hexo g -d报错fatal: in unpopulated submodule ‘.deploy_git’"></a>2. hexo g -d报错fatal: in unpopulated submodule ‘.deploy_git’</h4><ul><li>删除.deploy_git文件夹</li><li>再执行<code>hexo g -d</code></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a><br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a><br><a href="https://blog.csdn.net/qq_30105599/article/details/118302086">https://blog.csdn.net/qq_30105599/article/details/118302086</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高德地图API使用</title>
      <link href="/posts/amap-api.html"/>
      <url>/posts/amap-api.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>高德地图的覆盖物label默认是蓝框白底的，className为amap-marker-label，可以通过css来修改样式。如：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .amap-marker-label{</span><br><span class="line">        height:40px;</span><br><span class="line">        width:120px;</span><br><span class="line">        background-color: red;</span><br><span class="line">        border: solid 1px black;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>高德地图，根据地址搜索经纬度，再次搜索时清除遮盖物：</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var markers = [];</span><br><span class="line">map.remove(markers);</span><br><span class="line">markers.push(marker);</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高德地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构学习</title>
      <link href="/posts/architecture-notes.html"/>
      <url>/posts/architecture-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>架构设计的主要目的是为了解决软件系统复杂度带来的问题。</li><li>架构的复杂度来源：高性能、高可用、可扩展性、其它(低成本、安全、规模等)。</li><li>架构设计的三原则：合适优于业界领先、简单优于复杂、演化优于一步到位。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用</title>
      <link href="/posts/docker-notes.html"/>
      <url>/posts/docker-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>windows7 安装docker，需要利用 docker toolbox 来安装。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>富文本编辑器</title>
      <link href="/posts/rich-text-editor.html"/>
      <url>/posts/rich-text-editor.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>解决umeditor富文本内容居中可能失效的问题：更改umeditor.config.js的xss过滤为false    <pre><code> 即：`,xssFilterRules: false,inputXssFilter: false,outputXssFilter: false`</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 富文本编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记</title>
      <link href="/posts/mysql-notes.html"/>
      <url>/posts/mysql-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-mysql根据汉字首字母排序的方法"><a href="#1-mysql根据汉字首字母排序的方法" class="headerlink" title="1. mysql根据汉字首字母排序的方法"></a>1. mysql根据汉字首字母排序的方法</h3><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- utf8_general_ci编码</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tname <span class="keyword">order</span> <span class="keyword">by</span> convert(<span class="type">name</span> <span class="keyword">using</span> gbk);</span><br></pre></td></tr></tbody></table></figure><h3 id="2-删除表数据的时候，如果表使用了别名"><a href="#2-删除表数据的时候，如果表使用了别名" class="headerlink" title="2. 删除表数据的时候，如果表使用了别名"></a>2. 删除表数据的时候，如果表使用了别名</h3><p>应该这样写：<code>DELETE a FROM table a;</code></p><h3 id="3-不使用缓存执行某个查询sql"><a href="#3-不使用缓存执行某个查询sql" class="headerlink" title="3. 不使用缓存执行某个查询sql"></a>3. 不使用缓存执行某个查询sql</h3><p><code>SELECT SQL_NO_CACHE xx, xx from tb;</code></p><h3 id="4-MySql中Blob与Text的区别"><a href="#4-MySql中Blob与Text的区别" class="headerlink" title="4. MySql中Blob与Text的区别"></a>4. MySql中Blob与Text的区别</h3><p>BLOB列被视为二进制字符串，TEXT列被视为非二进制字符串。</p><h3 id="5-MyISAM和InnoDB的区别"><a href="#5-MyISAM和InnoDB的区别" class="headerlink" title="5. MyISAM和InnoDB的区别"></a>5. MyISAM和InnoDB的区别</h3><p>Innodb 支持事务处理与外键和行级锁；<br>MyISAM类型的表强调的是性能，其执行速度比InnoDB类型更快。</p><h3 id="6-数据库恢复"><a href="#6-数据库恢复" class="headerlink" title="6. 数据库恢复"></a>6. 数据库恢复</h3><p>是指通过技术手段将保存在数据库中丢失的电子数据进行抢救和恢复的技术。</p><h3 id="7-mysql删除自定义函数："><a href="#7-mysql删除自定义函数：" class="headerlink" title="7. mysql删除自定义函数："></a>7. mysql删除自定义函数：</h3><p><code>DROP FUNCTION IF EXISTS `函数名`;</code></p><h3 id="8-插入数据："><a href="#8-插入数据：" class="headerlink" title="8. 插入数据："></a>8. 插入数据：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb (field1,field2,field3……) <span class="keyword">value</span> (val1,val2,val3……);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb (field1,field2,field3……) <span class="keyword">values</span> (val1,val2,val3……);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb <span class="keyword">set</span> field1<span class="operator">=</span>val1,field2<span class="operator">=</span>val2,field3<span class="operator">=</span>val3;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb (field1,field2,field3……) <span class="keyword">values</span> (val11,val12,val13……),(val21,val22,val23……),(val31,val32,val33……);</span><br><span class="line"><span class="keyword">insert</span> ignore <span class="keyword">into</span> tb (field1,field2,field3……) <span class="keyword">values</span> (val1,val2,val3……);<span class="operator">/</span><span class="operator">/</span>使用ignore关键字忽略错误</span><br></pre></td></tr></tbody></table></figure><h3 id="9-查询数据库中每个表的记录数："><a href="#9-查询数据库中每个表的记录数：" class="headerlink" title="9. 查询数据库中每个表的记录数："></a>9. 查询数据库中每个表的记录数：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use information_schema;</span><br><span class="line"><span class="keyword">select</span> table_name,table_rows <span class="keyword">from</span> tables <span class="keyword">where</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">'dataBase'</span> <span class="keyword">order</span> <span class="keyword">by</span> table_rows <span class="keyword">desc</span>;  </span><br></pre></td></tr></tbody></table></figure><h3 id="10-mysql查询主键字段名："><a href="#10-mysql查询主键字段名：" class="headerlink" title="10. mysql查询主键字段名："></a>10. mysql查询主键字段名：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> INFORMATION_SCHEMA.`KEY_COLUMN_USAGE` <span class="keyword">WHERE</span> table_name<span class="operator">=</span><span class="string">'表名'</span> <span class="keyword">AND</span> constraint_name<span class="operator">=</span><span class="string">'PRIMARY'</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="11-mysql查询所有字段名："><a href="#11-mysql查询所有字段名：" class="headerlink" title="11. mysql查询所有字段名："></a>11. mysql查询所有字段名：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> information_schema.columns <span class="keyword">WHERE</span> table_name<span class="operator">=</span><span class="string">'表名'</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="12、null的问题："><a href="#12、null的问题：" class="headerlink" title="12、null的问题："></a>12、null的问题：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_classroom <span class="keyword">set</span> building_name<span class="operator">=</span><span class="keyword">null</span> <span class="keyword">where</span> build_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="13、获取指定字段的默认值："><a href="#13、获取指定字段的默认值：" class="headerlink" title="13、获取指定字段的默认值："></a>13、获取指定字段的默认值：</h3><p>DEFAULT(col_name)<br></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DEFAULT</span>(sort) <span class="keyword">from</span> t_node_school limit <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="14、mysql重命名表名："><a href="#14、mysql重命名表名：" class="headerlink" title="14、mysql重命名表名："></a>14、mysql重命名表名：</h3><p><code>alter table tb1 rename to tb2;</code><br>或者<br><code>rename tb1 to tb2;</code></p><h3 id="15、null字段排序问题："><a href="#15、null字段排序问题：" class="headerlink" title="15、null字段排序问题："></a>15、null字段排序问题：</h3><p>设排序字段为sort，使用order by sort desc实现降序时，sort为null的数据会排在最后面；<br>但是使用order by sort升序时，sort为null的数据会排在最前面，如果想将sort为null的数据排在后面，就需要加is null。<br>如：<code>select * from t_grade order by sort is null, sort, create_time desc;</code></p><h3 id="16、主键设置规则"><a href="#16、主键设置规则" class="headerlink" title="16、主键设置规则"></a>16、主键设置规则</h3><p> 主键的值不可更新，未来可能会变更的字段不能设置为主键；<br> 主键的值不可为空，且不能重复；</p><h3 id="17、查看某个表的所有列："><a href="#17、查看某个表的所有列：" class="headerlink" title="17、查看某个表的所有列："></a>17、查看某个表的所有列：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> tableName;  或者  <span class="keyword">describe</span> tableName; <span class="operator">/</span><span class="operator">/</span>可以用来生成数据字典</span><br></pre></td></tr></tbody></table></figure><h3 id="18、下划线”-”通配符-匹配一个字符"><a href="#18、下划线”-”通配符-匹配一个字符" class="headerlink" title="18、下划线”_”通配符 匹配一个字符"></a>18、下划线”_”通配符 匹配一个字符</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> field1,field2 <span class="keyword">from</span> tableName <span class="keyword">where</span> field3 <span class="keyword">like</span> "_xx";</span><br></pre></td></tr></tbody></table></figure><h3 id="19、日期转星期"><a href="#19、日期转星期" class="headerlink" title="19、日期转星期"></a>19、日期转星期</h3> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> weekday("2021-11-10")<span class="operator">+</span><span class="number">1</span> week;      </span><br><span class="line"><span class="comment">-- 2021年11月10日是星期三</span></span><br></pre></td></tr></tbody></table></figure><h3 id="20、单条SQL语句完成多种数据统计"><a href="#20、单条SQL语句完成多种数据统计" class="headerlink" title="20、单条SQL语句完成多种数据统计"></a>20、单条SQL语句完成多种数据统计</h3> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 现需分别统计wl_student_score_logs表中exam_id为5的change_score增加量和减少量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="built_in">sum</span>( if( change_score <span class="operator">&gt;</span> <span class="number">0</span>, change_score, <span class="number">0</span>)) <span class="keyword">as</span> increase_score,</span><br><span class="line"><span class="built_in">sum</span>( if( change_score  <span class="operator">&lt;</span> <span class="number">0</span>, change_score, <span class="number">0</span>)) <span class="keyword">as</span> reduce_score</span><br><span class="line"><span class="keyword">from</span> wl_student_score_logs <span class="keyword">where</span> exam_id<span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="21、truncate、drop-和-delete-的区别"><a href="#21、truncate、drop-和-delete-的区别" class="headerlink" title="21、truncate、drop 和 delete 的区别"></a>21、truncate、drop 和 delete 的区别</h3><pre><code>1. 执行速度：drop &gt; truncate &gt; detele；2. delete 和 truncate 只删除表数据，而 drop 会删除表数据和表结构以及表的索引、约束和触发器；3. delete 可以加 where 条件实现部分数据删除，而 truncate 和 drop 不能加 where 条件是整体删除；4. truncate 和 drop 是立即执行，且不能恢复；而 delete 会走事务，可以撤回和恢复；5. truncate 会重置自增列为 1，而 delete 不会重置自增列；6. truncate 和 drop 是 DDL 语句，而 delete 是 DML 语句。</code></pre><h3 id="22、修改自增列的值"><a href="#22、修改自增列的值" class="headerlink" title="22、修改自增列的值"></a>22、修改自增列的值</h3><pre><code>`alter table tname auto_increment=n;`一个表中只能有一个自增列,如果设置多个自增列，那么 SQL 执行就会报错。除此之外还要注意自增列应该为整数类型，且 auto_increment 需要配合 key 一起使用，这个 key 可以是 primary key 或 foreign key。</code></pre><h3 id="23、生成批量清空指定数据库的语句"><a href="#23、生成批量清空指定数据库的语句" class="headerlink" title="23、生成批量清空指定数据库的语句"></a>23、生成批量清空指定数据库的语句</h3><pre><code>`select CONCAT('TRUNCATE TABLE ',table_schema,'.',TABLE_NAME, ';') 清空语句 from INFORMATION_SCHEMA.TABLES where table_schema ='库名';`    </code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记</title>
      <link href="/posts/1822a0ce.html"/>
      <url>/posts/1822a0ce.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>如果希望css样式不被覆盖，可以在后面加上!important，如：<code>.cntck{ margin-right: 5px!important;}</code></p></li><li><p>如果css希望两个标签对齐，可以用position来处理，如：<code>.cntck{position: relative; bottom: -2px;}</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery笔记</title>
      <link href="/posts/jquery-note.html"/>
      <url>/posts/jquery-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="jquery获取json的长度"><a href="#jquery获取json的长度" class="headerlink" title="jquery获取json的长度"></a>jquery获取json的长度</h3><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一维：</span></span><br><span class="line"><span class="keyword">var</span> JsonTemp = {<span class="string">'id'</span>:<span class="number">5</span>,<span class="string">'name'</span>:<span class="string">'lilei'</span>};  </span><br><span class="line"><span class="built_in">length</span> = JsonTemp.<span class="built_in">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维：</span></span><br><span class="line"><span class="keyword">var</span> JsonTemp = [{<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="number">18</span>},{<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="number">19</span>}];  </span><br><span class="line"><span class="built_in">length</span> = Object.keys(JsonTemp).<span class="built_in">length</span>;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/posts/linux-common-commands.html"/>
      <url>/posts/linux-common-commands.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本人编程多年，一直对Linux操作不熟练，主要原因是命令不熟悉，为方便记忆，现罗列一些常用的命令：</p><h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><ul><li>创建文件夹：<code>mkdir dir</code></li><li>删除文件夹：<code>rm -rf dir</code>   -r向下递归，-f强制删除</li><li>创建文件：<code>touch a.txt</code></li><li>删除文件：<code>rm -f /var/log/a.txt</code></li><li>追加内容到文件：<code>echo sssss &gt;&gt; a.txt</code></li><li>插入内容：<code>vi text.txt =》按i =》插入内容 =》按Esc =》:wq</code></li><li>查看文件的行数：<code>wc -l xx.txt</code></li><li>查看文件里有多少个word：<code>wc -l xx.txt</code></li><li>顺序查看指定文件的内容：<code>cat xx.php</code></li><li>倒序查看指定文件的内容：<code>tac xx.log</code></li></ul><h3 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h3><ul><li><p>修改密码</p><ol><li>选择要修改密码的用户名，以root用户为例<br><code>passwd root</code></li><li>输入2次一样的新密码，当提示更新成功即可。<br><img src="/images/linux_command_1.png" alt=""></li></ol></li><li><p>查看系统环境</p> <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_7_centos ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">[root@VM_0_7_centos ~]# uname -a</span><br><span class="line">Linux VM_0_7_centos 3.10.0-957.27.2.el7.x86_64 #1 SMP Mon Jul 29 17:46:05 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></tbody></table></figure><p> 从上述结果可以看出：系统为CentOS 7.6 内核为3.10.0-957.27.2.el7.x86_64</p></li></ul><h3 id="日志操作"><a href="#日志操作" class="headerlink" title="日志操作"></a>日志操作</h3><ul><li>实时查看日志：<code>tail -f xx.log</code></li><li>实时查看日志最后100行的内容： <code>tail -f -n 100 xx.log</code></li><li>查询最后100行的内容：<code>tail -n 100 xx.log</code></li><li>查询100行之后的所有内容：<code>tail -n +100 xx.log</code></li><li>查看文件的前10行：<code>head -n 10 xx.log</code></li><li>查询除最后100行外的内容：<code>head -n -100 xx.log</code></li><li>根据关键字查询日志：<code>cat -n xx.log |grep "charge"</code>   可以得到关键字日志的行号和内容</li><li>根据关键字查询日志并获取最后5行：<code>grep 'charge' xx.log |tail -n 5</code></li><li>根据关键字查询日志内容：<code>grep 'charge' xx.log</code>   不返回行号，如果为空，则说明日志中无此关键字<ul><li>如果日志太多，可分页查看：<code>cat -n xx.log |grep 'charge' | more</code>  按空格键进行翻页</li><li>如果日志太大，也可以只把关键字部分保存到文件中，提取下来，命令如下：<br>  <code>cat -n xx.log |grep 'charge' &gt; aa.txt</code><br>  然后下载下来：<code>sz aa.txt</code><br>  最后删除文件：<code>rm -f aa.txt</code></li></ul></li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li>清空当前界面信息：<code>clear</code> 或者 Ctrl+L</li><li>显示当前时间：<code>date</code></li><li>显示当前路径：<code>pwd</code></li><li>查看历史命令：<code>history</code></li><li>Tab键：自动补齐，按两下是查询相同前缀的目录或文件</li><li>more的辅助操作：按空格键进行翻页</li><li>less的辅助操作：按空格键进行翻页   [up]向上滚动一行   [down]或者回车先后滚动一行   Q：退出</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书单心愿墙</title>
      <link href="/posts/wished-book-list.html"/>
      <url>/posts/wished-book-list.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="罗列一些自己后续要读的书籍或者文章："><a href="#罗列一些自己后续要读的书籍或者文章：" class="headerlink" title="罗列一些自己后续要读的书籍或者文章："></a>罗列一些自己后续要读的书籍或者文章：</h3><ul><li>《黑客与画家》</li><li>《UNIX编程艺术》</li><li>《异类》</li><li>《羊皮卷》——《选择的力量》</li><li>《优秀到不能被忽视》</li><li>《无言的宇宙》</li><li>《数学女孩》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用笔记</title>
      <link href="/posts/git-notes.html"/>
      <url>/posts/git-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git pull                <span class="comment">#拉取代码到本地</span></span><br><span class="line">git <span class="keyword">add </span>.               <span class="comment">#将文件添加到暂存区</span></span><br><span class="line">git commit -m <span class="string">"xx"</span>      <span class="comment">#提交代码，并填写描述</span></span><br><span class="line">git push                <span class="comment">#推送代码到远端</span></span><br><span class="line">git status              <span class="comment">#显示所有需提交的文件</span></span><br><span class="line">git <span class="keyword">branch </span>             <span class="comment">#显示当前代码库中所有的本地分支</span></span><br><span class="line">git <span class="keyword">branch </span>xx           <span class="comment">#创建一个新分支xx</span></span><br><span class="line">git <span class="keyword">branch </span>-d xx        <span class="comment">#删除指定分支xx</span></span><br><span class="line">git checkout xx         <span class="comment">#切换到分支xx</span></span><br><span class="line">git checkout -<span class="keyword">b </span>xx      <span class="comment">#创建一个分支xx，并切换到新分支</span></span><br><span class="line">git merge xx            <span class="comment">#将指定分支xx的历史记录合并到当前分支</span></span><br><span class="line">git stash save          <span class="comment">#临时保存所有修改的文件</span></span><br><span class="line">git stash pop           <span class="comment">#恢复最近一次存储的文件</span></span><br></pre></td></tr></tbody></table></figure><h3 id="文件忽略"><a href="#文件忽略" class="headerlink" title="文件忽略"></a>文件忽略</h3><p>软件项目使用git提交远程仓库时，如果需要忽略某些文件(如缓存文件、框架核心文件)的变更，可以在项目的根目录下创建.gitignore文件，并罗列需忽略的文件或者文件夹。</p><p>如下为PHP Yii2下的.gitignore文件内容：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.idea/</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">/vendor</span><br><span class="line">assets/</span><br><span class="line">/runtime</span><br><span class="line">/Runtime</span><br><span class="line">/upload</span><br></pre></td></tr></tbody></table></figure><br>但有时候忽略文件不起作用，其原因是：git设置本地忽略时，必须保证远程仓库分支上没有这个要忽略的文件；否则本地的ignore将不起作用。<br>解决方式：删除要忽略的文件并提交远程仓库，ignore该文件。<p></p><h3 id="git设置"><a href="#git设置" class="headerlink" title="git设置"></a>git设置</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> .git/config</span><br><span class="line">git remote set-url origin ssh地址</span><br></pre></td></tr></tbody></table></figure><h3 id="当尝试将-feature-v20-分支合并到-develop-分支时，出现大量冲突，希望将-develop-分支的代码直接替换为-feature-v20-分支的代码，可以考虑以下几种方法："><a href="#当尝试将-feature-v20-分支合并到-develop-分支时，出现大量冲突，希望将-develop-分支的代码直接替换为-feature-v20-分支的代码，可以考虑以下几种方法：" class="headerlink" title="当尝试将 feature/v20 分支合并到 develop 分支时，出现大量冲突，希望将 develop 分支的代码直接替换为 feature/v20 分支的代码，可以考虑以下几种方法："></a>当尝试将 feature/v20 分支合并到 develop 分支时，出现大量冲突，希望将 develop 分支的代码直接替换为 feature/v20 分支的代码，可以考虑以下几种方法：</h3><h4 id="1-强制重置-develop-分支"><a href="#1-强制重置-develop-分支" class="headerlink" title="1. 强制重置 develop 分支"></a>1. <strong>强制重置 develop 分支</strong></h4><ul><li><strong>警告：</strong> 这会丢失 develop 分支上的所有未提交的更改。请谨慎操作，并确保你已经备份了重要的数据。</li><li><strong>步骤：</strong><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git reset --hard feature/v20</span><br></pre></td></tr></tbody></table></figure><ul><li><code>git checkout develop</code>: 切换到 develop 分支。</li><li><code>git reset --hard feature/v20</code>: 将 develop 分支的 HEAD 指针强制重置到 feature/v20 分支的最新提交，丢弃 develop 分支上的所有本地更改。</li></ul></li></ul><h4 id="2-重新创建-develop-分支"><a href="#2-重新创建-develop-分支" class="headerlink" title="2. 重新创建 develop 分支"></a>2. <strong>重新创建 develop 分支</strong></h4><ul><li><strong>步骤：</strong><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -D develop  <span class="comment"># 删除现有的 develop 分支</span></span><br><span class="line">git checkout feature/v20  <span class="comment"># 切换到 feature/v20 分支</span></span><br><span class="line">git branch develop/v20  <span class="comment"># 基于 feature/v20 分支创建一个新的 develop 分支</span></span><br></pre></td></tr></tbody></table></figure><ul><li>首先删除旧的 develop 分支，然后基于 feature/v20 分支创建一个新的 develop 分支，这样 develop 分支的代码就和 feature/v20 分支完全一致了。</li></ul></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><strong>强制重置或重新创建分支是比较极端的操作</strong>，会丢失数据。在执行之前，请务必确认你已经备份了重要的代码。</li><li><strong>如果 develop 分支已经被推送到了远程仓库</strong>，那么强制重置会造成历史记录的混乱。建议在本地进行操作，然后再将新的 develop 分支推送到远程。</li><li><strong>如果 develop 分支上有其他开发者正在协作</strong>，强制重置可能会导致他们的工作丢失。在执行操作之前，请与团队成员进行沟通。</li></ul><h4 id="其他建议"><a href="#其他建议" class="headerlink" title="其他建议"></a>其他建议</h4><ul><li><strong>仔细分析冲突：</strong> 在强制重置之前，可以仔细查看冲突的文件，了解冲突的原因。</li><li><strong>利用 <code>git diff</code> 命令</strong> 比较两个分支之间的差异，帮助你更好地理解代码的变化。</li><li><strong>考虑使用 <code>git mergetool</code></strong> 来可视化地解决冲突。</li><li><strong>如果可能，尝试重新创建 feature 分支</strong>，并确保在开发过程中及时合并最新的 develop 分支，以减少冲突发生的频率。</li></ul><h3 id="Git-pull-报错-“Please-commit-your-changes-or-stash-them-before-you-can-merge”-的解决方法"><a href="#Git-pull-报错-“Please-commit-your-changes-or-stash-them-before-you-can-merge”-的解决方法" class="headerlink" title="Git pull 报错 “Please, commit your changes or stash them before you can merge” 的解决方法"></a>Git pull 报错 “Please, commit your changes or stash them before you can merge” 的解决方法</h3><h4 id="出现这个错误的原因："><a href="#出现这个错误的原因：" class="headerlink" title="出现这个错误的原因："></a>出现这个错误的原因：</h4><p>当你执行 <code>git pull</code> 命令时，Git 会尝试将远程仓库的最新更改合并到你的本地分支。但是，如果你在本地分支上有一些未提交的修改，Git 就会拒绝合并，因为这可能会导致冲突。所以，Git 会提示你：请先提交你的修改或者将它们暂存起来，然后再进行合并。</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><h5 id="1-提交你的修改"><a href="#1-提交你的修改" class="headerlink" title="1. 提交你的修改"></a>1. <strong>提交你的修改</strong></h5><ul><li><strong>查看修改:</strong> 使用 <code>git status</code> 命令查看你有哪些未提交的修改。</li><li><strong>暂存修改:</strong> 使用 <code>git add &lt;文件名&gt;</code> 或 <code>git add .</code> 将修改暂存。</li><li><strong>提交修改:</strong> 使用 <code>git commit -m "你的提交信息"</code> 将暂存的修改提交。</li><li><strong>拉取远程分支:</strong> 提交完后，再执行 <code>git pull</code>。</li></ul><h5 id="2-暂存你的修改"><a href="#2-暂存你的修改" class="headerlink" title="2. 暂存你的修改"></a>2. <strong>暂存你的修改</strong></h5><ul><li><strong>暂存修改:</strong> 使用 <code>git stash</code> 命令将当前工作区的所有修改暂存起来。</li><li><strong>拉取远程分支:</strong> 执行 <code>git pull</code>。</li><li><strong>恢复暂存的修改:</strong> 如果想恢复暂存的修改，可以使用 <code>git stash pop</code>。</li></ul><h5 id="详细解释："><a href="#详细解释：" class="headerlink" title="详细解释："></a>详细解释：</h5><ul><li><strong>git status:</strong> 查看你当前的工作区状态，哪些文件被修改了，哪些文件被暂存了。</li><li><strong>git add:</strong> 将你修改的文件添加到暂存区。</li><li><strong>git commit:</strong> 将暂存区的文件提交到本地仓库。</li><li><strong>git pull:</strong> 从远程仓库拉取最新的代码，并合并到本地分支。</li><li><strong>git stash:</strong> 将当前工作区的所有修改暂存起来，但不提交。</li><li><strong>git stash pop:</strong> 应用最新的 stash，并将它从 stash 栈中删除。</li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>当遇到这个错误时，<strong>最安全的做法是先提交你的本地修改</strong>，然后再执行 <code>git pull</code>。如果你不想立即提交，也可以使用 <code>git stash</code> 将修改暂存起来。</p><p><strong>选择哪种方法取决于你的具体情况：</strong></p><ul><li><strong>如果你想保留这些修改:</strong> 提交或暂存。</li><li><strong>如果你不想保留这些修改:</strong> 可以直接丢弃这些修改，然后执行 <code>git pull</code>。</li></ul><p><strong>注意:</strong></p><ul><li><strong>强制覆盖本地修改:</strong> 如果确定要丢弃本地修改，可以使用 <code>git fetch</code> 和 <code>git reset --hard origin/master</code> (假设远程分支是 master)，但这会覆盖你所有的本地修改，请谨慎操作。</li><li><strong>解决冲突:</strong> 如果在 <code>git pull</code> 的过程中出现冲突，你需要手动解决冲突，然后使用 <code>git add</code> 和 <code>git commit</code> 来提交解决后的结果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP实现AES加解密</title>
      <link href="/posts/php-aes-encrypt.html"/>
      <url>/posts/php-aes-encrypt.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">系统中的账号信息在进行存储的时候，需要做相应的加密处理；比如用户密码一般是以密文形式存储，而且是不可逆的，常用的就是md5加密；而对于某些账户信息(如：手机号码、银行卡号等)就需要进行可逆加密(如：AES)保存，这样既可以保证数据的安全性，又不影响正常的业务处理。</div><p>下面介绍一下以PHP实现AES加密解密：</p><h3 id="1-AES加密解密类"><a href="#1-AES加密解密类" class="headerlink" title="1. AES加密解密类"></a>1. AES加密解密类</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">libs</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 利用mcrypt做AES加密解密</span></span><br><span class="line"><span class="comment">* 支持密钥：64bit（字节长度8）</span></span><br><span class="line"><span class="comment">* 支持算法：DES</span></span><br><span class="line"><span class="comment">* 支持模式：ECB</span></span><br><span class="line"><span class="comment">* 填充方式：PKCS5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aes</span></span>{</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">CIPHER</span> = MCRYPT_DES;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MODE</span> = MCRYPT_MODE_ECB;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $str需加密的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key密钥(8位)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string   密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$str</span>,<span class="variable">$key</span></span>)</span>{</span><br><span class="line">        <span class="variable">$size</span> = <span class="title function_ invoke__">mcrypt_get_block_size</span> ( MCRYPT_DES, <span class="string">'ecb'</span> );</span><br><span class="line">        <span class="variable">$str</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">pkcs5_pad</span>(<span class="variable">$str</span>, <span class="variable">$size</span>);</span><br><span class="line">        <span class="variable">$iv</span> = <span class="title function_ invoke__">mcrypt_create_iv</span>(<span class="title function_ invoke__">mcrypt_get_iv_size</span>(<span class="built_in">self</span>::<span class="variable constant_">CIPHER</span>,<span class="built_in">self</span>::<span class="variable constant_">MODE</span>),MCRYPT_RAND);</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mcrypt_encrypt</span>(<span class="built_in">self</span>::<span class="variable constant_">CIPHER</span>, <span class="variable">$key</span>, <span class="variable">$str</span>, <span class="built_in">self</span>::<span class="variable constant_">MODE</span>, <span class="variable">$iv</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$result</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $str   密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key   密钥(8位)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string   明文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$str</span>,<span class="variable">$key</span></span>)</span>{</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$str</span>);</span><br><span class="line">        <span class="variable">$iv</span> = <span class="title function_ invoke__">mcrypt_create_iv</span>(<span class="title function_ invoke__">mcrypt_get_iv_size</span>(<span class="built_in">self</span>::<span class="variable constant_">CIPHER</span>,<span class="built_in">self</span>::<span class="variable constant_">MODE</span>),MCRYPT_RAND);</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">mcrypt_decrypt</span>(<span class="built_in">self</span>::<span class="variable constant_">CIPHER</span>, <span class="variable">$key</span>, <span class="variable">$str</span>, <span class="built_in">self</span>::<span class="variable constant_">MODE</span>, <span class="variable">$iv</span>));</span><br><span class="line">        <span class="keyword">return</span>  <span class="built_in">self</span>::<span class="title function_ invoke__">pkcs5_unpad</span>(<span class="variable">$str</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PKCS5填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $blocksize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">pkcs5_pad</span>(<span class="params"><span class="variable">$text</span>, <span class="variable">$blocksize</span></span>) </span>{</span><br><span class="line">        <span class="variable">$pad</span> = <span class="variable">$blocksize</span> - (<span class="title function_ invoke__">strlen</span>(<span class="variable">$text</span>) % <span class="variable">$blocksize</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$text</span> . <span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$pad</span>), <span class="variable">$pad</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool|string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">pkcs5_unpad</span>(<span class="params"><span class="variable">$text</span></span>) </span>{</span><br><span class="line">        <span class="variable">$pad</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$text</span>{<span class="title function_ invoke__">strlen</span>(<span class="variable">$text</span>) - <span class="number">1</span>});</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$pad</span> &gt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$text</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strspn</span>(<span class="variable">$text</span>, <span class="title function_ invoke__">chr</span>(<span class="variable">$pad</span>), <span class="title function_ invoke__">strlen</span>(<span class="variable">$text</span>)-<span class="variable">$pad</span>) != <span class="variable">$pad</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$text</span>, <span class="number">0</span>, -<span class="number">1</span> * <span class="variable">$pad</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-调用"><a href="#2-调用" class="headerlink" title="2. 调用"></a>2. 调用</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">modules</span>\<span class="title class_">demo</span>\<span class="title class_">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">components</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">libs</span>\<span class="title">Aes</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionTest</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="variable">$key</span> = <span class="string">'WGiSP3UQ'</span>;</span><br><span class="line">        <span class="variable">$str</span> = <span class="string">'18958019299'</span>;</span><br><span class="line">        <span class="variable">$enStr</span> = <span class="title class_">Aes</span>::<span class="title function_ invoke__">encode</span>(<span class="variable">$str</span>,<span class="variable">$key</span>);</span><br><span class="line">        <span class="variable">$deStr</span> = <span class="title class_">Aes</span>::<span class="title function_ invoke__">decode</span>(<span class="variable">$enStr</span>,<span class="variable">$key</span>);</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$str</span>,<span class="variable">$enStr</span>,<span class="variable">$deStr</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-访问http-127-0-0-1-web-demo-test-test-，运行结果如下："><a href="#3-访问http-127-0-0-1-web-demo-test-test-，运行结果如下：" class="headerlink" title="3. 访问http://127.0.0.1/web/demo/test/test ，运行结果如下："></a>3. 访问<a href="http://127.0.0.1/web/demo/test/test">http://127.0.0.1/web/demo/test/test</a> ，运行结果如下：</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>(<span class="number">11</span>) <span class="string">"18958019299"</span> </span><br><span class="line"><span class="keyword">string</span>(<span class="number">24</span>) <span class="string">"WiBZggO/DRaczJ3wSirvEw=="</span> </span><br><span class="line"><span class="keyword">string</span>(<span class="number">11</span>) <span class="string">"18958019299"</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery面向对象写法</title>
      <link href="/posts/jquery-obj.html"/>
      <url>/posts/jquery-obj.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>书写Jquery代码时，普通的面向过程的写法可以实现功能，但不利于后期维护。现介绍面向对象的写法。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-event</span>=<span class="string">"list"</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-event</span>=<span class="string">"search"</span> <span class="attr">data-name</span>=<span class="string">"大班"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-event</span>=<span class="string">"add"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-event</span>=<span class="string">"update"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-event</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> clickAct = {</span></span><br><span class="line"><span class="language-javascript"><span class="attr">btn</span>: $(<span class="string">'button'</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="attr">init</span>: <span class="keyword">function</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> that = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">btn</span>.<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> func = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">'data-event'</span>);</span></span><br><span class="line"><span class="language-javascript">that[func]($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">'data-name'</span>));</span></span><br><span class="line"><span class="language-javascript">})</span></span><br><span class="line"><span class="language-javascript">},</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="attr">list</span>: <span class="keyword">function</span>(<span class="params">param</span>){</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'1'</span>);</span></span><br><span class="line"><span class="language-javascript">},</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="attr">search</span>: <span class="keyword">function</span>(<span class="params">param</span>){</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(param);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">},</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">param</span>){</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'3'</span>);</span></span><br><span class="line"><span class="language-javascript">},</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="attr">update</span>: <span class="keyword">function</span>(<span class="params">param</span>){</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'4'</span>);</span></span><br><span class="line"><span class="language-javascript">},</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="attr">del</span>: <span class="keyword">function</span>(<span class="params">param</span>){</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'5'</span>);</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">clickAct.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL函数</title>
      <link href="/posts/mysql-functions.html"/>
      <url>/posts/mysql-functions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录几个常用的MySQL函数：</p><h4 id="LAST-INSERT-ID-expr"><a href="#LAST-INSERT-ID-expr" class="headerlink" title="LAST_INSERT_ID([expr])"></a>LAST_INSERT_ID([expr])</h4><p>自动返回最后一个INSERT或 UPDATE 问询为 AUTO_INCREMENT列设置的第一个发生的值。<br>如果一次性insert多条数据，只返回第一个数据的主键。<br></p><figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT <span class="symbol">*</span> FROM t;</span><br><span class="line">+----+------+</span><br><span class="line">|<span class="string"> id </span>|<span class="string"> name </span>|</span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> Bob  </span>|</span><br><span class="line">+----+------+</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO t VALUES  (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');</span><br><span class="line">mysql&gt; SELECT <span class="symbol">*</span> FROM t;</span><br><span class="line">+----+------+</span><br><span class="line">|<span class="string"> id </span>|<span class="string"> name </span>|</span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> Bob  </span>|</span><br><span class="line">|<span class="string">  2 </span>|<span class="string"> Mary </span>|</span><br><span class="line">|<span class="string">  3 </span>|<span class="string"> Jane </span>|</span><br><span class="line">|<span class="string">  4 </span>|<span class="string"> Lisa </span>|</span><br><span class="line">+----+------+</span><br><span class="line">mysql&gt; SELECT LAST_INSERT_ID();</span><br><span class="line">-&gt;2;</span><br></pre></td></tr></tbody></table></figure><br>注：假如你使用 INSERT IGNORE而记录被忽略，则AUTO_INCREMENT 计数器不会增量，而 LAST_INSERT_ID() 返回0,这反映出没有插入任何记录。<p></p><p>若给出作为到LAST_INSERT_ID()的参数expr ，则参数的值被函数返回，并作为被LAST_INSERT_ID()返回的下一个值而被记忆。这可用于模拟序列：</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">sequence</span> (id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br><span class="line">mysql&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">sequence</span> <span class="keyword">VALUES</span> (<span class="number">0</span>);</span><br><span class="line">mysql&gt; <span class="keyword">UPDATE</span> <span class="keyword">sequence</span> <span class="keyword">SET</span> id=LAST_INSERT_ID(id+<span class="number">1</span>);</span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> LAST_INSERT_ID();</span><br><span class="line">     -&gt;<span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-03-29杂谈</title>
      <link href="/posts/some-others.html"/>
      <url>/posts/some-others.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈哈，科目一96！</p><p><img src="/images/happy.jpg" alt="I'm very happy."></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具推荐</title>
      <link href="/posts/normal-tools.html"/>
      <url>/posts/normal-tools.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、windows文件搜索工具"><a href="#1、windows文件搜索工具" class="headerlink" title="1、windows文件搜索工具"></a>1、windows文件搜索工具</h3><p>给大家推荐一款windows下的文件搜索工具——Everything，下载地址：<a href="http://www.voidtools.com/">http://www.voidtools.com/</a></p><h3 id="2、文档搜索工具"><a href="#2、文档搜索工具" class="headerlink" title="2、文档搜索工具"></a>2、文档搜索工具</h3><p>安利一个文档搜索工具——鸠摩搜索，各种格式的电子书、文档都可以下载，比如PDF、TXT、MOBI、DOC等，地址：<a href="https://www.jiumodiary.com/">鸠摩搜索</a></p><h3 id="3、API接口文档管理工具——小幺鸡"><a href="#3、API接口文档管理工具——小幺鸡" class="headerlink" title="3、API接口文档管理工具——小幺鸡"></a>3、API接口文档管理工具——<a href="http://www.xiaoyaoji.cn">小幺鸡</a></h3><h3 id="4、Git项目搜索工具——BitHubLab"><a href="#4、Git项目搜索工具——BitHubLab" class="headerlink" title="4、Git项目搜索工具——BitHubLab"></a>4、Git项目搜索工具——BitHubLab</h3><p><a href="https://bithublab.org/">BitHubLab</a>，可以搜索所有Git平台上的公开项目，包括GitHub、GitLab和BitBucket等的项目。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用JQuery进行md5加密</title>
      <link href="/posts/jquery-md5.html"/>
      <url>/posts/jquery-md5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在开发中，有时候需要前端将数据加密后传给后端，下面介绍下jquery md5加密：</p><p>先引入<a href="/codes/md5.min.js">md5.min.js</a>，再调用，代码如下：<br></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"md5.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'input'</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">md5</span>(str));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
