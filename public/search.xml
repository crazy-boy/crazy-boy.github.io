<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记一次高并发迭代之路</title>
      <link href="/posts/high-concurrent-experience.html"/>
      <url>/posts/high-concurrent-experience.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h3><p>2020年之初，新冠肺炎突然来势汹汹，在全国人民的团结努力下，抗疫战进入了僵持阶段，2月24日我公司一复工，就接到了成都市XX区领导的需求，需要在一周内开发上线一个针对全区师生(10万人左右)疫情每日打卡平台。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>其实就是需要做一个用户每日登陆填报问卷的功能。此平台需要有一个管理后台，一个h5打卡填报及其附属页面。</p><h3 id="雏形"><a href="#雏形" class="headerlink" title="雏形"></a>雏形</h3><p>由于时间紧，对项目进行简单分析后，确定功能(后台：用户信息管理、打卡记录、数据统计，前台：用户登陆、打卡、快速打卡、打卡记录)后，我们就着手开发。功能很快开发开发完成并上线。</p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>上线前的测试阶段，我们发现有些信息是固定的但每个人都需要查询，比如省市区信息，于是我们进行了redis缓存。由于后台的统计过于复杂，于是使用golang开发了计划任务，每两分钟统计一次数据。<br>领导验收时又提了一些功能改进，在改进时，我们发现用户数有10万左右，单一的打卡接口可能会堵塞，于是进行了优化，打卡接口只进行普通的填报信息校验，校验通过后，异步调用golang接口进行打卡信息保存，这样有一个坏处就是数据保存延迟，可能会出现打卡后看不到记录。为防止用户多次打卡，在填报信息校验通过后，将当天打卡人的唯一标识存入redis，如果存在redis中就不让再次打卡，当然如果打卡信息保存失败，go程序需删除该人当日的打卡缓存。<br>上线试运行期间，发现用户打卡打卡页面很慢，经分析，服务器带宽只有10M，前端页面图片未压缩，于是进行图片、js、css等资源文件压缩，单纯压测前端页面(压缩后未425k)，明显带宽不够，加大到100M，前端页面图片CND加速后，压测1000并发无问题。压测打卡接口，1000并发连接超时失败率20%，800并发连接超时失败率10%。<br>压测一个通宵后，本以为平安无事了，结果第二天一早上就卡得不行，原来是后台查询过慢，导致cpu飙升，前台用户查询不到数据，看慢查询发现，时不时有几个查询sql消耗时间过长，show preocesslist也看到异常。先加索引优化，但效果不明显，结果发现是在进行联表查询的时候，大表联了大表，大表牵引本来就是问题，于是对业务表进行了合并，5张表合成一张表，并添加索引，后台查询立马飞快。更新程序后，暂时一切正常了。<br>没想到第二天一早上服务器有出问题了，并发飙升到2万多，有很多insert 语句造成了锁表，而很多的select语句有无法执行。突然意识到myisam使用insert的时候会造成锁表，需要支持并发插入，得修改concurrent_insert=2,；另一方面有个在慢查询中有两个select语句出现很频繁，但耗时不高(0.60s左右)，explain发现居然没有使用索引，立马加上索引，查询耗时降低到0.02s。在无法kill sql进程的情况下，只能进行停止Nginx，重启数据库，重启后一切正常。<br>由于可能并发过高，我们选择了服务器升级，单台数据库可能扛不住。全迁移到阿里云，使用阿里云的数据库，读写分离，一主多从，弹性伸缩。一切ok，监控两日后发现并发在8000左右。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>架构设计的原则：简单、合适高于一切。<br>高并发需考虑带宽，页面缓存压缩、静态数据缓存、接口异步多线程处理。<br>慢查询除了关注耗时过长的sql，还得注意使用频繁的sql。<br>高并发当程序优化到极致后，需考虑服务器优化，读写分离，redis集群等。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死锁</title>
      <link href="/posts/dead-lock.html"/>
      <url>/posts/dead-lock.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>死锁（Dead Lock）指的是两个或两个以上的运算单元（进程、线程或协程），都在等待对方释放资源，但没有一方提起释放资源，从而造成了一种阻塞的现象就称为死锁。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>死锁的产生需要满足以下 4 个条件：</p><ol><li>互斥条件：指运算单元（进程、线程或协程）对所分配到的资源具有排它性，也就是说在一段时间内某个锁资源只能被一个运算单元所占用。</li><li>请求和保持条件：指运算单元已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它运算单元占有，此时请求运算单元阻塞，但又对自己已获得的其它资源保持不放。</li><li>不可剥夺条件：指运算单元已获得的资源，在未使用完之前，不能被剥夺。</li><li>环路等待条件：指在发生死锁时，必然存在运算单元和资源的环形链，即运算单元正在等待另一个运算单元占用的资源，而对方又在等待自己占用的资源，从而造成环路等待的情况。<br>只有以上 4 个条件同时满足，才会造成死锁。</li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>死锁产生要满足以上 4 个必要条件，那么我们只需要改变其中的 1 个或多个条件就可以解决死锁的问题了。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://mp.weixin.qq.com/s/gq7w-V493OsRpezAZXzXog">https://mp.weixin.qq.com/s/gq7w-V493OsRpezAZXzXog</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>池化技术</title>
      <link href="/posts/pooling-technology.html"/>
      <url>/posts/pooling-technology.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>池化技术指的是提前准备一些资源，在需要时可以重复使用这些预先准备的资源。池化技术的优点主要有两个：提前准备和重复利用。<br>常见的池化技术的应用有：线程池、内存池、数据库连接池、HttpClient 连接池等。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 池化技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全</title>
      <link href="/posts/thread-safe.html"/>
      <url>/posts/thread-safe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>线程安全是指某个方法或某段代码，在多线程中能够正确的执行，不会出现数据不一致或数据污染的情况，我们把这样的程序称之为线程安全的，反之则为非线程安全的。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>导致线程安全问题的因素有以下 5 个：</p><ul><li>多线程抢占式执行<br>导致线程安全问题的第一大因素就是多线程抢占式执行，想象一下，如果是单线程执行，或者是多线程有序执行，那就不会出现混乱的情况了，不出现混乱的情况，自然就不会出现非线程安全的问题了。</li><li>多线程同时修改同一个变量<br>多线程只要不是同时修改同一个变量，也不会出现线程安全问题。</li><li>非原子性操作<br>原子性操作是指操作不能再被分隔就叫原子性操作。非原子性操作有很多不确定性，而这些不确定性就会造成线程安全问题问题。像 i++ 和 i— 这种操作就是非原子的，它在 +1 或 -1 之前，先要查询原变量的值，并不是一次性完成的，所以就会导致线程安全问题。</li><li>内存可见性<br>在 Java 编程中内存分为两种类型：工作内存和主内存，而工作内存使用的是 CPU 寄存器实现的，而主内存是指电脑中的内存，我们知道 CPU 寄存器的操作速度是远大于内存的操作速度的。<br>那这和线程安全有什么关系呢？这是因为在 Java 语言中，为了提高程序的执行速度，所以在操作变量时，会将变量从主内存中复制一份到工作内存，而主内存是所有线程共用的，工作内存是每个线程私有的，这就会导致一个线程已经把主内存中的公共变量修改了，而另一个线程不知道，依旧使用自己工作内存中的变量，这样就导致了问题的产生，也就导致了线程安全问题。</li><li>指令重排序<br>指令重排序是指 Java 程序为了提高程序的执行速度，所以会对一下操作进行合并和优化的操作。比如说，张三要去图书馆还书，舍友又让张三帮忙借书，那么程序的执行思维是，张三先去图书馆把自己的书还了，再去一趟图书馆帮舍友把书借回来。而指令重排序之后，把两次执行合并了，张三带着自己的书去图书馆把书先还了，再帮舍友把书借出来，整个流程就执行完了，这是正常情况下的指令重排序的好处。但是指令重排序也有“副作用”，而“副作用”是发生在多线程执行中的，还是以张三借书和帮舍友还书为例，如果张三是一件事做完再做另一件事是没有问题的（也就是单线程执行是没有问题的），但如果是多线程执行，就是两件事由多个人混合着做，比如张三在图书馆遇到了自己的多个同学，于是就把任务分派给多个人一起执行，有人借了几本书、有人借了还了几本书、有人再借了几本书、有人再借了还了几本书，执行的很混乱没有明确的目标，到最后悲剧就发生了，这就是在指令重排序带来的线程安全问题。</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决线程安全问题有以下 3 种手段：</p><ol><li>使用线程安全类，比如 AtomicInteger。</li><li>加锁排队执行<br> <code>使用 synchronized 加锁。</code><br> <code>使用 ReentrantLock 加锁。</code></li><li>使用线程本地变量 ThreadLocal。</li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://mp.weixin.qq.com/s/BKp1c1gMsXWSNy3-8-FH0Q">https://mp.weixin.qq.com/s/BKp1c1gMsXWSNy3-8-FH0Q</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中define和const的区别</title>
      <link href="/posts/php-define-const.html"/>
      <url>/posts/php-define-const.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">在PHP中，定义常量有两种方式： const、define；下面详细说下它们的区别：</div><ul><li>1、const是表达式赋值定义一个常量，而define是一个函数，它接受三个参数</li><li>2、const对定义的常量大小写敏感，而define可以通过函数的第三个参数来控制是否大小写敏感</li><li>3、const可以类中使用，define不能</li><li>4、const不能再条件语句中使用，而define可以</li><li><p>5、const在使用上比define要简单便捷，并且编译速度要比Define来得快</p></li><li><p>6、用法<br>define常放在文件的开头</p><pre class=" language-lang-php"><code class="language-lang-php">defined('ENV_PREFIX') or define('ENV_PREFIX', 'PHP_');</code></pre><p>const一般放在类里：</p><pre class=" language-lang-php"><code class="language-lang-php">class A&#123;  const STATUS_NORMAL = 1;  const STATUS_FILED = 2;&#125;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> define与const </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下curl命令</title>
      <link href="/posts/linux-curl.html"/>
      <url>/posts/linux-curl.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><pre><code>curl https://www.baidu.com</code></pre><p>上面命令向www.baidu.com发出 GET 请求，服务器返回的内容会在命令行输出。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><h4 id="d：使用-d参数向服务器发送POST请求的数据体"><a href="#d：使用-d参数向服务器发送POST请求的数据体" class="headerlink" title="-d：使用-d参数向服务器发送POST请求的数据体"></a>-d：使用-d参数向服务器发送POST请求的数据体</h4><pre><code>curl -d &#39;login=admin＆password=123&#39; -X POST https://www.aa.com/admin/</code></pre><p>上方的命令向服务器发送（POST）了login=admin＆password=123。但是使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。</p><pre><code>curl -d &#39;&amp;#123;&quot;login&quot;: &quot;admin&quot;, &quot;pass&quot;: &quot;123&quot;&amp;#125;&#39; -X &#39;Content-Type: application/json&#39; https://www.aa.com/admin</code></pre><p>上方的命令添加了HTTP请求标头：Content-Type:application/json并使用-d参数向服务器发送（POST）了json数据。</p><h4 id="H：设置-HTTP头信息"><a href="#H：设置-HTTP头信息" class="headerlink" title="-H：设置 HTTP头信息"></a>-H：设置 HTTP头信息</h4><pre><code>curl -H &#39;Token: xxxx&#39; https://www.aa.com/</code></pre><p>使用-H参数设置Token为xxxx向服务器发送了GET请求。</p><h4 id="X：可以指定HTTP请求方法"><a href="#X：可以指定HTTP请求方法" class="headerlink" title="-X：可以指定HTTP请求方法"></a>-X：可以指定HTTP请求方法</h4><pre><code>curl -X POST https://www.aa.com/</code></pre><p>上方的命令向服务器发送了POST请求。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.typeboom.com/archives/107/">https://www.typeboom.com/archives/107/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> curl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——建造者模式</title>
      <link href="/posts/builder-pattern.html"/>
      <url>/posts/builder-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。首先看下关系图：<br><img src="/images/builder-pattern-1.jpg" alt></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面讲解下设计模式的代码实现</p><ol><li>创建产品类<pre class=" language-lang-php"><code class="language-lang-php"> class Product&#123;     private $parts = [];     public function add(string $part): void&#123;         $this->parts[] = $part;     &#125;     public function show():void&#123;         print_r($this->parts);     &#125; &#125;</code></pre></li><li>创建建造者接口<pre class=" language-lang-php"><code class="language-lang-php"> interface Builder&#123;     public function buildPartA(): void;     public function buildPartB(): void;     public function getResult(): Product; &#125;</code></pre></li><li><p>创建多个建造者实现类</p><pre class=" language-lang-php"><code class="language-lang-php"> class ConcreteBuilder1 implements Builder&#123;     private $product;     public function __construct()&#123;         $this->product = new Product();     &#125;     public function buildPartA(): void&#123;         $this->product->add('部件A');     &#125;     public function buildPartB(): void&#123;         $this->product->add('部件B');     &#125;     public function getResult(): Product&#123;         return $this->product;     &#125; &#125; class ConcreteBuilder2 implements Builder&#123;     private $product;     public function __construct()&#123;         $this->product = new Product();     &#125;     public function buildPartA(): void&#123;         $this->product->add('部件X');     &#125;     public function buildPartB(): void&#123;         $this->product->add('部件Y');     &#125;     public function getResult(): Product&#123;         return $this->product;     &#125; &#125;</code></pre></li><li><p>创建构造器</p><pre class=" language-lang-php"><code class="language-lang-php"> class Director&#123;     public function construct(Builder $builder)&#123;         $builder->buildPartA();         $builder->buildPartB();     &#125; &#125;</code></pre></li></ol><ul><li><p>我们来测试下：</p><pre class=" language-lang-php"><code class="language-lang-php">  class FactoryTest&#123;      public static function index()&#123;          $director = new Director();          $builder1 = new ConcreteBuilder1();          $builder2 = new ConcreteBuilder2();          $director->construct($builder1);          $product1 = $builder1->getResult();          $product1->show();          $director->construct($builder2);          $product2 = $builder2->getResult();          $product2->show();      &#125;  &#125;</code></pre></li><li><p>输出结果为：</p><pre><code>Array ( [0] =&gt; 部件A [1] =&gt; 部件B )Array ( [0] =&gt; 部件X [1] =&gt; 部件Y )</code></pre></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>它与工厂模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建复合对象，多个部分。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP实现方法运行前(后)执行指定的程序</title>
      <link href="/posts/php-auto-run-func.html"/>
      <url>/posts/php-auto-run-func.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在PHP中，利用__call()，可实现方法运行前/后执行指定的程序片段。</p><p>下面演示下，在test方法执行后自动执行afterTest方法</p><pre class=" language-lang-php"><code class="language-lang-php">trait A&#123;    public function __call($method, $args)&#123;        if (!method_exists($this, $method)) &#123;            throw new Exception('no such method: ' . $method);        &#125;        $afterMethod = 'after'.ucfirst($method);        if (method_exists($this, $afterMethod)) &#123;            $rs = call_user_func_array([$this, $method], $args);            if ($rs['code'] == 0) &#123;                call_user_func_array([$this, $afterMethod], $rs);                return $rs;            &#125;        &#125; else &#123;            return call_user_func_array([$this, $method], $args);        &#125;    &#125;    private function afterTest(...$args)&#123;        print_r($args);    &#125;&#125;Class B&#123;    use A;    protected function test($id,$name): array&#123;        return $id>10 ? ['code'=>1,'msg'=>'ok'] : ['code'=>0,'msg'=>'error'];    &#125;&#125;$rs = (new B())->test(7,'张三');</code></pre><p>输出结果为：<br><code>Array ( [0] =&gt; 0 [1] =&gt; error )</code></p><p>不难看出，这种处理方式存在以下两个缺陷：</p><ol><li>方法需设为外界不可用，protected/privated，在IDE中就无法跳转，其他人维护起来比较困难；</li><li>代码耦合度高，相互影响，不利于后期扩展。</li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中unset的一些使用</title>
      <link href="/posts/php-unset.html"/>
      <url>/posts/php-unset.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：在PHP开发中，经常使用到unset来释放掉给定的变量；但有时候会有些问题，本文记录下。</div><ul><li><p>如果需要去掉数组中的某些key，直接unset即可</p><pre class=" language-lang-php"><code class="language-lang-php">  $arr = ['id' => 5, 'name' => '张三', 'status' => 1];  unset($arr['status']);  print_r($arr);      // Array ( [id] => 5 [name] => 张三 )</code></pre></li><li><p>也可以去掉二位数组中指定的key</p><pre class=" language-lang-php"><code class="language-lang-php">  $list = [      ['id' => 1, 'name' => '张三', 'status' => 1],      ['id' => 2, 'name' => '李四', 'status' => 0],      ['id' => 3, 'name' => '王五', 'status' => 1],  ];  array_walk($list, function (&$item) &#123;      unset($item['status']);  &#125;);  print_r($list);  // output:  Array ( [0] => Array ( [id] => 1 [name] => 张三 ) [1] => Array ( [id] => 2 [name] => 李四 ) [2] => Array ( [id] => 3 [name] => 王五 ) )</code></pre></li><li><p>下面试下去掉一维数组中的空值</p><pre class=" language-lang-php"><code class="language-lang-php">  $data = ['test', 'haha', '', 'hello', null, 'good'];  array_walk($data, function (&$item) &#123;      if (!$item) unset($item);  &#125;);  print_r($data);  // output: Array ( [0] => test [1] => haha [2] => [3] => hello [4] => [5] => good )</code></pre></li><li><p>上面的代码没有达到预期的效果，那我们修改下试试</p><pre class=" language-lang-php"><code class="language-lang-php">  $data = ['test', 'haha', '', 'hello', null, 'good', ''];  array_walk($data, function ($item, $key) use (&$data) &#123;      if (!$item) unset($data[$key]);  &#125;);  print_r($data);  // output: Array ( [0] => test [1] => haha [3] => hello [5] => good )</code></pre></li><li><p>虽然达到了预期，但PHP给我们提供了更优雅的解决办法</p><pre class=" language-lang-php"><code class="language-lang-php">  $data = ['test', 'haha', '', 'hello', null, 'good', ''];  print_r(array_filter($data));  // output: Array ( [0] => test [1] => haha [3] => hello [5] => good )</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中，通过&amp;改变变量的值，效率如何</title>
      <link href="/posts/php-assignment.html"/>
      <url>/posts/php-assignment.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在PHP中，通过&amp;改变变量的值，效率如何呢，下面来测试一下。</p><pre class=" language-lang-php"><code class="language-lang-php">$arr = ['id' => null, 'name' => 'test', 'age' => null];$time1 = microtime(true);$tmp = &$arr;for ($i = 0; $i < 100000000; $i++) &#123;    $tmp['id'] = $i;&#125;print_r($arr); echo PHP_EOL;echo microtime(true) - $time1;echo PHP_EOL;$time2 = microtime(true);$tmp1 = null;for ($i = 0; $i < 100000000; $i++) &#123;    $tmp1 = $i;&#125;$tmp['id'] = $tmp1;print_r($arr);echo PHP_EOL;echo microtime(true) - $time2;</code></pre><p>输出结果为：<code><br>Array ( [id] =&gt; 99999999 [name] =&gt; test [age] =&gt; )<br>2.0506858825684<br>Array ( [id] =&gt; 99999999 [name] =&gt; test [age] =&gt; )<br>1.1653530597687</code></p><p>不难看出，两次的处理结果是一样的，但通过&amp;多次改变值，效率较低。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php中，this、self、static的区别</title>
      <link href="/posts/php-self-static.html"/>
      <url>/posts/php-self-static.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>this指当前类，不能用于静态成员函数中，使用形式：$this-&gt;</li><li>self是对静态成员函数/变量的访问，使用形式：self::</li><li>static和self很接近，唯一区别在于：self调用的是本身代码片段的这个类；而static调用的是从堆内存中提取出来的，即访问的是当前实例化的那个类。</li></ul><p>下面看下测试代码：</p><pre class=" language-lang-php"><code class="language-lang-php">class A&#123;    public $name = 'Jams';    protected static $age = 26;    public function start()&#123;        echo get_called_class() . '==>' . $this->name . '==>' . $this::$age;    &#125;    public static function getAge()&#123;        echo get_called_class() . '==>' . self::$age;    &#125;    public static function getInfo()&#123;        echo get_called_class() . '==>' . static::$age;    &#125;&#125;class B extends A&#123;    public $name = 'Kiv';    protected static $age = 20;&#125;(new B())->start();B::getAge();B::getInfo();</code></pre><p>输出结果为：<code><br>B==&gt;Kiv==&gt;20<br>B==&gt;26<br>B==&gt;20</code></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中isset与array_key_exists的性能对比</title>
      <link href="/posts/php-isset-array_key_exists.html"/>
      <url>/posts/php-isset-array_key_exists.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：在开发中，之前判断数组中的键是否存在，我一直使用isset；今天看到有同事大量使用array_key_exists，闲来没事就测试了一下它们的性能。</div><pre class=" language-lang-php"><code class="language-lang-php">    $arr = ['id' => 3242, 'name' => 'test', 'age' => null];    $time1 = microtime(true);    for ($i = 0; $i < 100000000; $i++) &#123;        $tmp = isset($arr['age']);    &#125;    echo microtime(true) - $time1;    echo PHP_EOL;    $time2 = microtime(true);    for ($i = 0; $i < 100000000; $i++) &#123;        $tmp1 = array_key_exists('age', $arr);    &#125;    echo microtime(true) - $time2;</code></pre><p>上面的代码运行结果为：<code><br>2.1061670780182<br>3.1671521663666</code></p><p>经测试：isset的效率要高于array_key_exists。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中...的用法</title>
      <link href="/posts/php-uncertain-params.html"/>
      <url>/posts/php-uncertain-params.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p>如果…在函数的定义中，则表示传入多个参数(个数不定)将合并成一个数组(索引数组)</p><pre class=" language-lang-php"><code class="language-lang-php">  function sum(...$numbers)&#123;      $sum = 0;      foreach ($numbers as $number)&#123;          $sum += $number;      &#125;      return $sum;  &#125;  echo sum(1,2,3,4,5);    //15</code></pre></li><li><p>如果…在调用函数的语句中，则表示传入的数组(索引数组)将拆分成多个参数</p><pre class=" language-lang-php"><code class="language-lang-php">  function add($a, $b)&#123;      return $a + $b;  &#125;  $arr = [2,3];  echo add(...$arr);      //5  var_dump(add(...[1]));  //没有任何输出  var_dump(add(...['a'=>1,'b'=>2]));  //没有任何输出</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——单例模式</title>
      <link href="/posts/singleton-pattern.html"/>
      <url>/posts/singleton-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面看下单例模式的代码实现</p><pre class=" language-lang-php"><code class="language-lang-php">class Singleton&#123;    //持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载    private static ?Singleton $instance=null;    // 禁止被实例化    private function __construct()&#123;&#125;    // 禁止被克隆    private function __clone()&#123;&#125;    public static function getInstance(): Singleton&#123;        //if (!self::$instance)&#123;    有线程安全问题        if (!self::$instance instanceof self)&#123;            self::$instance = new self();        &#125;        return self::$instance;    &#125;&#125;</code></pre><p>如果使用<code>if (!self::$instance)&#123; </code>会有线程安全问题</p><ul><li>a. A、B线程同时进入了getInstance </li><li>b. A首先进入if判断，由于instance为null，所以它执行self::$instance = new self();</li><li>c. 由于内存的优化机制，会先划出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时内存没有开始初始化这个实例），然后A离开了if代码块。</li><li>d. B进入if判断，由于instance此时不是null，因此它马上离开了if代码块并将结果返回给调用该方法的程序。</li><li>e. 此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。<br>改为<code>if (!self::$instance instanceof self)&#123;</code>即可</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>单例模式有几个好处：<br>    1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。<br>    2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。<br>    3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——简单工厂方法模式</title>
      <link href="/posts/simple-factory-pattern.html"/>
      <url>/posts/simple-factory-pattern.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。<br>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看下关系图：<br><img src="/images/simple-factory-pattern-1.jpg" alt></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面讲解下静态工厂方法模式的代码实现</p><ol><li>创建公共接口<pre class=" language-lang-php"><code class="language-lang-php"> interface Sender&#123;     public function send(); &#125;</code></pre></li><li><p>创建实现类</p><pre class=" language-lang-php"><code class="language-lang-php"> class MailSender implements Sender&#123;     public function send()&#123;         print "mail send";     &#125; &#125; class SmsSender implements Sender&#123;     public function send()&#123;         print "sms send";     &#125; &#125;</code></pre></li><li><p>创建工厂类</p><pre class=" language-lang-php"><code class="language-lang-php"> class SendFactory&#123;     public static function produceMail(): Sender&#123;         return new MailSender();     &#125;     public static function produceSms(): Sender&#123;         return new SmsSender();     &#125; &#125;</code></pre></li></ol><ul><li><p>我们来测试下：</p><pre class=" language-lang-php"><code class="language-lang-php">  class FactoryTest&#123;      public static function index()&#123;          $sender = SendFactory::produceSms();          $sender->send();      &#125;  &#125;</code></pre></li><li><p>输出结果为：</p><pre><code>sms send</code></pre></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>缺陷：类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件的设计模式</title>
      <link href="/posts/design-patterns.html"/>
      <url>/posts/design-patterns.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><ul><li><p>总原则：开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。</p></li><li><p>1、单一职责原则<br>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p></li><li><p>2、里氏替换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。<br>历史替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p></li><li><p>3、依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p></li><li><p>4、接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p></li><li><p>5、迪米特法则（最少知道原则）（Demeter Principle）<br>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p></li></ul><p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p><ul><li>6、合成复用原则（Composite Reuse Principle）<br>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</li></ul><h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h3><p>总体来说设计模式分为三大类：</p><ul><li>创建型模式，共五种：<a href="simple-factory-pattern.html" target="_blank">工厂方法模式</a>、抽象工厂模式、<a href="singleton-pattern.html" target="_blank">单例模式</a>、<a href="builder-pattern.html" target="_blank">建造者模式</a>、原型模式。</li><li>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li><li>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li><li>其实还有两类：并发型模式和线程池模式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis笔记</title>
      <link href="/posts/redis-note.html"/>
      <url>/posts/redis-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装redis客户端"><a href="#安装redis客户端" class="headerlink" title="安装redis客户端"></a>安装redis客户端</h3><p><code>yum install redis</code></p><h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><p><code>info</code><br><img src="/images/redis_note_1.png" alt></p><h3 id="通过命令行方式连接redis"><a href="#通过命令行方式连接redis" class="headerlink" title="通过命令行方式连接redis"></a>通过命令行方式连接redis</h3><p><code>redis-cli -h host -p port -a password</code><br>host:远程redis服务器host<br>port:远程redis服务端口<br>password:远程redis服务密码（无密码的的话就不需要-a参数了）<br><img src="/images/redis_note_2.png" alt></p><h3 id="redis执行lua脚本"><a href="#redis执行lua脚本" class="headerlink" title="redis执行lua脚本"></a>redis执行lua脚本</h3><p><img src="/images/redis_note_3.png" alt><br><img src="/images/redis_note_4.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm常用快捷键</title>
      <link href="/posts/phpstorm-quick-key.html"/>
      <url>/posts/phpstorm-quick-key.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="删除某行"><a href="#删除某行" class="headerlink" title="删除某行"></a>删除某行</h3><p>ctrl+Y</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm显示当前文件的所有函数和方法</title>
      <link href="/posts/phpstorm-show-func.html"/>
      <url>/posts/phpstorm-show-func.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>phpStorm显示类的函数或方法列表， 点击左下方的Structure即可。<br><img src="/images/phpstorm_show_func_1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS命令进入MySQL</title>
      <link href="/posts/use-mysql-on-dos.html"/>
      <url>/posts/use-mysql-on-dos.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-先进入mysql安装目录下的bin目录中"><a href="#1-先进入mysql安装目录下的bin目录中" class="headerlink" title="1. 先进入mysql安装目录下的bin目录中"></a>1. 先进入mysql安装目录下的bin目录中</h3><p><img src="/images/doc_mysql_1.png" alt></p><h3 id="2-执行命令"><a href="#2-执行命令" class="headerlink" title="2. 执行命令"></a>2. 执行命令</h3><p><code>mysql -hlocalhost -uroot -p</code><br>按要求输入密码，回车即可。<br><img src="/images/doc_mysql_2.png" alt></p><h3 id="3-执行命令操作数据库"><a href="#3-执行命令操作数据库" class="headerlink" title="3. 执行命令操作数据库"></a>3. 执行命令操作数据库</h3><p>如：显示所有的数据库<br><img src="/images/doc_mysql_3.png" alt></p><h3 id="4-退出mysql数据库"><a href="#4-退出mysql数据库" class="headerlink" title="4. 退出mysql数据库"></a>4. 退出mysql数据库</h3><p>exit回车即可<br><img src="/images/doc_mysql_4.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> DOS命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5框架where条件中含有or的使用方法</title>
      <link href="/posts/thinkphp-where.html"/>
      <url>/posts/thinkphp-where.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-直接whereOr"><a href="#1-直接whereOr" class="headerlink" title="1. 直接whereOr"></a>1. 直接whereOr</h3><pre class=" language-lang-php"><code class="language-lang-php">    $list = Db::name('tb')->where(['status'=>1,'admin_id'=>5])->whereOr(['type'=>1,'step'=>2])->select();    // 生成的sql为：select * from `tb` where `status`=1 and `admin_id`=5 or (`type`=1 or `step`=2);</code></pre><h3 id="2-采用闭包的方式"><a href="#2-采用闭包的方式" class="headerlink" title="2. 采用闭包的方式"></a>2. 采用闭包的方式</h3><pre class=" language-lang-php"><code class="language-lang-php">    $map = ['status'=>1,'admin_id'=>5];    $orMap = ['type'=>1,'step'=>2];    $list = Db::name('tb')->where(function ($query) use ($map) {        $query->where($map);    })->whereOr(function ($query) use ($orMap) {        $query->where($orMap);    })->order('id desc')->select();    // 生成的sql为：select * from `tb` where (`status`=1 and `admin_id`=5) or (`type`=1 and `step`=2);</code></pre><p>一般来说，在复杂的查询里，我们更多的是使用第二种方式。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> ThinkPHP </tag>
            
            <tag> 数据库查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中数组内容依次赋值给变量</title>
      <link href="/posts/a1b63ab8.html"/>
      <url>/posts/a1b63ab8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在日常开发过程中，经常需要把数组中的内容依次赋值给变量，可以使用list、[]、extract来处理。</p><h3 id="1-list-var1-var2…-arr"><a href="#1-list-var1-var2…-arr" class="headerlink" title="1. list($var1,$var2…) = $arr;"></a>1. list($var1,$var2…) = $arr;</h3><p>   或者[$var1,$var2…] = $arr;<br>   将数组中的值赋给一些变量<br>   该函数只能用于索引数组，且数字索引从0开始。<br>   如果对应的数字下标，则该变量赋值为null</p><pre class=" language-lang-php"><code class="language-lang-php">    <?php    list($a, $b, $c) = ['Jone', 'Jam', 'Kav'];    var_dump($a, $b, $c);       //output：string(4) "Jone" string(3) "Jam" string(3) "Kav"    list($a, $b) = ['Jone', 'Jam', 'Kav'];    var_dump($a, $b);           //output：string(4) "Jone" string(3) "Jam"    list($a, $b, $c) = [2 => 'Jone', 3 => 'Jam', 4 => 'Kav'];    var_dump($a, $b, $c);       //output：NULL NULL string(4) "Jone"    list($a, $b, $c) = ['id' => 4, 2 => 'Jam', 'name' => 'Kav'];    var_dump($a, $b, $c);       //output：NULL NULL string(3) "Jam"</code></pre><h3 id="2-extract-array-extract-rules-prefix"><a href="#2-extract-array-extract-rules-prefix" class="headerlink" title="2. extract(array,extract_rules,prefix);"></a>2. extract(array,extract_rules,prefix);</h3><p>   从数组中将变量导入到当前的符号表<br>   该函数使用数组键名作为变量名，使用数组键值作为变量值，进行依次赋值</p><pre class=" language-lang-php"><code class="language-lang-php">    extract(['id' => 3, 'name' => 'Hoj']);    /**     * 在IDE中会提示错误，加上注释即可     * @var $id     * @var $name     */    var_dump($id, $name);       //output：int(3) string(3) "Hoj"    extract([3, 'name' => 'Hoj']);    var_dump($name);            //output：string(3) "Hoj"</code></pre><p>总结：一般索引数组用list，关联数组用extract。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下快速拆分txt文件</title>
      <link href="/posts/56475516.html"/>
      <url>/posts/56475516.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时候，需要把一个大的txt文件拆分为多个小文件，并行处理文件里的内容，来提高工作效率。下面介绍一下在windows下的拆分方法。</p><p>现在有个a.txt文件，里面有若干行内容，现要拆分为多个小文件<br><img src="/images/split_txt_1.png" alt></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1、在文件所在目录打开git-bash；"><a href="#1、在文件所在目录打开git-bash；" class="headerlink" title="1、在文件所在目录打开git bash；"></a>1、在文件所在目录打开git bash；</h3><h3 id="2、创建一个文件夹"><a href="#2、创建一个文件夹" class="headerlink" title="2、创建一个文件夹"></a>2、创建一个文件夹</h3><p><img src="/images/split_txt_2.png" alt></p><h3 id="3、执行命令"><a href="#3、执行命令" class="headerlink" title="3、执行命令"></a>3、执行命令</h3><pre class=" language-lang-bash"><code class="language-lang-bash">split -l 5 -d -a 1 a.txt tmp/m_ && cd tmp/ && ls|grep m_|xargs -n1 -i{} mv  {} {}.txt</code></pre><p>命令分解：</p><pre class=" language-lang-bash"><code class="language-lang-bash">-l 5 ：按行分割，每个文件5行-d ：添加数字后缀，如00,01-a 1 : 用一位数据来顺序命名(从0开始)tmp/ ：拆分后的文件放在tmp目录下m_ ：拆分后的文件名前缀&& cd tmp/ && ls|grep m_|xargs -n1 -i{} mv  {} {}.txt ：进入tmp目录，对拆分后的文件添加扩展名txt(默认生成的文件是没有扩展名的)</code></pre><h3 id="4、在tmp目录下就看到生成的文件了"><a href="#4、在tmp目录下就看到生成的文件了" class="headerlink" title="4、在tmp目录下就看到生成的文件了"></a>4、在tmp目录下就看到生成的文件了</h3><p><img src="/images/split_txt_3.png" alt></p><p>注：对xlsx文件拆分有问题</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 文件拆分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中不太常用的函数</title>
      <link href="/posts/28294742.html"/>
      <url>/posts/28294742.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-constant"><a href="#1-constant" class="headerlink" title="1. constant()"></a>1. constant()</h3><p>   返回常量的值</p><pre class=" language-lang-bash"><code class="language-lang-bash">    define('DEV','test');    var_dump(constant('DEV'));       //string(4) "test"     等同于var_dump(DEV);    var_dump(constant('SORT_ASC'));  //int(4)    等同于var_dump(SORT_ASC);    var_dump(constant(SORT_ASC));    //NULL    var_dump(TEST);                  //string(4) "TEST"</code></pre><p>   个人感觉作用不大，还不如直接使用常量呢，最多也就是判断常量是否被定义。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 中order的使用</title>
      <link href="/posts/thinkphp-order.html"/>
      <url>/posts/thinkphp-order.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前一直在使用Yii2，在查询排序时习惯了使用 SORT_DESC | SORT_ASC，今天在使用的时候发现了问题，记录一下。<br>下面这个查询没有得到预期的结果：</p><pre class=" language-lang-bash"><code class="language-lang-bash">    $list = Db::name('tb')->where(['status'=>1])->order(['create_time'=>SORT_DESC])->field('id,name')->select();   // 输出sql为：select id,name from tb where status=1 order by create_time;</code></pre><p>问题在于SORT_DESC=3、SORT_ASC=4，这不符合thinkphp中order方法的传参规则，<br>可以这样使用：</p><pre class=" language-lang-bash"><code class="language-lang-bash">   order('id','desc')   order('id desc')   order(['id'=>'desc','create_time'=>'asc'])   order('id,create_time desc')</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能测试——ab.exe</title>
      <link href="/posts/5081417f.html"/>
      <url>/posts/5081417f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ab.exe是apache server下的一个性能检测小组件，使用方便简单。<br>使用方法：</p><h3 id="1-找到ab-exe的位置"><a href="#1-找到ab-exe的位置" class="headerlink" title="1. 找到ab.exe的位置"></a>1. 找到ab.exe的位置</h3><p>在电脑中找到ab.exe的位置，一般在Apache文件下的bin目录中，我这里的目录路径为：D:\software\phpstudy_pro\Extensions\Apache2.4.39\bin<br><img src="/images/test_ab_1.png" alt></p><h3 id="2-打开cmd"><a href="#2-打开cmd" class="headerlink" title="2. 打开cmd"></a>2. 打开cmd</h3><h3 id="3-进入ab-exe所在目录"><a href="#3-进入ab-exe所在目录" class="headerlink" title="3. 进入ab.exe所在目录"></a>3. 进入ab.exe所在目录</h3><p><img src="/images/test_ab_2.png" alt></p><h3 id="4-开始压测"><a href="#4-开始压测" class="headerlink" title="4. 开始压测"></a>4. 开始压测</h3><p><img src="/images/test_ab_3.png" alt></p><p>常用参数说明：<br>-n：请求个数，默认一次一个<br>-c：并发数<br>-t：超时限制(秒)，默认不限制</p><p>结果分析：</p><pre class=" language-lang-shell"><code class="language-lang-shell">D:\software\phpstudy_pro\Extensions\Apache2.4.39\bin>ab -n 10 -c 10 http://www.baidu.com/This is ApacheBench, Version 2.3 <$Revision: 1843412 $>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking www.baidu.com (be patient).....doneServer Software:        BWS/1.1Server Hostname:        www.baidu.comServer Port:            80    #端口Document Path:          /Document Length:        353122 bytes    #请求文件大小Concurrency Level:      10           #并发数Time taken for tests:   0.535 seconds    #整个测试所用的时间Complete requests:      10               #完成的请求数量Failed requests:        9                #失败的请求数量   (Connect: 0, Receive: 0, Length: 9, Exceptions: 0)Total transferred:      3548070 bytes    #整个场景的网络传输量HTML transferred:       3536205 bytes    #整个场景的HTML传输量Requests per second:    18.71 [#/sec] (mean)    #平均每秒请求数Time per request:       534.535 [ms] (mean)     #平均每个请求的响应时间Time per request:       53.453 [ms] (mean, across all concurrent requests)Transfer rate:          6482.11 [Kbytes/sec] received    #平均每秒网络上的流量 # 网络上消耗时间分解Connection Times (ms)              min  mean[+/-sd] median   maxConnect:       30   34   3.3     34      39Processing:   151  225  78.4    220     378Waiting:       35  139  92.2    151     281Total:        186  260  75.8    254     410# 下面为整个场景所有请求的响应情况，50%的响应时间小于254毫秒，66%的响应时间小于281毫秒……最长响应时间 410毫秒Percentage of the requests served within a certain time (ms)  50%    254  66%    281  75%    314  80%    342  90%    410  95%    410  98%    410  99%    410 100%    410 (longest request)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> ab.exe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码规范建议</title>
      <link href="/posts/6541028b.html"/>
      <url>/posts/6541028b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-参数规范"><a href="#1-参数规范" class="headerlink" title="1. 参数规范"></a>1. 参数规范</h2><p> 在函数/方法里，未设置默认值的参数应放在设置默认值的参数前，如：</p><pre class=" language-lang-bash"><code class="language-lang-bash">    function test($age = 21, $id, $options = []){         print_r(func_get_args());     }</code></pre><p> 上述代码在IDE中会对$age=21，提示“Optional parameter is provided before required”，应改为：</p><pre class=" language-lang-bash"><code class="language-lang-bash">    function test($id, $age = 21, $options = []){         print_r(func_get_args());     }</code></pre><h2 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2. 命名规范"></a>2. 命名规范</h2><p> 常用的四种命名格式：驼峰、帕斯卡、蛇形、串形，主要是为了解决多个单词之间的空格问题。</p><ul><li>驼峰命名（Camel Case），又叫小驼峰，除了第一个单词，其他单词首字母大写：<br>原始：<code>last login time</code><br>驼峰：<code>lastLoginTime</code></li><li>帕斯卡（Pascal Case），又叫大驼峰，跟驼峰命名很像，只不过所有单词首字母都需要大写：<br>原始：<code>last login time</code><br>帕斯卡：<code>LastLoginTime</code></li><li>蛇形（Snake Case），全由小写字母和下划线组成，是指用下划线(_)作用单词间的分隔符：<br>原始：<code>last login time</code><br>蛇形：<code>last_login_time</code></li><li>串行（Kebab Case），又叫脊柱命名法（spinal case），是指用短横线(-)作用单词间的分隔符：<br>原始：<code>last login time</code><br>串行：<code>last-login-time</code><br>一般而言，函数名或方法名采用小驼峰，类名采用大驼峰，数据库字段名采用蛇形。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm查找指定文件的修改历史</title>
      <link href="/posts/phpstorm-show-history.html"/>
      <url>/posts/phpstorm-show-history.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>打开需要查找的文件，对着文件右击选择Local History=&gt;Show History<br><img src="/images/phpstorm_show_history_1.png" alt><br><img src="/images/phpstorm_show_history_2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 中clone Query对象</title>
      <link href="/posts/thinkphp-clone-query.html"/>
      <url>/posts/thinkphp-clone-query.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们在给前端提供列表接口的时候，经常需要根据条件返回总条数和当页列表数据；这时，我们就需要复用共同的查询条件对数据库执行多次查询操作。</p><p>在Yii2里，可以通过clone处理：</p><pre class=" language-lang-php"><code class="language-lang-php">$query = Post::find()->where(['status'=>1]);$query->andFilterWhere(['name'=>$kw]);$count = (clone $query)->count();$list = $query->limit(20)->offset(0)->orderBy(['id'=>SORT_DESC])->all()->asArray();</code></pre><p>在thinkphp5中，使用如下代码进行clone，会存在问题，提示：<code>SQLSTATE[HY000]: General error: 2031</code></p><pre class=" language-lang-php"><code class="language-lang-php">$offset = ($page - 1) * $pageSize;$query = Db::name('artist_bill')->where(['month' => $month]);$count = (clone $query)->count();$list = $query->field('id,title,month')    ->limit($offset, $pageSize)    ->order(['id' => SORT_DESC])    ->select();</code></pre><ul><li>如果把第3行改为：$count = $query-&gt;count();  第一个查询正常，之后的查询没有任何where条件；这是因为query执行完成后会把查询条件清空。</li><li>如果使用clone，打印处理的sql如下：<pre class=" language-lang-sql"><code class="language-lang-sql">select count(*) from t_artist_bill where `month` = :where_AND_month;</code></pre>初步认为是参数没有绑定上去。应该也是query内部引用了一个对象，对象在clone之后与原有对象是一个地址引用。通过一步一步断点输出，确认在$this-&gt;builder-&gt;select($options);之后获得了bind数据。因此只需要解绑clone前后对象的builder属性即可完成query对象的复制。查看query对象的属性，只有builder,connection是对象，但是connection我们希望在整个请求中是一个单实例，所以没必要区分。<br>最终修改,新建query子类，添加__clone方法,指定clone后对新对象执行php $this-&gt;setBuilder();保证 clone之后的builder是一个新实例。<br>这样就可以正常使用clone了。</li></ul><p>另一种处理方式是把where条件提取出来共用：</p><pre class=" language-lang-php"><code class="language-lang-php">public static function getList(?string $month, int $page, int $pageSize): array&#123;    $offset = ($page - 1) * $pageSize;    $where = [];    if (!empty($month)) &#123;        $where['month'] = $month;    &#125;    $query = Db::name('artist_bill');    $count = $query->where($where)->count('id');    $list = $query->where($where)->field('id,title,month')        ->limit($offset, $pageSize)        ->order(['id' => SORT_DESC])        ->select();    return ['count' => $count, 'list' => $list];&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
            <tag> Query </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm实现保存后，代码自动格式化</title>
      <link href="/posts/phpstorm-auto-format.html"/>
      <url>/posts/phpstorm-auto-format.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>鉴于个人编程风格的不同，为了保证团队开发能更好地开展，需要进行代码统一格式化。我们可以在ctrl+s的时候让IED来自动格式化保存。<br>下面介绍下设置步骤：</p><h3 id="1-点击File-》Settings-》Keymap"><a href="#1-点击File-》Settings-》Keymap" class="headerlink" title="1. 点击File-》Settings-》Keymap"></a>1. 点击File-》Settings-》Keymap</h3><p><img src="/images/phpstorm_auth_format_1.png" alt></p><h3 id="2-在右侧搜索save-ALL"><a href="#2-在右侧搜索save-ALL" class="headerlink" title="2. 在右侧搜索save ALL"></a>2. 在右侧搜索save ALL</h3><p><img src="/images/phpstorm_auth_format_2.png" alt></p><h3 id="3-右键点击Save-All，选择Remove-Ctrl-S"><a href="#3-右键点击Save-All，选择Remove-Ctrl-S" class="headerlink" title="3. 右键点击Save All，选择Remove Ctrl+S"></a>3. 右键点击Save All，选择Remove Ctrl+S</h3><p><img src="/images/phpstorm_auth_format_3.png" alt></p><h3 id="4-右键点击Save-All，选择Add-Keyboard-Shortcut，然后按键盘shift-ctrl-alt-s，然后保存。"><a href="#4-右键点击Save-All，选择Add-Keyboard-Shortcut，然后按键盘shift-ctrl-alt-s，然后保存。" class="headerlink" title="4. 右键点击Save All，选择Add Keyboard Shortcut，然后按键盘shift+ctrl+alt+s，然后保存。"></a>4. 右键点击Save All，选择Add Keyboard Shortcut，然后按键盘shift+ctrl+alt+s，然后保存。</h3><p><img src="/images/phpstorm_auth_format_4.png" alt><br>PS:shift+ctrl+alt+s这个可以自己随便设置，但是不能和其他的快捷键冲突，而且要记住，一会我们会用得到。</p><h3 id="5-点击Edit-编辑-gt-Macros-宏-gt-Start-Macro-Recording-开始录制宏-。"><a href="#5-点击Edit-编辑-gt-Macros-宏-gt-Start-Macro-Recording-开始录制宏-。" class="headerlink" title="5. 点击Edit(编辑)-&gt;Macros(宏)-&gt;Start Macro Recording(开始录制宏)。"></a>5. 点击Edit(编辑)-&gt;Macros(宏)-&gt;Start Macro Recording(开始录制宏)。</h3><p>右下角会出现这样一个图标<br><img src="/images/phpstorm_auth_format_5.png" alt><br>然后先按ctrl+alt+l，再按我们刚刚吧save  all设置的快捷键shift+ctrl+alt+s，最后点击红色的小方块结束录制宏<br><img src="/images/phpstorm_auth_format_6.png" alt><br>保存宏：名称设置为：Format And Save（这个名字随意啦，自己记得就好）<br><img src="/images/phpstorm_auth_format_7.png" alt></p><h3 id="6-点击File-》Settings-》Keymap-搜索Format-And-Save"><a href="#6-点击File-》Settings-》Keymap-搜索Format-And-Save" class="headerlink" title="6. 点击File-》Settings-》Keymap  搜索Format And Save"></a>6. 点击File-》Settings-》Keymap  搜索Format And Save</h3><h3 id="7-右键点击Format-And-Save，选择Add-Keyboard-Shortcut-设置为command-s，保存就可以了"><a href="#7-右键点击Format-And-Save，选择Add-Keyboard-Shortcut-设置为command-s，保存就可以了" class="headerlink" title="7. 右键点击Format And Save，选择Add Keyboard Shortcut,设置为command+s，保存就可以了"></a>7. 右键点击Format And Save，选择Add Keyboard Shortcut,设置为command+s，保存就可以了</h3><p><img src="/images/phpstorm_auth_format_8.png" alt><br>最后试一下吧，ctrl+s 就实现了 保存+代码格式化</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> phpStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下快捷键使用</title>
      <link href="/posts/e939ff3c.html"/>
      <url>/posts/e939ff3c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>通过Tab键可以在当前界面将光标向下切换，Tab+Shift是向上切换。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5使用笔记</title>
      <link href="/posts/thinkphp-note.html"/>
      <url>/posts/thinkphp-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-报错：Request-php中-variable-type-error-array"><a href="#1-报错：Request-php中-variable-type-error-array" class="headerlink" title="1. 报错：Request.php中 variable type error: array"></a>1. 报错：Request.php中 variable type error: array</h3><ul><li><p>描述：如果在post请求的时候，raw内容中某个参数的值为数组，直接使用$this-&gt;request-&gt;post(‘field’);，会报错<br><img src="/images/thinkphp_note_1.png" alt></p></li><li><p>原因：TP5之后，默认的变量修饰符为/s，转为字符串了。</p></li><li>解决办法：在变量名后加/a，转为数组：$this-&gt;request-&gt;post(‘field/a’);</li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php中trait的用法</title>
      <link href="/posts/php-trait.html"/>
      <url>/posts/php-trait.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">trait是php的一种代码复用的方法。</div><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="1-通过use-Trait类来使用"><a href="#1-通过use-Trait类来使用" class="headerlink" title="1. 通过use Trait类来使用"></a>1. 通过use Trait类来使用</h4><p>可以将一些常用的处理封装到trait类里，在其他地方直接use就可以了。<br> 例如：封装单例<br>    先创建Singleton类，代码如下：</p><pre class=" language-lang-php"><code class="language-lang-php">   trait Singleton&#123;       private static $instance;       /**        * @param ...$args        */       public static function getInstance(...$args) &#123;           if (!isset(self::$instance)) &#123;               self::$instance = new static(...$args);           &#125;           return self::$instance;       &#125;   &#125;</code></pre><p>再创建Test类，代码如下：</p><pre class=" language-lang-php"><code class="language-lang-php">    class Test&#123;        use Singleton;        public function test()&#123;                return 'test';        &#125;        &#125;</code></pre><p>调用：</p><pre class=" language-lang-php"><code class="language-lang-php">    echo Test::getInstance()->test();</code></pre><h4 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2. 优先级"></a>2. 优先级</h4><p>当前类中的方法会覆盖trait方法，而trait方法用覆盖了基类中的方法。</p><pre class=" language-lang-php"><code class="language-lang-php">class Base&#123;    public function sayHello()&#123;        echo 'Hello ';    &#125;&#125;trait SayWorld&#123;    public function sayHello()&#123;        parent::sayHello();        echo 'world!';    &#125;&#125;class MyHelloWorld extends Base&#123;    use SayWorld;&#125;$obj = new MyHelloWorld();$obj->sayHello();     //output: Hello world!</code></pre><h4 id="3-多个trait"><a href="#3-多个trait" class="headerlink" title="3. 多个trait"></a>3. 多个trait</h4><p>通过逗号分隔，在 use 声明列出多个 trait类</p><h3 id="常用的trait类"><a href="#常用的trait类" class="headerlink" title="常用的trait类"></a>常用的trait类</h3><h4 id="1-单例类"><a href="#1-单例类" class="headerlink" title="1. 单例类"></a>1. 单例类</h4><pre class=" language-lang-php"><code class="language-lang-php">    /**     * 用作单例     * Trait Singleton     */    trait Singleton&#123;        private static $instance;        /**         * @param ...$args         */        public static function getInstance(...$args)&#123;            if (!isset(self::$instance)) &#123;                self::$instance = new static(...$args);            &#125;            return self::$instance;        &#125;    &#125;</code></pre><h4 id="2-错误处理类"><a href="#2-错误处理类" class="headerlink" title="2. 错误处理类"></a>2. 错误处理类</h4><pre class=" language-lang-php"><code class="language-lang-php">   namespace app\common\helper;   /**    * 错误操作类    * Trait Error    * @package app\common\helper    */   trait Error&#123;       private $_code;       private $_error;       protected function setError(int $code, string $msg): void&#123;           $this->_code = $code;           $this->_error = $msg;       &#125;       public function getError(): ?array&#123;           return isset($this->_code) ? ['code' => $this->_code, 'msg' => $this->_error] : null;       &#125;   &#125;</code></pre><p>使用方法：</p><pre class=" language-lang-php"><code class="language-lang-php">    class A &#123;        use Error;        public function test()&#123;            ……            if()&#123;                 $this->setError(0, '数据不存在');                return null;                       &#125;        &#125;    &#125;</code></pre><p>调用：</p><pre class=" language-lang-php"><code class="language-lang-php">    $s = new A();    $rs = $s->test();    if ($error = $s->getError()) &#123;        extract($error);        /**         * @var $code         * @var $msg         */        $this->setError($code, $msg);        return false;    &#125;</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.php.net/manual/zh/language.oop5.traits.php">https://www.php.net/manual/zh/language.oop5.traits.php</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trait </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B树与B+树</title>
      <link href="/posts/btree-and-b+tree.html"/>
      <url>/posts/btree-and-b+tree.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="B-Tree对比BTree的优点"><a href="#B-Tree对比BTree的优点" class="headerlink" title="B+Tree对比BTree的优点"></a>B+Tree对比BTree的优点</h3><ul><li>磁盘读写代价更低<br>一般来说B+Tree比BTree更适合实现外存的索引结构，因为存储引擎的设计专家巧妙的利用了外存（磁盘）的存储结构，即磁盘的最小存储单位是扇区（sector），而操作系统的块（block）通常是整数倍的sector，操作系统以页（page）为单位管理内存，一页（page）通常默认为4K，数据库的页通常设置为操作系统页的整数倍，因此索引结构的节点被设计为一个页的大小，然后利用外存的“预读取”原则，每次读取的时候，把整个节点的数据读取到内存中，然后在内存中查找，已知内存的读取速度是外存读取I/O速度的几百倍，那么提升查找速度的关键就在于尽可能少的磁盘I/O，那么可以知道，每个节点中的key个数越多，那么树的高度越小，需要I/O的次数越少，因此一般来说B+Tree比BTree更快，因为B+Tree的非叶节点中不存储data，就可以存储更多的key。</li><li>查询速度更稳定<br>由于B+Tree非叶子节点不存储数据（data），因此所有的数据都要查询至叶子节点，而叶子节点的高度都是相同的，B+Tree的高度一般都在2~4层，因此所有数据的查询速度都是一样的。</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>  <a href="https://blog.csdn.net/u013235478/article/details/50625677">https://blog.csdn.net/u013235478/article/details/50625677</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下电脑截图</title>
      <link href="/posts/ead2d66c.html"/>
      <url>/posts/ead2d66c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、QQ截图：<code>ctrl+alt+A</code><br>2、花式截图：<code>Win+shift+S</code>  可截任意形状<br>3、微信截图：<code>Alt+A</code><br>4、浏览器截图：<code>Ctrl+shift+X</code><br>5、WPS截图：<code>Ctrl+Alt+X</code> </p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 电脑截图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己封装的一些常用的PHP函数</title>
      <link href="/posts/61e2bcf6.html"/>
      <url>/posts/61e2bcf6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-将字符串每隔n位显示一个指定字符"><a href="#1-将字符串每隔n位显示一个指定字符" class="headerlink" title="1. 将字符串每隔n位显示一个指定字符"></a>1. 将字符串每隔n位显示一个指定字符</h3><pre class=" language-lang-php"><code class="language-lang-php">    /**     * 将字符串每隔n位显示一个指定字符     * @param string $str   原始字符串     * @param int $n        间隔位数     * @param string $d     分隔符     * @return string       结果字符串     * eg: ed4a32c2=>ed:4a:32:c2     */    function divisionStr(string $str,int $n,string $d=" "):string&#123;        return join($d,str_split($str,$n)));    &#125;</code></pre><h3 id="2-打印图片的每一个像素颜色值"><a href="#2-打印图片的每一个像素颜色值" class="headerlink" title="2. 打印图片的每一个像素颜色值"></a>2. 打印图片的每一个像素颜色值</h3><pre class=" language-lang-php"><code class="language-lang-php">    /**     * 打印图片的每一个像素颜色值     * @param string $picUrl    图片路径     */    function printPicPixels(string $picUrl): void &#123;        $i = imagecreatefrompng($picUrl);        if (!$i)    return ;        for ($y = 0; $y < imagesy($i); $y++) &#123;            for ($x = 0; $x < imagesx($i); $x++) &#123;                $rgb = imagecolorat($i, $x, $y);                $r = ($rgb >> 16) & 0xFF;                $g = ($rgb >> 8) & 0xFF;                $b = $rgb & 0xFF;                echo "rgb($r,$g,$b)";            &#125;        &#125;    &#125;</code></pre><h3 id="3-字符串按照ASCII码顺序排序"><a href="#3-字符串按照ASCII码顺序排序" class="headerlink" title="3. 字符串按照ASCII码顺序排序"></a>3. 字符串按照ASCII码顺序排序</h3><pre class=" language-lang-php"><code class="language-lang-php">/** * 字符串按照ASCII码顺序排序 * @param string $str 字符串 * @param int $sort 排序 * @return string */function sortStr(string $str, $sort=SORT_ASC): string&#123;    $arr = str_split($str);    if ($sort == SORT_ASC)&#123;        asort($arr);    &#125;else&#123;        arsort($arr);    &#125;    return join('', $arr);&#125;</code></pre><h3 id="4-字节数转化为常用单位"><a href="#4-字节数转化为常用单位" class="headerlink" title="4. 字节数转化为常用单位"></a>4. 字节数转化为常用单位</h3><pre class=" language-lang-php"><code class="language-lang-php">/** * 字节数转化为常用单位 * @param int $size 字节数 * @return string */function convert(int $size): string&#123;    $unit = ['b', 'kb', 'mb', 'gb', 'tb', 'pb'];    $exp = floor(log($size, 1024));    return round($size / pow(1024, $exp), 2) . ' ' . $unit[$exp];&#125;// 使用：查看内存使用 echo convert(memory_get_usage(false));</code></pre><h3 id="5-ping指定地址，用于监控服务器是否在线"><a href="#5-ping指定地址，用于监控服务器是否在线" class="headerlink" title="5. ping指定地址，用于监控服务器是否在线"></a>5. ping指定地址，用于监控服务器是否在线</h3><pre class=" language-lang-php"><code class="language-lang-php">/** * ping 指定地址 * @param string $address * @return bool */public function pingHost($address)&#123;    $address = parse_url($address);    $host = isset($address['host']) ? $address['host'] : '';    if(!$host)  return false;    $status = -1;    if (strcasecmp(PHP_OS, 'WINNT') === 0) &#123;        $rs = exec("ping -n 1 &#123;$host&#125;", $outcome, $status);  // Windows 服务器下    &#125; elseif (strcasecmp(PHP_OS, 'Linux') === 0) &#123;        $rs = exec("ping -c 1 &#123;$host&#125;", $outcome, $status);  // Linux 服务器下    &#125;    return $status==0 ? true : false;&#125;//$url = "https://cloud.tencent.com/document/api/457/37184?id=232";//var_dump(pingHost($url));       //true</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见颜色值</title>
      <link href="/posts/606b6d50.html"/>
      <url>/posts/606b6d50.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>RGB(255,255,255)：白色   #FFFFFF<br>RGB(0,0,0)：黑色  #000000<br>RGB(255,0,0)：红色  #FF0000</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 颜色值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/posts/cross-domain.html"/>
      <url>/posts/cross-domain.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="存在原因"><a href="#存在原因" class="headerlink" title="存在原因"></a>存在原因</h3><p>浏览器的同源策略，一个源表示协议、端口、域名都相同，否则就形成跨域。<br><img src="/images/cross_domain_1.png" alt></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>  A. 服务器响应头：header(“Access-Control-Allow-Origin:*”);<br>  B. iframe实现跨域<br>  C. jsonp  带有 src属性的标签(&lt;script&gt;/&lt;img&gt;/&lt;iframe&gt;)不受同源策略限制</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锚定效应</title>
      <link href="/posts/2207b087.html"/>
      <url>/posts/2207b087.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>沉锚效应，心理学名词，指的是人们在对某人某事做出判断时，易受第一印象或第一信息支配，就像沉入海底的锚一样把人们的思想固定在某处。</p>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品 </tag>
            
            <tag> 锚定效应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标管理</title>
      <link href="/posts/target-management.html"/>
      <url>/posts/target-management.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目标管理"><a href="#目标管理" class="headerlink" title="目标管理"></a>目标管理</h2><h2 id="向上管理"><a href="#向上管理" class="headerlink" title="向上管理"></a>向上管理</h2><h2 id="向下负责"><a href="#向下负责" class="headerlink" title="向下负责"></a>向下负责</h2><h2 id="激励团队"><a href="#激励团队" class="headerlink" title="激励团队"></a>激励团队</h2>]]></content>
      
      
      <categories>
          
          <category> 技术管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品设计</title>
      <link href="/posts/c7205d17.html"/>
      <url>/posts/c7205d17.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、我们的手机上都装了很多APP，而现在的APP基本上都需要账号登录。那么问题来了，如果手机丢了，你最关心的是什么呢，是这些APP的账号信息泄露被不法份子使用，还是这个应用里的个人隐私数据泄露呢？个人感觉可以从以下几个方面提高产品的安全性：</p><p>  A、APP内部涉及到交易功能需校验交易密码；</p><p>  B、在进入指定页面的时候，添加面容ID/手势解锁，如启动时、进入个人中心时等；</p><p>  C、APP内可进行设备管理，APP内可查看设备的最近登录信息，并解绑当前设备外的指定设备(或删除指定设备数据)；</p><p>  D、对于不合常规的系列行为进行限制，如：修改登录密码后立即注销账号。</p>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品设计 </tag>
            
            <tag> 产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goframe框架使用</title>
      <link href="/posts/goframe-note.html"/>
      <url>/posts/goframe-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="gen-dao使用"><a href="#gen-dao使用" class="headerlink" title="gen dao使用"></a>gen dao使用</h4><ol><li>下载软件：<a href="https://github.com/gogf/gf-cli/releases">https://github.com/gogf/gf-cli/releases</a></li><li><p>安装，并添加环境变量<br><img src="/images/goframe_note_1.png" alt></p></li><li><p>查看版本：<code>gf -version</code></p></li><li>更新model：<code>gf gen dao -c bin/config.toml -path . -r tf_</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Goframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化</title>
      <link href="/posts/mysql-optimization.html"/>
      <url>/posts/mysql-optimization.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、优化思路"><a href="#1、优化思路" class="headerlink" title="1、优化思路"></a>1、优化思路</h3><ul><li>1）表的数据类型是否合理，要遵守选取数据类型越简单越小的原则</li><li>2）表中碎片是否整理</li><li>3）表的统计信息是否收集，只有统计信息准确，执行计划才能帮助优化SQL</li><li>4）查看执行计划，检查索引使用情况，没有用到索引，考虑创建</li><li>5）创建索引前，查看索引的选择性distinct，判断该字段是否适创建索引<br>索引选择性指不重复的索引值和数据记录总数的比值，越接近1越好；主键索引和唯一索引选择性是1</li><li>6）创建索引后，再查看执行计划，对比两次结果，查看效率是否提高<h3 id="2、慢查询优化"><a href="#2、慢查询优化" class="headerlink" title="2、慢查询优化"></a>2、慢查询优化</h3></li><li>1）如果一个select语句中没有where条件，只有单纯的group by | order by，这是无法使用索引的。需要有where作为基础铺垫，遵从最左原则才能使用索引。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php中composer的使用</title>
      <link href="/posts/php-composer.html"/>
      <url>/posts/php-composer.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li>降低composer版本<br><code>shell script composer self-update -r 或者是 composer self-update -- l</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的SQL</title>
      <link href="/posts/common-sql.html"/>
      <url>/posts/common-sql.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、查看所有的触发器"><a href="#1、查看所有的触发器" class="headerlink" title="1、查看所有的触发器"></a>1、查看所有的触发器</h4><pre><code>SELECT * FROM information_schema.`TRIGGERS`;</code></pre><h4 id="2、查询所有的表"><a href="#2、查询所有的表" class="headerlink" title="2、查询所有的表"></a>2、查询所有的表</h4><pre><code>SELECT TABLE_NAME table_name,TABLE_COMMENT table_comment FROM INFORMATION_SCHEMA.TABLES where table_schema=&#39;myDB&#39; and table_type=&#39;BASE TABLE&#39;;   //表名(不包含视图)及备注show full tables where Table_type = &#39;BASE TABLE&#39;;    //表名</code></pre><h4 id="3、查询db1数据库中所有有触发器的表"><a href="#3、查询db1数据库中所有有触发器的表" class="headerlink" title="3、查询db1数据库中所有有触发器的表"></a>3、查询db1数据库中所有有触发器的表</h4><pre><code>SELECT DISTINCT EVENT_OBJECT_TABLE FROM information_schema.`TRIGGERS` WHERE EVENT_OBJECT_SCHEMA = &quot;db1&quot;;</code></pre><h4 id="4、查询db1数据库中所有无触发器的表"><a href="#4、查询db1数据库中所有无触发器的表" class="headerlink" title="4、查询db1数据库中所有无触发器的表"></a>4、查询db1数据库中所有无触发器的表</h4><pre><code>SELECT A.TABLE_NAME from information_schema.`TABLES` A LEFT JOIN information_schema.`TRIGGERS` B ON A.TABLE_NAME=B.EVENT_OBJECT_TABLE where B.EVENT_OBJECT_TABLE is null and A.TABLE_SCHEMA=&quot;db1&quot;;</code></pre><h4 id="5、创建索引"><a href="#5、创建索引" class="headerlink" title="5、创建索引"></a>5、创建索引</h4><pre><code>alter table table_name add index index_name (索引字段);   -- 创建普通索引create index index_name on table_name (索引字段);         -- 创建普通索引alter table table_name add primary key(colunm_name);     -- 创建主键alter table table_name add unique(colunm_name);          -- 创建唯一索引create index idx_c1_c2 on table_name(c1,c2);             -- 创建联合索引show index from table_name;                              -- 查看表中的索引</code></pre><h4 id="6、去除数据表中指定字段的换行符"><a href="#6、去除数据表中指定字段的换行符" class="headerlink" title="6、去除数据表中指定字段的换行符"></a>6、去除数据表中指定字段的换行符</h4><pre><code>-- char(10)：换行符      char(13)：回车符update table set name=replace(replace(`field`,char(10),&#39;&#39;),char(13),&#39;&#39;);</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统设计</title>
      <link href="/posts/c5e566f2.html"/>
      <url>/posts/c5e566f2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-系统分析"><a href="#1-系统分析" class="headerlink" title="1. 系统分析"></a>1. 系统分析</h3><ul><li><p>对于初期单一系统的产品来说，一个数据库➕一个平台程序即可；</p></li><li><p>对于含有两个及以上平台的初期产品来说，系统结构应该是：多个平台程序➕一个服务中心➕一个或多个数据库；</p></li><li><p>对于多平台且需与第三方交互的产品来说，系统结构应该是：多个平台程序➕一个开放平台（含接口及订阅）➕一个服务中台（一个服务中心➕一个socket服务器➕一个异步数据处理中心）➕多个数据库；</p></li></ul><h3 id="2-如何设计一个高并发、高可用的系统"><a href="#2-如何设计一个高并发、高可用的系统" class="headerlink" title="2. 如何设计一个高并发、高可用的系统"></a>2. 如何设计一个高并发、高可用的系统</h3><p><img src="/images/soft_design_1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 系统设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下网络相关的命令</title>
      <link href="/posts/cb12c179.html"/>
      <url>/posts/cb12c179.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、检测IP-域名是否连通："><a href="#1、检测IP-域名是否连通：" class="headerlink" title="1、检测IP/域名是否连通："></a>1、检测IP/域名是否连通：</h2><pre class=" language-lang-shell"><code class="language-lang-shell">ping -c 4 192.168.10.8  #指定ping的次数  -c timesping -q -c 4 www.baidu.com  #只显示结果  -q</code></pre><h2 id="2、测试端口的连通性："><a href="#2、测试端口的连通性：" class="headerlink" title="2、测试端口的连通性："></a>2、测试端口的连通性：</h2><pre class=" language-lang-shell"><code class="language-lang-shell">telnet ip port  #如果未安装telnet，需执行yum install telnet进行安装</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云闪付的商业模式</title>
      <link href="/posts/business-model-of-union-pay.html"/>
      <url>/posts/business-model-of-union-pay.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="ipage">    <div class="ititle">云闪付的商业模式</div>  <div class="izhengwen">  <p>2018年，由银联主导的一个APP——云闪付上线，之后以新用户前20笔消费可享优惠的方式吸引了一大批羊毛党，近一两年在各大地铁站、公交站等出现了云闪付的广告。个人及周边的朋友也有使用过，但都是从开始的频繁使用，到现在的基本不使用。</p>  <p>云闪付的目的是打破支付宝、财付通的垄断，挤入移动支付的阵营，而且统一银行APP，聚合网上商城、移动支付、交通扫码等，立足二线以下城市。</p>  <p>就公交地铁扫码支付这一业务，不及天府通。天府通可以根据本地的定价策略进行优惠折扣，而云闪付无法一一对接个性化本地定价策略。故用户粘性不高。</p>  </div></div>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云闪付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL脚本执行中，预防误处理数据的方法</title>
      <link href="/posts/mysql-deal-miss-handle.html"/>
      <url>/posts/mysql-deal-miss-handle.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">在工作中，有时需要通过数据库脚本来变更生产数据，但稍有疏忽，就会误删数据、或者变更过多数据；为防预防这类情况的发生，根据我个人的工作经验，总结了以下几点方法：</div><h3 id="1、先测试"><a href="#1、先测试" class="headerlink" title="1、先测试"></a>1、先测试</h3><p>   脚本写好之后，先在测试环境执行一遍，一方面可以看看脚本是否有语法问题，另一方面看看数据是否正确被处理；</p><h3 id="2、脚本简单化"><a href="#2、脚本简单化" class="headerlink" title="2、脚本简单化"></a>2、脚本简单化</h3><p>   尽量将复杂的联表处理语句转为多条单表处理语句，这可以防止由于逻辑不严谨导致的数据过多被处理的问题；<br>如：现有脚本</p><pre class=" language-lang-sql"><code class="language-lang-sql">update personnel p set p.status=1 left join classes c on p.class_id=c.class_id where c.grade_id=5;</code></pre><p>假设经查询，grade_id=5的personnel 为201-296，可改为：</p><pre class=" language-lang-sql"><code class="language-lang-sql">update personnel set status=1 where id=201;update personnel set status=1 where id=202;update personnel set status=1 where id=203;……update personnel set status=1 where id=296;</code></pre><h3 id="3、Where条件精确化"><a href="#3、Where条件精确化" class="headerlink" title="3、Where条件精确化"></a>3、Where条件精确化</h3><p>   变更的where条件尽量为唯一索引字段，这可以防止由于条件过于复杂、数据表过大，导致锁表时间过长，执行效率过低的问题；<br>如：现有脚本</p><pre class=" language-lang-sql"><code class="language-lang-sql">update personnel set status=1 where class_id=20 and status=0 and create_time<1571580242;</code></pre><p>假设经查询，满足上述条件的personnelId 为220、233、234、256，可改为：</p><pre class=" language-lang-sql"><code class="language-lang-sql">update personnel set status=1 where id=220;update personnel set status=1 where id=233;update personnel set status=1 where id=234;update personnel set status=1 where id=256;</code></pre><p>单条复杂语句拆分成多条单一条件语句的方法有很多，下面列举几种方式：<br>（1）将满足条件的数据导出，借助excel/Notepad++等工具进行批量补全sql语句；<br>（2）在数据库中使用concat函数进行sql拼接，如：</p><pre class=" language-lang-sql"><code class="language-lang-sql">select CONCAT('delete from t_bracelet_person_relation where person_id=',person_id,' and mac_id="',mac_id,'";') from t_bracelet_person_relation where mac_id in ('C9B1EC032CB3','FCBA0EB1DA09') and status=0;</code></pre><h3 id="4、有条件处理"><a href="#4、有条件处理" class="headerlink" title="4、有条件处理"></a>4、有条件处理</h3><p>每条SQL语句必须有where条件，否则可能有问题，容易引起数据过度被处理的情况；<br>如：现有脚本</p><pre class=" language-lang-sql"><code class="language-lang-sql">update goods set status=0;</code></pre><p>经查上述语句本来只变更id=23的数据，由于疏忽大意忘些where条件，导致整个表的数据都被变更了，这个问题的严重性不亚于删库；</p><pre class=" language-lang-sql"><code class="language-lang-sql">update goods set status=0 where id=23;</code></pre><h3 id="5、脚本数据校验"><a href="#5、脚本数据校验" class="headerlink" title="5、脚本数据校验"></a>5、脚本数据校验</h3><p>脚本写好之后，可以将update、delete改为select查询下，从查询结果的数据总条数和具体数据上比对下，看看数据是否和预期需要处理的数据有出入，如果有就是条件未控制好，需修改；<br>如：现有脚本</p><pre class=" language-lang-sql"><code class="language-lang-sql">update personnel p set p.status=1 left join classes c on p.class_id=c.class_id where c.grade_id=5;delete from personnel where class_id=20 and status=0 and create_time<1571580242;</code></pre><p>可改为如下语句，查询后核对数据</p><pre class=" language-lang-sql"><code class="language-lang-sql">select p.* from personnel p left join classes c on p.class_id=c.class_id where c.grade_id=5;select * from personnel where class_id=20 and status=0 and create_time<1571580242;</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 脚本执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL架构设计</title>
      <link href="/posts/mysql-structural-design.html"/>
      <url>/posts/mysql-structural-design.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、MySQL架构设计中的经验"><a href="#1、MySQL架构设计中的经验" class="headerlink" title="1、MySQL架构设计中的经验"></a>1、MySQL架构设计中的经验</h3><ul><li>1）根据公司现有业务设计合理架构</li><li>2）选择成熟架构方案</li><li>3）因地制宜，根据实际设备情况做出选择</li><li>4）考虑方案的可行性</li><li>5）越简单越好，越适合公司越好</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛云图片</title>
      <link href="/posts/1f318c3b.html"/>
      <url>/posts/1f318c3b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、七牛云图片地址："><a href="#1、七牛云图片地址：" class="headerlink" title="1、七牛云图片地址："></a>1、七牛云图片地址：</h2><p><code>域名/hash值</code><br>如：<a href="https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4">https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4</a></p><h2 id="2、按指定尺寸显示图片："><a href="#2、按指定尺寸显示图片：" class="headerlink" title="2、按指定尺寸显示图片："></a>2、按指定尺寸显示图片：</h2><p><code>域名/hash值?imageMogr2/auto-orient/thumbnail/!宽x高r/gravity/Center/crop/宽x高/interlace/1/blur/1x0/quality/80|imageslim</code><br>如：<a href="https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4?imageMogr2/auto-orient/thumbnail/!100x200r/gravity/Center/crop/100x200/interlace/1/blur/1x0/quality/80|imageslim">https://qiniu.xx.com/FroIL5_7Yx8cY901eZJk_vgtJko4?imageMogr2/auto-orient/thumbnail/!100x200r/gravity/Center/crop/100x200/interlace/1/blur/1x0/quality/80|imageslim</a></p><h2 id="3、资源下载："><a href="#3、资源下载：" class="headerlink" title="3、资源下载："></a>3、资源下载：</h2><p><code>域名/hash值?attname=文件名.扩展名</code><br>如：<a href="https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?attname=a.jpg">https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?attname=a.jpg</a></p><h2 id="4、图片等比例缩放："><a href="#4、图片等比例缩放：" class="headerlink" title="4、图片等比例缩放："></a>4、图片等比例缩放：</h2><p><code>域名/hash值?imageView2/&lt;mode&gt;/w/&lt;Width&gt;/h/&lt;Height&gt;</code><br>如：<a href="https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?imageView2/2/w/450/h/450">https://qiniu.xx.com/FpGbwMwJR4mqRIbBIDCy2ZNbpvA9?imageView2/2/w/450/h/450</a></p><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><p><a href="https://developer.qiniu.com/dora/api/1279/basic-processing-images-imageview2">https://developer.qiniu.com/dora/api/1279/basic-processing-images-imageview2</a></p>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 七牛云 </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel使用小技巧</title>
      <link href="/posts/e939ff3c.html"/>
      <url>/posts/e939ff3c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-excel固定第一行："><a href="#1-excel固定第一行：" class="headerlink" title="1. excel固定第一行："></a>1. excel固定第一行：</h3><p>选择第二行，点击视图里的冻结窗口即可。</p><h3 id="2-excel分列："><a href="#2-excel分列：" class="headerlink" title="2. excel分列："></a>2. excel分列：</h3><pre><code>如：将某一列的数据由C4159D5953D8转为C4:15:9D:59:53:D8格式：</code></pre><pre class=" language-lang-shell"><code class="language-lang-shell"># 公式为=left(A1,2) & ":" & mid(A1,3,2) & ":" & mid(A1,5,2) & ":" & mid(A1,7,2) & ":" & mid(A1,9,2) & ":" & right(A1,2)</code></pre><h3 id="3-删除重复项："><a href="#3-删除重复项：" class="headerlink" title="3. 删除重复项："></a>3. 删除重复项：</h3><pre><code>选中数据区域-&gt;数据-&gt;删除重复项-&gt;确定</code></pre><h3 id="4-VLOOKUP函数的使用"><a href="#4-VLOOKUP函数的使用" class="headerlink" title="4. VLOOKUP函数的使用"></a>4. VLOOKUP函数的使用</h3>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>领导与下属交往之道</title>
      <link href="/posts/relation-between-leaders-and-staffs.html"/>
      <url>/posts/relation-between-leaders-and-staffs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><ol><li>非工作时间，不要拿工作上的事来打压威胁下属；这会让下属心生反感。<br>如：领导让下属帮忙做某件事情，下属不肯，领导就说以后所有的工作都指派给你，升职加薪想都别想……</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装php5(php7)</title>
      <link href="/posts/1711a719.html"/>
      <url>/posts/1711a719.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-先安装依赖包"><a href="#1-先安装依赖包" class="headerlink" title="1. 先安装依赖包"></a>1. 先安装依赖包</h3><pre class=" language-lang-shell"><code class="language-lang-shell">$   yum install gcc bison bison-devel zlib-devel libmcrypt-devel mcrypt mhash-devel openssl-devel libxml2-devel libcurl-devel bzip2-devel readline-devel libedit-devel</code></pre><h3 id="2-下载php-5-3-0"><a href="#2-下载php-5-3-0" class="headerlink" title="2. 下载php-5.3.0"></a>2. 下载php-5.3.0</h3><pre class=" language-lang-shell"><code class="language-lang-shell">wget http://cn2.php.net/get/php-5.3.0.tar.gz/from/this/mirror -o php-5.3.0# 解压 $ tar -zxvf php-5.3.0.tar.gz$ cd php-5.3.0yum install libxml2yum install libxml2-devel -yyum install curl curl-develyum install -y epel-releaseyum install -y libmcrypt-devel</code></pre><pre class=" language-lang-shell"><code class="language-lang-shell">php5 配置  ./configure \--prefix=/usr/local/php5 \--with-config-file-path=/usr/local/php5/etc \--enable-inline-optimization \--disable-debug \--disable-rpath \--enable-shared \--enable-opcache \--enable-fpm \--with-fpm-user=www \--with-fpm-group=www \--with-mysql=mysqlnd \--with-mysqli=mysqlnd \--with-pdo-mysql=mysqlnd \--with-gettext \--with-gd \--enable-mbstring \--with-iconv \--with-mcrypt \--with-mhash \--with-openssl \--enable-bcmath \--enable-soap \--with-libxml-dir \--enable-pcntl \--enable-shmop \--enable-sysvmsg \--enable-sysvsem \--enable-sysvshm \--enable-sockets \--with-curl \--with-zlib \--enable-zip \--with-bz2 \--with-readline \--with-xsl \--without-sqlite3 \--without-pdo-sqlite \--with-pear</code></pre><pre class=" language-lang-shell"><code class="language-lang-shell">php7 配置 ./configure \--prefix=/usr/local/php7 \--with-config-file-path=/usr/local/php7/etc \--enable-inline-optimization \--disable-debug \--disable-rpath \--enable-shared \--enable-opcache \--enable-fpm \--with-fpm-user=www \--with-fpm-group=www \--with-mysql=mysqlnd \--with-mysqli=mysqlnd \--with-pdo-mysql=mysqlnd \--with-gettext \--enable-mbstring \--with-iconv \--with-mcrypt \--with-mhash \--with-openssl \--enable-bcmath \--enable-soap \--with-libxml-dir \--enable-pcntl \--enable-shmop \--enable-sysvmsg \--enable-sysvsem \--enable-sysvshm \--enable-sockets \--with-curl \--with-zlib \--enable-zip \--with-bz2 \--with-readline \--without-sqlite3 \--without-pdo-sqlite \--with-pear</code></pre><h3 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3. 编译安装"></a>3. 编译安装</h3><pre class=" language-lang-shell"><code class="language-lang-shell">$ make && make install</code></pre><h3 id="4-复制-php-配置文件"><a href="#4-复制-php-配置文件" class="headerlink" title="4. 复制 php 配置文件"></a>4. 复制 php 配置文件</h3><pre class=" language-lang-shell"><code class="language-lang-shell">[root@VM_0_2_centos php-5.6.30]# cp php.ini-production /usr/local/php7/etc/php.ini已经安装完成，查看版本号[root@VM_0_2_centos php-5.6.30]# /usr/local/php7/bin/php -v返回PHP 5.6.30 (cli) (built: Aug 29 2018 09:09:28) Copyright (c) 1997-2016 The PHP GroupZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</code></pre><h3 id="5-配置-php-fpm"><a href="#5-配置-php-fpm" class="headerlink" title="5. 配置 php-fpm"></a>5. 配置 php-fpm</h3><pre class=" language-lang-shell"><code class="language-lang-shell">[root@VM_0_2_centos php-5.6.30]# cp /usr/local/php7/etc/php-fpm.conf.default /usr/local/php7/etc/php-fpm.conf[root@VM_0_2_centos php-5.6.30]# vim /usr/local/php7/etc/php-fpm.conf查找 user 将user = nobodygroup = nobody改成user = wwwgroup = www查找 listen 将listen = 127.0.0.1:9000改成listen = 127.0.0.1:9001配置 php-fpm 服务[root@VM_0_2_centos php-5.6.30]# cp sapi/fpm/php-fpm.service /usr/lib/systemd/system/php7-fpm.service[root@VM_0_2_centos php-5.6.30]# vim /usr/lib/systemd/system/php7-fpm.service 将：PIDFile=$&#123;prefix&#125;/var/run/php-fpm.pidExecStart=$&#123;exec_prefix&#125;/sbin/php-fpm --nodaemonize --fpm-config $&#123;prefix&#125;/etc/php-fpm.conf改成PIDFile=/usr/local/php7/var/run/php-fpm.pidExecStart=/usr/local/php7/sbin/php-fpm --nodaemonize --fpm-config /usr/local/php7/etc/php-fpm.conf</code></pre><h3 id="6-重新载入-systemd"><a href="#6-重新载入-systemd" class="headerlink" title="6. 重新载入 systemd"></a>6. 重新载入 systemd</h3><pre class=" language-lang-shell"><code class="language-lang-shell">[root@VM_0_2_centos php-5.6.30]# systemctl daemon-reload可以设置开机启动：[root@VM_0_2_centos php-5.6.30]# systemctl enable php7-fpm返回结果Created symlink from /etc/systemd/system/multi-user.target.wants/php7-fpm.service to /usr/lib/systemd/system/php7-fpm.service.启动：[root@VM_0_2_centos php-5.6.30]# systemctl start php7-fpm关闭：[root@VM_0_2_centos php-5.6.30]# systemctl stop php7-fpm查看状态：[root@VM_0_2_centos php-5.6.30]# systemctl status php7-fpm返回● php5-fpm.service - The PHP FastCGI Process Manager   Loaded: loaded (/usr/lib/systemd/system/php5-fpm.service; disabled; vendor preset: disabled)   Active: active (running) since Wed 2018-08-29 09:36:39 CST; 47s ago Main PID: 14996 (php-fpm)   CGroup: /system.slice/php5-fpm.service           ├─14996 php-fpm: master process (/usr/local/php5/etc/php-fpm.conf)           ├─14997 php-fpm: pool www           └─14998 php-fpm: pool www</code></pre><p>参考地址：<a href="https://blog.csdn.net/weixin_42579642/article/details/85290670">https://blog.csdn.net/weixin_42579642/article/details/85290670</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装mysql5.0版本教程</title>
      <link href="/posts/6704a0e8.html"/>
      <url>/posts/6704a0e8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载mysql-bundle-tar包"><a href="#1-下载mysql-bundle-tar包" class="headerlink" title="1. 下载mysql bundle.tar包"></a>1. 下载mysql bundle.tar包</h3><p>上传  mysql bundle.tar包到服务器</p><pre class=" language-lang-shell"><code class="language-lang-shell">解压  tar -xvf mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar</code></pre><h3 id="2-按顺序逐个安装rpm"><a href="#2-按顺序逐个安装rpm" class="headerlink" title="2. 按顺序逐个安装rpm"></a>2. 按顺序逐个安装rpm</h3><pre class=" language-lang-shell"><code class="language-lang-shell">rpm -qa|grep mariadbrpm -e mariadb-libs-5.5.35-3.el7.x86_64 --nodepsrpm - ivh mysql-community-common-rpm - ivh mysql-community-libs-      rpm - ivh mysql-community-client-  rpm - ivh mysql-community-server-   rpm - ivh mysql-community-devel-</code></pre><h3 id="3-启动-amp-配置"><a href="#3-启动-amp-配置" class="headerlink" title="3. 启动&amp;配置"></a>3. 启动&amp;配置</h3><pre class=" language-lang-shell"><code class="language-lang-shell"># 启动systemctl  start mysqld# 关闭systemctl  stop mysqld# 开机启动systemctl enable mysqldsystemctl daemon-reload# 查看运行状态systemctl  status mysqld# 看到绿色的running代表已经启动成功，然后mysql在5.6之后的版本都会默认生成一个默认密码，是root用户的。# 查看默认设置的密码grep 'temporary password' /var/log/mysqld.log</code></pre><h3 id="4-进入mysql"><a href="#4-进入mysql" class="headerlink" title="4. 进入mysql"></a>4. 进入mysql</h3><p>执行完如下命令之后输入默认密码</p><pre class=" language-lang-shell"><code class="language-lang-shell">mysql -u root -p</code></pre><p>MySQL 5调整密码验证规则：</p><pre class=" language-lang-shell"><code class="language-lang-shell">mysql> set global validate_password_policy=0;mysql> set global validate_password_length=1;</code></pre><p>重新设置密码</p><pre class=" language-lang-shell"><code class="language-lang-shell">ALTER USER  user() identified by "123456";</code></pre><p>授权 root 远程连接</p><pre class=" language-lang-shell"><code class="language-lang-shell">use mysql;</code></pre><p>修改连接权限，执行：</p><pre class=" language-lang-shell"><code class="language-lang-shell">update user set host='%' where user ='root';</code></pre><p>执行刷新权限：</p><pre class=" language-lang-shell"><code class="language-lang-shell">flush privileges;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> centos </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装nodejs</title>
      <link href="/posts/linux-install-nodejs.html"/>
      <url>/posts/linux-install-nodejs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载nodejs"><a href="#1-下载nodejs" class="headerlink" title="1. 下载nodejs"></a>1. 下载nodejs</h3><pre><code>wget https://nodejs.org/dist/v8.11.4/node-v8.11.4-linux-x64.tar.xz</code></pre><h3 id="2-解压nodejs"><a href="#2-解压nodejs" class="headerlink" title="2. 解压nodejs"></a>2. 解压nodejs</h3><pre><code>tar xvf node-v8.11.4-linux-x64.tar.xz #解压mv node-v8.11.4-linux-x64 node-v8.11.4 #改短名</code></pre><h3 id="3-查看版本"><a href="#3-查看版本" class="headerlink" title="3. 查看版本"></a>3. 查看版本</h3><pre><code>cd /node-v8.11.4/bin &amp;&amp; ls #进入目录并列出./node -v #查看node版本node -v #无法获取，未配置</code></pre><p><img src="/images/linux_install_nodejs_1.png" alt></p><h3 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h3><pre><code>ln -s /node-v8.11.4/bin/node /usr/bin/nodeln -s /node-v8.11.4/bin/npm /usr/bin/npm</code></pre><p><img src="/images/linux_install_nodejs_2.png" alt></p><h3 id="5-清理安装包"><a href="#5-清理安装包" class="headerlink" title="5. 清理安装包"></a>5. 清理安装包</h3><pre><code>rm -rf node-v8.11.4-linux-x64.tar.xz</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/8cdbe4f4b533">https://www.jianshu.com/p/8cdbe4f4b533</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装Cacti</title>
      <link href="/posts/install-cacti-on-linux.html"/>
      <url>/posts/install-cacti-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、安装rrdtool"><a href="#1、安装rrdtool" class="headerlink" title="1、安装rrdtool"></a>1、安装rrdtool</h3><p><code>yum install rrdtool rrdtool-perl -y</code></p><h3 id="2、安装配置net-snmp"><a href="#2、安装配置net-snmp" class="headerlink" title="2、安装配置net-snmp"></a>2、安装配置net-snmp</h3><ul><li>(1)、安装net-snmp<br><code>yum install net-snmp net-snmp-libs net-snmp-utils</code></li></ul><p>可能报错：</p><pre><code>...2:postfix-2.10.1-6.el7.x86_64 has missing requires of libmysqlclient.so.18()(64bit)2:postfix-2.10.1-6.el7.x86_64 has missing requires of libmysqlclient.so.18(libmysqlclient_18)(64bit)</code></pre><p>解决:缺少Percona-XtraDB-Cluster-shared-55-5.5.37-25.10.756.el6.x86_64.rpm这个包</p><pre class=" language-lang-shell"><code class="language-lang-shell"># wget http://www.percona.com/redir/downloads/Percona-XtraDB-Cluster/5.5.37-25.10/RPM/rhel6/x86_64/Percona-XtraDB-Cluster-shared-55-5.5.37-25.10.756.el6.x86_64.rpm# rpm -ivh Percona-XtraDB-Cluster-shared-55-5.5.37-25.10.756.el6.x86_64.rp</code></pre><ul><li>(2)、配置net-snmp<br><code>vim /etc/snmp/snmpd.conf</code></li></ul><pre><code>41行 1将default 改为监控服务器ip;2 将public 改成复杂些的识别的字符串  com2sec notConfigUser  127.0.0.1      public  62行 1将systemview 改为all,供所有snmp 访问权限  access  notConfigGroup &quot;&quot;      any       noauth    exact  all none none  85行 将#注释符号去掉  view all    included  .1                               80</code></pre><ul><li><p>(3)、启动net-snmp<br><code>service snmpd start</code><br>可能提示：Redirecting to /bin/systemctl start snmpd.service<br>解决方法：<code>/bin/systemctl start snmpd</code></p></li><li><p>(4)、测试net-snmp<br>snmpd 使用 tcp/udp 161 端口,验证snmpd 服务<br><code>lsof -i :161</code><br><img src="/images/install_cacti_on_linux_1.png" alt><br>使用snmpwalk 命令验证</p><pre><code>snmpwalk -v 2c -c public 127.0.0.1 -v是指版本,-c 是指密钥，获取到系统信息则正常！如果cacti搭建好后很久还是没出图，用这个命令试试看能否获取到数据。正常情况下，执行完这个命令后会有很多数据出现！</code></pre></li></ul><h3 id="3、安装cacti"><a href="#3、安装cacti" class="headerlink" title="3、安装cacti"></a>3、安装cacti</h3><ul><li>(1)、安装net-snmp<pre class=" language-lang-shell"><code class="language-lang-shell">cd /tmp wget http://www.cacti.net/downloads/cacti-0.8.8a.tar.gz tar xzf cacti-0.8.8a.tar.gz mv cacti-0.8.8a /var/www/cacti cd /var/www/cacti</code></pre></li><li><p>(2)、创建数据库<br><code>mysqladmin --user=root -p create cacti</code></p></li><li><p>(3)、导入数据库<br><code>mysql -uroot -p cacti &lt; cacti.sql</code><br>可能报错：ERROR 1067 (42000) at line 1847: Invalid default value for ‘status_fail_date’<br>原因：status_fail_date的datetime默认类型是不允许的<br>解决方法：</p><pre><code>vim /etc/my.cnf添加如下内容：sql-mode=&quot;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;重启mysql服务：systemctl restart mysqld</code></pre></li><li><p>(4)、创建数据库用户</p><pre><code>shell&gt; mysql -uroot -p mysql mysql&gt; GRANT ALL ON cacti.* TO cactiuser@localhost IDENTIFIED BY &#39;Cacti@pwd001231&#39;; mysql&gt; flush privileges;</code></pre></li><li><p>(5)、配置include/config.php</p><pre><code>$database_type = &quot;mysql&quot;; $database_default = &quot;cacti&quot;; $database_hostname = &quot;localhost&quot;; $database_username = &quot;cactiuser&quot;; $database_password = &quot;Cacti@pwd001231&quot;;</code></pre></li></ul><p>打开注释掉的：<code>$url_path = &quot;/cacti/&quot;;</code></p><ul><li><p>(6)、配置include/global.php</p><pre class=" language-lang-php"><code class="language-lang-php">/* Default database settings*/ $database_type = "mysql"; $database_default = "cacti"; $database_hostname = "localhost"; $database_username = "cactiuser"; $database_password = "Cacti@pwd001231"; $database_port = "3306"; $database_ssl = false;</code></pre></li><li><p>(7)、设置目录权限</p><pre><code>useradd cactiuser chown -R cactiuser rra/ log/</code></pre></li><li><p>(8)、配置计划任务</p><pre><code>#crontab -e */5 * * * * /usr/bin/php /var/www/html/cacti/poller.php &gt; /dev/null 2&gt;&amp;1 //让系统每5分钟收集service crond restart</code></pre></li><li><p>(9)、完成cacti的安装<br>注意关闭防火墙或者允许80端口，关闭selinux<br>1) 在浏览器中输入：<a href="http://监控服务器IP/cacti/">http://监控服务器IP/cacti/</a><br>默认用户名：admin 密码：admin<br>2）设置cacti用到的命令路径<br>3) 更改密码<br>登陆成功户 next&gt;&gt;   next&gt;&gt;<br><img src="/images/install_cacti_on_linux_2.png" alt><br><img src="/images/install_cacti_on_linux_3.png" alt></p></li></ul><p>参考地址：<a href="https://www.cnblogs.com/liuyansheng/p/6118535.html">https://www.cnblogs.com/liuyansheng/p/6118535.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Cacti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下操作MySQL</title>
      <link href="/posts/use-mysql-on-linux.html"/>
      <url>/posts/use-mysql-on-linux.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-登录MySQL数据库"><a href="#1-登录MySQL数据库" class="headerlink" title="1. 登录MySQL数据库"></a>1. 登录MySQL数据库</h3><p><code>mysql -uroot -p</code><br><img src="/images/use_mysql_on_linux_1.png" alt></p><h3 id="2-退出MySQL"><a href="#2-退出MySQL" class="headerlink" title="2. 退出MySQL"></a>2. 退出MySQL</h3><p><code>quit或者exit</code><br><img src="/images/use_mysql_on_linux_2.png" alt></p><h3 id="3-查看MySQL版本-四种方法"><a href="#3-查看MySQL版本-四种方法" class="headerlink" title="3. 查看MySQL版本(四种方法)"></a>3. 查看MySQL版本(四种方法)</h3><ul><li><p>在终端下执行： <code>mysql -V</code><br><img src="/images/show_mysql_version_on_linux_1.png" alt></p></li><li><p>在help中查找 <code>mysql --help | grep Distrib</code><br><img src="/images/show_mysql_version_on_linux_2.png" alt></p></li><li><p>在mysql 里查看 <code>select version()</code><br><img src="/images/show_mysql_version_on_linux_3.png" alt></p></li><li><p>在mysql 里查看 <code>status</code><br><img src="/images/show_mysql_version_on_linux_4.png" alt></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS点击复制指定内容</title>
      <link href="/posts/js-copy-object.html"/>
      <url>/posts/js-copy-object.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>点击按钮，复制指定文本框内容，代码如下：</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;function copy()&amp;#123;    var str = document.getElementById(&quot;my-data&quot;);    str.select(); // 选择对象    document.execCommand(&quot;Copy&quot;); // 执行浏览器复制命令    alert(&quot;复制成功！&quot;);&amp;#125;&lt;/script&gt;&lt;textarea cols=&quot;20&quot; rows=&quot;10&quot; id=&quot;my-data&quot;&gt;我的测试内容&lt;/textarea&gt;&lt;input type=&quot;button&quot; onClick=&quot;copy();&quot; value=&quot;复制&quot; /&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中rz的使用</title>
      <link href="/posts/a1146ed7.html"/>
      <url>/posts/a1146ed7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们常常需要在客户端和服务器(windows和linux)之间互传文件，这就可以使用rz(sz)命令。</p><ol><li><p>如果服务器不支持rz命令，需安装：</p><pre class=" language-lang-bash"><code class="language-lang-bash">     sudo yum -y install lrzsz</code></pre></li><li><p>从客户端上传文件(可多选)到服务器：</p><pre class=" language-lang-bash"><code class="language-lang-bash">     sudo rz     sudo rz -be</code></pre></li><li><p>从服务端发送文件到客户端：</p><pre class=" language-lang-bash"><code class="language-lang-bash">     sudo sz filename</code></pre></li><li><p>卸载rz：</p><pre class=" language-lang-bash"><code class="language-lang-bash">     yum remove lrzsz</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> rz </tag>
            
            <tag> sz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常见报错问题</title>
      <link href="/posts/mysql-errors.html"/>
      <url>/posts/mysql-errors.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>[Err] 1066 - Not unique table/alias: ‘s’</p><p>原因：SQL语句中存在多个表的别名为’s’</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP运维笔记</title>
      <link href="/posts/php-operate-note.html"/>
      <url>/posts/php-operate-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-常见命令"><a href="#1-常见命令" class="headerlink" title="1. 常见命令"></a>1. 常见命令</h3><pre><code>查看PHP扩展：`php -m`查看扩展的版本信息：`php -ri 扩展名`  如：`php -ri redis`</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown笔记</title>
      <link href="/posts/markdown-note.html"/>
      <url>/posts/markdown-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>解决有序列表排序失败的问题，格式如下：<pre><code> 1.[空格]测试文字1  [Tab]-[空格]测试文字1-1  [Tab]-[空格]测试文字1-2  2.[空格]测试文字2  [Tab]-[空格]测试文字2-1  [Tab][Tab]-[空格]测试文字2-1-1  [Tab][Tab]-[空格]测试文字2-1-2  [Tab]-[空格]测试文字2-2</code></pre> 代码段使用Tab退格</li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prolog笔记</title>
      <link href="/posts/ec2116cd.html"/>
      <url>/posts/ec2116cd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-加载脚本"><a href="#1-加载脚本" class="headerlink" title="1. 加载脚本"></a>1. 加载脚本</h2><p><code>?- [&#39;E:/SWI-Prolog/test/friend.pl&#39;].       %true</code></p><h2 id="2-教程"><a href="#2-教程" class="headerlink" title="2. 教程"></a>2. 教程</h2><p><a href="https://riptutorial.com/zh-CN/prolog">https://riptutorial.com/zh-CN/prolog</a></p><h2 id="3-简单的计算求解："><a href="#3-简单的计算求解：" class="headerlink" title="3. 简单的计算求解："></a>3. 简单的计算求解：</h2><p><code>?- X is 3*7.       %X = 21</code></p><h2 id="4-CLP（约束逻辑编程）库的使用"><a href="#4-CLP（约束逻辑编程）库的使用" class="headerlink" title="4. CLP（约束逻辑编程）库的使用"></a>4. CLP（约束逻辑编程）库的使用</h2><p>求解方程，CLP只能处理整数运算</p><pre><code>```    ?- use_module(library(clpfd)).    ?- Y #= 3+4.                    %Y = 7.    ?- 5 #= 4+W.                    %W = 1.```</code></pre><h2 id="5-单行注释"><a href="#5-单行注释" class="headerlink" title="5. 单行注释"></a>5. 单行注释</h2><p>使用”%”</p><h2 id="6-知识库"><a href="#6-知识库" class="headerlink" title="6. 知识库"></a>6. 知识库</h2><p>事实 + 规则 = 知识库。<br>事实是我们对这个世界直接观察的结果。规则是关于现实世界的逻辑推论。</p><h2 id="7-合一（unification）"><a href="#7-合一（unification）" class="headerlink" title="7. 合一（unification）"></a>7. 合一（unification）</h2><p>找出那些使规则匹配的值。<br>合一有时候不是唯一的，可以通过“;”来进行追问，有时候我们可能不满足于一个答案。</p><h2 id="8-列表-元组"><a href="#8-列表-元组" class="headerlink" title="8. 列表/元组"></a>8. 列表/元组</h2><p>程序 = 算法 + 数据结构。      列表是变长的容器，元组是定长的容器。</p><pre><code>```?- (1,2,3) = (1,2,3).               %元组yes?- [A,B,C] = [A,B,C].               %列表yes```</code></pre><h2 id="9-内置谓词"><a href="#9-内置谓词" class="headerlink" title="9. 内置谓词"></a>9. 内置谓词</h2><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>获取列表的长度   <code>?- length([1,2,3],L).      %L = 3.</code></p><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><p>可以用来合并两个列表   </p><pre><code>```?- append([1],[2],What).      %What = [1, 2].?- append([1],W,[1,2,3]).      %W = [2, 3].```</code></pre><h3 id="member"><a href="#member" class="headerlink" title="member"></a>member</h3><p>检查某一个值是否在一个列表内  </p><pre><code>```?- member(1,[1,2]).      %true.?-  member(3,[1,2]).      %false.``` </code></pre>]]></content>
      
      
      <categories>
          
          <category> Prolog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Prolog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPExcel笔记</title>
      <link href="/posts/e9763d3.html"/>
      <url>/posts/e9763d3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-设置字体和样式"><a href="#1-设置字体和样式" class="headerlink" title="1. 设置字体和样式"></a>1. 设置字体和样式</h3><pre class=" language-lang-bash"><code class="language-lang-bash">    $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(['font'=>['bold'=>true]]);            //设置单元格A1字体加粗    $objPHPExcel->getActiveSheet()->getStyle('A1:GL1')->applyFromArray(['font'=>['bold'=>true]]);        //设置单元格A1-GL1字体加粗    $objPHPExcel->getActiveSheet()->getStyle('A1:B3')->getFont()->setBold(true);                        //设置A1-B3之间的单元格字体加粗</code></pre><h3 id="2-设置行高"><a href="#2-设置行高" class="headerlink" title="2. 设置行高"></a>2. 设置行高</h3><pre class=" language-lang-bash"><code class="language-lang-bash">    $objPHPExcel->getActiveSheet()->getDefaultRowDimension()->setRowHeight(20);                            //设置默认行高    $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(30);                                //设置第一行行高</code></pre><h3 id="3-设置列宽"><a href="#3-设置列宽" class="headerlink" title="3. 设置列宽"></a>3. 设置列宽</h3><pre class=" language-lang-bash"><code class="language-lang-bash">    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(20);                                //设置A列列宽</code></pre><h3 id="4-单元格内容特定位置换行"><a href="#4-单元格内容特定位置换行" class="headerlink" title="4. 单元格内容特定位置换行"></a>4. 单元格内容特定位置换行</h3><pre class=" language-lang-bash"><code class="language-lang-bash">    $objPHPExcel->setActiveSheetIndex(0)->setCellValue('A3', "第三节\n11:00-12:00");   //注意双引号    $objPHPExcel->getActiveSheet()->getStyle('A3')->getAlignment()->setWrapText(true);</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> PHPExcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL自定义函数</title>
      <link href="/posts/mysql-custom-functions.html"/>
      <url>/posts/mysql-custom-functions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">有时候要对MySQL数据进行批量处理，仅仅依靠已有的内置函数是不够的，这个时候就需要添加一些自定义的函数了，下面列举一些常用的自定义函数</div><h3 id="1-批量处理字符串，将”FEEED305904B”转为”FE-EE-D3-05-90-4B”格式："><a href="#1-批量处理字符串，将”FEEED305904B”转为”FE-EE-D3-05-90-4B”格式：" class="headerlink" title="1. 批量处理字符串，将”FEEED305904B”转为”FE:EE:D3:05:90:4B”格式："></a>1. 批量处理字符串，将”FEEED305904B”转为”FE:EE:D3:05:90:4B”格式：</h3><pre><code>DROP FUNCTION IF EXISTS `SPLIT_STR`; delimiter $$CREATE FUNCTION SPLIT_STR(  x VARCHAR(255),  delim VARCHAR(12),  pos INT)RETURNS VARCHAR(255)BEGIN    DECLARE i INT DEFAULT 0;    DECLARE s text DEFAULT &#39;&#39;;    myloop: LOOP        SET i = i+pos;        SET s = CONCAT(s,delim,left(x,pos));        SET x = right(x,length(x)-pos);        if pos&gt;length(x) then            if length(x)&gt;0 then                SET s = CONCAT(s,delim,x);            end if;            leave myloop;        end if;    END LOOP myloop;RETURN right(s,length(s)-length(delim));END $$</code></pre><p>调用：<code>SELECT SPLIT_STR(&#39;FEEED305904B&#39;, &#39;:&#39;, 2);</code></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 自定义函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP生成数据字典</title>
      <link href="/posts/make-dictionary-by-php.html"/>
      <url>/posts/make-dictionary-by-php.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过php代码生成MySQL数据字典，代码如下：</p><pre><code>&lt;?php/** * 生成mysql数据字典 */header(&quot;Content-type: text/html; charset=utf-8&quot;);//配置数据库$dbserver   = &quot;127.0.0.1&quot;;$dbusername = &quot;root&quot;;$dbpassword = &quot;root&quot;;$database   = &quot;demodb&quot;;//其他配置$mysql_conn = @mysql_connect($dbserver, $dbusername, $dbpassword) or die(&quot;Mysql connect is error.&quot;);mysql_select_db($database, $mysql_conn);mysql_query(&#39;SET NAMES utf8&#39;, $mysql_conn);$table_result = mysql_query(&#39;show tables&#39;, $mysql_conn);$no_show_table = array();    //不需要显示的表$no_show_field = array();   //不需要显示的字段//取得所有的表名while($row = mysql_fetch_array($table_result))&amp;#123;    if(!in_array($row[0],$no_show_table))&amp;#123;        $tables[][&#39;TABLE_NAME&#39;] = $row[0];    &amp;#125;&amp;#125;//替换所以表的表前缀if(!empty($_GET[&#39;prefix&#39;]))&amp;#123;     $prefix = &#39;wxaj&#39;;    foreach($tables as $key =&gt; $val)&amp;#123;        $tableName = $val[&#39;TABLE_NAME&#39;];        $string = explode(&#39;_&#39;,$tableName);        if($string[0] != $prefix)&amp;#123;              $string[0] = $prefix;              $newTableName = implode(&#39;_&#39;, $string);              mysql_query(&#39;rename table &#39;.$tableName.&#39; TO &#39;.$newTableName);          &amp;#125;    &amp;#125;    echo &quot;替换成功！&quot;;exit();&amp;#125;//循环取得所有表的备注及表中列消息foreach ($tables as $k=&gt;$v) &amp;#123;    $sql  = &#39;SELECT * FROM &#39;;    $sql .= &#39;INFORMATION_SCHEMA.TABLES &#39;;    $sql .= &#39;WHERE &#39;;    $sql .= &quot;table_name = &#39;&amp;#123;$v[&#39;TABLE_NAME&#39;]&amp;#125;&#39;  AND table_schema = &#39;&amp;#123;$database&amp;#125;&#39;&quot;;    $table_result = mysql_query($sql, $mysql_conn);    while ($t = mysql_fetch_array($table_result) ) &amp;#123;        $tables[$k][&#39;TABLE_COMMENT&#39;] = $t[&#39;TABLE_COMMENT&#39;];    &amp;#125;    $sql  = &#39;SELECT column_name FROM &#39;;    $sql .= &#39;INFORMATION_SCHEMA.`KEY_COLUMN_USAGE` &#39;;    $sql .= &#39;WHERE &#39;;    $sql .= &quot;table_name = &#39;&amp;#123;$v[&#39;TABLE_NAME&#39;]&amp;#125;&#39;  AND constraint_name = &#39;PRIMARY&#39;&quot;;    $pk_result = mysql_query($sql, $mysql_conn);    $pks = [];    while ($t = mysql_fetch_array($pk_result) ) &amp;#123;        $pks[] = $t[&#39;column_name&#39;];    &amp;#125;    $tables[$k][&#39;PRIMARY_KEY&#39;] = $pks;    $sql  = &#39;SELECT * FROM &#39;;    $sql .= &#39;INFORMATION_SCHEMA.COLUMNS &#39;;    $sql .= &#39;WHERE &#39;;    $sql .= &quot;table_name = &#39;&amp;#123;$v[&#39;TABLE_NAME&#39;]&amp;#125;&#39; AND table_schema = &#39;&amp;#123;$database&amp;#125;&#39;&quot;;    $fields = [];    $field_result = mysql_query($sql, $mysql_conn);    while ($t = mysql_fetch_array($field_result) ) &amp;#123;        $fields[] = $t;    &amp;#125;    $tables[$k][&#39;COLUMN&#39;] = $fields;&amp;#125;mysql_close($mysql_conn);$html = &#39;&#39;;//循环所有表foreach ($tables as $k=&gt;$v) &amp;#123;    $html .= &#39;    &lt;h3&gt;&#39; . ($k + 1) . &#39;、&#39; . $v[&#39;TABLE_COMMENT&#39;] .&#39;  （&#39;. $v[&#39;TABLE_NAME&#39;]. &#39;）&lt;/h3&gt;&#39;.&quot;\n&quot;;    $html .= &#39;    &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;100%&quot;&gt;&#39;.&quot;\n&quot;;    $html .= &#39;        &lt;tbody&gt;&#39;.&quot;\n&quot;;    $html .= &#39;            &lt;tr&gt;&#39;.&quot;\n&quot;;    $html .= &#39;                &lt;th&gt;字段名&lt;/th&gt;&#39;.&quot;\n&quot;;    $html .= &#39;                &lt;th&gt;数据类型&lt;/th&gt;&#39;.&quot;\n&quot;;    $html .= &#39;                &lt;th&gt;默认值&lt;/th&gt;&#39;.&quot;\n&quot;;    $html .= &#39;                &lt;th&gt;允许非空&lt;/th&gt;&#39;.&quot;\n&quot;;    $html .= &#39;                &lt;th&gt;自动递增&lt;/th&gt;&#39;.&quot;\n&quot;;    $html .= &#39;                &lt;th&gt;是否主键&lt;/th&gt;&#39;.&quot;\n&quot;;    $html .= &#39;                &lt;th&gt;备注&lt;/th&gt;&#39;.&quot;\n&quot;;    $html .= &#39;            &lt;/tr&gt;&#39;.&quot;\n&quot;;    foreach ($v[&#39;COLUMN&#39;] as $f) &amp;#123;        if(empty($no_show_field[$v[&#39;TABLE_NAME&#39;]]) || !is_array($no_show_field[$v[&#39;TABLE_NAME&#39;]]))&amp;#123;             $no_show_field[$v[&#39;TABLE_NAME&#39;]] = array();        &amp;#125;        if(!in_array($f[&#39;COLUMN_NAME&#39;],$no_show_field[$v[&#39;TABLE_NAME&#39;]]))&amp;#123;            $html .= &#39;            &lt;tr&gt;&#39;.&quot;\n&quot;;            $html .= &#39;                &lt;td class=&quot;c1&quot;&gt;&#39; . $f[&#39;COLUMN_NAME&#39;] . &#39;&lt;/td&gt;&#39;.&quot;\n&quot;;            $html .= &#39;                &lt;td class=&quot;c2&quot;&gt;&#39; . $f[&#39;COLUMN_TYPE&#39;] . &#39;&lt;/td&gt;&#39;.&quot;\n&quot;;            $html .= &#39;                &lt;td class=&quot;c3&quot;&gt;&#39; . $f[&#39;COLUMN_DEFAULT&#39;] . &#39;&lt;/td&gt;&#39;.&quot;\n&quot;;            $html .= &#39;                &lt;td class=&quot;c4&quot;&gt;&#39; . $f[&#39;IS_NULLABLE&#39;] . &#39;&lt;/td&gt;&#39;.&quot;\n&quot;;            $html .= &#39;                &lt;td class=&quot;c5&quot;&gt;&#39; . ($f[&#39;EXTRA&#39;]==&#39;auto_increment&#39;?&#39;是&#39;:&#39;&amp;nbsp;&#39;) . &#39;&lt;/td&gt;&#39;.&quot;\n&quot;;            $html .= &#39;                &lt;td class=&quot;c6&quot;&gt;&#39; . (in_array($f[&#39;COLUMN_NAME&#39;],$v[&#39;PRIMARY_KEY&#39;])?&#39;是&#39;:&#39;&amp;nbsp;&#39;) . &#39;&lt;/td&gt;&#39;.&quot;\n&quot;;            $html .= &#39;                &lt;td class=&quot;c7&quot;&gt;&#39; . $f[&#39;COLUMN_COMMENT&#39;] . &#39;&lt;/td&gt;&#39;.&quot;\n&quot;;            $html .= &#39;            &lt;/tr&gt;&#39;.&quot;\n&quot;;        &amp;#125;    &amp;#125;    $html .= &#39;        &lt;/tbody&gt;&#39;.&quot;\n&quot;;    $html .= &#39;    &lt;/table&gt;&#39;.&quot;\n&quot;;&amp;#125;?&gt;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;数据字典&lt;/title&gt;&lt;meta name=&quot;generator&quot; content=&quot;ThinkDb V1.0&quot; /&gt;&lt;meta name=&quot;author&quot; content=&quot;Crazy_boy&quot; /&gt;&lt;meta name=&quot;copyright&quot; content=&quot;2014-208 zotuo.com&quot; /&gt;&lt;style&gt;body, td, th &amp;#123; font-family: &quot;微软雅黑&quot;; font-size: 14px; &amp;#125;.warp&amp;#123;margin:auto; width:900px;&amp;#125;.warp h3&amp;#123;margin:0px; padding:0px; line-height:30px; margin-top:10px;&amp;#125;table &amp;#123; border-collapse: collapse; border: 1px solid #CCC; background: #efefef; &amp;#125;table th &amp;#123; text-align: left; font-weight: bold; height: 26px; line-height: 26px; font-size: 14px; text-align:center; border: 1px solid #CCC; padding:5px;&amp;#125;table td &amp;#123; height: 20px; font-size: 14px; border: 1px solid #CCC; background-color: #fff; padding:5px;&amp;#125;.c1 &amp;#123; width: 120px; &amp;#125;.c2 &amp;#123; width: 120px; &amp;#125;.c3 &amp;#123; width: 150px; &amp;#125;.c4 &amp;#123; width: 80px; text-align:center;&amp;#125;.c5 &amp;#123; width: 80px; text-align:center;&amp;#125;.c6 &amp;#123; width: 80px; text-align:center;&amp;#125;.c7 &amp;#123; width: 270px; &amp;#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;warp&quot;&gt;    &lt;h1 style=&quot;text-align:center;&quot;&gt;数据字典&lt;/h1&gt;&lt;?php echo $html; ?&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>其中$dbserver、$dbusername、$dbpassword、$database需配置为相应的数据库IP地址、用户名、密码、数据库名。<br>代码下载：<a href="/codes/dictionary.php">dictionary.php</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle笔记</title>
      <link href="/posts/oracle-note.html"/>
      <url>/posts/oracle-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-强制并行处理"><a href="#1-强制并行处理" class="headerlink" title="1. 强制并行处理"></a>1. 强制并行处理</h4><p><code>/*+ monitor parallel(8)*/</code></p><h3 id="2-plsql查看sql性能"><a href="#2-plsql查看sql性能" class="headerlink" title="2. plsql查看sql性能"></a>2. plsql查看sql性能</h3><p><code>F5</code></p><h3 id="3-在oracle中有时候需要进行MySQL中的find-in-set查询，故封装了如下函数："><a href="#3-在oracle中有时候需要进行MySQL中的find-in-set查询，故封装了如下函数：" class="headerlink" title="3. 在oracle中有时候需要进行MySQL中的find_in_set查询，故封装了如下函数："></a>3. 在oracle中有时候需要进行MySQL中的find_in_set查询，故封装了如下函数：</h3><pre><code>CREATE OR REPLACE FUNCTION FIND_IN_SET(piv_str1 varchar2, piv_str2 varchar2, p_sep varchar2 := &#39;,&#39;)RETURN NUMBER IS  l_idx    number:=0; -- 用于计算piv_str2中分隔符的位置  str      varchar2(500);  -- 根据分隔符截取的子字符串  piv_str  varchar2(500) := piv_str2; -- 将piv_str2赋值给piv_str  res      number:=0; -- 返回结果BEGIN-- 如果piv_str中没有分割符，直接判断piv_str1和piv_str是否相等，相等 res=1IF instr(piv_str, p_sep, 1) = 0 THEN   IF piv_str = piv_str1 THEN      res:= 1;   END IF;ELSE-- 循环按分隔符截取piv_strLOOP    l_idx := instr(piv_str,p_sep);-- 当piv_str中还有分隔符时      IF l_idx &gt; 0 THEN   -- 截取第一个分隔符前的字段str         str:= substr(piv_str,1,l_idx-1);   -- 判断 str 和piv_str1 是否相等，相等 res=1 并结束循环判断         IF str = piv_str1 THEN           res:= 1;           EXIT;         END IF;        piv_str := substr(piv_str,l_idx+length(p_sep));      ELSE   -- 当截取后的piv_str 中不存在分割符时，判断piv_str和piv_str1是否相等，相等 res=1        IF piv_str = piv_str1 THEN           res:= 1;        END IF;        -- 无论最后是否相等，都跳出循环        EXIT;      END IF;END LOOP;-- 结束循环END IF;-- 返回resRETURN res;END FIND_IN_SET;</code></pre><h3 id="4-日期转时间戳函数"><a href="#4-日期转时间戳函数" class="headerlink" title="4. 日期转时间戳函数"></a>4. 日期转时间戳函数</h3><pre><code>create or replace function oracle_to_unix(in_date IN DATE) return number is    begin         return( (in_date -TO_DATE(&#39;19700101&#39;,&#39;yyyymmdd&#39;))*86400 - TO_NUMBER(SUBSTR(TZ_OFFSET(sessiontimezone),1,3))*3600);    end oracle_to_unix;</code></pre><h3 id="5-时间戳转日期函数"><a href="#5-时间戳转日期函数" class="headerlink" title="5. 时间戳转日期函数"></a>5. 时间戳转日期函数</h3><pre><code>create or replace function unix_to_oracle(in_number NUMBER) return date is    begin        return(TO_DATE(&#39;19700101&#39;,&#39;yyyymmdd&#39;) + in_number/86400 +TO_NUMBER(SUBSTR(TZ_OFFSET(sessiontimezone),1,3))/24);    end unix_to_oracle;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心跳包机制</title>
      <link href="/posts/a0da6bc4.html"/>
      <url>/posts/a0da6bc4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>心跳包机制：主要也就是用于长连接的保活和断线处理。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心跳 </tag>
            
            <tag> 心跳包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript笔记</title>
      <link href="/posts/e803913a.html"/>
      <url>/posts/e803913a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="如果想获取ajax里的function返回值，可用同步ajax。"><a href="#如果想获取ajax里的function返回值，可用同步ajax。" class="headerlink" title="如果想获取ajax里的function返回值，可用同步ajax。"></a>如果想获取ajax里的function返回值，可用同步ajax。</h3><h3 id="JavaScript不定参数"><a href="#JavaScript不定参数" class="headerlink" title="JavaScript不定参数"></a>JavaScript不定参数</h3><pre class=" language-lang-html"><code class="language-lang-html">    <html>    <head>    <title>JavaScript不定参数</title>    <script type="text/javascript">    function test()&#123;        console.log(arguments);        for( var i = 0; i < arguments.length; i++ )&#123;            console.log(arguments[i]);        &#125;    &#125;    </script>    </head>    <body onload="test('one','two','three','four');">    </body>    </html></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel使用小技巧</title>
      <link href="/posts/excel-tips.html"/>
      <url>/posts/excel-tips.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>excel固定第一行：选择第二行，点击视图里的冻结窗口即可。</p></li><li><p>excel分列：<br> 如将某一列的数据由C4159D5953D8转为C4:15:9D:59:53:D8格式：<br> <code>公式为：=left(A1,2) &amp; &quot;:&quot; &amp; mid(A1,3,2) &amp; &quot;:&quot; &amp; mid(A1,5,2) &amp; &quot;:&quot; &amp; mid(A1,7,2) &amp; &quot;:&quot; &amp; mid(A1,9,2) &amp; &quot;:&quot; &amp; right(A1,2)</code></p></li><li><p>删除重复项：<br> 选中数据区域-&gt;数据-&gt;删除重复项-&gt;确定</p></li><li><p>VLOOKUP函数的使用</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> 使用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言学习</title>
      <link href="/posts/r-notes.html"/>
      <url>/posts/r-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前断断续续看了一些R语言的视频，一直没什么效果，看来还得做笔记：</p><ol><li>&lt;- 是赋值的意思</li><li>向量是下标以1开始的</li><li>区分大小写</li><li>路径：<code>C://a.txt</code></li><li>round：四舍五入</li></ol>]]></content>
      
      
      <categories>
          
          <category> R语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEO——权重转移</title>
      <link href="/posts/seo-weight-transfer.html"/>
      <url>/posts/seo-weight-transfer.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong> 产品列表存在多页，或者文章内容过多存在多页时，为了SEO考虑，避免权重流失，内容重复，可以通过下面的方法优化：</strong></p><pre class=" language-lang-html"><code class="language-lang-html"><link rel="canonical" href="主页url"/></code></pre><p>Google 等搜索引擎最终都会只收录 canonical 标签指定的这个网址，搜索引擎会将其它页面作为重复内容，这些重复的内容不再参与页面的权重分配(如 Google 的 PR 值)。</p><p>如：<br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=1">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=1</a><br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=2">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=2</a><br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=3">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=3</a><br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=4">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=4</a><br>……<br><a href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=45">https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html?beginPage=45</a></p><p>就可以在每个页面的head标签内添加代码：</p><link rel="canonical" href="https://s.1688.com/selloffer/-C6B7C5C6CDAFD0AC.html">]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
            <tag> 权重转移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言基础</title>
      <link href="/posts/go-note.html"/>
      <url>/posts/go-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自学Go语言的过程漫长而坎坷，先记录一些基础知识。</p><h3 id="执行go文件"><a href="#执行go文件" class="headerlink" title="执行go文件"></a>执行go文件</h3><p><code>E:\Go_WorkSpace&gt;go run test.go</code></p><h3 id="把go程序编译成exe文件"><a href="#把go程序编译成exe文件" class="headerlink" title="把go程序编译成exe文件"></a>把go程序编译成exe文件</h3><p><code>E:\Go_WorkSpace&gt;go build test.go</code></p><h3 id="打印内容"><a href="#打印内容" class="headerlink" title="打印内容"></a>打印内容</h3><p><code>fmt.Printf(&quot;Hello,World!&quot;)</code></p><h3 id="switch语句中，多个case共用一组执行语句"><a href="#switch语句中，多个case共用一组执行语句" class="headerlink" title="switch语句中，多个case共用一组执行语句"></a>switch语句中，多个case共用一组执行语句</h3><pre class=" language-lang-shell"><code class="language-lang-shell">switch A&#123;    case a,b,c:        ...    case d:        ...    default :        ...&#125;</code></pre><h3 id="GoLand使用"><a href="#GoLand使用" class="headerlink" title="GoLand使用"></a>GoLand使用</h3><p>新部署项目后，需通过<code>go mod download</code> 下载第三方依赖包，如果报错，需设置Go Modules中的Proxy为：<code>https://goproxy.cn</code></p><h3 id="GoLand使用下载第三方依赖包"><a href="#GoLand使用下载第三方依赖包" class="headerlink" title="GoLand使用下载第三方依赖包"></a>GoLand使用下载第三方依赖包</h3><p>1、 IDE-》setting-》Go-》Go Modules中，设置代理：<a href="https://goproxy.cn">https://goproxy.cn</a><br><img src="/images/goland_1.png" alt><br>2、项目中，创建go.mod文件，包含需要引入的依赖包，<br>如：导入 gin：require github.com/gin-gonic/gin latest<br>在Terminal上，运行go mod download即可，系统会自动将版本号回填到go.mod中<br><img src="/images/goland_2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 语言基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitBook使用笔记</title>
      <link href="/posts/gitbook-note.html"/>
      <url>/posts/gitbook-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">使用GitBook来写书还是比较方便的，可以部署在github上的，总的来说，不太复杂。现记录一些常用的操作，方便大家参考。</div><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><ol><li>编译文件生成网页        <code>gitbook build</code></li><li>启动服务        <code>gitbook serve</code></li><li>安装可以参考这个网页 <a href="https://www.jianshu.com/p/421cc442f06c">gitbook安装</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用笔记</title>
      <link href="/posts/hexo-notes.html"/>
      <url>/posts/hexo-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这个博客网站是使用hexo搭建，部署在github上的，总的来说，不太复杂。现记录一些常用的操作，方便大家参考。</p><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><ol><li>清除当前缓存        <code>$ hexo clean</code></li><li>重新生成并部署到github上        <code>$ hexo g -d</code></li><li>启动服务        <code>$ hexo s</code></li><li>新建页面        <code>$ hexo new page categories</code></li></ol><h4 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h4><ol><li><p>如何在首页设置「阅读全文」?<br> 在首页显示一篇文章的部分内容(或者摘要)，并提供一个链接(「阅读全文」)跳转到文章详情页。 NexT 提供以下三种方式：</p><ol><li>在文章中使用 <a id="more"></a> 手动进行截断，Hexo 提供的方式(<font color="#FF0000">推荐</font> )</li><li>在文章的 <a href="https://hexo.io/docs/front-matter.html">front-matter</a> 中添加 description，并提供文章摘录</li><li>自动形成摘要，在 主题配置文件_config.yml 中添加：<pre class=" language-lang-bash"><code class="language-lang-bash"> auto_excerpt:   enable: true   length: 150</code></pre>默认截取的长度为 150 字符，可以根据需要自行设定。</li></ol></li></ol><p>建议使用 <!-- more -->方式，既可以精确控制需要显示的摘录内容， 还可以让 Hexo 中的插件更好的识别。    </p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用</title>
      <link href="/posts/docker-note.html"/>
      <url>/posts/docker-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>windows7 安装docker，需要利用 docker toolbox 来安装。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构学习</title>
      <link href="/posts/308f88a2.html"/>
      <url>/posts/308f88a2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>架构设计的主要目的是为了解决软件系统复杂度带来的问题。</p></li><li><p>架构的复杂度来源：高性能、高可用、可扩展性、其它(低成本、安全、规模等)。</p></li><li><p>架构设计的三原则：合适优于业界领先、简单优于复杂、演化优于一步到位。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件架构 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高德地图API使用</title>
      <link href="/posts/amap-api.html"/>
      <url>/posts/amap-api.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>高德地图的覆盖物label默认是蓝框白底的，className为amap-marker-label，可以通过css来修改样式。如：</p><pre class=" language-lang-bash"><code class="language-lang-bash"> <style>     .amap-marker-label&#123;         height:40px;         width:120px;         background-color: red;         border: solid 1px black;     &#125; </style></code></pre></li><li><p>高德地图，根据地址搜索经纬度，再次搜索时清除遮盖物：</p><pre class=" language-lang-bash"><code class="language-lang-bash"> var markers = [];     map.remove(markers);     markers.push(marker);</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高德地图 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>富文本编辑器</title>
      <link href="/posts/9e064ccc.html"/>
      <url>/posts/9e064ccc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>解决umeditor富文本内容居中可能失效的问题：更改umeditor.config.js的xss过滤为false    <pre><code> 即：`,xssFilterRules: false,inputXssFilter: false,outputXssFilter: false`</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 第三方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 富文本编辑器 </tag>
            
            <tag> umeditor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记</title>
      <link href="/posts/mysql-notes.html"/>
      <url>/posts/mysql-notes.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-mysql根据汉字首字母排序的方法"><a href="#1-mysql根据汉字首字母排序的方法" class="headerlink" title="1. mysql根据汉字首字母排序的方法"></a>1. mysql根据汉字首字母排序的方法</h3><pre class=" language-lang-sql"><code class="language-lang-sql">-- utf8_general_ci编码select * from t_school order by convert(name using gbk);</code></pre><h3 id="2-删除表数据的时候，如果表使用了别名"><a href="#2-删除表数据的时候，如果表使用了别名" class="headerlink" title="2. 删除表数据的时候，如果表使用了别名"></a>2. 删除表数据的时候，如果表使用了别名</h3><p>应该这样写：<code>DELETE a FROM table a;</code></p><h3 id="3-不使用缓存执行某个查询sql"><a href="#3-不使用缓存执行某个查询sql" class="headerlink" title="3. 不使用缓存执行某个查询sql"></a>3. 不使用缓存执行某个查询sql</h3><p><code>SELECT SQL_NO_CACHE xx, xx from tb;</code></p><h3 id="4-MySql中Blob与Text的区别"><a href="#4-MySql中Blob与Text的区别" class="headerlink" title="4. MySql中Blob与Text的区别"></a>4. MySql中Blob与Text的区别</h3><p>BLOB列被视为二进制字符串，TEXT列被视为非二进制字符串。</p><h3 id="5-MyISAM和InnoDB的区别"><a href="#5-MyISAM和InnoDB的区别" class="headerlink" title="5. MyISAM和InnoDB的区别"></a>5. MyISAM和InnoDB的区别</h3><p>Innodb 支持事务处理与外键和行级锁；<br>MyISAM类型的表强调的是性能，其执行速度比InnoDB类型更快。</p><h3 id="6-数据库恢复"><a href="#6-数据库恢复" class="headerlink" title="6. 数据库恢复"></a>6. 数据库恢复</h3><p>是指通过技术手段将保存在数据库中丢失的电子数据进行抢救和恢复的技术。</p><h3 id="7-mysql删除自定义函数："><a href="#7-mysql删除自定义函数：" class="headerlink" title="7. mysql删除自定义函数："></a>7. mysql删除自定义函数：</h3><p><code>DROP FUNCTION IF EXISTS `函数名`;</code></p><h3 id="8-插入数据："><a href="#8-插入数据：" class="headerlink" title="8. 插入数据："></a>8. 插入数据：</h3><pre class=" language-lang-sql"><code class="language-lang-sql">    insert into tb (field1,field2,field3……) value (val1,val2,val3……);    insert into tb (field1,field2,field3……) values (val1,val2,val3……);    insert into tb set field1=val1,field2=val2,field3=val3;    insert into tb (field1,field2,field3……) values (val11,val12,val13……),(val21,val22,val23……),(val31,val32,val33……);    insert ignore into tb (field1,field2,field3……) values (val1,val2,val3……);        //使用ignore关键字忽略错误</code></pre><h3 id="9-查询数据库中每个表的记录数："><a href="#9-查询数据库中每个表的记录数：" class="headerlink" title="9. 查询数据库中每个表的记录数："></a>9. 查询数据库中每个表的记录数：</h3><pre class=" language-lang-sql"><code class="language-lang-sql">    use information_schema;    select table_name,table_rows from tables where TABLE_SCHEMA = 'dataBase' order by table_rows desc;</code></pre><h3 id="10-mysql查询主键字段名："><a href="#10-mysql查询主键字段名：" class="headerlink" title="10. mysql查询主键字段名："></a>10. mysql查询主键字段名：</h3><pre class=" language-lang-sql"><code class="language-lang-sql">SELECT column_name FROM INFORMATION_SCHEMA.`KEY_COLUMN_USAGE` WHERE table_name='表名' AND constraint_name='PRIMARY';</code></pre><h3 id="11-mysql查询所有字段名："><a href="#11-mysql查询所有字段名：" class="headerlink" title="11. mysql查询所有字段名："></a>11. mysql查询所有字段名：</h3><pre class=" language-lang-sql"><code class="language-lang-sql">SELECT column_name FROM information_schema.columns WHERE table_name='表名';</code></pre><h3 id="12、null的问题："><a href="#12、null的问题：" class="headerlink" title="12、null的问题："></a>12、null的问题：</h3><pre class=" language-lang-sql"><code class="language-lang-sql">update t_classroom set building_name=null where build_id is not null;</code></pre><h3 id="13、获取指定字段的默认值："><a href="#13、获取指定字段的默认值：" class="headerlink" title="13、获取指定字段的默认值："></a>13、获取指定字段的默认值：</h3><p>DEFAULT(col_name)</p><pre class=" language-lang-sql"><code class="language-lang-sql">select DEFAULT(sort) from t_node_school limit 1;</code></pre><h3 id="14、mysql重命名表名："><a href="#14、mysql重命名表名：" class="headerlink" title="14、mysql重命名表名："></a>14、mysql重命名表名：</h3><p><code>alter table tb1 rename to tb2;</code><br>或者<br><code>rename tb1 to tb2;</code></p><h3 id="15、null字段排序问题："><a href="#15、null字段排序问题：" class="headerlink" title="15、null字段排序问题："></a>15、null字段排序问题：</h3><p>设排序字段为sort，使用order by sort desc实现降序时，sort为null的数据会排在最后面；<br>但是使用order by sort升序时，sort为null的数据会排在最前面，如果想将sort为null的数据排在后面，就需要加is null。<br>如：<code>select * from t_grade order by sort is null, sort, create_time desc;</code></p><h3 id="16、主键设置规则"><a href="#16、主键设置规则" class="headerlink" title="16、主键设置规则"></a>16、主键设置规则</h3><p> 主键的值不可更新，未来可能会变更的字段不能设置为主键；<br> 主键的值不可为空，且不能重复；</p><h3 id="17、查看某个表的所有列："><a href="#17、查看某个表的所有列：" class="headerlink" title="17、查看某个表的所有列："></a>17、查看某个表的所有列：</h3><pre class=" language-lang-sql"><code class="language-lang-sql">show columns from tableName;  或者  describe tableName; //可以用来生成数据字典</code></pre><h3 id="18、下划线”-”通配符-匹配一个字符"><a href="#18、下划线”-”通配符-匹配一个字符" class="headerlink" title="18、下划线”_”通配符 匹配一个字符"></a>18、下划线”_”通配符 匹配一个字符</h3><pre class=" language-lang-sql"><code class="language-lang-sql"> select field1,field2 from tableName where field3 like "_xx";</code></pre><h3 id="19、日期转星期"><a href="#19、日期转星期" class="headerlink" title="19、日期转星期"></a>19、日期转星期</h3><pre class=" language-lang-sql"><code class="language-lang-sql"> select weekday("2021-11-10")+1 week;       -- 2021年11月10日是星期三</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记</title>
      <link href="/posts/1822a0ce.html"/>
      <url>/posts/1822a0ce.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>如果希望css样式不被覆盖，可以在后面加上!important，如：<code>.cntck&#123; margin-right: 5px!important;&#125;</code></p></li><li><p>如果css希望两个标签对齐，可以用position来处理，如：<code>.cntck&#123;position: relative; bottom: -2px;&#125;</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery笔记</title>
      <link href="/posts/jquery-note.html"/>
      <url>/posts/jquery-note.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="jquery获取json的长度"><a href="#jquery获取json的长度" class="headerlink" title="jquery获取json的长度"></a>jquery获取json的长度</h3><pre><code>//一维：var JsonTemp = &amp;#123;&#39;id&#39;:5,&#39;name&#39;:&#39;lilei&#39;&amp;#125;;  length = JsonTemp.length;//二维：var JsonTemp = [&amp;#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&amp;#125;,&amp;#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:19&amp;#125;];  length = Object.keys(JsonTemp).length;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/posts/linux-common-commands.html"/>
      <url>/posts/linux-common-commands.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编程多年，一直对Linux操作不熟练，主要原因是命令不熟悉，为方便记忆，现罗列一些常用的命令：</p><h3 id="1-创建文件夹"><a href="#1-创建文件夹" class="headerlink" title="1. 创建文件夹"></a>1. 创建文件夹</h3><p><code>mkdir dir</code></p><h3 id="2-删除文件夹"><a href="#2-删除文件夹" class="headerlink" title="2. 删除文件夹"></a>2. 删除文件夹</h3><p>-r向下递归，-f强制删除： <code>rm -rf dir</code></p><h3 id="3-创建文件"><a href="#3-创建文件" class="headerlink" title="3. 创建文件"></a>3. 创建文件</h3><p><code>touch a.txt</code></p><h3 id="4-删除文件"><a href="#4-删除文件" class="headerlink" title="4. 删除文件"></a>4. 删除文件</h3><p><code>rm -f /var/log/a.txt</code></p><h3 id="5-追加内容到文件"><a href="#5-追加内容到文件" class="headerlink" title="5. 追加内容到文件"></a>5. 追加内容到文件</h3><p><code>echo sssss &gt;&gt; a.txt</code></p><h3 id="6-插入内容"><a href="#6-插入内容" class="headerlink" title="6. 插入内容"></a>6. 插入内容</h3><p>vi text.txt =》按i =》插入内容 =》按Esc =》:wq</p><h3 id="7-修改密码"><a href="#7-修改密码" class="headerlink" title="7. 修改密码"></a>7. 修改密码</h3><ul><li>选择要修改密码的用户名，以root用户为例<br><code>passwd root</code></li><li>输入2次一样的新密码，当提示更新成功即可。<br><img src="/images/linux_command_1.png" alt></li></ul><h3 id="8-查看系统环境"><a href="#8-查看系统环境" class="headerlink" title="8. 查看系统环境"></a>8. 查看系统环境</h3><pre class=" language-lang-shell"><code class="language-lang-shell">[root@VM_0_7_centos ~]# cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core) [root@VM_0_7_centos ~]# uname -aLinux VM_0_7_centos 3.10.0-957.27.2.el7.x86_64 #1 SMP Mon Jul 29 17:46:05 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</code></pre><p>从上述结果可以看出：系统为CentOS 7.6 内核为3.10.0-957.27.2.el7.x86_64</p><h3 id="9-清空当前界面信息"><a href="#9-清空当前界面信息" class="headerlink" title="9. 清空当前界面信息"></a>9. 清空当前界面信息</h3><p><code>clear</code></p><h3 id="10-显示当前时间"><a href="#10-显示当前时间" class="headerlink" title="10. 显示当前时间"></a>10. 显示当前时间</h3><p><code>date</code><br><img src="/images/linux_command_2.png" alt></p><h3 id="11-显示当前路径"><a href="#11-显示当前路径" class="headerlink" title="11. 显示当前路径"></a>11. 显示当前路径</h3><p><code>pwd</code><br><img src="/images/linux_command_3.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书单心愿墙</title>
      <link href="/posts/wished-book-list.html"/>
      <url>/posts/wished-book-list.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="罗列一些自己后续要读的书籍或者文章："><a href="#罗列一些自己后续要读的书籍或者文章：" class="headerlink" title="罗列一些自己后续要读的书籍或者文章："></a>罗列一些自己后续要读的书籍或者文章：</h3><ul><li>《黑客与画家》</li><li>《UNIX编程艺术》</li><li>《异类》</li><li>《羊皮卷》——《选择的力量》</li><li>《优秀到不能被忽视》</li><li>《无言的宇宙》</li><li>《数学女孩》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git忽略文件</title>
      <link href="/posts/f00bf8aa.html"/>
      <url>/posts/f00bf8aa.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>软件项目使用git提交远程仓库时，如果需要忽略某些文件(如缓存文件、框架核心文件)的变更，可以在项目的根目录下创建.gitignore文件，并罗列需忽略的文件或者文件夹。</p><p>如下为PHP Yii2下的.gitignore文件内容：</p><pre class=" language-lang-bash"><code class="language-lang-bash">.idea/.project.settings/vendorassets//runtime/Runtime.idea/workspace.xml/upload</code></pre><p>但有时候忽略文件不起作用，其原因是：git设置本地忽略时，必须保证远程仓库分支上没有这个要忽略的文件；否则本地的ignore将不起作用。<br>解决方式：删除要忽略的文件并提交远程仓库，ignore该文件。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 文件忽略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP实现AES加解密</title>
      <link href="/posts/php-aes-encrypt.html"/>
      <url>/posts/php-aes-encrypt.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">系统中的账号信息在进行存储的时候，需要做相应的加密处理；比如用户密码一般是以密文形式存储，而且是不可逆的，常用的就是md5加密；而对于某些账户信息(如：手机号码、银行卡号等)就需要进行可逆加密(如：AES)保存，这样既可以保证数据的安全性，又不影响正常的业务处理。</div><p>下面介绍一下以PHP实现AES加密解密：</p><h3 id="1-AES加密解密类"><a href="#1-AES加密解密类" class="headerlink" title="1. AES加密解密类"></a>1. AES加密解密类</h3><pre class=" language-lang-php"><code class="language-lang-php">namespace libs;/*** 利用mcrypt做AES加密解密* 支持密钥：64bit（字节长度8）* 支持算法：DES* 支持模式：ECB* 填充方式：PKCS5*/class Aes&#123;    const CIPHER = MCRYPT_DES;    const MODE = MCRYPT_MODE_ECB;    /**     * 加密     * @param string $str    需加密的字符串     * @param string $key    密钥(8位)     * @return string   密文     */    public static function encode($str,$key)&#123;        $size = mcrypt_get_block_size ( MCRYPT_DES, 'ecb' );        $str = self::pkcs5_pad($str, $size);        $iv = mcrypt_create_iv(mcrypt_get_iv_size(self::CIPHER,self::MODE),MCRYPT_RAND);        $result = mcrypt_encrypt(self::CIPHER, $key, $str, self::MODE, $iv);        return base64_encode($result);    &#125;    /**     * 解密     * @param string $str   密文     * @param string $key   密钥(8位)     * @return string   明文     */    public static function decode($str,$key)&#123;        $str = base64_decode($str);        $iv = mcrypt_create_iv(mcrypt_get_iv_size(self::CIPHER,self::MODE),MCRYPT_RAND);        $str = trim(mcrypt_decrypt(self::CIPHER, $key, $str, self::MODE, $iv));        return  self::pkcs5_unpad($str);    &#125;    /**     * PKCS5填充     * @param $text     * @param $blocksize     * @return string     */    private static function pkcs5_pad($text, $blocksize) &#123;        $pad = $blocksize - (strlen($text) % $blocksize);        return $text . str_repeat(chr($pad), $pad);    &#125;    /**     *     * @param $text     * @return bool|string     */    private static function pkcs5_unpad($text) &#123;        $pad = ord($text&#123;strlen($text) - 1&#125;);        if ($pad > strlen($text)) &#123;            return false;        &#125;        if (strspn($text, chr($pad), strlen($text)-$pad) != $pad) &#123;            return false;        &#125;        return substr($text, 0, -1 * $pad);    &#125;&#125;</code></pre><h3 id="2-调用"><a href="#2-调用" class="headerlink" title="2. 调用"></a>2. 调用</h3><pre class=" language-lang-php"><code class="language-lang-php">namespace app\modules\demo\controllers;use app\common\components\Controller;use libs\Aes;class TestController extends Controller&#123;    public function actionTest()&#123;        $key = 'WGiSP3UQ';        $str = '18958019299';        $enStr = Aes::encode($str,$key);        $deStr = Aes::decode($enStr,$key);        var_dump($str,$enStr,$deStr);    &#125;&#125;</code></pre><h3 id="3-访问http-127-0-0-1-web-demo-test-test-，运行结果如下："><a href="#3-访问http-127-0-0-1-web-demo-test-test-，运行结果如下：" class="headerlink" title="3. 访问http://127.0.0.1/web/demo/test/test ，运行结果如下："></a>3. 访问<a href="http://127.0.0.1/web/demo/test/test">http://127.0.0.1/web/demo/test/test</a> ，运行结果如下：</h3><pre class=" language-lang-php"><code class="language-lang-php">string(11) "18958019299" string(24) "WiBZggO/DRaczJ3wSirvEw==" string(11) "18958019299"</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> AES </tag>
            
            <tag> 加解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery面向对象写法</title>
      <link href="/posts/jquery-obj.html"/>
      <url>/posts/jquery-obj.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>书写Jquery代码时，普通的面向过程的写法可以实现功能，但不利于后期维护。现介绍面向对象的写法。</p><pre><code>&lt;html&gt;    &lt;head&gt;        &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;button data-event=&quot;list&quot;&gt;列表&lt;/button&gt;        &lt;button data-event=&quot;search&quot; data-name=&quot;大班&quot;&gt;搜索&lt;/button&gt;        &lt;button data-event=&quot;add&quot;&gt;添加&lt;/button&gt;        &lt;button data-event=&quot;update&quot;&gt;修改&lt;/button&gt;        &lt;button data-event=&quot;del&quot;&gt;删除&lt;/button&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><pre><code>&lt;script&gt;var clickAct = &amp;#123;    btn: $(&#39;button&#39;),    init: function()&amp;#123;        var that = this;        this.btn.click(function()&amp;#123;            var func = $(this).attr(&#39;data-event&#39;);            that[func]($(this).attr(&#39;data-name&#39;));        &amp;#125;)    &amp;#125;,    list: function(param)&amp;#123;        console.log(&#39;1&#39;);    &amp;#125;,    search: function(param)&amp;#123;        console.log(param);    &amp;#125;,    add: function(param)&amp;#123;        console.log(&#39;3&#39;);    &amp;#125;,    update: function(param)&amp;#123;        console.log(&#39;4&#39;);    &amp;#125;,    del: function(param)&amp;#123;        console.log(&#39;5&#39;);    &amp;#125;&amp;#125;clickAct.init();&lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL函数</title>
      <link href="/posts/mysql-functions.html"/>
      <url>/posts/mysql-functions.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录几个常用的MySQL函数：</p><h4 id="LAST-INSERT-ID-expr"><a href="#LAST-INSERT-ID-expr" class="headerlink" title="LAST_INSERT_ID([expr])"></a>LAST_INSERT_ID([expr])</h4><p>自动返回最后一个INSERT或 UPDATE 问询为 AUTO_INCREMENT列设置的第一个发生的值。<br>如果一次性insert多条数据，只返回第一个数据的主键。</p><pre><code>mysql&gt; SELECT * FROM t;    +----+------+    | id | name |    |  1 | Bob  |    +----+------+mysql&gt; INSERT INTO t VALUES  (NULL, &#39;Mary&#39;), (NULL, &#39;Jane&#39;), (NULL, &#39;Lisa&#39;);mysql&gt; SELECT * FROM t;    +----+------+    | id | name |    |  1 | Bob  |    |  2 | Mary |    |  3 | Jane |    |  4 | Lisa |    +----+------+mysql&gt; SELECT LAST_INSERT_ID();    -&gt;2;</code></pre><p>注：假如你使用 INSERT IGNORE而记录被忽略，则AUTO_INCREMENT 计数器不会增量，而 LAST_INSERT_ID() 返回0,这反映出没有插入任何记录。</p><p>若给出作为到LAST_INSERT_ID()的参数expr ，则参数的值被函数返回，并作为被LAST_INSERT_ID()返回的下一个值而被记忆。这可用于模拟序列：</p><pre><code>mysql&gt; CREATE TABLE sequence (id INT NOT NULL);mysql&gt; INSERT INTO sequence VALUES (0);mysql&gt; UPDATE sequence SET id=LAST_INSERT_ID(id+1);mysql&gt; SELECT LAST_INSERT_ID();     -&gt;1;</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-03-29杂谈</title>
      <link href="/posts/971629fc.html"/>
      <url>/posts/971629fc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈哈，科目一96！</p><p><img src="/images/happy.jpg" alt="I&#39;m very happy."></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具推荐</title>
      <link href="/posts/ab83100f.html"/>
      <url>/posts/ab83100f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、windows文件搜索工具"><a href="#1、windows文件搜索工具" class="headerlink" title="1、windows文件搜索工具"></a>1、windows文件搜索工具</h3><p>给大家推荐一款windows下的文件搜索工具——Everything，下载地址：<a href="http://www.voidtools.com/">http://www.voidtools.com/</a></p><h3 id="2、文档搜索工具"><a href="#2、文档搜索工具" class="headerlink" title="2、文档搜索工具"></a>2、文档搜索工具</h3><p>安利一个文档搜索工具——鸠摩搜索，各种格式的电子书、文档都可以下载，比如PDF、TXT、MOBI、DOC等，地址：<a href="https://www.jiumodiary.com/">鸠摩搜索</a></p><h3 id="3、API接口文档管理工具——小幺鸡"><a href="#3、API接口文档管理工具——小幺鸡" class="headerlink" title="3、API接口文档管理工具——小幺鸡"></a>3、API接口文档管理工具——<a href="http://www.xiaoyaoji.cn">小幺鸡</a></h3><h3 id="4、Git项目搜索工具——BitHubLab"><a href="#4、Git项目搜索工具——BitHubLab" class="headerlink" title="4、Git项目搜索工具——BitHubLab"></a>4、Git项目搜索工具——BitHubLab</h3><p><a href="https://bithublab.org/">BitHubLab</a>，可以搜索所有Git平台上的公开项目，包括GitHub、GitLab和BitBucket等的项目。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
